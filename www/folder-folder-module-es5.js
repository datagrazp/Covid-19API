(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["folder-folder-module"], {
  /***/
  "./node_modules/@agm/core/fesm2015/agm-core.js":
  /*!*****************************************************!*\
    !*** ./node_modules/@agm/core/fesm2015/agm-core.js ***!
    \*****************************************************/

  /*! exports provided: AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, ɵa, ɵb, ɵc, ɵd, ɵe */

  /***/
  function node_modulesAgmCoreFesm2015AgmCoreJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmBicyclingLayer", function () {
      return AgmBicyclingLayer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmCircle", function () {
      return AgmCircle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmCoreModule", function () {
      return AgmCoreModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmDataLayer", function () {
      return AgmDataLayer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmFitBounds", function () {
      return AgmFitBounds;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmGeocoder", function () {
      return AgmGeocoder;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmInfoWindow", function () {
      return AgmInfoWindow;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmKmlLayer", function () {
      return AgmKmlLayer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmMap", function () {
      return AgmMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmMarker", function () {
      return AgmMarker;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmPolygon", function () {
      return AgmPolygon;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmPolyline", function () {
      return AgmPolyline;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmPolylineIcon", function () {
      return AgmPolylineIcon;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmPolylinePoint", function () {
      return AgmPolylinePoint;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmRectangle", function () {
      return AgmRectangle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AgmTransitLayer", function () {
      return AgmTransitLayer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CircleManager", function () {
      return CircleManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ControlPosition", function () {
      return ControlPosition;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataLayerManager", function () {
      return DataLayerManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FitBoundsAccessor", function () {
      return FitBoundsAccessor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GeocoderLocationType", function () {
      return GeocoderLocationType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GeocoderStatus", function () {
      return GeocoderStatus;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GoogleMapsAPIWrapper", function () {
      return GoogleMapsAPIWrapper;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GoogleMapsScriptProtocol", function () {
      return GoogleMapsScriptProtocol;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InfoWindowManager", function () {
      return InfoWindowManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "KmlLayerManager", function () {
      return KmlLayerManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LAZY_MAPS_API_CONFIG", function () {
      return LAZY_MAPS_API_CONFIG;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LayerManager", function () {
      return LayerManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LazyMapsAPILoader", function () {
      return LazyMapsAPILoader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MapTypeId", function () {
      return MapTypeId;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MapsAPILoader", function () {
      return MapsAPILoader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MarkerManager", function () {
      return MarkerManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NoOpMapsAPILoader", function () {
      return NoOpMapsAPILoader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PolygonManager", function () {
      return PolygonManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PolylineManager", function () {
      return PolylineManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RectangleManager", function () {
      return RectangleManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScaleControlStyle", function () {
      return ScaleControlStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ZoomControlStyle", function () {
      return ZoomControlStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵa", function () {
      return FitBoundsService;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵb", function () {
      return coreDirectives;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵc", function () {
      return WindowRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵd", function () {
      return DocumentRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵe", function () {
      return BROWSER_GLOBALS_PROVIDERS;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");

    let MapsAPILoader = class MapsAPILoader {};
    MapsAPILoader = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()], MapsAPILoader);
    /**
     * Wrapper class that handles the communication with the Google Maps Javascript
     * API v3
     */

    let GoogleMapsAPIWrapper = class GoogleMapsAPIWrapper {
      constructor(_loader, _zone) {
        this._loader = _loader;
        this._zone = _zone;
        this._map = new Promise(resolve => {
          this._mapResolver = resolve;
        });
      }

      createMap(el, mapOptions) {
        return this._zone.runOutsideAngular(() => {
          return this._loader.load().then(() => {
            const map = new google.maps.Map(el, mapOptions);

            this._mapResolver(map);

            return;
          });
        });
      }

      setMapOptions(options) {
        return this._zone.runOutsideAngular(() => {
          this._map.then(m => {
            m.setOptions(options);
          });
        });
      }
      /**
       * Creates a google map marker with the map context
       */


      createMarker(options = {}, addToMap = true) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => {
            if (addToMap) {
              options.map = map;
            }

            return new google.maps.Marker(options);
          });
        });
      }

      createInfoWindow(options) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(() => {
            return new google.maps.InfoWindow(options);
          });
        });
      }
      /**
       * Creates a google.map.Circle for the current map.
       */


      createCircle(options) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => {
            if (typeof options.strokePosition === 'string') {
              options.strokePosition = google.maps.StrokePosition[options.strokePosition];
            }

            options.map = map;
            return new google.maps.Circle(options);
          });
        });
      }
      /**
       * Creates a google.map.Rectangle for the current map.
       */


      createRectangle(options) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => {
            options.map = map;
            return new google.maps.Rectangle(options);
          });
        });
      }

      createPolyline(options) {
        return this._zone.runOutsideAngular(() => {
          return this.getNativeMap().then(map => {
            let line = new google.maps.Polyline(options);
            line.setMap(map);
            return line;
          });
        });
      }

      createPolygon(options) {
        return this._zone.runOutsideAngular(() => {
          return this.getNativeMap().then(map => {
            let polygon = new google.maps.Polygon(options);
            polygon.setMap(map);
            return polygon;
          });
        });
      }
      /**
       * Creates a new google.map.Data layer for the current map
       */


      createDataLayer(options) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(m => {
            let data = new google.maps.Data(options);
            data.setMap(m);
            return data;
          });
        });
      }
      /**
       * Creates a TransitLayer instance for a map
       * @param {TransitLayerOptions} options - used for setting layer options
       * @returns {Promise<TransitLayer>} a new transit layer object
       */


      createTransitLayer(options) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => {
            let newLayer = new google.maps.TransitLayer();
            newLayer.setMap(options.visible ? map : null);
            return newLayer;
          });
        });
      }
      /**
       * Creates a BicyclingLayer instance for a map
       * @param {BicyclingLayerOptions} options - used for setting layer options
       * @returns {Promise<BicyclingLayer>} a new bicycling layer object
       */


      createBicyclingLayer(options) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => {
            let newLayer = new google.maps.BicyclingLayer();
            newLayer.setMap(options.visible ? map : null);
            return newLayer;
          });
        });
      }
      /**
       * Determines if given coordinates are insite a Polygon path.
       */


      containsLocation(latLng, polygon) {
        return google.maps.geometry.poly.containsLocation(latLng, polygon);
      }

      subscribeToMapEvent(eventName) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._map.then(m => {
            m.addListener(eventName, arg => {
              this._zone.run(() => observer.next(arg));
            });
          });
        });
      }

      clearInstanceListeners() {
        return this._zone.runOutsideAngular(() => {
          this._map.then(map => {
            google.maps.event.clearInstanceListeners(map);
          });
        });
      }

      setCenter(latLng) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.setCenter(latLng));
        });
      }

      getZoom() {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.getZoom());
        });
      }

      getBounds() {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.getBounds());
        });
      }

      getMapTypeId() {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.getMapTypeId());
        });
      }

      setZoom(zoom) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.setZoom(zoom));
        });
      }

      getCenter() {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.getCenter());
        });
      }

      panTo(latLng) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.panTo(latLng));
        });
      }

      panBy(x, y) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.panBy(x, y));
        });
      }

      fitBounds(latLng, padding) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.fitBounds(latLng, padding));
        });
      }

      panToBounds(latLng, padding) {
        return this._zone.runOutsideAngular(() => {
          return this._map.then(map => map.panToBounds(latLng, padding));
        });
      }
      /**
       * Returns the native Google Maps Map instance. Be careful when using this instance directly.
       */


      getNativeMap() {
        return this._map;
      }
      /**
       * Triggers the given event name on the map instance.
       */


      triggerMapEvent(eventName) {
        return this._map.then(m => google.maps.event.trigger(m, eventName));
      }

    };

    GoogleMapsAPIWrapper.ctorParameters = () => [{
      type: MapsAPILoader
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    GoogleMapsAPIWrapper = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [MapsAPILoader, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], GoogleMapsAPIWrapper);
    /**
     * This class manages Transit and Bicycling Layers for a Google Map instance.
     */

    let LayerManager = class LayerManager {
      constructor(_wrapper) {
        this._wrapper = _wrapper;
        this._layers = new Map();
      }
      /**
       * Adds a transit layer to a map instance.
       * @param {AgmTransitLayer} layer - a TransitLayer object
       * @param {TransitLayerOptions} options - TransitLayerOptions options
       * @returns void
       */


      addTransitLayer(layer, options) {
        const newLayer = this._wrapper.createTransitLayer(options);

        this._layers.set(layer, newLayer);
      }
      /**
       * Adds a bicycling layer to a map instance.
       * @param {AgmBicyclingLayer} layer - a bicycling layer object
       * @param {BicyclingLayerOptions} options - BicyclingLayer options
       * @returns void
       */


      addBicyclingLayer(layer, options) {
        const newLayer = this._wrapper.createBicyclingLayer(options);

        this._layers.set(layer, newLayer);
      }
      /**
       * Deletes a map layer
       * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete
       * @returns  Promise<void>
       */


      deleteLayer(layer) {
        return this._layers.get(layer).then(currentLayer => {
          currentLayer.setMap(null);

          this._layers.delete(layer);
        });
      }
      /**
       * Hide/Show a google map layer
       * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show
       * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer
       * @returns Promise<void>
       */


      toggleLayerVisibility(layer, options) {
        return this._layers.get(layer).then(currentLayer => {
          if (!options.visible) {
            currentLayer.setMap(null);
            return;
          } else {
            return this._wrapper.getNativeMap().then(map => {
              currentLayer.setMap(map);
            });
          }
        });
      }

    };

    LayerManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }];

    LayerManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper])], LayerManager);
    let layerId = 0;
    /*
     * This directive adds a bicycling layer to a google map instance
     * <agm-bicycling-layer [visible]="true|false"> <agm-bicycling-layer>
     * */

    let AgmBicyclingLayer = class AgmBicyclingLayer {
      constructor(_manager) {
        this._manager = _manager;
        this._addedToManager = false;
        this._id = (layerId++).toString();
        /**
         * Hide/show bicycling layer
         */

        this.visible = true;
      }

      ngOnInit() {
        if (this._addedToManager) {
          return;
        }

        this._manager.addBicyclingLayer(this, {
          visible: this.visible
        });

        this._addedToManager = true;
      }

      ngOnChanges(changes) {
        if (!this._addedToManager) {
          return;
        }

        if (changes['visible'] != null) {
          this._manager.toggleLayerVisibility(this, {
            visible: changes['visible'].currentValue
          });
        }
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      toString() {
        return "AgmBicyclingLayer-".concat(this._id.toString());
      }
      /** @internal */


      ngOnDestroy() {
        this._manager.deleteLayer(this);
      }

    };

    AgmBicyclingLayer.ctorParameters = () => [{
      type: LayerManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmBicyclingLayer.prototype, "visible", void 0);
    AgmBicyclingLayer = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-bicycling-layer'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [LayerManager])], AgmBicyclingLayer);
    let CircleManager = class CircleManager {
      constructor(_apiWrapper, _zone) {
        this._apiWrapper = _apiWrapper;
        this._zone = _zone;
        this._circles = new Map();
      }

      addCircle(circle) {
        this._circles.set(circle, this._apiWrapper.createCircle({
          center: {
            lat: circle.latitude,
            lng: circle.longitude
          },
          clickable: circle.clickable,
          draggable: circle.draggable,
          editable: circle.editable,
          fillColor: circle.fillColor,
          fillOpacity: circle.fillOpacity,
          radius: circle.radius,
          strokeColor: circle.strokeColor,
          strokeOpacity: circle.strokeOpacity,
          strokePosition: circle.strokePosition,
          strokeWeight: circle.strokeWeight,
          visible: circle.visible,
          zIndex: circle.zIndex
        }));
      }
      /**
       * Removes the given circle from the map.
       */


      removeCircle(circle) {
        return this._circles.get(circle).then(c => {
          c.setMap(null);

          this._circles.delete(circle);
        });
      }

      setOptions(circle, options) {
        return this._circles.get(circle).then(c => {
          if (typeof options.strokePosition === 'string') {
            options.strokePosition = google.maps.StrokePosition[options.strokePosition];
          }

          c.setOptions(options);
        });
      }

      getBounds(circle) {
        return this._circles.get(circle).then(c => c.getBounds());
      }

      getCenter(circle) {
        return this._circles.get(circle).then(c => c.getCenter());
      }

      getRadius(circle) {
        return this._circles.get(circle).then(c => c.getRadius());
      }

      setCenter(circle) {
        return this._circles.get(circle).then(c => {
          return c.setCenter({
            lat: circle.latitude,
            lng: circle.longitude
          });
        });
      }

      setEditable(circle) {
        return this._circles.get(circle).then(c => {
          return c.setEditable(circle.editable);
        });
      }

      setDraggable(circle) {
        return this._circles.get(circle).then(c => {
          return c.setDraggable(circle.draggable);
        });
      }

      setVisible(circle) {
        return this._circles.get(circle).then(c => {
          return c.setVisible(circle.visible);
        });
      }

      setRadius(circle) {
        return this._circles.get(circle).then(c => {
          return c.setRadius(circle.radius);
        });
      }

      getNativeCircle(circle) {
        return this._circles.get(circle);
      }

      createEventObservable(eventName, circle) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          let listener = null;

          this._circles.get(circle).then(c => {
            listener = c.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });

          return () => {
            if (listener !== null) {
              listener.remove();
            }
          };
        });
      }

    };

    CircleManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    CircleManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], CircleManager);
    var AgmCircle_1;
    let AgmCircle = AgmCircle_1 = class AgmCircle {
      constructor(_manager) {
        this._manager = _manager;
        /**
         * Indicates whether this Circle handles mouse events. Defaults to true.
         */

        this.clickable = true;
        /**
         * If set to true, the user can drag this circle over the map. Defaults to false.
         */
        // tslint:disable-next-line:no-input-rename

        this.draggable = false;
        /**
         * If set to true, the user can edit this circle by dragging the control points shown at
         * the center and around the circumference of the circle. Defaults to false.
         */

        this.editable = false;
        /**
         * The radius in meters on the Earth's surface.
         */

        this.radius = 0;
        /**
         * The stroke position. Defaults to CENTER.
         * This property is not supported on Internet Explorer 8 and earlier.
         */

        this.strokePosition = 'CENTER';
        /**
         * The stroke width in pixels.
         */

        this.strokeWeight = 0;
        /**
         * Whether this circle is visible on the map. Defaults to true.
         */

        this.visible = true;
        /**
         * This event is fired when the circle's center is changed.
         */

        this.centerChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user clicks on the circle.
         */

        this.circleClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user clicks on the circle.
         */

        this.circleDblClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is repeatedly fired while the user drags the circle.
         */

        this.drag = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user stops dragging the circle.
         */

        this.dragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user starts dragging the circle.
         */

        this.dragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousedown event is fired on the circle.
         */

        this.mouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousemove event is fired on the circle.
         */

        this.mouseMove = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on circle mouseout.
         */

        this.mouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on circle mouseover.
         */

        this.mouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mouseup event is fired on the circle.
         */

        this.mouseUp = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the circle's radius is changed.
         */

        this.radiusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the circle is right-clicked on.
         */

        this.rightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._circleAddedToManager = false;
        this._eventSubscriptions = [];
      }
      /** @internal */


      ngOnInit() {
        this._manager.addCircle(this);

        this._circleAddedToManager = true;

        this._registerEventListeners();
      }
      /** @internal */


      ngOnChanges(changes) {
        if (!this._circleAddedToManager) {
          return;
        }

        if (changes['latitude'] || changes['longitude']) {
          this._manager.setCenter(this);
        }

        if (changes['editable']) {
          this._manager.setEditable(this);
        }

        if (changes['draggable']) {
          this._manager.setDraggable(this);
        }

        if (changes['visible']) {
          this._manager.setVisible(this);
        }

        if (changes['radius']) {
          this._manager.setRadius(this);
        }

        this._updateCircleOptionsChanges(changes);
      }

      _updateCircleOptionsChanges(changes) {
        let options = {};
        let optionKeys = Object.keys(changes).filter(k => AgmCircle_1._mapOptions.indexOf(k) !== -1);
        optionKeys.forEach(k => {
          options[k] = changes[k].currentValue;
        });

        if (optionKeys.length > 0) {
          this._manager.setOptions(this, options);
        }
      }

      _registerEventListeners() {
        let events = new Map();
        events.set('center_changed', this.centerChange);
        events.set('click', this.circleClick);
        events.set('dblclick', this.circleDblClick);
        events.set('drag', this.drag);
        events.set('dragend', this.dragEnd);
        events.set('dragstart', this.dragStart);
        events.set('mousedown', this.mouseDown);
        events.set('mousemove', this.mouseMove);
        events.set('mouseout', this.mouseOut);
        events.set('mouseover', this.mouseOver);
        events.set('mouseup', this.mouseUp);
        events.set('radius_changed', this.radiusChange);
        events.set('rightclick', this.rightClick);
        events.forEach((eventEmitter, eventName) => {
          this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe(value => {
            switch (eventName) {
              case 'radius_changed':
                this._manager.getRadius(this).then(radius => eventEmitter.emit(radius));

                break;

              case 'center_changed':
                this._manager.getCenter(this).then(center => eventEmitter.emit({
                  lat: center.lat(),
                  lng: center.lng()
                }));

                break;

              default:
                eventEmitter.emit({
                  coords: {
                    lat: value.latLng.lat(),
                    lng: value.latLng.lng()
                  }
                });
            }
          }));
        });
      }
      /** @internal */


      ngOnDestroy() {
        this._eventSubscriptions.forEach(function (s) {
          s.unsubscribe();
        });

        this._eventSubscriptions = null;

        this._manager.removeCircle(this);
      }
      /**
       * Gets the LatLngBounds of this Circle.
       */


      getBounds() {
        return this._manager.getBounds(this);
      }

      getCenter() {
        return this._manager.getCenter(this);
      }

    };
    AgmCircle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];

    AgmCircle.ctorParameters = () => [{
      type: CircleManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmCircle.prototype, "latitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmCircle.prototype, "longitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmCircle.prototype, "clickable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('circleDraggable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmCircle.prototype, "draggable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmCircle.prototype, "editable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmCircle.prototype, "fillColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmCircle.prototype, "fillOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmCircle.prototype, "radius", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmCircle.prototype, "strokeColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmCircle.prototype, "strokeOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmCircle.prototype, "strokePosition", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmCircle.prototype, "strokeWeight", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmCircle.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmCircle.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "centerChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "circleClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "circleDblClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "drag", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "dragEnd", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "dragStart", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "mouseDown", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "mouseMove", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "mouseOut", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "mouseOver", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "mouseUp", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "radiusChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmCircle.prototype, "rightClick", void 0);
    AgmCircle = AgmCircle_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-circle'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [CircleManager])], AgmCircle);
    /**
     * Manages all Data Layers for a Google Map instance.
     */

    let DataLayerManager = class DataLayerManager {
      constructor(_wrapper, _zone) {
        this._wrapper = _wrapper;
        this._zone = _zone;
        this._layers = new Map();
      }
      /**
       * Adds a new Data Layer to the map.
       */


      addDataLayer(layer) {
        const newLayer = this._wrapper.createDataLayer({
          style: layer.style
        }).then(d => {
          if (layer.geoJson) {
            this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);
          }

          return d;
        });

        this._layers.set(layer, newLayer);
      }

      deleteDataLayer(layer) {
        this._layers.get(layer).then(l => {
          l.setMap(null);

          this._layers.delete(layer);
        });
      }

      updateGeoJson(layer, geoJson) {
        this._layers.get(layer).then(l => {
          l.forEach(function (feature) {
            l.remove(feature);
            var index = l.features.indexOf(feature, 0);

            if (index > -1) {
              l.features.splice(index, 1);
            }
          });
          this.getDataFeatures(l, geoJson).then(features => l.features = features);
        });
      }

      setDataOptions(layer, options) {
        this._layers.get(layer).then(l => {
          l.setControlPosition(options.controlPosition);
          l.setControls(options.controls);
          l.setDrawingMode(options.drawingMode);
          l.setStyle(options.style);
        });
      }
      /**
       * Creates a Google Maps event listener for the given DataLayer as an Observable
       */


      createEventObservable(eventName, layer) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._layers.get(layer).then(d => {
            d.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });
        });
      }
      /**
       * Extract features from a geoJson using google.maps Data Class
       * @param d : google.maps.Data class instance
       * @param geoJson : url or geojson object
       */


      getDataFeatures(d, geoJson) {
        return new Promise((resolve, reject) => {
          if (typeof geoJson === 'object') {
            try {
              const features = d.addGeoJson(geoJson);
              resolve(features);
            } catch (e) {
              reject(e);
            }
          } else if (typeof geoJson === 'string') {
            d.loadGeoJson(geoJson, null, resolve);
          } else {
            reject("Impossible to extract features from geoJson: wrong argument type");
          }
        });
      }

    };

    DataLayerManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    DataLayerManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], DataLayerManager);
    var AgmDataLayer_1;
    let layerId$1 = 0;
    /**
     * AgmDataLayer enables the user to add data layers to the map.
     *
     * ### Example
     * ```typescript
     * import { Component } from 'angular2/core';
     * import { AgmMap, AgmDataLayer } from
     * 'angular-google-maps/core';
     *
     * @Component({
     *  selector: 'my-map-cmp',
     *  directives: [AgmMap, AgmDataLayer],
     *  styles: [`
     *    .agm-container {
     *      height: 300px;
     *    }
     * `],
     *  template: `
     * <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     * 	  <agm-data-layer [geoJson]="geoJsonObject" (layerClick)="clicked($event)" [style]="styleFunc">
     * 	  </agm-data-layer>
     * </agm-map>
     *  `
     * })
     * export class MyMapCmp {
     *   lat: number = -25.274449;
     *   lng: number = 133.775060;
     *   zoom: number = 5;
     *
     * clicked(clickEvent) {
     *    console.log(clickEvent);
     *  }
     *
     *  styleFunc(feature) {
     *    return ({
     *      clickable: false,
     *      fillColor: feature.getProperty('color'),
     *      strokeWeight: 1
     *    });
     *  }
     *
     *  geoJsonObject: Object = {
     *    "type": "FeatureCollection",
     *    "features": [
     *      {
     *        "type": "Feature",
     *        "properties": {
     *          "letter": "G",
     *          "color": "blue",
     *          "rank": "7",
     *          "ascii": "71"
     *        },
     *        "geometry": {
     *          "type": "Polygon",
     *          "coordinates": [
     *            [
     *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],
     *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],
     *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],
     *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],
     *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],
     *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],
     *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],
     *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]
     *            ]
     *          ]
     *        }
     *      },
     *      {
     *        "type": "Feature",
     *        "properties": {
     *          "letter": "o",
     *          "color": "red",
     *          "rank": "15",
     *          "ascii": "111"
     *        },
     *        "geometry": {
     *          "type": "Polygon",
     *          "coordinates": [
     *            [
     *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],
     *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],
     *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],
     *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]
     *            ],
     *            [
     *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],
     *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]
     *            ]
     *          ]
     *        }
     *      },
     *      {
     *        "type": "Feature",
     *        "properties": {
     *          "letter": "o",
     *          "color": "yellow",
     *          "rank": "15",
     *          "ascii": "111"
     *        },
     *        "geometry": {
     *          "type": "Polygon",
     *          "coordinates": [
     *            [
     *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],
     *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],
     *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],
     *              [132.71, -25.64], [131.87, -25.76]
     *            ],
     *            [
     *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],
     *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]
     *            ]
     *          ]
     *        }
     *      },
     *      {
     *        "type": "Feature",
     *        "properties": {
     *          "letter": "g",
     *          "color": "blue",
     *          "rank": "7",
     *          "ascii": "103"
     *        },
     *        "geometry": {
     *          "type": "Polygon",
     *          "coordinates": [
     *            [
     *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],
     *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],
     *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],
     *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],
     *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],
     *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],
     *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]
     *            ],
     *            [
     *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],
     *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]
     *            ]
     *          ]
     *        }
     *      },
     *      {
     *        "type": "Feature",
     *        "properties": {
     *          "letter": "l",
     *          "color": "green",
     *          "rank": "12",
     *          "ascii": "108"
     *        },
     *        "geometry": {
     *          "type": "Polygon",
     *          "coordinates": [
     *            [
     *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]
     *            ]
     *          ]
     *        }
     *      },
     *      {
     *        "type": "Feature",
     *        "properties": {
     *          "letter": "e",
     *          "color": "red",
     *          "rank": "5",
     *          "ascii": "101"
     *        },
     *        "geometry": {
     *          "type": "Polygon",
     *          "coordinates": [
     *            [
     *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],
     *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],
     *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],
     *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],
     *              [144.31, -28.26], [144.14, -27.41]
     *            ],
     *            [
     *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],
     *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]
     *            ]
     *          ]
     *        }
     *      }
     *    ]
     *  };
     * }
     * ```
     */

    let AgmDataLayer = AgmDataLayer_1 = class AgmDataLayer {
      constructor(_manager) {
        this._manager = _manager;
        this._addedToManager = false;
        this._id = (layerId$1++).toString();
        this._subscriptions = [];
        /**
         * This event is fired when a feature in the layer is clicked.
         */

        this.layerClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * The geoJson to be displayed
         */

        this.geoJson = null;
      }

      ngOnInit() {
        if (this._addedToManager) {
          return;
        }

        this._manager.addDataLayer(this);

        this._addedToManager = true;

        this._addEventListeners();
      }

      _addEventListeners() {
        const listeners = [{
          name: 'click',
          handler: ev => this.layerClick.emit(ev)
        }];
        listeners.forEach(obj => {
          const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);

          this._subscriptions.push(os);
        });
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      toString() {
        return "AgmDataLayer-".concat(this._id.toString());
      }
      /** @internal */


      ngOnDestroy() {
        this._manager.deleteDataLayer(this); // unsubscribe all registered observable subscriptions


        this._subscriptions.forEach(s => s.unsubscribe());
      }
      /** @internal */


      ngOnChanges(changes) {
        if (!this._addedToManager) {
          return;
        }

        var geoJsonChange = changes['geoJson'];

        if (geoJsonChange) {
          this._manager.updateGeoJson(this, geoJsonChange.currentValue);
        }

        let dataOptions = {};

        AgmDataLayer_1._dataOptionsAttributes.forEach(k => dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k]);

        this._manager.setDataOptions(this, dataOptions);
      }

    };
    AgmDataLayer._dataOptionsAttributes = ['style'];

    AgmDataLayer.ctorParameters = () => [{
      type: DataLayerManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmDataLayer.prototype, "layerClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmDataLayer.prototype, "geoJson", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Function)], AgmDataLayer.prototype, "style", void 0);
    AgmDataLayer = AgmDataLayer_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-data-layer'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [DataLayerManager])], AgmDataLayer);
    /**
     * Class to implement when you what to be able to make it work with the auto fit bounds feature
     * of AGM.
     */

    class FitBoundsAccessor {}
    /**
     * The FitBoundsService is responsible for computing the bounds of the a single map.
     */


    let FitBoundsService = class FitBoundsService {
      constructor(loader) {
        this._boundsChangeSampleTime$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](200);
        this._includeInBounds$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](new Map());
        this.bounds$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(loader.load()).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["flatMap"])(() => this._includeInBounds$), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["sample"])(this._boundsChangeSampleTime$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(time => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["timer"])(0, time)))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(includeInBounds => this._generateBounds(includeInBounds)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["shareReplay"])(1));
      }

      _generateBounds(includeInBounds) {
        const bounds = new google.maps.LatLngBounds();
        includeInBounds.forEach(b => bounds.extend(b));
        return bounds;
      }

      addToBounds(latLng) {
        const id = this._createIdentifier(latLng);

        if (this._includeInBounds$.value.has(id)) {
          return;
        }

        const map = this._includeInBounds$.value;
        map.set(id, latLng);

        this._includeInBounds$.next(map);
      }

      removeFromBounds(latLng) {
        const map = this._includeInBounds$.value;
        map.delete(this._createIdentifier(latLng));

        this._includeInBounds$.next(map);
      }

      changeFitBoundsChangeSampleTime(timeMs) {
        this._boundsChangeSampleTime$.next(timeMs);
      }

      getBounds$() {
        return this.bounds$;
      }

      _createIdentifier(latLng) {
        return "".concat(latLng.lat, "+").concat(latLng.lng);
      }

    };

    FitBoundsService.ctorParameters = () => [{
      type: MapsAPILoader
    }];

    FitBoundsService = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [MapsAPILoader])], FitBoundsService);
    /**
     * Adds the given directive to the auto fit bounds feature when the value is true.
     * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.
     * @example
     * <agm-marker [agmFitBounds]="true"></agm-marker>
     */

    let AgmFitBounds = class AgmFitBounds {
      constructor(_fitBoundsAccessor, _fitBoundsService) {
        this._fitBoundsAccessor = _fitBoundsAccessor;
        this._fitBoundsService = _fitBoundsService;
        /**
         * If the value is true, the element gets added to the bounds of the map.
         * Default: true.
         */

        this.agmFitBounds = true;
        this._destroyed$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this._latestFitBoundsDetails = null;
      }
      /**
       * @internal
       */


      ngOnChanges() {
        this._updateBounds();
      }
      /**
       * @internal
       */


      ngOnInit() {
        this._fitBoundsAccessor.getFitBoundsDetails$().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["distinctUntilChanged"])((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed$)).subscribe(details => this._updateBounds(details));
      }
      /*
       Either the location changed, or visible status changed.
       Possible state changes are
       invisible -> visible
       visible -> invisible
       visible -> visible (new location)
      */


      _updateBounds(newFitBoundsDetails) {
        // either visibility will change, or location, so remove the old one anyway
        if (this._latestFitBoundsDetails) {
          this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng); // don't set latestFitBoundsDetails to null, because we can toggle visibility from
          // true -> false -> true, in which case we still need old value cached here

        }

        if (newFitBoundsDetails) {
          this._latestFitBoundsDetails = newFitBoundsDetails;
        }

        if (!this._latestFitBoundsDetails) {
          return;
        }

        if (this.agmFitBounds === true) {
          this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);
        }
      }
      /**
       * @internal
       */


      ngOnDestroy() {
        this._destroyed$.next();

        this._destroyed$.complete();

        if (this._latestFitBoundsDetails !== null) {
          this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);
        }
      }

    };

    AgmFitBounds.ctorParameters = () => [{
      type: FitBoundsAccessor,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"]
      }]
    }, {
      type: FitBoundsService
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmFitBounds.prototype, "agmFitBounds", void 0);
    AgmFitBounds = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: '[agmFitBounds]'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Self"])()), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [FitBoundsAccessor, FitBoundsService])], AgmFitBounds);
    let MarkerManager = class MarkerManager {
      constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._markers = new Map();
      }

      convertAnimation(uiAnim) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          if (uiAnim === null) {
            return null;
          } else {
            return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);
          }
        });
      }

      deleteMarker(marker) {
        const m = this._markers.get(marker);

        if (m == null) {
          // marker already deleted
          return Promise.resolve();
        }

        return m.then(m => {
          return this._zone.run(() => {
            m.setMap(null);

            this._markers.delete(marker);
          });
        });
      }

      updateMarkerPosition(marker) {
        return this._markers.get(marker).then(m => m.setPosition({
          lat: marker.latitude,
          lng: marker.longitude
        }));
      }

      updateTitle(marker) {
        return this._markers.get(marker).then(m => m.setTitle(marker.title));
      }

      updateLabel(marker) {
        return this._markers.get(marker).then(m => {
          m.setLabel(marker.label);
        });
      }

      updateDraggable(marker) {
        return this._markers.get(marker).then(m => m.setDraggable(marker.draggable));
      }

      updateIcon(marker) {
        return this._markers.get(marker).then(m => m.setIcon(marker.iconUrl));
      }

      updateOpacity(marker) {
        return this._markers.get(marker).then(m => m.setOpacity(marker.opacity));
      }

      updateVisible(marker) {
        return this._markers.get(marker).then(m => m.setVisible(marker.visible));
      }

      updateZIndex(marker) {
        return this._markers.get(marker).then(m => m.setZIndex(marker.zIndex));
      }

      updateClickable(marker) {
        return this._markers.get(marker).then(m => m.setClickable(marker.clickable));
      }

      updateAnimation(marker) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          const m = yield this._markers.get(marker);
          m.setAnimation((yield this.convertAnimation(marker.animation)));
        });
      }

      addMarker(marker) {
        const markerPromise = new Promise(resolve => Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          return this._mapsWrapper.createMarker({
            position: {
              lat: marker.latitude,
              lng: marker.longitude
            },
            label: marker.label,
            draggable: marker.draggable,
            icon: marker.iconUrl,
            opacity: marker.opacity,
            visible: marker.visible,
            zIndex: marker.zIndex,
            title: marker.title,
            clickable: marker.clickable,
            animation: yield this.convertAnimation(marker.animation)
          }).then(resolve);
        }));

        this._markers.set(marker, markerPromise);
      }

      getNativeMarker(marker) {
        return this._markers.get(marker);
      }

      createEventObservable(eventName, marker) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._markers.get(marker).then(m => {
            m.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });
        });
      }

    };

    MarkerManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    MarkerManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], MarkerManager);
    let InfoWindowManager = class InfoWindowManager {
      constructor(_mapsWrapper, _zone, _markerManager) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._markerManager = _markerManager;
        this._infoWindows = new Map();
      }

      deleteInfoWindow(infoWindow) {
        const iWindow = this._infoWindows.get(infoWindow);

        if (iWindow == null) {
          // info window already deleted
          return Promise.resolve();
        }

        return iWindow.then(i => {
          return this._zone.run(() => {
            i.close();

            this._infoWindows.delete(infoWindow);
          });
        });
      }

      setPosition(infoWindow) {
        return this._infoWindows.get(infoWindow).then(i => i.setPosition({
          lat: infoWindow.latitude,
          lng: infoWindow.longitude
        }));
      }

      setZIndex(infoWindow) {
        return this._infoWindows.get(infoWindow).then(i => i.setZIndex(infoWindow.zIndex));
      }

      open(infoWindow) {
        return this._infoWindows.get(infoWindow).then(w => {
          if (infoWindow.hostMarker != null) {
            return this._markerManager.getNativeMarker(infoWindow.hostMarker).then(marker => {
              return this._mapsWrapper.getNativeMap().then(map => w.open(map, marker));
            });
          }

          return this._mapsWrapper.getNativeMap().then(map => w.open(map));
        });
      }

      close(infoWindow) {
        return this._infoWindows.get(infoWindow).then(w => w.close());
      }

      setOptions(infoWindow, options) {
        return this._infoWindows.get(infoWindow).then(i => i.setOptions(options));
      }

      addInfoWindow(infoWindow) {
        const options = {
          content: infoWindow.content,
          maxWidth: infoWindow.maxWidth,
          zIndex: infoWindow.zIndex,
          disableAutoPan: infoWindow.disableAutoPan
        };

        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {
          options.position = {
            lat: infoWindow.latitude,
            lng: infoWindow.longitude
          };
        }

        const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);

        this._infoWindows.set(infoWindow, infoWindowPromise);
      }
      /**
       * Creates a Google Maps event listener for the given InfoWindow as an Observable
       */


      createEventObservable(eventName, infoWindow) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._infoWindows.get(infoWindow).then(i => {
            i.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });
        });
      }

    };

    InfoWindowManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }, {
      type: MarkerManager
    }];

    InfoWindowManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], MarkerManager])], InfoWindowManager);
    var AgmInfoWindow_1;
    let infoWindowId = 0;
    /**
     * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.
     *
     * ### Example
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *  selector: 'my-map-cmp',
     *  styles: [`
     *    .agm-map-container {
     *      height: 300px;
     *    }
     * `],
     *  template: `
     *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     *      <agm-marker [latitude]="lat" [longitude]="lng" [label]="'M'">
     *        <agm-info-window [disableAutoPan]="true">
     *          Hi, this is the content of the <strong>info window</strong>
     *        </agm-info-window>
     *      </agm-marker>
     *    </agm-map>
     *  `
     * })
     * ```
     */

    let AgmInfoWindow = AgmInfoWindow_1 = class AgmInfoWindow {
      constructor(_infoWindowManager, _el) {
        this._infoWindowManager = _infoWindowManager;
        this._el = _el;
        /**
         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.
         */

        this.isOpen = false;
        /**
         * Emits an event when the info window is closed.
         */

        this.infoWindowClose = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._infoWindowAddedToManager = false;
        this._id = (infoWindowId++).toString();
      }

      ngOnInit() {
        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');

        this._infoWindowManager.addInfoWindow(this);

        this._infoWindowAddedToManager = true;

        this._updateOpenState();

        this._registerEventListeners();
      }
      /** @internal */


      ngOnChanges(changes) {
        if (!this._infoWindowAddedToManager) {
          return;
        }

        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {
          this._infoWindowManager.setPosition(this);
        }

        if (changes['zIndex']) {
          this._infoWindowManager.setZIndex(this);
        }

        if (changes['isOpen']) {
          this._updateOpenState();
        }

        this._setInfoWindowOptions(changes);
      }

      _registerEventListeners() {
        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {
          this.isOpen = false;
          this.infoWindowClose.emit();
        });
      }

      _updateOpenState() {
        this.isOpen ? this.open() : this.close();
      }

      _setInfoWindowOptions(changes) {
        let options = {};
        let optionKeys = Object.keys(changes).filter(k => AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1);
        optionKeys.forEach(k => {
          options[k] = changes[k].currentValue;
        });

        this._infoWindowManager.setOptions(this, options);
      }
      /**
       * Opens the info window.
       */


      open() {
        return this._infoWindowManager.open(this);
      }
      /**
       * Closes the info window.
       */


      close() {
        return this._infoWindowManager.close(this).then(() => {
          this.infoWindowClose.emit();
        });
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      toString() {
        return 'AgmInfoWindow-' + this._id.toString();
      }
      /** @internal */


      ngOnDestroy() {
        this._infoWindowManager.deleteInfoWindow(this);
      }

    };
    AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];

    AgmInfoWindow.ctorParameters = () => [{
      type: InfoWindowManager
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmInfoWindow.prototype, "latitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmInfoWindow.prototype, "longitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], AgmInfoWindow.prototype, "disableAutoPan", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmInfoWindow.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmInfoWindow.prototype, "maxWidth", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmInfoWindow.prototype, "isOpen", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmInfoWindow.prototype, "infoWindowClose", void 0);
    AgmInfoWindow = AgmInfoWindow_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
      selector: 'agm-info-window',
      template: "<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  "
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [InfoWindowManager, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])], AgmInfoWindow);
    /**
     * Manages all KML Layers for a Google Map instance.
     */

    let KmlLayerManager = class KmlLayerManager {
      constructor(_wrapper, _zone) {
        this._wrapper = _wrapper;
        this._zone = _zone;
        this._layers = new Map();
      }
      /**
       * Adds a new KML Layer to the map.
       */


      addKmlLayer(layer) {
        const newLayer = this._wrapper.getNativeMap().then(m => {
          return new google.maps.KmlLayer({
            clickable: layer.clickable,
            map: m,
            preserveViewport: layer.preserveViewport,
            screenOverlays: layer.screenOverlays,
            suppressInfoWindows: layer.suppressInfoWindows,
            url: layer.url,
            zIndex: layer.zIndex
          });
        });

        this._layers.set(layer, newLayer);
      }

      setOptions(layer, options) {
        this._layers.get(layer).then(l => l.setOptions(options));
      }

      deleteKmlLayer(layer) {
        this._layers.get(layer).then(l => {
          l.setMap(null);

          this._layers.delete(layer);
        });
      }
      /**
       * Creates a Google Maps event listener for the given KmlLayer as an Observable
       */


      createEventObservable(eventName, layer) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._layers.get(layer).then(m => {
            m.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });
        });
      }

    };

    KmlLayerManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    KmlLayerManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], KmlLayerManager);
    var AgmKmlLayer_1;
    let layerId$2 = 0;
    let AgmKmlLayer = AgmKmlLayer_1 = class AgmKmlLayer {
      constructor(_manager) {
        this._manager = _manager;
        this._addedToManager = false;
        this._id = (layerId$2++).toString();
        this._subscriptions = [];
        /**
         * If true, the layer receives mouse events. Default value is true.
         */

        this.clickable = true;
        /**
         * By default, the input map is centered and zoomed to the bounding box of the contents of the
         * layer.
         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom
         * were never set.
         */

        this.preserveViewport = false;
        /**
         * Whether to render the screen overlays. Default true.
         */

        this.screenOverlays = true;
        /**
         * Suppress the rendering of info windows when layer features are clicked.
         */

        this.suppressInfoWindows = false;
        /**
         * The URL of the KML document to display.
         */

        this.url = null;
        /**
         * The z-index of the layer.
         */

        this.zIndex = null;
        /**
         * This event is fired when a feature in the layer is clicked.
         */

        this.layerClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the KML layers default viewport has changed.
         */

        this.defaultViewportChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the KML layer has finished loading.
         * At this point it is safe to read the status property to determine if the layer loaded
         * successfully.
         */

        this.statusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
      }

      ngOnInit() {
        if (this._addedToManager) {
          return;
        }

        this._manager.addKmlLayer(this);

        this._addedToManager = true;

        this._addEventListeners();
      }

      ngOnChanges(changes) {
        if (!this._addedToManager) {
          return;
        }

        this._updatePolygonOptions(changes);
      }

      _updatePolygonOptions(changes) {
        const options = Object.keys(changes).filter(k => AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1).reduce((obj, k) => {
          obj[k] = changes[k].currentValue;
          return obj;
        }, {});

        if (Object.keys(options).length > 0) {
          this._manager.setOptions(this, options);
        }
      }

      _addEventListeners() {
        const listeners = [{
          name: 'click',
          handler: ev => this.layerClick.emit(ev)
        }, {
          name: 'defaultviewport_changed',
          handler: () => this.defaultViewportChange.emit()
        }, {
          name: 'status_changed',
          handler: () => this.statusChange.emit()
        }];
        listeners.forEach(obj => {
          const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);

          this._subscriptions.push(os);
        });
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      toString() {
        return "AgmKmlLayer-".concat(this._id.toString());
      }
      /** @internal */


      ngOnDestroy() {
        this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions


        this._subscriptions.forEach(s => s.unsubscribe());
      }

    };
    AgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];

    AgmKmlLayer.ctorParameters = () => [{
      type: KmlLayerManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmKmlLayer.prototype, "clickable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmKmlLayer.prototype, "preserveViewport", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmKmlLayer.prototype, "screenOverlays", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmKmlLayer.prototype, "suppressInfoWindows", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmKmlLayer.prototype, "url", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmKmlLayer.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmKmlLayer.prototype, "layerClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmKmlLayer.prototype, "defaultViewportChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmKmlLayer.prototype, "statusChange", void 0);
    AgmKmlLayer = AgmKmlLayer_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-kml-layer'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [KmlLayerManager])], AgmKmlLayer);

    function createMVCEventObservable(array) {
      const eventNames = ['insert_at', 'remove_at', 'set_at'];
      return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEventPattern"])(handler => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{
        'newArr': array.getArray(),
        evName,
        index,
        previous
      }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));
    }

    class MvcArrayMock {
      constructor() {
        this.vals = [];
        this.listeners = {
          'remove_at': [],
          'insert_at': [],
          'set_at': []
        };
      }

      clear() {
        for (let i = this.vals.length - 1; i >= 0; i--) {
          this.removeAt(i);
        }
      }

      getArray() {
        return [...this.vals];
      }

      getAt(i) {
        return this.vals[i];
      }

      getLength() {
        return this.vals.length;
      }

      insertAt(i, elem) {
        this.vals.splice(i, 0, elem);
        this.listeners.insert_at.map(listener => listener(i));
      }

      pop() {
        const deleted = this.vals.pop();
        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));
        return deleted;
      }

      push(elem) {
        this.vals.push(elem);
        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));
        return this.vals.length;
      }

      removeAt(i) {
        const deleted = this.vals.splice(i, 1)[0];
        this.listeners.remove_at.map(listener => listener(i, deleted));
        return deleted;
      }

      setAt(i, elem) {
        const deleted = this.vals[i];
        this.vals[i] = elem;
        this.listeners.set_at.map(listener => listener(i, deleted));
      }

      forEach(callback) {
        this.vals.forEach(callback);
      }

      addListener(eventName, handler) {
        const listenerArr = this.listeners[eventName];
        listenerArr.push(handler);
        return {
          remove: () => {
            listenerArr.splice(listenerArr.indexOf(handler), 1);
          }
        };
      }

    }

    let PolygonManager = class PolygonManager {
      constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._polygons = new Map();
      }

      addPolygon(path) {
        const polygonPromise = this._mapsWrapper.createPolygon({
          clickable: path.clickable,
          draggable: path.draggable,
          editable: path.editable,
          fillColor: path.fillColor,
          fillOpacity: path.fillOpacity,
          geodesic: path.geodesic,
          paths: path.paths,
          strokeColor: path.strokeColor,
          strokeOpacity: path.strokeOpacity,
          strokeWeight: path.strokeWeight,
          visible: path.visible,
          zIndex: path.zIndex
        });

        this._polygons.set(path, polygonPromise);
      }

      updatePolygon(polygon) {
        const m = this._polygons.get(polygon);

        if (m == null) {
          return Promise.resolve();
        }

        return m.then(l => this._zone.run(() => {
          l.setPaths(polygon.paths);
        }));
      }

      setPolygonOptions(path, options) {
        return this._polygons.get(path).then(l => {
          l.setOptions(options);
        });
      }

      deletePolygon(paths) {
        const m = this._polygons.get(paths);

        if (m == null) {
          return Promise.resolve();
        }

        return m.then(l => {
          return this._zone.run(() => {
            l.setMap(null);

            this._polygons.delete(paths);
          });
        });
      }

      getPath(polygon) {
        return this._polygons.get(polygon).then(polygon => polygon.getPath().getArray());
      }

      getPaths(polygon) {
        return this._polygons.get(polygon).then(polygon => polygon.getPaths().getArray().map(p => p.getArray()));
      }

      createEventObservable(eventName, path) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._polygons.get(path).then(l => {
            l.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });
        });
      }

      createPathEventObservable(agmPolygon) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          const polygon = yield this._polygons.get(agmPolygon);
          const paths = polygon.getPaths();
          const pathsChanges$ = createMVCEventObservable(paths);
          return pathsChanges$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])({
            newArr: paths.getArray()
          }), // in order to subscribe to them all
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(parentMVEvent => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(... // rest parameter
          parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(chMVCEvent => ({
            parentMVEvent,
            chMVCEvent,
            pathIndex: index
          }))))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])({
            parentMVEvent,
            chMVCEvent: null,
            pathIndex: null
          }))), // start the merged ob with an event signinifing change to parent
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["skip"])(1), // skip the manually added event
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(({
            parentMVEvent,
            chMVCEvent,
            pathIndex
          }) => {
            let retVal;

            if (!chMVCEvent) {
              retVal = {
                newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),
                eventName: parentMVEvent.evName,
                index: parentMVEvent.index
              };

              if (parentMVEvent.previous) {
                retVal.previous = parentMVEvent.previous.getArray();
              }
            } else {
              retVal = {
                newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),
                pathIndex,
                eventName: chMVCEvent.evName,
                index: chMVCEvent.index
              };

              if (chMVCEvent.previous) {
                retVal.previous = chMVCEvent.previous;
              }
            }

            return retVal;
          }));
        });
      }

    };

    PolygonManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    PolygonManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], PolygonManager);
    var PolylineManager_1;
    let PolylineManager = PolylineManager_1 = class PolylineManager {
      constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._polylines = new Map();
      }

      static _convertPoints(line) {
        const path = line._getPoints().map(point => {
          return {
            lat: point.latitude,
            lng: point.longitude
          };
        });

        return path;
      }

      static _convertPath(path) {
        const symbolPath = google.maps.SymbolPath[path];

        if (typeof symbolPath === 'number') {
          return symbolPath;
        } else {
          return path;
        }
      }

      static _convertIcons(line) {
        const icons = line._getIcons().map(agmIcon => ({
          fixedRotation: agmIcon.fixedRotation,
          offset: agmIcon.offset,
          repeat: agmIcon.repeat,
          icon: {
            anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),
            fillColor: agmIcon.fillColor,
            fillOpacity: agmIcon.fillOpacity,
            path: PolylineManager_1._convertPath(agmIcon.path),
            rotation: agmIcon.rotation,
            scale: agmIcon.scale,
            strokeColor: agmIcon.strokeColor,
            strokeOpacity: agmIcon.strokeOpacity,
            strokeWeight: agmIcon.strokeWeight
          }
        })); // prune undefineds;


        icons.forEach(icon => {
          Object.entries(icon).forEach(([key, val]) => {
            if (typeof val === 'undefined') {
              delete icon[key];
            }
          });

          if (typeof icon.icon.anchor.x === 'undefined' || typeof icon.icon.anchor.y === 'undefined') {
            delete icon.icon.anchor;
          }
        });
        return icons;
      }

      addPolyline(line) {
        const polylinePromise = this._mapsWrapper.getNativeMap().then(() => [PolylineManager_1._convertPoints(line), PolylineManager_1._convertIcons(line)]).then(([path, icons]) => this._mapsWrapper.createPolyline({
          clickable: line.clickable,
          draggable: line.draggable,
          editable: line.editable,
          geodesic: line.geodesic,
          strokeColor: line.strokeColor,
          strokeOpacity: line.strokeOpacity,
          strokeWeight: line.strokeWeight,
          visible: line.visible,
          zIndex: line.zIndex,
          path: path,
          icons: icons
        }));

        this._polylines.set(line, polylinePromise);
      }

      updatePolylinePoints(line) {
        const path = PolylineManager_1._convertPoints(line);

        const m = this._polylines.get(line);

        if (m == null) {
          return Promise.resolve();
        }

        return m.then(l => {
          return this._zone.run(() => {
            l.setPath(path);
          });
        });
      }

      updateIconSequences(line) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          yield this._mapsWrapper.getNativeMap();

          const icons = PolylineManager_1._convertIcons(line);

          const m = this._polylines.get(line);

          if (m == null) {
            return;
          }

          return m.then(l => this._zone.run(() => l.setOptions({
            icons: icons
          })));
        });
      }

      setPolylineOptions(line, options) {
        return this._polylines.get(line).then(l => {
          l.setOptions(options);
        });
      }

      deletePolyline(line) {
        const m = this._polylines.get(line);

        if (m == null) {
          return Promise.resolve();
        }

        return m.then(l => {
          return this._zone.run(() => {
            l.setMap(null);

            this._polylines.delete(line);
          });
        });
      }

      getMVCPath(agmPolyline) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          const polyline = yield this._polylines.get(agmPolyline);
          return polyline.getPath();
        });
      }

      getPath(agmPolyline) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          return (yield this.getMVCPath(agmPolyline)).getArray();
        });
      }

      createEventObservable(eventName, line) {
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](observer => {
          this._polylines.get(line).then(l => {
            l.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });
        });
      }

      createPathEventObservable(line) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
          const mvcPath = yield this.getMVCPath(line);
          return createMVCEventObservable(mvcPath);
        });
      }

    };

    PolylineManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    PolylineManager = PolylineManager_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], PolylineManager);
    let RectangleManager = class RectangleManager {
      constructor(_apiWrapper, _zone) {
        this._apiWrapper = _apiWrapper;
        this._zone = _zone;
        this._rectangles = new Map();
      }

      addRectangle(rectangle) {
        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({
          bounds: {
            north: rectangle.north,
            east: rectangle.east,
            south: rectangle.south,
            west: rectangle.west
          },
          clickable: rectangle.clickable,
          draggable: rectangle.draggable,
          editable: rectangle.editable,
          fillColor: rectangle.fillColor,
          fillOpacity: rectangle.fillOpacity,
          strokeColor: rectangle.strokeColor,
          strokeOpacity: rectangle.strokeOpacity,
          strokePosition: rectangle.strokePosition,
          strokeWeight: rectangle.strokeWeight,
          visible: rectangle.visible,
          zIndex: rectangle.zIndex
        }));
      }
      /**
       * Removes the given rectangle from the map.
       */


      removeRectangle(rectangle) {
        return this._rectangles.get(rectangle).then(r => {
          r.setMap(null);

          this._rectangles.delete(rectangle);
        });
      }

      setOptions(rectangle, options) {
        return this._rectangles.get(rectangle).then(r => r.setOptions(options));
      }

      getBounds(rectangle) {
        return this._rectangles.get(rectangle).then(r => r.getBounds());
      }

      setBounds(rectangle) {
        return this._rectangles.get(rectangle).then(r => {
          return r.setBounds({
            north: rectangle.north,
            east: rectangle.east,
            south: rectangle.south,
            west: rectangle.west
          });
        });
      }

      setEditable(rectangle) {
        return this._rectangles.get(rectangle).then(r => {
          return r.setEditable(rectangle.editable);
        });
      }

      setDraggable(rectangle) {
        return this._rectangles.get(rectangle).then(r => {
          return r.setDraggable(rectangle.draggable);
        });
      }

      setVisible(rectangle) {
        return this._rectangles.get(rectangle).then(r => {
          return r.setVisible(rectangle.visible);
        });
      }

      createEventObservable(eventName, rectangle) {
        return rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"].create(observer => {
          let listener = null;

          this._rectangles.get(rectangle).then(r => {
            listener = r.addListener(eventName, e => this._zone.run(() => observer.next(e)));
          });

          return () => {
            if (listener !== null) {
              listener.remove();
            }
          };
        });
      }

    };

    RectangleManager.ctorParameters = () => [{
      type: GoogleMapsAPIWrapper
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    RectangleManager = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [GoogleMapsAPIWrapper, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], RectangleManager);
    var AgmMap_1;
    /**
     * AgmMap renders a Google Map.
     * **Important note**: To be able see a map in the browser, you have to define a height for the
     * element `agm-map`.
     *
     * ### Example
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *  selector: 'my-map-cmp',
     *  styles: [`
     *    agm-map {
     *      height: 300px;
     *    }
     * `],
     *  template: `
     *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     *    </agm-map>
     *  `
     * })
     * ```
     */

    let AgmMap = AgmMap_1 = class AgmMap {
      constructor(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {
        this._elem = _elem;
        this._mapsWrapper = _mapsWrapper;
        this._platformId = _platformId;
        this._fitBoundsService = _fitBoundsService;
        this._zone = _zone;
        /**
         * The longitude that defines the center of the map.
         */

        this.longitude = 0;
        /**
         * The latitude that defines the center of the map.
         */

        this.latitude = 0;
        /**
         * The zoom level of the map. The default zoom level is 8.
         */

        this.zoom = 8;
        /**
         * Enables/disables if map is draggable.
         */
        // tslint:disable-next-line:no-input-rename

        this.draggable = true;
        /**
         * Enables/disables zoom and center on double click. Enabled by default.
         */

        this.disableDoubleClickZoom = false;
        /**
         * Enables/disables all default UI of the Google map. Please note: When the map is created, this
         * value cannot get updated.
         */

        this.disableDefaultUI = false;
        /**
         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.
         */

        this.scrollwheel = true;
        /**
         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are
         * enabled by default.
         */

        this.keyboardShortcuts = true;
        /**
         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain
         * modes, these styles will only apply to labels and geometry.
         */

        this.styles = [];
        /**
         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is
         * used to
         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map
         */

        this.usePanning = false;
        /**
         * Sets the viewport to contain the given bounds.
         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.
         */

        this.fitBounds = false;
        /**
         * The initial enabled/disabled state of the Scale control. This is disabled by default.
         */

        this.scaleControl = false;
        /**
         * The initial enabled/disabled state of the Map type control.
         */

        this.mapTypeControl = false;
        /**
         * The initial enabled/disabled state of the Pan control.
         */

        this.panControl = false;
        /**
         * The initial enabled/disabled state of the Rotate control.
         */

        this.rotateControl = false;
        /**
         * The initial enabled/disabled state of the Fullscreen control.
         */

        this.fullscreenControl = false;
        /**
         * The map mapTypeId. Defaults to 'roadmap'.
         */

        this.mapTypeId = 'roadmap';
        /**
         * When false, map icons are not clickable. A map icon represents a point of interest,
         * also known as a POI. By default map icons are clickable.
         */

        this.clickableIcons = true;
        /**
         * A map icon represents a point of interest, also known as a POI.
         * When map icons are clickable by default, an info window is displayed.
         * When this property is set to false, the info window will not be shown but the click event
         * will still fire
         */

        this.showDefaultInfoWindow = true;
        /**
         * This setting controls how gestures on the map are handled.
         * Allowed values:
         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)
         * - 'greedy'      (All touch gestures pan or zoom the map.)
         * - 'none'        (The map cannot be panned or zoomed by user gestures.)
         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.
         */

        this.gestureHandling = 'auto';
        /**
         * Controls the automatic switching behavior for the angle of incidence of
         * the map. The only allowed values are 0 and 45. The value 0 causes the map
         * to always use a 0° overhead view regardless of the zoom level and
         * viewport. The value 45 causes the tilt angle to automatically switch to
         * 45 whenever 45° imagery is available for the current zoom level and
         * viewport, and switch back to 0 whenever 45° imagery is not available
         * (this is the default behavior). 45° imagery is only available for
         * satellite and hybrid map types, within some locations, and at some zoom
         * levels. Note: getTilt returns the current tilt angle, not the value
         * specified by this option. Because getTilt and this option refer to
         * different things, do not bind() the tilt property; doing so may yield
         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)
         */

        this.tilt = 0;
        this._observableSubscriptions = [];
        /**
         * This event emitter gets emitted when the user clicks on the map (but not when they click on a
         * marker or infoWindow).
         */

        this.mapClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user right-clicks on the map (but not when they click
         * on a marker or infoWindow).
         */

        this.mapRightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user double-clicks on the map (but not when they click
         * on a marker or infoWindow).
         */

        this.mapDblClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter is fired when the map center changes.
         */

        this.centerChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the viewport bounds have changed.
         */

        this.boundsChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the mapTypeId property changes.
         */

        this.mapTypeIdChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the map becomes idle after panning or zooming.
         */

        this.idle = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the zoom level has changed.
         */

        this.zoomChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the google map is fully initialized.
         * You get the google.maps.Map instance as a result of this EventEmitter.
         */

        this.mapReady = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the visible tiles have finished loading.
         */

        this.tilesLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
      }
      /** @internal */


      ngOnInit() {
        if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_4__["isPlatformServer"])(this._platformId)) {
          // The code is running on the server, do nothing
          return;
        } // todo: this should be solved with a new component and a viewChild decorator


        const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');

        this._initMapInstance(container);
      }

      _initMapInstance(el) {
        this._mapsWrapper.createMap(el, {
          center: {
            lat: this.latitude || 0,
            lng: this.longitude || 0
          },
          zoom: this.zoom,
          minZoom: this.minZoom,
          maxZoom: this.maxZoom,
          controlSize: this.controlSize,
          disableDefaultUI: this.disableDefaultUI,
          disableDoubleClickZoom: this.disableDoubleClickZoom,
          scrollwheel: this.scrollwheel,
          backgroundColor: this.backgroundColor,
          draggable: this.draggable,
          draggableCursor: this.draggableCursor,
          draggingCursor: this.draggingCursor,
          keyboardShortcuts: this.keyboardShortcuts,
          styles: this.styles,
          zoomControl: this.zoomControl,
          zoomControlOptions: this.zoomControlOptions,
          streetViewControl: this.streetViewControl,
          streetViewControlOptions: this.streetViewControlOptions,
          scaleControl: this.scaleControl,
          scaleControlOptions: this.scaleControlOptions,
          mapTypeControl: this.mapTypeControl,
          mapTypeControlOptions: this.mapTypeControlOptions,
          panControl: this.panControl,
          panControlOptions: this.panControlOptions,
          rotateControl: this.rotateControl,
          rotateControlOptions: this.rotateControlOptions,
          fullscreenControl: this.fullscreenControl,
          fullscreenControlOptions: this.fullscreenControlOptions,
          mapTypeId: this.mapTypeId,
          clickableIcons: this.clickableIcons,
          gestureHandling: this.gestureHandling,
          tilt: this.tilt,
          restriction: this.restriction
        }).then(() => this._mapsWrapper.getNativeMap()).then(map => this.mapReady.emit(map)); // register event listeners


        this._handleMapCenterChange();

        this._handleMapZoomChange();

        this._handleMapMouseEvents();

        this._handleBoundsChange();

        this._handleMapTypeIdChange();

        this._handleTilesLoadedEvent();

        this._handleIdleEvent();
      }
      /** @internal */


      ngOnDestroy() {
        // unsubscribe all registered observable subscriptions
        this._observableSubscriptions.forEach(s => s.unsubscribe()); // remove all listeners from the map instance


        this._mapsWrapper.clearInstanceListeners();

        if (this._fitBoundsSubscription) {
          this._fitBoundsSubscription.unsubscribe();
        }
      }
      /* @internal */


      ngOnChanges(changes) {
        this._updateMapOptionsChanges(changes);

        this._updatePosition(changes);
      }

      _updateMapOptionsChanges(changes) {
        let options = {};
        let optionKeys = Object.keys(changes).filter(k => AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1);
        optionKeys.forEach(k => {
          options[k] = changes[k].currentValue;
        });

        this._mapsWrapper.setMapOptions(options);
      }
      /**
       * Triggers a resize event on the google map instance.
       * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.
       * Returns a promise that gets resolved after the event was triggered.
       */


      triggerResize(recenter = true) {
        // Note: When we would trigger the resize event and show the map in the same turn (which is a
        // common case for triggering a resize event), then the resize event would not
        // work (to show the map), so we trigger the event in a timeout.
        return new Promise(resolve => {
          setTimeout(() => {
            return this._mapsWrapper.triggerMapEvent('resize').then(() => {
              if (recenter) {
                this.fitBounds != null ? this._fitBounds() : this._setCenter();
              }

              resolve();
            });
          });
        });
      }

      _updatePosition(changes) {
        if (changes['latitude'] == null && changes['longitude'] == null && !changes['fitBounds']) {
          // no position update needed
          return;
        } // we prefer fitBounds in changes


        if ('fitBounds' in changes) {
          this._fitBounds();

          return;
        }

        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {
          return;
        }

        this._setCenter();
      }

      _setCenter() {
        let newCenter = {
          lat: this.latitude,
          lng: this.longitude
        };

        if (this.usePanning) {
          this._mapsWrapper.panTo(newCenter);
        } else {
          this._mapsWrapper.setCenter(newCenter);
        }
      }

      _fitBounds() {
        switch (this.fitBounds) {
          case true:
            this._subscribeToFitBoundsUpdates();

            break;

          case false:
            if (this._fitBoundsSubscription) {
              this._fitBoundsSubscription.unsubscribe();
            }

            break;

          default:
            this._updateBounds(this.fitBounds, this.fitBoundsPadding);

        }
      }

      _subscribeToFitBoundsUpdates() {
        this._zone.runOutsideAngular(() => {
          this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {
            this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));
          });
        });
      }

      _updateBounds(bounds, padding) {
        if (!bounds) {
          return;
        }

        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {
          const newBounds = new google.maps.LatLngBounds();
          newBounds.union(bounds);
          bounds = newBounds;
        }

        if (this.usePanning) {
          this._mapsWrapper.panToBounds(bounds, padding);

          return;
        }

        this._mapsWrapper.fitBounds(bounds, padding);
      }

      _isLatLngBoundsLiteral(bounds) {
        return bounds != null && bounds.extend === undefined;
      }

      _handleMapCenterChange() {
        const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {
          this._mapsWrapper.getCenter().then(center => {
            this.latitude = center.lat();
            this.longitude = center.lng();
            this.centerChange.emit({
              lat: this.latitude,
              lng: this.longitude
            });
          });
        });

        this._observableSubscriptions.push(s);
      }

      _handleBoundsChange() {
        const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {
          this._mapsWrapper.getBounds().then(bounds => {
            this.boundsChange.emit(bounds);
          });
        });

        this._observableSubscriptions.push(s);
      }

      _handleMapTypeIdChange() {
        const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {
          this._mapsWrapper.getMapTypeId().then(mapTypeId => {
            this.mapTypeIdChange.emit(mapTypeId);
          });
        });

        this._observableSubscriptions.push(s);
      }

      _handleMapZoomChange() {
        const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {
          this._mapsWrapper.getZoom().then(z => {
            this.zoom = z;
            this.zoomChange.emit(z);
          });
        });

        this._observableSubscriptions.push(s);
      }

      _handleIdleEvent() {
        const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => {
          this.idle.emit(void 0);
        });

        this._observableSubscriptions.push(s);
      }

      _handleTilesLoadedEvent() {
        const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));

        this._observableSubscriptions.push(s);
      }

      _handleMapMouseEvents() {
        const events = [{
          name: 'click',
          emitter: this.mapClick
        }, {
          name: 'rightclick',
          emitter: this.mapRightClick
        }, {
          name: 'dblclick',
          emitter: this.mapDblClick
        }];
        events.forEach(e => {
          const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(event => {
            let value = {
              coords: {
                lat: event.latLng.lat(),
                lng: event.latLng.lng()
              },
              placeId: event.placeId
            }; // the placeId will be undefined in case the event was not an IconMouseEvent (google types)

            if (value.placeId && !this.showDefaultInfoWindow) {
              event.stop();
            }

            e.emitter.emit(value);
          });

          this._observableSubscriptions.push(s);
        });
      }

    };
    /**
     * Map option attributes that can change over time
     */

    AgmMap._mapOptionsAttributes = ['disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl', 'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom', 'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions', 'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions', 'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction'];

    AgmMap.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
    }, {
      type: GoogleMapsAPIWrapper
    }, {
      type: Object,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
      }]
    }, {
      type: FitBoundsService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "longitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "latitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "zoom", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmMap.prototype, "minZoom", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmMap.prototype, "maxZoom", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmMap.prototype, "controlSize", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('mapDraggable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "draggable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "disableDoubleClickZoom", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "disableDefaultUI", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "scrollwheel", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMap.prototype, "backgroundColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMap.prototype, "draggableCursor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMap.prototype, "draggingCursor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "keyboardShortcuts", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], AgmMap.prototype, "zoomControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "zoomControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Array)], AgmMap.prototype, "styles", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "usePanning", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], AgmMap.prototype, "streetViewControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "streetViewControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "fitBounds", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "fitBoundsPadding", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "scaleControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "scaleControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "mapTypeControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "mapTypeControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "panControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "panControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "rotateControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "rotateControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "fullscreenControl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "fullscreenControlOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMap.prototype, "mapTypeId", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "clickableIcons", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "showDefaultInfoWindow", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMap.prototype, "gestureHandling", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "tilt", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMap.prototype, "restriction", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "mapClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "mapRightClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "mapDblClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "centerChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "boundsChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "mapTypeIdChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "idle", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "zoomChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "mapReady", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMap.prototype, "tilesLoaded", void 0);
    AgmMap = AgmMap_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
      selector: 'agm-map',
      providers: [CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager],
      host: {
        // todo: deprecated - we will remove it with the next version
        '[class.sebm-google-map-container]': 'true'
      },
      template: "\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  ",
      styles: ["\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  "]
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(2, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"])), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], GoogleMapsAPIWrapper, Object, FitBoundsService, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]])], AgmMap);
    var AgmMarker_1;
    let markerId = 0;
    /**
     * AgmMarker renders a map marker inside a {@link AgmMap}.
     *
     * ### Example
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *  selector: 'my-map-cmp',
     *  styles: [`
     *    .agm-map-container {
     *      height: 300px;
     *    }
     * `],
     *  template: `
     *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     *      <agm-marker [latitude]="lat" [longitude]="lng" [label]="'M'">
     *      </agm-marker>
     *    </agm-map>
     *  `
     * })
     * ```
     */

    let AgmMarker = AgmMarker_1 = class AgmMarker {
      constructor(_markerManager) {
        this._markerManager = _markerManager;
        /**
         * If true, the marker can be dragged. Default value is false.
         */
        // tslint:disable-next-line:no-input-rename

        this.draggable = false;
        /**
         * If true, the marker is visible
         */

        this.visible = true;
        /**
         * Whether to automatically open the child info window when the marker is clicked.
         */

        this.openInfoWindow = true;
        /**
         * The marker's opacity between 0.0 and 1.0.
         */

        this.opacity = 1;
        /**
         * All markers are displayed on the map in order of their zIndex, with higher values displaying in
         * front of markers with lower values. By default, markers are displayed according to their
         * vertical position on screen, with lower markers appearing in front of markers further up the
         * screen.
         */

        this.zIndex = 1;
        /**
         * If true, the marker can be clicked. Default value is true.
         */
        // tslint:disable-next-line:no-input-rename

        this.clickable = true;
        /**
         * This event is fired when the marker's animation property changes.
         *
         * @memberof AgmMarker
         */

        this.animationChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user clicks on the marker.
         */

        this.markerClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user clicks twice on the marker.
         */

        this.markerDblClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user rightclicks on the marker.
         */

        this.markerRightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user starts dragging the marker.
         */

        this.dragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is repeatedly fired while the user drags the marker.
         */

        this.drag = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user stops dragging the marker.
         */

        this.dragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user mouses over the marker.
         */

        this.mouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user mouses outside the marker.
         */

        this.mouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /** @internal */

        this.infoWindow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]();
        this._markerAddedToManger = false;
        this._observableSubscriptions = [];
        this._fitBoundsDetails$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["ReplaySubject"](1);
        this._id = (markerId++).toString();
      }
      /* @internal */


      ngAfterContentInit() {
        this.handleInfoWindowUpdate();
        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());
      }

      handleInfoWindowUpdate() {
        if (this.infoWindow.length > 1) {
          throw new Error('Expected no more than one info window.');
        }

        this.infoWindow.forEach(marker => {
          marker.hostMarker = this;
        });
      }
      /** @internal */


      ngOnChanges(changes) {
        if (typeof this.latitude === 'string') {
          this.latitude = Number(this.latitude);
        }

        if (typeof this.longitude === 'string') {
          this.longitude = Number(this.longitude);
        }

        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {
          return;
        }

        if (!this._markerAddedToManger) {
          this._markerManager.addMarker(this);

          this._updateFitBoundsDetails();

          this._markerAddedToManger = true;

          this._addEventListeners();

          return;
        }

        if (changes['latitude'] || changes['longitude']) {
          this._markerManager.updateMarkerPosition(this);

          this._updateFitBoundsDetails();
        }

        if (changes['title']) {
          this._markerManager.updateTitle(this);
        }

        if (changes['label']) {
          this._markerManager.updateLabel(this);
        }

        if (changes['draggable']) {
          this._markerManager.updateDraggable(this);
        }

        if (changes['iconUrl']) {
          this._markerManager.updateIcon(this);
        }

        if (changes['opacity']) {
          this._markerManager.updateOpacity(this);
        }

        if (changes['visible']) {
          this._markerManager.updateVisible(this);
        }

        if (changes['zIndex']) {
          this._markerManager.updateZIndex(this);
        }

        if (changes['clickable']) {
          this._markerManager.updateClickable(this);
        }

        if (changes['animation']) {
          this._markerManager.updateAnimation(this);
        }
      }
      /** @internal */


      getFitBoundsDetails$() {
        return this._fitBoundsDetails$.asObservable();
      }

      _updateFitBoundsDetails() {
        this._fitBoundsDetails$.next({
          latLng: {
            lat: this.latitude,
            lng: this.longitude
          }
        });
      }

      _addEventListeners() {
        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {
          if (this.openInfoWindow) {
            this.infoWindow.forEach(infoWindow => infoWindow.open());
          }

          this.markerClick.emit(this);
        });

        this._observableSubscriptions.push(cs);

        const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {
          this.markerDblClick.emit(null);
        });

        this._observableSubscriptions.push(dcs);

        const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {
          this.markerRightClick.emit(null);
        });

        this._observableSubscriptions.push(rc);

        const ds = this._markerManager.createEventObservable('dragstart', this).subscribe(e => {
          this.dragStart.emit({
            coords: {
              lat: e.latLng.lat(),
              lng: e.latLng.lng()
            }
          });
        });

        this._observableSubscriptions.push(ds);

        const d = this._markerManager.createEventObservable('drag', this).subscribe(e => {
          this.drag.emit({
            coords: {
              lat: e.latLng.lat(),
              lng: e.latLng.lng()
            }
          });
        });

        this._observableSubscriptions.push(d);

        const de = this._markerManager.createEventObservable('dragend', this).subscribe(e => {
          this.dragEnd.emit({
            coords: {
              lat: e.latLng.lat(),
              lng: e.latLng.lng()
            }
          });
        });

        this._observableSubscriptions.push(de);

        const mover = this._markerManager.createEventObservable('mouseover', this).subscribe(e => {
          this.mouseOver.emit({
            coords: {
              lat: e.latLng.lat(),
              lng: e.latLng.lng()
            }
          });
        });

        this._observableSubscriptions.push(mover);

        const mout = this._markerManager.createEventObservable('mouseout', this).subscribe(e => {
          this.mouseOut.emit({
            coords: {
              lat: e.latLng.lat(),
              lng: e.latLng.lng()
            }
          });
        });

        this._observableSubscriptions.push(mout);

        const anChng = this._markerManager.createEventObservable('animation_changed', this).subscribe(() => {
          this.animationChange.emit(this.animation);
        });

        this._observableSubscriptions.push(anChng);
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      toString() {
        return 'AgmMarker-' + this._id.toString();
      }
      /** @internal */


      ngOnDestroy() {
        this._markerManager.deleteMarker(this); // unsubscribe all registered observable subscriptions


        this._observableSubscriptions.forEach(s => s.unsubscribe());
      }

    };

    AgmMarker.ctorParameters = () => [{
      type: MarkerManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmMarker.prototype, "latitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmMarker.prototype, "longitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMarker.prototype, "title", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "label", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('markerDraggable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "draggable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMarker.prototype, "iconUrl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "openInfoWindow", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "opacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('markerClickable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "clickable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmMarker.prototype, "animation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmMarker.prototype, "animationChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "markerClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "markerDblClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "markerRightClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "dragStart", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "drag", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "dragEnd", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "mouseOver", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmMarker.prototype, "mouseOut", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(AgmInfoWindow), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"])], AgmMarker.prototype, "infoWindow", void 0);
    AgmMarker = AgmMarker_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-marker',
      providers: [{
        provide: FitBoundsAccessor,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(() => AgmMarker_1)
      }],
      inputs: ['latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl', 'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation'],
      outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut']
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [MarkerManager])], AgmMarker);
    var AgmPolygon_1;
    /**
     * AgmPolygon renders a polygon on a {@link AgmMap}
     *
     * ### Example
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *  selector: 'my-map-cmp',
     *  styles: [`
     *    agm-map {
     *      height: 300px;
     *    }
     * `],
     *  template: `
     *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     *      <agm-polygon [paths]="paths">
     *      </agm-polygon>
     *    </agm-map>
     *  `
     * })
     * export class MyMapCmp {
     *   lat: number = 0;
     *   lng: number = 0;
     *   zoom: number = 10;
     *   paths: Array<LatLngLiteral> = [
     *     { lat: 0,  lng: 10 },
     *     { lat: 0,  lng: 20 },
     *     { lat: 10, lng: 20 },
     *     { lat: 10, lng: 10 },
     *     { lat: 0,  lng: 10 }
     *   ]
     *   // Nesting paths will create a hole where they overlap;
     *   nestedPaths: Array<Array<LatLngLiteral>> = [[
     *     { lat: 0,  lng: 10 },
     *     { lat: 0,  lng: 20 },
     *     { lat: 10, lng: 20 },
     *     { lat: 10, lng: 10 },
     *     { lat: 0,  lng: 10 }
     *   ], [
     *     { lat: 0, lng: 15 },
     *     { lat: 0, lng: 20 },
     *     { lat: 5, lng: 20 },
     *     { lat: 5, lng: 15 },
     *     { lat: 0, lng: 15 }
     *   ]]
     * }
     * ```
     */

    let AgmPolygon = AgmPolygon_1 = class AgmPolygon {
      constructor(_polygonManager) {
        this._polygonManager = _polygonManager;
        /**
         * Indicates whether this Polygon handles mouse events. Defaults to true.
         */

        this.clickable = true;
        /**
         * If set to true, the user can drag this shape over the map. The geodesic
         * property defines the mode of dragging. Defaults to false.
         */
        // tslint:disable-next-line:no-input-rename

        this.draggable = false;
        /**
         * If set to true, the user can edit this shape by dragging the control
         * points shown at the vertices and on each segment. Defaults to false.
         */

        this.editable = false;
        /**
         * When true, edges of the polygon are interpreted as geodesic and will
         * follow the curvature of the Earth. When false, edges of the polygon are
         * rendered as straight lines in screen space. Note that the shape of a
         * geodesic polygon may appear to change when dragged, as the dimensions
         * are maintained relative to the surface of the earth. Defaults to false.
         */

        this.geodesic = false;
        /**
         * The ordered sequence of coordinates that designates a closed loop.
         * Unlike polylines, a polygon may consist of one or more paths.
         *  As a result, the paths property may specify one or more arrays of
         * LatLng coordinates. Paths are closed automatically; do not repeat the
         * first vertex of the path as the last vertex. Simple polygons may be
         * defined using a single array of LatLngs. More complex polygons may
         * specify an array of arrays. Any simple arrays are converted into Arrays.
         * Inserting or removing LatLngs from the Array will automatically update
         * the polygon on the map.
         */

        this.paths = [];
        /**
         * This event is fired when the DOM click event is fired on the Polygon.
         */

        this.polyClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM dblclick event is fired on the Polygon.
         */

        this.polyDblClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is repeatedly fired while the user drags the polygon.
         */

        this.polyDrag = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user stops dragging the polygon.
         */

        this.polyDragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user starts dragging the polygon.
         */

        this.polyDragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousedown event is fired on the Polygon.
         */

        this.polyMouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousemove event is fired on the Polygon.
         */

        this.polyMouseMove = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on Polygon mouseout.
         */

        this.polyMouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on Polygon mouseover.
         */

        this.polyMouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired whe the DOM mouseup event is fired on the Polygon
         */

        this.polyMouseUp = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the Polygon is right-clicked on.
         */

        this.polyRightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired after Polygon first path changes.
         */

        this.polyPathsChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._polygonAddedToManager = false;
        this._subscriptions = [];
      }
      /** @internal */


      ngAfterContentInit() {
        if (!this._polygonAddedToManager) {
          this._init();
        }
      }

      ngOnChanges(changes) {
        if (!this._polygonAddedToManager) {
          this._init();

          return;
        }

        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));
      }

      _init() {
        this._polygonManager.addPolygon(this);

        this._polygonAddedToManager = true;

        this._addEventListeners();
      }

      _addEventListeners() {
        const handlers = [{
          name: 'click',
          handler: ev => this.polyClick.emit(ev)
        }, {
          name: 'dblclick',
          handler: ev => this.polyDblClick.emit(ev)
        }, {
          name: 'drag',
          handler: ev => this.polyDrag.emit(ev)
        }, {
          name: 'dragend',
          handler: ev => this.polyDragEnd.emit(ev)
        }, {
          name: 'dragstart',
          handler: ev => this.polyDragStart.emit(ev)
        }, {
          name: 'mousedown',
          handler: ev => this.polyMouseDown.emit(ev)
        }, {
          name: 'mousemove',
          handler: ev => this.polyMouseMove.emit(ev)
        }, {
          name: 'mouseout',
          handler: ev => this.polyMouseOut.emit(ev)
        }, {
          name: 'mouseover',
          handler: ev => this.polyMouseOver.emit(ev)
        }, {
          name: 'mouseup',
          handler: ev => this.polyMouseUp.emit(ev)
        }, {
          name: 'rightclick',
          handler: ev => this.polyRightClick.emit(ev)
        }];
        handlers.forEach(obj => {
          const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);

          this._subscriptions.push(os);
        });

        this._polygonManager.createPathEventObservable(this).then(paths$ => {
          const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));

          this._subscriptions.push(os);
        });
      }

      _updatePolygonOptions(changes) {
        return Object.keys(changes).filter(k => AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1).reduce((obj, k) => {
          obj[k] = changes[k].currentValue;
          return obj;
        }, {});
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      ngOnDestroy() {
        this._polygonManager.deletePolygon(this); // unsubscribe all registered observable subscriptions


        this._subscriptions.forEach(s => s.unsubscribe());
      }

      getPath() {
        return this._polygonManager.getPath(this);
      }

      getPaths() {
        return this._polygonManager.getPaths(this);
      }

    };
    AgmPolygon._polygonOptionsAttributes = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map', 'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable', 'editable', 'visible'];

    AgmPolygon.ctorParameters = () => [{
      type: PolygonManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolygon.prototype, "clickable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('polyDraggable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolygon.prototype, "draggable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolygon.prototype, "editable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolygon.prototype, "fillColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolygon.prototype, "fillOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolygon.prototype, "geodesic", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Array)], AgmPolygon.prototype, "paths", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolygon.prototype, "strokeColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolygon.prototype, "strokeOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolygon.prototype, "strokeWeight", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], AgmPolygon.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolygon.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyDblClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyDrag", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyDragEnd", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyDragStart", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyMouseDown", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyMouseMove", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyMouseOut", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyMouseOver", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyMouseUp", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolygon.prototype, "polyRightClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolygon.prototype, "polyPathsChange", void 0);
    AgmPolygon = AgmPolygon_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-polygon'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [PolygonManager])], AgmPolygon);
    /**
     * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,
     * or custom icons either along the entire line, or in a specific part of it.
     * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize
     *
     * ### Example
     * ```html
     *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     *      <agm-polyline>
     *          <agm-icon-sequence [fixedRotation]="true" [path]="'FORWARD_OPEN_ARROW'">
     *          </agm-icon-sequence>
     *      </agm-polyline>
     *    </agm-map>
     * ```
     *
     * @export
     * @class AgmPolylineIcon
     */

    let AgmPolylineIcon = class AgmPolylineIcon {
      ngOnInit() {
        if (this.path == null) {
          throw new Error('Icon Sequence path is required');
        }
      }

    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], AgmPolylineIcon.prototype, "fixedRotation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolylineIcon.prototype, "offset", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolylineIcon.prototype, "repeat", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "anchorX", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "anchorY", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolylineIcon.prototype, "fillColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "fillOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolylineIcon.prototype, "path", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "rotation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "scale", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolylineIcon.prototype, "strokeColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "strokeOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylineIcon.prototype, "strokeWeight", void 0);
    AgmPolylineIcon = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-polyline agm-icon-sequence'
    })], AgmPolylineIcon);
    var AgmPolylinePoint_1;
    /**
     * AgmPolylinePoint represents one element of a polyline within a  {@link
     * AgmPolyline}
     */

    let AgmPolylinePoint = AgmPolylinePoint_1 = class AgmPolylinePoint {
      constructor() {
        /**
         * This event emitter gets emitted when the position of the point changed.
         */
        this.positionChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
      }

      ngOnChanges(changes) {
        if (changes['latitude'] || changes['longitude']) {
          const position = {
            lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,
            lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude
          };
          this.positionChanged.emit(position);
        }
      }
      /** @internal */


      getFitBoundsDetails$() {
        return this.positionChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])({
          lat: this.latitude,
          lng: this.longitude
        }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(position => ({
          latLng: position
        })));
      }

    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylinePoint.prototype, "latitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolylinePoint.prototype, "longitude", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolylinePoint.prototype, "positionChanged", void 0);
    AgmPolylinePoint = AgmPolylinePoint_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-polyline-point',
      providers: [{
        provide: FitBoundsAccessor,
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(() => AgmPolylinePoint_1)
      }]
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [])], AgmPolylinePoint);
    var AgmPolyline_1;
    let polylineId = 0;
    /**
     * AgmPolyline renders a polyline on a {@link AgmMap}
     *
     * ### Example
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *  selector: 'my-map-cmp',
     *  styles: [`
     *    .agm-map-container {
     *      height: 300px;
     *    }
     * `],
     *  template: `
     *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
     *      <agm-polyline>
     *          <agm-polyline-point [latitude]="latA" [longitude]="lngA">
     *          </agm-polyline-point>
     *          <agm-polyline-point [latitude]="latB" [longitude]="lngB">
     *          </agm-polyline-point>
     *      </agm-polyline>
     *    </agm-map>
     *  `
     * })
     * ```
     */

    let AgmPolyline = AgmPolyline_1 = class AgmPolyline {
      constructor(_polylineManager) {
        this._polylineManager = _polylineManager;
        /**
         * Indicates whether this Polyline handles mouse events. Defaults to true.
         */

        this.clickable = true;
        /**
         * If set to true, the user can drag this shape over the map. The geodesic property defines the
         * mode of dragging. Defaults to false.
         */
        // tslint:disable-next-line:no-input-rename

        this.draggable = false;
        /**
         * If set to true, the user can edit this shape by dragging the control points shown at the
         * vertices and on each segment. Defaults to false.
         */

        this.editable = false;
        /**
         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of
         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.
         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions
         * are maintained relative to the surface of the earth. Defaults to false.
         */

        this.geodesic = false;
        /**
         * Whether this polyline is visible on the map. Defaults to true.
         */

        this.visible = true;
        /**
         * This event is fired when the DOM click event is fired on the Polyline.
         */

        this.lineClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM dblclick event is fired on the Polyline.
         */

        this.lineDblClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is repeatedly fired while the user drags the polyline.
         */

        this.lineDrag = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user stops dragging the polyline.
         */

        this.lineDragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user starts dragging the polyline.
         */

        this.lineDragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousedown event is fired on the Polyline.
         */

        this.lineMouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousemove event is fired on the Polyline.
         */

        this.lineMouseMove = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on Polyline mouseout.
         */

        this.lineMouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on Polyline mouseover.
         */

        this.lineMouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired whe the DOM mouseup event is fired on the Polyline
         */

        this.lineMouseUp = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the Polyline is right-clicked on.
         */

        this.lineRightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired after Polyline's path changes.
         */

        this.polyPathChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._polylineAddedToManager = false;
        this._subscriptions = [];
        this._id = (polylineId++).toString();
      }
      /** @internal */


      ngAfterContentInit() {
        if (this.points.length) {
          this.points.forEach(point => {
            const s = point.positionChanged.subscribe(() => {
              this._polylineManager.updatePolylinePoints(this);
            });

            this._subscriptions.push(s);
          });
        }

        if (!this._polylineAddedToManager) {
          this._init();
        }

        const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));

        this._subscriptions.push(pointSub);

        this._polylineManager.updatePolylinePoints(this);

        const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));

        this._subscriptions.push(iconSub);
      }

      ngOnChanges(changes) {
        if (!this._polylineAddedToManager) {
          this._init();

          return;
        }

        let options = {};
        const optionKeys = Object.keys(changes).filter(k => AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1);
        optionKeys.forEach(k => options[k] = changes[k].currentValue);

        this._polylineManager.setPolylineOptions(this, options);
      }

      getPath() {
        return this._polylineManager.getPath(this);
      }

      _init() {
        this._polylineManager.addPolyline(this);

        this._polylineAddedToManager = true;

        this._addEventListeners();
      }

      _addEventListeners() {
        const handlers = [{
          name: 'click',
          handler: ev => this.lineClick.emit(ev)
        }, {
          name: 'dblclick',
          handler: ev => this.lineDblClick.emit(ev)
        }, {
          name: 'drag',
          handler: ev => this.lineDrag.emit(ev)
        }, {
          name: 'dragend',
          handler: ev => this.lineDragEnd.emit(ev)
        }, {
          name: 'dragstart',
          handler: ev => this.lineDragStart.emit(ev)
        }, {
          name: 'mousedown',
          handler: ev => this.lineMouseDown.emit(ev)
        }, {
          name: 'mousemove',
          handler: ev => this.lineMouseMove.emit(ev)
        }, {
          name: 'mouseout',
          handler: ev => this.lineMouseOut.emit(ev)
        }, {
          name: 'mouseover',
          handler: ev => this.lineMouseOver.emit(ev)
        }, {
          name: 'mouseup',
          handler: ev => this.lineMouseUp.emit(ev)
        }, {
          name: 'rightclick',
          handler: ev => this.lineRightClick.emit(ev)
        }];
        handlers.forEach(obj => {
          const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);

          this._subscriptions.push(os);
        });

        this._polylineManager.createPathEventObservable(this).then(ob$ => {
          const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));

          this._subscriptions.push(os);
        });
      }
      /** @internal */


      _getPoints() {
        if (this.points) {
          return this.points.toArray();
        }

        return [];
      }

      _getIcons() {
        if (this.iconSequences) {
          return this.iconSequences.toArray();
        }

        return [];
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      ngOnDestroy() {
        this._polylineManager.deletePolyline(this); // unsubscribe all registered observable subscriptions


        this._subscriptions.forEach(s => s.unsubscribe());
      }

    };
    AgmPolyline._polylineOptionsAttributes = ['draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'zIndex'];

    AgmPolyline.ctorParameters = () => [{
      type: PolylineManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolyline.prototype, "clickable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('polylineDraggable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolyline.prototype, "draggable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolyline.prototype, "editable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolyline.prototype, "geodesic", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmPolyline.prototype, "strokeColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolyline.prototype, "strokeOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolyline.prototype, "strokeWeight", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolyline.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmPolyline.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineDblClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineDrag", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineDragEnd", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineDragStart", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineMouseDown", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineMouseMove", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineMouseOut", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineMouseOver", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineMouseUp", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmPolyline.prototype, "lineRightClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmPolyline.prototype, "polyPathChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(AgmPolylinePoint), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"])], AgmPolyline.prototype, "points", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"])(AgmPolylineIcon), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"])], AgmPolyline.prototype, "iconSequences", void 0);
    AgmPolyline = AgmPolyline_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-polyline'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [PolylineManager])], AgmPolyline);
    var AgmRectangle_1;
    let AgmRectangle = AgmRectangle_1 = class AgmRectangle {
      constructor(_manager) {
        this._manager = _manager;
        /**
         * Indicates whether this Rectangle handles mouse events. Defaults to true.
         */

        this.clickable = true;
        /**
         * If set to true, the user can drag this rectangle over the map. Defaults to false.
         */
        // tslint:disable-next-line:no-input-rename

        this.draggable = false;
        /**
         * If set to true, the user can edit this rectangle by dragging the control points shown at
         * the center and around the circumference of the rectangle. Defaults to false.
         */

        this.editable = false;
        /**
         * The stroke position. Defaults to CENTER.
         * This property is not supported on Internet Explorer 8 and earlier.
         */

        this.strokePosition = 'CENTER';
        /**
         * The stroke width in pixels.
         */

        this.strokeWeight = 0;
        /**
         * Whether this rectangle is visible on the map. Defaults to true.
         */

        this.visible = true;
        /**
         * This event is fired when the rectangle's is changed.
         */

        this.boundsChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user clicks on the rectangle.
         */

        this.rectangleClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event emitter gets emitted when the user clicks on the rectangle.
         */

        this.rectangleDblClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is repeatedly fired while the user drags the rectangle.
         */

        this.drag = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user stops dragging the rectangle.
         */

        this.dragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the user starts dragging the rectangle.
         */

        this.dragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousedown event is fired on the rectangle.
         */

        this.mouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mousemove event is fired on the rectangle.
         */

        this.mouseMove = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on rectangle mouseout.
         */

        this.mouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired on rectangle mouseover.
         */

        this.mouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the DOM mouseup event is fired on the rectangle.
         */

        this.mouseUp = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * This event is fired when the rectangle is right-clicked on.
         */

        this.rightClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._rectangleAddedToManager = false;
        this._eventSubscriptions = [];
      }
      /** @internal */


      ngOnInit() {
        this._manager.addRectangle(this);

        this._rectangleAddedToManager = true;

        this._registerEventListeners();
      }
      /** @internal */


      ngOnChanges(changes) {
        if (!this._rectangleAddedToManager) {
          return;
        }

        if (changes['north'] || changes['east'] || changes['south'] || changes['west']) {
          this._manager.setBounds(this);
        }

        if (changes['editable']) {
          this._manager.setEditable(this);
        }

        if (changes['draggable']) {
          this._manager.setDraggable(this);
        }

        if (changes['visible']) {
          this._manager.setVisible(this);
        }

        this._updateRectangleOptionsChanges(changes);
      }

      _updateRectangleOptionsChanges(changes) {
        let options = {};
        let optionKeys = Object.keys(changes).filter(k => AgmRectangle_1._mapOptions.indexOf(k) !== -1);
        optionKeys.forEach(k => {
          options[k] = changes[k].currentValue;
        });

        if (optionKeys.length > 0) {
          this._manager.setOptions(this, options);
        }
      }

      _registerEventListeners() {
        let events = new Map();
        events.set('bounds_changed', this.boundsChange);
        events.set('click', this.rectangleClick);
        events.set('dblclick', this.rectangleDblClick);
        events.set('drag', this.drag);
        events.set('dragend', this.dragEnd);
        events.set('dragStart', this.dragStart);
        events.set('mousedown', this.mouseDown);
        events.set('mousemove', this.mouseMove);
        events.set('mouseout', this.mouseOut);
        events.set('mouseover', this.mouseOver);
        events.set('mouseup', this.mouseUp);
        events.set('rightclick', this.rightClick);
        events.forEach((eventEmitter, eventName) => {
          this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe(value => {
            switch (eventName) {
              case 'bounds_changed':
                this._manager.getBounds(this).then(bounds => eventEmitter.emit({
                  north: bounds.getNorthEast().lat(),
                  east: bounds.getNorthEast().lng(),
                  south: bounds.getSouthWest().lat(),
                  west: bounds.getSouthWest().lng()
                }));

                break;

              default:
                eventEmitter.emit({
                  coords: {
                    lat: value.latLng.lat(),
                    lng: value.latLng.lng()
                  }
                });
            }
          }));
        });
      }
      /** @internal */


      ngOnDestroy() {
        this._eventSubscriptions.forEach(function (s) {
          s.unsubscribe();
        });

        this._eventSubscriptions = null;

        this._manager.removeRectangle(this);
      }
      /**
       * Gets the LatLngBounds of this Rectangle.
       */


      getBounds() {
        return this._manager.getBounds(this);
      }

    };
    AgmRectangle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];

    AgmRectangle.ctorParameters = () => [{
      type: RectangleManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "north", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "east", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "south", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "west", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmRectangle.prototype, "clickable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])('rectangleDraggable'), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmRectangle.prototype, "draggable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmRectangle.prototype, "editable", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmRectangle.prototype, "fillColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "fillOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmRectangle.prototype, "strokeColor", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "strokeOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], AgmRectangle.prototype, "strokePosition", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmRectangle.prototype, "strokeWeight", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmRectangle.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], AgmRectangle.prototype, "zIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "boundsChange", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "rectangleClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "rectangleDblClick", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "drag", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "dragEnd", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "dragStart", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "mouseDown", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "mouseMove", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "mouseOut", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "mouseOver", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "mouseUp", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])], AgmRectangle.prototype, "rightClick", void 0);
    AgmRectangle = AgmRectangle_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-rectangle'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [RectangleManager])], AgmRectangle);
    let layerId$3 = 0;
    /*
     * This directive adds a transit layer to a google map instance
     * <agm-transit-layer [visible]="true|false"> <agm-transit-layer>
     * */

    let AgmTransitLayer = class AgmTransitLayer {
      constructor(_manager) {
        this._manager = _manager;
        this._addedToManager = false;
        this._id = (layerId$3++).toString();
        /**
         * Hide/show transit layer
         */

        this.visible = true;
      }

      ngOnInit() {
        if (this._addedToManager) {
          return;
        }

        this._manager.addTransitLayer(this, {
          visible: this.visible
        });

        this._addedToManager = true;
      }

      ngOnChanges(changes) {
        if (!this._addedToManager) {
          return;
        }

        if (changes['visible'] != null) {
          this._manager.toggleLayerVisibility(this, {
            visible: changes['visible'].currentValue
          });
        }
      }
      /** @internal */


      id() {
        return this._id;
      }
      /** @internal */


      toString() {
        return "AgmTransitLayer-".concat(this._id.toString());
      }
      /** @internal */


      ngOnDestroy() {
        this._manager.deleteLayer(this);
      }

    };

    AgmTransitLayer.ctorParameters = () => [{
      type: LayerManager
    }];

    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], AgmTransitLayer.prototype, "visible", void 0);
    AgmTransitLayer = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
      selector: 'agm-transit-layer'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [LayerManager])], AgmTransitLayer);
    var google$1;
    var SymbolPath;

    (function (SymbolPath) {
      SymbolPath[SymbolPath["BACKWARD_CLOSED_ARROW"] = 3] = "BACKWARD_CLOSED_ARROW";
      SymbolPath[SymbolPath["BACKWARD_OPEN_ARROW"] = 4] = "BACKWARD_OPEN_ARROW";
      SymbolPath[SymbolPath["CIRCLE"] = 0] = "CIRCLE";
      SymbolPath[SymbolPath["FORWARD_CLOSED_ARROW"] = 1] = "FORWARD_CLOSED_ARROW";
      SymbolPath[SymbolPath["FORWARD_OPEN_ARROW"] = 2] = "FORWARD_OPEN_ARROW";
    })(SymbolPath || (SymbolPath = {}));
    /**
     * Identifiers used to specify the placement of controls on the map. Controls are
     * positioned relative to other controls in the same layout position. Controls that
     * are added first are positioned closer to the edge of the map.
     */


    var ControlPosition;

    (function (ControlPosition) {
      ControlPosition[ControlPosition["RIGHT_BOTTOM"] = 0] = "RIGHT_BOTTOM";
      ControlPosition[ControlPosition["TOP_LEFT"] = 1] = "TOP_LEFT";
      ControlPosition[ControlPosition["TOP_CENTER"] = 2] = "TOP_CENTER";
      ControlPosition[ControlPosition["TOP_RIGHT"] = 3] = "TOP_RIGHT";
      ControlPosition[ControlPosition["LEFT_CENTER"] = 4] = "LEFT_CENTER";
      ControlPosition[ControlPosition["LEFT_TOP"] = 5] = "LEFT_TOP";
      ControlPosition[ControlPosition["LEFT_BOTTOM"] = 6] = "LEFT_BOTTOM";
      ControlPosition[ControlPosition["RIGHT_TOP"] = 7] = "RIGHT_TOP";
      ControlPosition[ControlPosition["RIGHT_CENTER"] = 8] = "RIGHT_CENTER";
      ControlPosition[ControlPosition["BOTTOM_RIGHT"] = 9] = "BOTTOM_RIGHT";
      ControlPosition[ControlPosition["BOTTOM_LEFT"] = 10] = "BOTTOM_LEFT";
      ControlPosition[ControlPosition["BOTTOM_CENTER"] = 11] = "BOTTOM_CENTER";
    })(ControlPosition || (ControlPosition = {}));

    var MapTypeId;

    (function (MapTypeId) {
      /** This map type displays a transparent layer of major streets on satellite images. */
      MapTypeId[MapTypeId["HYBRID"] = 0] = "HYBRID";
      /** This map type displays a normal street map. */

      MapTypeId[MapTypeId["ROADMAP"] = 1] = "ROADMAP";
      /** This map type displays satellite images. */

      MapTypeId[MapTypeId["SATELLITE"] = 2] = "SATELLITE";
      /** This map type displays maps with physical features such as terrain and vegetation. */

      MapTypeId[MapTypeId["TERRAIN"] = 3] = "TERRAIN";
    })(MapTypeId || (MapTypeId = {}));

    var MapTypeControlStyle;

    (function (MapTypeControlStyle) {
      MapTypeControlStyle[MapTypeControlStyle["DEFAULT"] = 0] = "DEFAULT";
      MapTypeControlStyle[MapTypeControlStyle["DROPDOWN_MENU"] = 2] = "DROPDOWN_MENU";
      MapTypeControlStyle[MapTypeControlStyle["HORIZONTAL_BAR"] = 1] = "HORIZONTAL_BAR";
    })(MapTypeControlStyle || (MapTypeControlStyle = {}));

    var ScaleControlStyle;

    (function (ScaleControlStyle) {
      ScaleControlStyle[ScaleControlStyle["DEFAULT"] = 0] = "DEFAULT";
    })(ScaleControlStyle || (ScaleControlStyle = {}));

    var ZoomControlStyle;

    (function (ZoomControlStyle) {
      ZoomControlStyle[ZoomControlStyle["DEFAULT"] = 0] = "DEFAULT";
      ZoomControlStyle[ZoomControlStyle["LARGE"] = 1] = "LARGE";
      ZoomControlStyle[ZoomControlStyle["SMALL"] = 2] = "SMALL";
    })(ZoomControlStyle || (ZoomControlStyle = {}));

    var GeocoderLocationType;

    (function (GeocoderLocationType) {
      GeocoderLocationType["APPROXIMATE"] = "APPROXIMATE";
      GeocoderLocationType["GEOMETRIC_CENTER"] = "GEOMETRIC_CENTER";
      GeocoderLocationType["RANGE_INTERPOLATED"] = "RANGE_INTERPOLATED";
      GeocoderLocationType["ROOFTOP"] = "ROOFTOP";
    })(GeocoderLocationType || (GeocoderLocationType = {}));

    var GeocoderStatus;

    (function (GeocoderStatus) {
      GeocoderStatus["ERROR"] = "ERROR";
      GeocoderStatus["INVALID_REQUEST"] = "INVALID_REQUEST";
      GeocoderStatus["OK"] = "OK";
      GeocoderStatus["OVER_QUERY_LIMIT"] = "OVER_QUERY_LIMIT";
      GeocoderStatus["REQUEST_DENIED"] = "REQUEST_DENIED";
      GeocoderStatus["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      GeocoderStatus["ZERO_RESULTS"] = "ZERO_RESULTS";
    })(GeocoderStatus || (GeocoderStatus = {}));

    let AgmGeocoder = class AgmGeocoder {
      constructor(loader) {
        const connectableGeocoder$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](subscriber => {
          loader.load().then(() => subscriber.next());
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(() => this._createGeocoder()), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["multicast"])(new rxjs__WEBPACK_IMPORTED_MODULE_2__["ReplaySubject"](1)));
        connectableGeocoder$.connect(); // ignore the subscription
        // since we will remain subscribed till application exits

        this.geocoder$ = connectableGeocoder$;
      }

      geocode(request) {
        return this.geocoder$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(geocoder => this._getGoogleResults(geocoder, request)));
      }

      _getGoogleResults(geocoder, request) {
        const geocodeObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["bindCallback"])(geocoder.geocode);
        return geocodeObservable(request).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(([results, status]) => {
          if (status === GeocoderStatus.OK) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(results);
          }

          return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["throwError"])(status);
        }));
      }

      _createGeocoder() {
        return new google.maps.Geocoder();
      }

    };

    AgmGeocoder.ctorParameters = () => [{
      type: MapsAPILoader
    }];

    AgmGeocoder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function AgmGeocoder_Factory() {
        return new AgmGeocoder(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MapsAPILoader));
      },
      token: AgmGeocoder,
      providedIn: "root"
    });
    AgmGeocoder = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [MapsAPILoader])], AgmGeocoder);

    class WindowRef {
      getNativeWindow() {
        return window;
      }

    }

    class DocumentRef {
      getNativeDocument() {
        return document;
      }

    }

    const BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];
    var GoogleMapsScriptProtocol;

    (function (GoogleMapsScriptProtocol) {
      GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTP"] = 1] = "HTTP";
      GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTPS"] = 2] = "HTTPS";
      GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["AUTO"] = 3] = "AUTO";
    })(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));
    /**
     * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link
     * LazyMapsAPILoaderConfig}.
     */


    const LAZY_MAPS_API_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('angular-google-maps LAZY_MAPS_API_CONFIG');
    let LazyMapsAPILoader = class LazyMapsAPILoader extends MapsAPILoader {
      constructor(config = null, w, d, localeId) {
        super();
        this.localeId = localeId;
        this._SCRIPT_ID = 'agmGoogleMapsApiScript';
        this.callbackName = "agmLazyMapsAPILoader";
        this._config = config || {};
        this._windowRef = w;
        this._documentRef = d;
      }

      load() {
        const window = this._windowRef.getNativeWindow();

        if (window.google && window.google.maps) {
          // Google maps already loaded on the page.
          return Promise.resolve();
        }

        if (this._scriptLoadingPromise) {
          return this._scriptLoadingPromise;
        } // this can happen in HMR situations or Stackblitz.io editors.


        const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);

        if (scriptOnPage) {
          this._assignScriptLoadingPromise(scriptOnPage);

          return this._scriptLoadingPromise;
        }

        const script = this._documentRef.getNativeDocument().createElement('script');

        script.type = 'text/javascript';
        script.async = true;
        script.defer = true;
        script.id = this._SCRIPT_ID;
        script.src = this._getScriptSrc(this.callbackName);

        this._assignScriptLoadingPromise(script);

        this._documentRef.getNativeDocument().body.appendChild(script);

        return this._scriptLoadingPromise;
      }

      _assignScriptLoadingPromise(scriptElem) {
        this._scriptLoadingPromise = new Promise((resolve, reject) => {
          this._windowRef.getNativeWindow()[this.callbackName] = () => {
            resolve();
          };

          scriptElem.onerror = error => {
            reject(error);
          };
        });
      }

      _getScriptSrc(callbackName) {
        let protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;
        let protocol;

        switch (protocolType) {
          case GoogleMapsScriptProtocol.AUTO:
            protocol = '';
            break;

          case GoogleMapsScriptProtocol.HTTP:
            protocol = 'http:';
            break;

          case GoogleMapsScriptProtocol.HTTPS:
            protocol = 'https:';
            break;
        }

        const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';
        const queryParams = {
          v: this._config.apiVersion || 'quarterly',
          callback: callbackName,
          key: this._config.apiKey,
          client: this._config.clientId,
          channel: this._config.channel,
          libraries: this._config.libraries,
          region: this._config.region,
          language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null
        };
        const params = Object.keys(queryParams).filter(k => queryParams[k] != null).filter(k => {
          // remove empty arrays
          return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;
        }).map(k => {
          // join arrays as comma seperated strings
          let i = queryParams[k];

          if (Array.isArray(i)) {
            return {
              key: k,
              value: i.join(',')
            };
          }

          return {
            key: k,
            value: queryParams[k]
          };
        }).map(entry => {
          return "".concat(entry.key, "=").concat(entry.value);
        }).join('&');
        return "".concat(protocol, "//").concat(hostAndPath, "?").concat(params);
      }

    };

    LazyMapsAPILoader.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [LAZY_MAPS_API_CONFIG]
      }]
    }, {
      type: WindowRef
    }, {
      type: DocumentRef
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"]]
      }]
    }];

    LazyMapsAPILoader = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"])()), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(LAZY_MAPS_API_CONFIG)), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__param"])(3, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["LOCALE_ID"])), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [Object, WindowRef, DocumentRef, String])], LazyMapsAPILoader);
    /**
     * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`
     * Tag.
     * It's important that the Google Maps API script gets loaded first on the page.
     */

    class NoOpMapsAPILoader {
      load() {
        if (!window.google || !window.google.maps) {
          throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');
        }

        return Promise.resolve();
      }

    } // exported map types


    var AgmCoreModule_1;
    /**
     * @internal
     */

    function coreDirectives() {
      return [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer];
    }
    /**
     * The angular-google-maps core module. Contains all Directives/Services/Pipes
     * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.
     */


    let AgmCoreModule = AgmCoreModule_1 = class AgmCoreModule {
      /**
       * Please use this method when you register the module at the root level.
       */
      static forRoot(lazyMapsAPILoaderConfig) {
        return {
          ngModule: AgmCoreModule_1,
          providers: [...BROWSER_GLOBALS_PROVIDERS, {
            provide: MapsAPILoader,
            useClass: LazyMapsAPILoader
          }, {
            provide: LAZY_MAPS_API_CONFIG,
            useValue: lazyMapsAPILoaderConfig
          }]
        };
      }

    };
    AgmCoreModule = AgmCoreModule_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
      declarations: coreDirectives(),
      exports: coreDirectives()
    })], AgmCoreModule); // main modules

    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=agm-core.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/Base.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/Base.js ***!
    \*****************************************************************/

  /*! exports provided: BaseObject, BaseObjectEvents */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreBaseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BaseObject", function () {
      return BaseObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BaseObjectEvents", function () {
      return BaseObjectEvents;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_SortedList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./utils/SortedList */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Cache__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./utils/Cache */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Base functionality
    */
    //import * as $debug from "./utils/Debug";

    /**
     * Provides base functionality for all derivative objects, like generating ids,
     * handling cache, etc.
     */


    var BaseObject =
    /** @class */
    function () {
      //protected _classes: { [index: string]: any } = {};

      /**
       * Constructor
       * * Sets class name
       */
      function BaseObject() {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         */
        this._disposed = false;
        /**
         * List of IDisposer which will be disposed when the BaseObject is disposed.
         */

        this._disposers = [];
        this.className = "BaseObject"; //this.debug();
      }

      BaseObject.prototype.debug = function () {//$debug.debug(this);
      };

      Object.defineProperty(BaseObject.prototype, "uid", {
        /**
         * Returns object's internal unique ID.
         *
         * @return Unique ID
         */
        get: function get() {
          if (!this._uid) {
            this._uid = _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].getUniqueId();

            _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].map.setKey(this._uid, this);
          }

          return this._uid;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BaseObject.prototype, "id", {
        /**
         * @return Id
         */
        get: function get() {
          return this._id;
        },

        /**
         * Sets the user-defined id of the element.
         *
         * @param value Id
         */
        set: function set(value) {
          //registry.map.setKey(value, this); // registry.map only stores by uid
          this._id = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BaseObject.prototype, "map", {
        /**
         * Returns a universal collection for mapping ids with objects.
         *
         * @ignore Exclude from docs
         * @return Map collection
         */
        get: function get() {
          if (!this._map) {
            this._map = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_3__["Dictionary"]();
          }

          return this._map;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BaseObject.prototype, "delayedMap", {
        /**
         * Returns mapping for objects referenced by id in JSON config that are not yet
         * available at processing time.
         *
         * @ignore Exclude from docs
         * @return Map collection
         */
        get: function get() {
          if (!this._delayedMap) {
            this._delayedMap = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_3__["Dictionary"]();
          }

          return this._delayedMap;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Logs an id and property of the target element that is not yet available
       * for later assignment.
       *
       * @ignore
       * @param  property  Property to set
       * @param  id        ID of the target element
       */

      BaseObject.prototype.addDelayedMap = function (property, id) {
        var map = this.delayedMap;

        if (!map.hasKey(id)) {
          map.setKey(id, []);
        }

        var list = map.getKey(id);
        list.push({
          property: property,
          target: this
        });
      };
      /**
       * Processes delayed JSON config items.
       *
       * @ignore
       */


      BaseObject.prototype.processDelayedMap = function () {
        var _this = this;

        this.delayedMap.each(function (id, list) {
          if (_this.map.hasKey(id)) {
            var target_1 = _this.map.getKey(id);

            _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](list, function (item) {
              item.target[item.property] = target_1;
            });

            _this.delayedMap.removeKey(id);
          }
        });
      };
      /**
       * Applies properties from all assigned themes.
       *
       * @ignore Exclude from docs
       */


      BaseObject.prototype.applyTheme = function () {
        var _this = this; // TODO is this needed ?


        if (_Registry__WEBPACK_IMPORTED_MODULE_9__["registry"]) {
          var themes = this.getCurrentThemes(); // TODO is this needed ?

          if (themes) {
            _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](themes, function (theme, index) {
              theme(_this);
            });
          }
        }
      };

      Object.defineProperty(BaseObject.prototype, "themes", {
        /**
         * @ignore Exclude from docs
         * @return An array of themes
         */
        get: function get() {
          return this._themes;
        },

        /**
         * A list of themes to be used for this element.
         *
         * @ignore Exclude from docs
         * @param value An array of themes
         */
        set: function set(value) {
          this._themes = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns a list of themes that should be applied to this element. It could
       * either be a list of themes set explicitly on this element, or system-wide.
       *
       * @return List of themes
       */

      BaseObject.prototype.getCurrentThemes = function () {
        return this.themes || _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].themes;
      };
      /**
       * Returns if this object has been already been disposed.
       *
       * @return Is disposed?
       */


      BaseObject.prototype.isDisposed = function () {
        return this._disposed;
      };
      /**
       * Destroys this object and all related data.
       */


      BaseObject.prototype.dispose = function () {
        if (!this._disposed) {
          this._disposed = true;
          var a = this._disposers;
          this._disposers = null;

          while (a.length !== 0) {
            var disposer = a.shift();
            disposer.dispose();
          } // Clear cache


          this.clearCache(); // remove from clones list

          if (this.clonedFrom) {
            this.clonedFrom.clones.removeValue(this);
          }

          var uid = this._uid;

          if (uid != null) {
            _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].map.removeKey(uid);
          }
        }
      };
      /**
       * Adds an IDisposer, which will be disposed when this object is disposed.
       *
       * @param target Object to dispose
       * @ignore Exclude from docs
       */


      BaseObject.prototype.addDisposer = function (target) {
        this._disposers.push(target);
      };
      /**
       * Disposes disposable object and removes it from `_disposers`.
       *
       * @param target Object to dispose
       * @ignore Exclude from docs
       */


      BaseObject.prototype.removeDispose = function (target) {
        //if(target){
        if (!this._disposed) {
          var index = _utils_Array__WEBPACK_IMPORTED_MODULE_11__["indexOf"](this._disposers, target);

          if (index > -1) {
            this._disposers.splice(index, 1);
          }
        }

        target.dispose(); //}
      };
      /**
       * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.
       *
       * @param cloneId  An id to use for clone (if not set a unique id will be generated)
       * @returns Clone
       */


      BaseObject.prototype.clone = function (cloneId) {
        if (!cloneId) {
          cloneId = "clone-" + _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].getUniqueId();
        }

        var newObject = new this.constructor();
        newObject.cloneId = cloneId;
        newObject.copyFrom(this); // add to clones list
        // this.clones.push(newObject); // moved this to copyFrom

        return newObject;
      };

      Object.defineProperty(BaseObject.prototype, "clones", {
        /**
         * Returns a collection of object's clones.
         *
         * @ignore Exclude from docs
         * @return Clones
         */
        get: function get() {
          if (!this._clones) {
            this._clones = new _utils_List__WEBPACK_IMPORTED_MODULE_1__["List"]();
          }

          return this._clones;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all properties and related data from different element.
       *
       * @param object Source element
       */

      BaseObject.prototype.copyFrom = function (object) {
        object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.

        this.clonedFrom = object;
      };

      Object.defineProperty(BaseObject.prototype, "className", {
        /**
         * @ignore Exclude from docs
         * @return Class name
         */
        get: function get() {
          return this._className;
        },

        /**
         * Element's class name. (a class that was used to instantiate the element)
         *
         * @ignore Exclude from docs
         * @param value  Class name
         */
        set: function set(value) {
          this._className = value;
          /*if (registry) {
              registry.registeredClasses[value] = typeof this;
          }*/
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Caches value in object's cache.
       *
       * @ignore Exclude from docs
       * @param key    Key
       * @param value  Value
       * @param ttl    TTL in seconds
       */

      BaseObject.prototype.setCache = function (key, value, ttl) {
        _utils_Cache__WEBPACK_IMPORTED_MODULE_10__["cache"].set(this.uid, key, value, ttl);
      };
      /**
       * Retrieves cached value.
       *
       * If optional second padarameter is specified, it will return that value
       * if cache is not available or is expired.
       *
       * @ignore Exclude from docs
       * @param key    Key
       * @param value  Value to return if cache is not available
       * @return Value
       */


      BaseObject.prototype.getCache = function (key, value) {
        if (value === void 0) {
          value = undefined;
        }

        return _utils_Cache__WEBPACK_IMPORTED_MODULE_10__["cache"].get(this.uid, key, value);
      };
      /**
       * Clears object's local cache.
       *
       * @ignore Exclude from docs
       */


      BaseObject.prototype.clearCache = function () {
        _utils_Cache__WEBPACK_IMPORTED_MODULE_10__["cache"].clear(this.uid);
      };
      /**
       * Creates [[Disposer]] for `setTimeout` function call. This ensures that all
       * timeouts created by the object will be cleared when object itself is
       * disposed.
       *
       * @ignore Exclude from docs
       * @param fn     Callback function
       * @param delay  Timeout (ms)
       * @return Disposer for timeout
       */


      BaseObject.prototype.setTimeout = function (fn, delay) {
        var _this = this;

        var id = setTimeout(function () {
          _this.removeDispose(disposer);

          fn();
        }, delay);
        var disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["Disposer"](function () {
          clearTimeout(id);
        });

        this._disposers.push(disposer);

        return disposer;
      };
      /**
       * Creates [[Disposer]] for `setInterval` function call. This ensures that all
       * timeouts created by the object will be cleared when object itself is
       * disposed.
       *
       * @ignore Exclude from docs
       * @param fn     Callback function
       * @param delay  Timeout (ms)
       * @return Disposer for timeout
       */


      BaseObject.prototype.setInterval = function (fn, delay) {
        var _this = this;

        var id = setInterval(function () {
          _this.removeDispose(disposer);

          fn();
        }, delay);
        var disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["Disposer"](function () {
          clearTimeout(id);
        });

        this._disposers.push(disposer);

        return disposer;
      };

      Object.defineProperty(BaseObject.prototype, "config", {
        /**
         * ==========================================================================
         * JSON-BASED CONFIG PROCESSING
         * ==========================================================================
         * @hidden
         */

        /**
         * Use this property to set JSON-based config. When set, triggers processing
         * routine, which will go through all properties, and try to apply values,
         * create instances, etc.
         *
         * Use this with caution, as it is a time-consuming process. It's used for
         * initialchart setup only, not routine operations.
         *
         * @param json JSON config
         */
        set: function set(config) {
          try {
            this.processConfig(config);
          } catch (e) {
            /*if (this instanceof Sprite) {
                this.raiseCriticalError(e);
            }*/
            this.raiseCriticalError(e);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Processes the JSON config.
       *
       * @param json  JSON config
       * @ignore Exclude from docs
       */

      BaseObject.prototype.processConfig = function (config) {
        var _this = this;

        if (!config) {
          return;
        } // Get target


        var target = this; // Iterate through all of the items

        _utils_Object__WEBPACK_IMPORTED_MODULE_12__["eachOrdered"](config, function (configKey, value) {
          var configValue = value; // Is this a callback?

          if (configKey == "callback" && typeof value == "function") {
            value.call(target);
          } // Check if there's a property in target


          if (_this.hasProperty(configKey)) {
            var item_1; // Do we have instructions to create an object?
            // We create a new object if "type" key is set, but only if the
            // target object is of different type.

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](configValue) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](configValue["type"]) && (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](target[configKey]) || !_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](target[configKey].className) || configValue["forceCreate"] || target[configKey].className != configValue["type"]) && !_this.asIs(configKey)) {
              item_1 = _this.createClassInstance(configValue["type"]); // Create new instance

              if (item_1) {
                target[configKey] = item_1;
              } else {
                item_1 = target[configKey];
              }
            } else {
              // Get item from the object
              item_1 = target[configKey];
            }
            /**
             * It is...
             * --------------------------------------------------------------------
             */


            if (item_1 instanceof _utils_Adapter__WEBPACK_IMPORTED_MODULE_6__["Adapter"]) {
              // ... an Adapter, try to add handlers to it
              // ------------------------------------------------------------------
              _this.processAdapters(item_1, configValue);
            } else if (item_1 instanceof _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_5__["EventDispatcher"]) {
              // ... an EventDispatcher, try to add handlers to it
              // ------------------------------------------------------------------
              _this.processEvents(item_1, configValue);
            } else if (configKey == "locale" && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isString"](configValue)) {
              // ... a locale specified as string, e.g. "fr_FR"
              // ------------------------------------------------------------------
              if (document["am4lang_" + configValue]) {
                target[configKey] = document["am4lang_" + configValue];
              }
            } else if (configKey == "parent" && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isString"](configValue)) {
              // ... a parent referred via its it
              // ------------------------------------------------------------------
              var parent_1 = _this.map.getKey(configValue);

              if (parent_1) {
                target[configKey] = parent_1;
              } else {
                _this.addDelayedMap("parent", configValue);
              }
            } else if (_this.asIs(configKey)) {
              // ... a special field, just set it to new value
              // ------------------------------------------------------------------
              // (no need to add each indvidual item)
              target[configKey] = configValue;
            } else if (_this.asFunction(configKey) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isString"](configValue)) {
              // ... a field indicating function name to look for in registry
              // ------------------------------------------------------------------
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](_Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses[configValue])) {
                target[configKey] = _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses[configValue];
              } else {
                throw Error("Invalid easing function: " + configValue);
              }
            } else if (configValue instanceof BaseObject) {
              // ... a BaseObject object, we just going to use it as it is
              // ------------------------------------------------------------------
              target[configKey] = configValue;
            } else if (item_1 instanceof BaseObject) {
              // ... another child BaseObject
              // ------------------------------------------------------------------
              // Let's just pass in config part in and let itself deal with it
              item_1.config = configValue;
            } else if (item_1 instanceof _utils_List__WEBPACK_IMPORTED_MODULE_1__["ListTemplate"] || item_1 instanceof _utils_SortedList__WEBPACK_IMPORTED_MODULE_2__["OrderedListTemplate"] || item_1 instanceof _utils_SortedList__WEBPACK_IMPORTED_MODULE_2__["SortedListTemplate"]) {
              // ... a list with template
              // ------------------------------------------------------------------
              // Let's see what we can do with it
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isArray"](configValue)) {
                // It's an array.
                // Create a list item for entry, or try to apply properties to an
                // existing entry if possible and it is present.
                if (item_1 instanceof _utils_List__WEBPACK_IMPORTED_MODULE_1__["ListTemplate"]) {
                  _this.processListTemplate(configValue, item_1);
                } else {
                  _this.processOrderedTemplate(configValue, item_1);
                }
              } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](configValue)) {
                // It's a single oject.
                // Treat it as a template.
                if (configValue instanceof BaseObject) {
                  // Item is already a BaseObject, no need to process it further
                  item_1.template = configValue;
                } else {
                  // Now let's find out if the whole object if a template, or we
                  // need to get it from `template` key
                  var templateValue = void 0;

                  if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](configValue.template)) {
                    templateValue = configValue.template;
                  } else {
                    templateValue = configValue;
                  }

                  if (item_1.template instanceof BaseObject) {
                    // Template is a BaseObject so we will just let its config
                    // deal with the configuration
                    item_1.template.config = templateValue;
                  } else {
                    _utils_Object__WEBPACK_IMPORTED_MODULE_12__["each"](templateValue, function (entryKey, entryValue) {
                      var listItem = item_1.template[entryKey];

                      if (listItem instanceof _utils_Adapter__WEBPACK_IMPORTED_MODULE_6__["Adapter"]) {
                        _this.processAdapters(listItem, entryValue);
                      } else if (listItem instanceof _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_5__["EventDispatcher"]) {
                        _this.processEvents(listItem, entryValue);
                      } else if (listItem instanceof _utils_Dictionary__WEBPACK_IMPORTED_MODULE_3__["DictionaryTemplate"]) {
                        _this.processDictionaryTemplate(listItem, entryValue);
                      } else if (item_1.template[entryKey] instanceof BaseObject) {
                        // Template is a BaseObject. Let it deal with its own config.
                        item_1.template[entryKey].config = entryValue;
                      } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entryValue) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](entryValue["type"])) {
                        listItem = _this.createClassInstance(entryValue["type"]);

                        if (listItem) {
                          if (listItem instanceof BaseObject) {
                            listItem.config = entryValue;
                          }

                          item_1.template[entryKey] = listItem;
                        } else {
                          item_1.template[entryKey] = entryValue;
                        }
                      } else if (listItem instanceof _utils_List__WEBPACK_IMPORTED_MODULE_1__["List"]) {
                        // It's List, process it
                        _this.processList(entryValue, listItem);
                      } else {
                        // Aything else. Just assing and be done with it.
                        item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);
                      }
                    });
                  } // Check maybe there are `values` to insert


                  if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](configValue.values)) {
                    if (item_1 instanceof _utils_List__WEBPACK_IMPORTED_MODULE_1__["ListTemplate"]) {
                      _this.processListTemplate(configValue.values, item_1);
                    } else {
                      _this.processOrderedTemplate(configValue.values, item_1);
                    }
                  }
                }
              } else {// Something else?
                // Not sure what to do with it on a list - ignore
              }
            } else if (item_1 instanceof _utils_List__WEBPACK_IMPORTED_MODULE_1__["List"]) {
              // ... a list
              // ------------------------------------------------------------------
              if (configKey == "children") {
                _this.processList(configValue, item_1, _this);
              } else {
                _this.processList(configValue, item_1);
              }
            } else if (item_1 instanceof _utils_Dictionary__WEBPACK_IMPORTED_MODULE_3__["DictionaryTemplate"]) {
              // ... a dictionary with template
              // ------------------------------------------------------------------
              _this.processDictionaryTemplate(item_1, configValue);
            } else if (item_1 instanceof _utils_Dictionary__WEBPACK_IMPORTED_MODULE_3__["Dictionary"]) {
              // ... a dictionary
              // ------------------------------------------------------------------
              _this.processDictionary(item_1, configValue);
            } else if (item_1 instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_7__["Color"] || item_1 instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_8__["Percent"]) {
              // ... it's a Color or Percent
              // ------------------------------------------------------------------
              target[configKey] = _this.maybeColorOrPercent(configValue);
            } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](item_1) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](configValue)) {
              // ... a regular object
              // ------------------------------------------------------------------
              _utils_Object__WEBPACK_IMPORTED_MODULE_12__["copyAllProperties"](configValue, item_1);
            } else {
              // ... something else - probably a simple property or object
              // ------------------------------------------------------------------
              // Maybe convert to `Percent` or `Color`?
              configValue = _this.maybeColorOrPercent(configValue); // Assign

              target[configKey] = configValue;
            }
          } else if (!_this.isReserved(configKey)) {
            // Doesn't have property set. But we're going to assume JSON config
            // creator knows what he/she is doing and set it anyway.
            target[configKey] = configValue;
          }
        }, this.configOrder); // Any errors?


        if (this.processingErrors.length) {
          var errors = this.processingErrors.join("\n");
          this._processingErrors = [];
          throw Error(errors);
        }
      };
      /**
       * Tries to detect if value is color or percent and converts to proper object
       * if necessary.
       *
       * Returns the same source value if no color/percent detected
       *
       * @param value  Source value
       * @return Converted value
       */


      BaseObject.prototype.maybeColorOrPercent = function (value) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isString"](value)) {
          if (value.match(/^[\-]?[0-9.]+\%$/)) {
            return Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_8__["percent"])(_utils_Type__WEBPACK_IMPORTED_MODULE_13__["toNumber"](value));
          } else if (value.match(/^\#[0-9abcdef]{3,}$/i)) {
            return Object(_utils_Color__WEBPACK_IMPORTED_MODULE_7__["color"])(value);
          }
        }

        return value;
      };

      BaseObject.prototype.processAdapters = function (item, config) {
        var _this = this;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isArray"](config)) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](config, function (entry, index) {
            item.add(entry.key, entry.callback, entry.priority || 0, _this);
          });
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](config)) {
          _utils_Object__WEBPACK_IMPORTED_MODULE_12__["each"](config, function (key, entry) {
            if (!item.has(key, entry)) {
              item.add(key, entry);
            }
          });
        }
      };

      BaseObject.prototype.processEvents = function (item, config) {
        var _this = this;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](config)) {
          _utils_Object__WEBPACK_IMPORTED_MODULE_12__["each"](config, function (key, entry) {
            if (!item.has(key, entry)) {
              item.on(key, entry);
            }
          });
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isArray"](config)) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](config, function (entry, index) {
            item.on(entry.type, entry.callback, _this);
          });
        }
      };
      /**
       * Processes JSON config for a [[DictionaryTemplate]] item.
       *
       * @todo Description
       * @param item    Item
       * @param config  Config
       */


      BaseObject.prototype.processDictionaryTemplate = function (item, config) {
        // We can only process object
        // Not sure what to do with other types - ignore
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](config)) {
          // Create an entry for each item, or override properties for
          // existing one.
          _utils_Object__WEBPACK_IMPORTED_MODULE_12__["each"](config, function (entryKey, entryValue) {
            var listItem; // Get existing one, or create a new one

            if (entryKey == "template") {
              listItem = item.template;
            } else if (item.hasKey(entryKey)) {
              listItem = item.getKey(entryKey);
            } else {
              listItem = item.create(entryKey);
            } // Set data


            if (listItem instanceof BaseObject) {
              listItem.config = entryValue;
            } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](listItem) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entryValue)) {
              _utils_Object__WEBPACK_IMPORTED_MODULE_12__["copyAllProperties"](entryValue, listItem);
            } else {
              listItem.setKey(entryKey, entryValue);
            }
          });
        }
      };
      /**
       * Processes JSON config for a [[Dictionary]] item.
       *
       * @todo Description
       * @param item    Item
       * @param config  Config
       */


      BaseObject.prototype.processDictionary = function (item, config) {
        // We can only process object
        // Not sure what to do with other types - ignore
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](config)) {
          // Create an entry for each item, or override properties for
          // existing one.
          // @todo support for non-basic types
          _utils_Object__WEBPACK_IMPORTED_MODULE_12__["each"](config, function (entryKey, entryValue) {
            item.setKey(entryKey, entryValue);
          });
        }
      };
      /**
       * Processes [[ListTemplate]].
       *
       * @param configValue  Config value
       * @param item         Item
       */


      BaseObject.prototype.processListTemplate = function (configValue, item) {
        var _this = this;

        _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](configValue, function (entry, index) {
          var type = _this.getConfigEntryType(entry);

          var listItem;

          if (item.hasIndex(index) && !entry["forceCreate"]) {
            listItem = item.getIndex(index);
          } else if (entry instanceof BaseObject) {
            // Item is already a BaseObject, no need to process it further
            item.push(entry);
            return;
          } else if (type) {
            listItem = item.create(type);
          } else {
            listItem = item.create();
          }

          if (entry === listItem) {// It's already the same item, do nothing
          } else {
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entry)) {
              // If the list item is BaseObject, we just need to let it
              // deal if its own config
              if (listItem instanceof BaseObject) {
                listItem.config = entry;
              } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](listItem) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entry)) {
                _utils_Object__WEBPACK_IMPORTED_MODULE_12__["copyAllProperties"](entry, listItem);
              } else {
                item.setIndex(item.indexOf(listItem), entry);
              }
            }
          }
        }); // Truncate the list if it contains less items than the config
        // array


        while (configValue.length > item.length) {
          item.pop();
        }
      };
      /**
       * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].
       *
       * @param configValue  Config value
       * @param item         Item
       */


      BaseObject.prototype.processOrderedTemplate = function (configValue, item) {
        var _this = this;

        _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](configValue, function (entry, index) {
          var type = _this.getConfigEntryType(entry);

          var listItem;

          if (type) {
            listItem = item.create(type);
          } else {
            listItem = item.create();
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entry)) {
            // If the list item is BaseObject, we just need to let it
            // deal if its own config
            if (listItem instanceof BaseObject) {
              listItem.config = entry;
            } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](listItem) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entry)) {
              _utils_Object__WEBPACK_IMPORTED_MODULE_12__["copyAllProperties"](entry, listItem);
            } else {
              item.insert(entry);
            }
          }
        });
      };
      /**
       * Processes [[List]].
       *
       * @param configValue  Config value
       * @param item         Item
       */


      BaseObject.prototype.processList = function (configValue, item, parent) {
        var _this = this; // Convert to array if necessary


        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isArray"](configValue)) {
          configValue = [configValue];
        } // It's an array
        // Create a list item for entry


        var itemCount = item.length;

        _utils_Array__WEBPACK_IMPORTED_MODULE_11__["each"](configValue, function (entry, index) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entry)) {
            // An object.
            //
            // Let's see if we can instantiate a class out of it, or we need
            // to push it into list as it is.
            //
            // If there are items already at the specified index in the list,
            // apply properties rather than create a new one.
            var listItem = void 0;

            if (index < itemCount && !entry["forceCreate"]) {
              listItem = item.getIndex(index);
            } else if (entry instanceof BaseObject) {
              // Item is already a BaseObject, no need to process it further
              item.push(entry);
              return;
            } else {
              listItem = _this.createEntryInstance(entry);

              if (parent) {
                listItem.parent = parent;
              } else {
                item.push(listItem);
              }
            } // If the list item is BaseObject, we just need to let it
            // deal if its own config


            if (listItem instanceof BaseObject) {
              listItem.config = entry;
            } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](listItem) && _utils_Type__WEBPACK_IMPORTED_MODULE_13__["isObject"](entry)) {
              _utils_Object__WEBPACK_IMPORTED_MODULE_12__["copyAllProperties"](entry, listItem);
            }
          } else {
            // Basic value.
            // Just push it into list, or override existing value
            if (item.hasIndex(index)) {
              item.setIndex(index, entry);
            } else {
              item.push(entry);
            }
          }
        }); // Truncate the list if it contains less items than the config
        // array


        while (configValue.length > item.length) {
          item.pop();
        }
      };
      /**
       * This function is used to sort element's JSON config properties, so that
       * some properties that absolutely need to be processed last, can be put at
       * the end.
       *
       * @ignore Exclude from docs
       * @param a  Element 1
       * @param b  Element 2
       * @return Sorting number
       */


      BaseObject.prototype.configOrder = function (a, b) {
        if (a == b) {
          return 0;
        } // Language must come first, so it's all set up when the rest of the
        // elements are being instantiated
        else if (a == "language") {
            return -1;
          } else if (b == "language") {
            return 1;
          } else {
            return 0;
          }
      };
      /**
       * Checks if field should be just assigned as is, without any checking when
       * processing JSON config.
       *
       * Extending functions can override this function to do their own checks.
       *
       * @param field  Field name
       * @return Assign as is?
       */


      BaseObject.prototype.asIs = function (field) {
        return _utils_Array__WEBPACK_IMPORTED_MODULE_11__["indexOf"](["locale"], field) != -1;
      };
      /**
       * Checks if field needs to be converted to function, if it is specified
       * as string.
       *
       * @param field  Field name
       * @return Assign as function?
       */


      BaseObject.prototype.asFunction = function (field) {
        return false;
      };
      /**
       * Creates a relevant class instance if such class definition exists.
       *
       * @ignore Exclude from docs
       * @param className  Class name
       * @return Instance
       */


      BaseObject.prototype.createClassInstance = function (className) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](_Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses[className])) {
          return new _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses[className]();
        } else {
          throw Error("Invalid type: \"" + className + "\".");
        }
      };
      /**
       * Creates a class instance for a config entry using it's type. (as set in
       * `type` property)
       *
       * @ignore Exclude from docs
       * @param config  Config part
       * @return Instance
       */


      BaseObject.prototype.createEntryInstance = function (config) {
        var res;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](config["type"])) {
          res = this.createClassInstance(config["type"]);
        }

        if (!res) {
          return config;
        }

        return res;
      };
      /**
       * Determines config object type.
       *
       * @ignore Exclude from docs
       * @param config  Config part
       * @return Type
       */


      BaseObject.prototype.getConfigEntryType = function (config) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](config["type"])) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](_Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses[config["type"]])) {
            return _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses[config["type"]];
          } else {
            throw Error("Invalid type: \"" + config["type"] + "\".");
          }
        }

        return;
      };
      /**
       * Checks if this element has a property.
       *
       * @ignore Exclude from docs
       * @param prop  Property name
       * @return Has property?
       */


      BaseObject.prototype.hasProperty = function (prop) {
        return prop in this ? true : false;
      };
      /**
       * Checkes whether JSON key is a reserved keyword.
       *
       * @param key  Key
       * @return Reserved
       */


      BaseObject.prototype.isReserved = function (key) {
        return ["type", "forceCreate"].indexOf(key) !== -1;
      };

      Object.defineProperty(BaseObject.prototype, "processingErrors", {
        /**
         * A list of errors that happened during JSON processing.
         *
         * @return Errors
         */
        get: function get() {
          if (!this._processingErrors) {
            this._processingErrors = [];
          }

          return this._processingErrors;
        },
        enumerable: true,
        configurable: true
      });
      return BaseObject;
    }();

    ;
    /**
     * A version of [[BaseObject]] with events properties and methods.
     * Classes that use [[EventDispatcher]] should extend this instead of
     * [[BaseObject]] directly.
     */

    var BaseObjectEvents =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BaseObjectEvents, _super);
      /**
       * Constructor
       */

      function BaseObjectEvents() {
        var _this = _super.call(this) || this;

        _this.className = "BaseObjectEvents";
        return _this;
      }

      Object.defineProperty(BaseObjectEvents.prototype, "events", {
        /**
         * An [[EventDispatcher]] instance
         */
        get: function get() {
          if (!this._eventDispatcher) {
            this._eventDispatcher = new _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_5__["EventDispatcher"]();

            this._disposers.push(this._eventDispatcher);
          }

          return this._eventDispatcher;
        },
        enumerable: true,
        configurable: true
      }); //public set events(value:EventDispatcher<AMEvent<this, this["_events"]>>){
      //	this._eventDispatcher = value;
      //}

      /**
       * Dispatches an event using own event dispatcher. Will automatically
       * populate event data object with event type and target (this element).
       * It also checks if there are any handlers registered for this sepecific
       * event.
       *
       * @param eventType Event type (name)
       * @param data      Data to pass into event handler(s)
       */

      BaseObjectEvents.prototype.dispatch = function (eventType, data) {
        // @todo Implement proper type check
        if (this._eventDispatcher) {
          if (this.events.isEnabled(eventType)) {
            if (data) {
              data.type = eventType;
              data.target = data.target || this;
              this.events.dispatch(eventType, {
                type: eventType,
                target: this
              });
            } else {
              this.events.dispatch(eventType, {
                type: eventType,
                target: this
              });
            }
          }
        }
      };
      /**
       * Works like `dispatch`, except event is triggered immediately, without
       * waiting for the next frame cycle.
       *
       * @param eventType Event type (name)
       * @param data      Data to pass into event handler(s)
       */


      BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {
        // @todo Implement proper type check
        if (this._eventDispatcher) {
          if (this.events.isEnabled(eventType)) {
            if (data) {
              data.type = eventType;
              data.target = data.target || this;
              this.events.dispatchImmediately(eventType, data);
            } else {
              this.events.dispatchImmediately(eventType, {
                type: eventType,
                target: this
              });
            }
          }
        }
      };
      /**
       * Copies all parameters from another [[Sprite]].
       *
       * @param source Source object
       */


      BaseObjectEvents.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        if (source._eventDispatcher) {
          this.events.copyFrom(source._eventDispatcher);
        }
      };

      return BaseObjectEvents;
    }(BaseObject); //# sourceMappingURL=Base.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/Component.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/Component.js ***!
    \**********************************************************************/

  /*! exports provided: Component */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreComponentJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Component", function () {
      return Component;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_SortedList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/SortedList */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _data_DataSource__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./data/DataSource */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js");
    /* harmony import */


    var _utils_Responsive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./utils/Responsive */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Responsive.js");
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony import */


    var _DataItem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./DataItem */
    "./node_modules/@amcharts/amcharts4/.internal/core/DataItem.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ./utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * A Component represents an independent functional element or control, that
     * can have it's own behavior, children, data, etc.
     *
     * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].
     *
     * @see {@link IComponentEvents} for a list of available events
     * @see {@link IComponentAdapters} for a list of available Adapters
     * @important
     */


    var Component =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Component, _super);
      /**
       * Constructor
       */

      function Component() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Holds data field names.
         *
         * Data fields define connection beween [[DataItem]] and actual properties
         * in raw data.
         */


        _this.dataFields = {};
        /**
         * A list of [[DataSource]] definitions of external data source.
         *
         * @ignore Exclude from docs
         */

        _this._dataSources = {};
        /**
         * This is used when only new data is invalidated (if added using `addData`
         * method).
         *
         * @ignore Exclude from docs
         */

        _this._parseDataFrom = 0;
        /**
         * Holds the disposers for the dataItems and dataUsers
         *
         * @ignore Exclude from docs
         */

        _this._dataDisposers = [];
        /**
         * Currently selected "data set".
         *
         * If it's set to `""`, main data set (unaggregated data) is used.
         */

        _this._currentDataSetId = "";
        /**
         * [_start description]
         *
         * @ignore Exclude from docs
         */

        _this._start = 0;
        /**
         * [_end description]
         *
         * @ignore Exclude from docs
         */

        _this._end = 1;
        /**
         * If set to `true`, changing data range in element will not trigger
         * `daterangechanged` event.
         */

        _this.skipRangeEvent = false;
        /**
         * Whenever selected scope changes (chart is zoomed or panned), for example
         * by interaction from a Scrollbar, or API, a chart needs to reposition
         * its contents.
         *
         * `rangeChangeDuration` influences how this is performed.
         *
         * If set to zero (0), the change will happen instantenously.
         *
         * If set to non-zero value, the chart will gradually animate into new
         * position for the set amount of milliseconds.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */

        _this.rangeChangeDuration = 0;
        /**
         * An easing function to use for range change animation.
         *
         * @see {@link Ease}
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */

        _this.rangeChangeEasing = _utils_Ease__WEBPACK_IMPORTED_MODULE_13__["cubicOut"];
        /**
         * A duration (ms) of each data parsing step. A Component parses its data in
         * chunks in order to avoid completely freezing the machine when large data
         * sets are used. This setting will control how many milliseconds should pass
         * when parsing data until parser stops for a brief moment to let other
         * processes catch up.
         */

        _this.parsingStepDuration = 50;
        /**
         * [dataInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         */

        _this.dataInvalid = false;
        /**
         *
         * @ignore Exclude from docs
         */

        _this.rawDataInvalid = false;
        /**
         * [dataRangeInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         */

        _this.dataRangeInvalid = false;
        /**
         * [dataItemsInvalid description]
         *
         * @ignore Exclude from docs
         * @todo Description
         */

        _this.dataItemsInvalid = false;
        /**
         * If set to a non-zero number the element will "animate" data values of its
         * children.
         *
         * This will happen on first load and whenever data values change.
         *
         * Enabling interpolation will mean that elements will transit smoothly into
         * new values rather than updating instantly.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */

        _this.interpolationDuration = 0;
        /**
         * An easing function to use for interpolating values when transiting from
         * one source value to another.
         *
         * @default cubicOut
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         * @see {@link Ease}
         */

        _this.interpolationEasing = _utils_Ease__WEBPACK_IMPORTED_MODULE_13__["cubicOut"];
        /**
         * Indicates whether transition between data item's values should start and
         * play out all at once, or with a small delay (as defined by
         * `sequencedInterpolationDelay`) for each subsequent data item.
         *
         * @default true
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */

        _this.sequencedInterpolation = true;
        /**
         * A delay (ms) to wait between animating each subsequent data item's
         * interpolation animation.
         *
         * Relative only if `sequencedInterpolation = true`.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */

        _this.sequencedInterpolationDelay = 0;
        /**
         * A progress (0-1) for the data validation process.
         *
         * @ignore Exclude from docs
         */

        _this.dataValidationProgress = 0;
        _this._addAllDataItems = true;
        _this._usesData = true;
        _this.className = "Component";
        _this.minZoomCount = 1;
        _this.maxZoomCount = 0;
        _this._dataItems = new _utils_SortedList__WEBPACK_IMPORTED_MODULE_3__["OrderedListTemplate"](_this.createDataItem());

        _this._dataItems.events.on("inserted", _this.handleDataItemAdded, _this, false);

        _this._dataItems.events.on("removed", _this.handleDataItemRemoved, _this, false);

        _this._disposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_2__["ListDisposer"](_this._dataItems));

        _this._disposers.push(_this._dataItems.template);

        _this.invalidateData(); // TODO what about remove ?


        _this.dataUsers.events.on("inserted", _this.handleDataUserAdded, _this, false); // Set up disposers


        _this._disposers.push(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_5__["MultiDisposer"](_this._dataDisposers));

        _this._start = 0;
        _this._end = 1;
        _this.maxZoomDeclination = 1; // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * Returns a new/empty DataItem of the type appropriate for this object.
       *
       * @see {@link DataItem}
       * @return Data Item
       */


      Component.prototype.createDataItem = function () {
        return new _DataItem__WEBPACK_IMPORTED_MODULE_9__["DataItem"]();
      };
      /**
       * [handleDataUserAdded description]
       *
       * @ignore Exclude from docs
       * @todo Description
       * @param event Event object
       */


      Component.prototype.handleDataUserAdded = function (event) {
        var dataUser = event.newValue;
        dataUser.dataProvider = this;
      };
      /**
       * [handleDataItemValueChange description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */


      Component.prototype.handleDataItemValueChange = function (dataItem, name) {
        if (!this.dataItemsInvalid) {
          this.invalidateDataItems();
        }
      };
      /**
       * [handleDataItemWorkingValueChange description]
       *
       * @ignore Exclude from docs
       */


      Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {};
      /**
       * [handleDataItemWorkingLocationChange description]
       *
       * @ignore Exclude from docs
       */


      Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {};
      /**
       * [handleDataItemCalculatedValueChange description]
       *
       * @ignore Exclude from docs
       */


      Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {};
      /**
       * [handleDataItemPropertyChange description]
       *
       * @ignore Exclude from docs
       */


      Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {};
      /**
       * Populates a [[DataItem]] width data from data source.
       *
       * Loops through all the fields and if such a field is found in raw data
       * object, a corresponding value on passed in `dataItem` is set.
       *
       * @ignore Exclude from docs
       * @param item
       */


      Component.prototype.processDataItem = function (dataItem, dataContext) {
        var _this = this;

        if (dataItem) {
          if (!dataContext) {
            dataContext = {};
          } // store reference to original data item


          dataItem.dataContext = dataContext;
          var hasSomeValues_1 = false;

          _utils_Object__WEBPACK_IMPORTED_MODULE_16__["each"](this.dataFields, function (key, fieldValue) {
            var fieldName = key;
            var value = dataContext[fieldValue]; // Apply adapters to a retrieved value

            if (_this._adapterO) {
              if (_this._adapterO.isEnabled("dataContextValue")) {
                value = _this._adapterO.apply("dataContextValue", {
                  field: fieldName,
                  value: value,
                  dataItem: dataItem
                }).value;
              }
            }

            if (dataItem.hasChildren[fieldName]) {
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](value)) {
                hasSomeValues_1 = true;

                var template = _this.createDataItem();

                template.copyFrom(_this.mainDataSet.template);
                var children = new _utils_SortedList__WEBPACK_IMPORTED_MODULE_3__["OrderedListTemplate"](template);
                children.events.on("inserted", _this.handleDataItemAdded, _this, false);
                children.events.on("removed", _this.handleDataItemRemoved, _this, false);

                _this._dataDisposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_2__["ListDisposer"](children));

                var count = value.length;

                for (var i = 0; i < count; i++) {
                  var rawDataItem = value[i];
                  var childDataItem = children.create();
                  childDataItem.parent = dataItem;

                  _this.processDataItem(childDataItem, rawDataItem);
                }

                var anyDataItem = dataItem;
                anyDataItem[fieldName] = children;
              }
            } else {
              // data is converted to numbers/dates in each dataItem
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](value)) {
                hasSomeValues_1 = true;
                dataItem[fieldName] = value;
              }
            }
          });

          _utils_Object__WEBPACK_IMPORTED_MODULE_16__["each"](this.propertyFields, function (key, fieldValue) {
            var f = key;
            var value = dataContext[fieldValue];

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](value)) {
              hasSomeValues_1 = true;
              dataItem.setProperty(f, value);
            }
          }); // @todo we might need some flag which would tell whether we should create empty data items or not.


          if (!this._addAllDataItems && !hasSomeValues_1) {
            this.mainDataSet.remove(dataItem);
          }
        }
      };
      /**
       *
       * When validating raw data, instead of processing data item, we update it
       *
       * @ignore Exclude from docs
       * @param item
       */


      Component.prototype.updateDataItem = function (dataItem) {
        var _this = this;

        if (dataItem) {
          var dataContext_1 = dataItem.dataContext;

          _utils_Object__WEBPACK_IMPORTED_MODULE_16__["each"](this.dataFields, function (key, fieldValue) {
            var fieldName = key;
            var value = dataContext_1[fieldValue]; // Apply adapters to a retrieved value

            if (_this._adapterO) {
              value = _this._adapterO.apply("dataContextValue", {
                field: fieldName,
                value: value,
                dataItem: dataItem
              }).value;
            }

            if (dataItem.hasChildren[fieldName]) {
              if (value) {
                var anyDataItem = dataItem;
                var children = anyDataItem[fieldName];

                _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](children.iterator(), function (child) {
                  _this.updateDataItem(child);
                });
              }
            } else {
              // data is converted to numbers/dates in each dataItem
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](value)) {
                dataItem[fieldName] = value;
              }
            }
          });

          _utils_Object__WEBPACK_IMPORTED_MODULE_16__["each"](this.propertyFields, function (key, fieldValue) {
            var f = key;
            var value = dataContext_1[fieldValue];

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](value)) {
              dataItem.setProperty(f, value);
            }
          });
        }
      };
      /**
       * [validateDataElements description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */


      Component.prototype.validateDataElements = function () {
        var count = this.endIndex;

        for (var i = this.startIndex; i < count; i++) {
          var dataItem = this.dataItems.getIndex(i); // TODO is this correct

          if (dataItem) {
            this.validateDataElement(dataItem);
          }
        }
      };
      /**
       * Validates this element and its related elements.
       *
       * @ignore Exclude from docs
       */


      Component.prototype.validate = function () {
        this.validateDataElements();

        _super.prototype.validate.call(this);
      };
      /**
       * [validateDataElement description]
       *
       * @ignore Exclude from docs
       * @param dataItem [description]
       */


      Component.prototype.validateDataElement = function (dataItem) {};
      /**
       * Adds one or several (array) of data items to the existing data.
       *
       * @param rawDataItem One or many raw data item objects
       */


      Component.prototype.addData = function (rawDataItem, removeCount) {
        var _this = this; // need to check if data is invalid, as addData might be called multiple times


        if (!this.dataInvalid && this.inited) {
          this._parseDataFrom = this.data.length; // save length of parsed data
        }

        if (rawDataItem instanceof Array) {
          // can't use concat because new array is returned
          _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](rawDataItem, function (dataItem) {
            _this.data.push(dataItem);
          });
        } else {
          this.data.push(rawDataItem); // add to raw data array
        }

        if (this.inited) {
          this.removeData(removeCount);
        } else {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](removeCount)) {
            while (removeCount > 0) {
              this.data.shift();
              removeCount--;
            }
          }
        }

        this.invalidateData();
      };
      /**
       * Removes elements from the beginning of data
       *
       * @param count number of elements to remove
       */


      Component.prototype.removeData = function (count) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](count) && count > 0) {
          while (count > 0) {
            var dataItem = this.mainDataSet.getIndex(0);

            if (dataItem) {
              this.mainDataSet.remove(dataItem);
            }

            this.dataUsers.each(function (dataUser) {
              if (!dataUser.data || dataUser.data.length == 0) {
                var dataItem_1 = dataUser.mainDataSet.getIndex(0);

                if (dataItem_1) {
                  dataUser.mainDataSet.remove(dataItem_1);
                }
              }
            });
            this.data.shift();

            if (this._parseDataFrom > 0) {
              this._parseDataFrom--;
            }

            count--;
          } // changed from invalidateData since 4.7.19 to solve #51551


          this.invalidateDataItems();
        }
      };
      /**
       * Triggers a data (re)parsing.
       *
       * @ignore Exclude from docs
       */


      Component.prototype.invalidateData = function () {
        if (this.disabled || this.isTemplate) {
          return;
        } //if(!this.dataInvalid){


        _Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].addToInvalidComponents(this);

        _System__WEBPACK_IMPORTED_MODULE_8__["system"].requestFrame();

        this.dataInvalid = true;

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.dataUsers.iterator(), function (x) {
          x.invalidateDataItems();
        }); //}

      };
      /**
       * [invalidateDataUsers description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */


      Component.prototype.invalidateDataUsers = function () {
        _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.dataUsers.iterator(), function (x) {
          x.invalidate();
        });
      };
      /**
       * Invalidates data values. When data array is not changed, but values within
       * it changes, we invalidate data so that component would process changes.
       *
       * @ignore Exclude from docs
       */


      Component.prototype.invalidateDataItems = function () {
        if (this.disabled || this.isTemplate) {
          return;
        } //if(!this.dataItemsInvalid){


        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["move"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidDataItems, this);

        _System__WEBPACK_IMPORTED_MODULE_8__["system"].requestFrame();

        this.dataItemsInvalid = true;

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.dataUsers.iterator(), function (x) {
          x.invalidateDataItems();
        }); //}

      };
      /**
       * Invalidates data range. This is done when data which must be shown
       * changes (chart is zoomed for example).
       *
       * @ignore Exclude from docs
       */


      Component.prototype.invalidateDataRange = function () {
        if (this.disabled || this.isTemplate) {
          return;
        } //if(!this.dataRangeInvalid){


        this.dataRangeInvalid = true;

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["move"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidDataRange, this);

        _System__WEBPACK_IMPORTED_MODULE_8__["system"].requestFrame(); //}

      };
      /**
       * Processes data range.
       *
       * @todo Description
       * @ignore Exclude from docs
       */


      Component.prototype.validateDataRange = function () {
        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidDataRange, this);

        this.dataRangeInvalid = false;

        if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {
          this.rangeChangeUpdate();
          this.appendDataItems();
          this.invalidate();
          this.dispatchImmediately("datarangechanged");
        }
      };
      /**
       * [sliceData description]
       *
       * @todo Description
       * @ignore Exclude from docs
       */


      Component.prototype.sliceData = function () {
        this._workingStartIndex = this.startIndex;
        this._workingEndIndex = this.endIndex;
      };
      /**
       * [rangeChangeUpdate description]
       *
       * @todo Description
       * @ignore Exclude from docs
       */


      Component.prototype.rangeChangeUpdate = function () {
        this.sliceData();
        this._prevStartIndex = this.startIndex;
        this._prevEndIndex = this.endIndex;
      };
      /**
       * [appendDataItems description]
       *
       * @todo Description
       * @ignore Exclude from docs
       */


      Component.prototype.appendDataItems = function () {
        // TODO use an iterator instead
        var count = this.endIndex;

        for (var i = this.startIndex; i < count; i++) {
          // data item
          var dataItem = this.dataItems.getIndex(i);

          if (dataItem) {
            dataItem.__disabled = false;
          }
        }

        for (var i = 0; i < this.startIndex; i++) {
          var dataItem = this.dataItems.getIndex(i);
          dataItem.__disabled = true;
        }

        for (var i = this.endIndex; i < this.dataItems.length; i++) {
          var dataItem = this.dataItems.getIndex(i);
          dataItem.__disabled = true;
        }
      };
      /**
       * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.
       * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data
       */


      Component.prototype.invalidateRawData = function () {
        if (this.disabled || this.isTemplate) {
          return;
        } //if(!this.rawDataInvalid){


        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["move"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidRawDatas, this);

        _System__WEBPACK_IMPORTED_MODULE_8__["system"].requestFrame();

        this.rawDataInvalid = true;

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.dataUsers.iterator(), function (x) {
          x.invalidateRawData();
        }); //}

      };
      /**
       * @ignore
       */


      Component.prototype.validateRawData = function () {
        var _this = this;

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidRawDatas, this);

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.mainDataSet.iterator(), function (dataItem) {
          if (dataItem) {
            _this.updateDataItem(dataItem);
          }
        });
      };
      /**
       * Destroys this object and all related data.
       */


      Component.prototype.dispose = function () {
        var _this = this;

        this.mainDataSet.template.clones.clear();

        _utils_Object__WEBPACK_IMPORTED_MODULE_16__["each"](this._dataSources, function (key, source) {
          _this.removeDispose(source);
        });

        _super.prototype.dispose.call(this);
      };
      /**
       * @ignore
       */


      Component.prototype.disposeData = function () {
        this.mainDataSet.template.clones.clear();

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](this._dataDisposers, function (x) {
          x.dispose();
        }); // and for all components


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.dataUsers.iterator(), function (dataUser) {
          dataUser.disposeData();
        });

        this._dataDisposers.length = 0;
        this._startIndex = undefined;
        this._endIndex = undefined; // dispose old

        this.mainDataSet.clear();
        this.mainDataSet.template.clones.clear();

        if (this._dataSets) {
          this._dataSets.clear();
        }
      };

      Component.prototype.getDataItem = function (dataContext) {
        return this.mainDataSet.create();
      };
      /**
       * Validates (processes) data.
       *
       * @ignore Exclude from docs
       */


      Component.prototype.validateData = function () {
        this.dispatchImmediately("beforedatavalidated");
        this.dataInvalid = false;

        _Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].removeFromInvalidComponents(this);

        if (this.__disabled) {
          return;
        }

        this.dataValidationProgress = 0; // need this to slice new data

        this._prevStartIndex = undefined;
        this._prevEndIndex = undefined; // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always

        this._startIndex = undefined;
        this._endIndex = undefined;

        if (this.dataFields.data && this.dataItem) {
          var dataContext = this.dataItem.dataContext;
          this._data = dataContext[this.dataFields.data];
        } // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only
        // check heatmap demo if uncommented
        // fixed both issues by adding && this.data.length > 0
        // check adding series example if changed


        if (this._parseDataFrom === 0 && this.data.length > 0) {
          this.disposeData();
        }

        if (this.data.length > 0) {
          var preloader = this.preloader; // and for all components

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](this.dataUsers.iterator(), function (dataUser) {
            // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always
            dataUser._startIndex = undefined;
            dataUser._endIndex = undefined;
          });

          var counter = 0;
          var startTime = Date.now(); // parse data

          var i = this._parseDataFrom;
          var n = this.data.length;

          var _loop_1 = function _loop_1() {
            var rawDataItem = this_1.data[i];

            if (this_1._usesData) {
              var dataItem = this_1.getDataItem(rawDataItem);
              this_1.processDataItem(dataItem, rawDataItem);
            }

            this_1.dataUsers.each(function (dataUser) {
              if (dataUser.data.length == 0) {
                // checking if data is not set directly
                var dataUserDataItem = dataUser.getDataItem(rawDataItem);
                dataUser.processDataItem(dataUserDataItem, rawDataItem);
              }
            });
            counter++; // show preloader if this takes too many time

            if (counter == 100) {
              // no need to check it on each data item
              counter = 0;
              var elapsed = Date.now() - startTime;

              if (elapsed > this_1.parsingStepDuration) {
                if (i < this_1.data.length - 10) {
                  this_1._parseDataFrom = i + 1; // update preloader

                  if (preloader) {
                    if (i / this_1.data.length > 0.5 && !preloader.visible) {// do not start showing
                    } else {
                      preloader.progress = i / this_1.data.length;
                    }
                  }

                  this_1.dataValidationProgress = i / this_1.data.length;
                  i = this_1.data.length; // stops cycle

                  this_1.invalidateData();
                  return {
                    value: void 0
                  };
                }
              }
            }
          };

          var this_1 = this;

          for (i; i < n; i++) {
            var state_1 = _loop_1();

            if (typeof state_1 === "object") return state_1.value;
          }

          if (preloader) {
            preloader.progress = 1;
          }

          this.dataUsers.each(function (dataUser) {
            if (dataUser.hidden) {
              dataUser.hide(0);
            }
          });
        }

        this.dataValidationProgress = 1;
        this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.

        this.invalidateDataItems();

        if (!this._internalDefaultsApplied) {
          this.applyInternalDefaults();
        }

        this.dispatch("datavalidated"); // can't zoom chart if dispatched immediately
      };
      /**
       * Validates (processes) data items.
       *
       * @ignore Exclude from docs
       */


      Component.prototype.validateDataItems = function () {
        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidDataItems, this);

        this.dataItemsInvalid = false;
        this.invalidateDataRange();
        this.invalidate();
        this.dispatch("dataitemsvalidated");
      };

      Object.defineProperty(Component.prototype, "data", {
        /**
         * Returns element's source (raw) data.
         *
         * @return Data
         */
        get: function get() {
          if (!this._data) {
            this._data = [];
          }

          if (!this._adapterO) {
            return this._data;
          } else {
            return this._adapterO.apply("data", this._data);
          }
        },

        /**
         * Sets source (raw) data for the element. The "data" is always an `Array`
         * of objects.
         *
         * @param value Data
         */
        set: function set(value) {
          this.setData(value);
        },
        enumerable: true,
        configurable: true
      });

      Component.prototype.setData = function (value) {
        // array might be the same, but there might be items added
        // todo: check if array changed, toString maybe?
        //if (this._data != value) {
        this._parseDataFrom = 0;
        this.disposeData();
        this._data = value;

        if (value && value.length > 0) {
          this.invalidateData();
        } else {
          this.dispatchImmediately("beforedatavalidated");
          this.dispatch("datavalidated");
        } //}

      };
      /**
       * Returns (creates if necessary) a [[DataSource]] bound to any specific
       * property.
       *
       * For example if I want to bind `data` to an external JSON file, I'd create
       * a DataSource for it.
       *
       * @param property  Property to bind external data to
       * @return A DataSource for property
       */


      Component.prototype.getDataSource = function (property) {
        var _this = this;

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](this._dataSources[property])) {
          this._dataSources[property] = new _data_DataSource__WEBPACK_IMPORTED_MODULE_6__["DataSource"]();
          this._dataSources[property].component = this;
          this.setDataSourceEvents(this._dataSources[property], property);

          this._dataSources[property].adapter.add("dateFields", function (val) {
            return _this.dataSourceDateFields(val);
          });

          this._dataSources[property].adapter.add("numberFields", function (val) {
            return _this.dataSourceNumberFields(val);
          });

          this.events.on("inited", function () {
            _this.loadData(property);
          }, this, false);
        }

        return this._dataSources[property];
      };

      Object.defineProperty(Component.prototype, "dataSource", {
        /**
         * @return Data source
         */
        get: function get() {
          if (!this._dataSources["data"]) {
            this.getDataSource("data");
          }

          return this._dataSources["data"];
        },

        /**
         *A [[DataSource]] to be used for loading Component's data.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data
         * @param value  Data source
         */
        set: function set(value) {
          var _this = this;

          if (this._dataSources["data"]) {
            this.removeDispose(this._dataSources["data"]);
          }

          this._dataSources["data"] = value;
          this._dataSources["data"].component = this;
          this.events.on("inited", function () {
            _this.loadData("data");
          }, this, false);
          this.setDataSourceEvents(value, "data");
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Initiates loading of the external data via [[DataSource]].
       *
       * @ignore Exclude from docs
       */

      Component.prototype.loadData = function (property) {
        this._dataSources[property].load();
      };
      /**
       * This function is called by the [[DataSource]]'s `dateFields` adapater
       * so that particular chart types can popuplate this setting with their
       * own type-specific data fields so they are parsed properly.
       *
       * @ignore Exclude from docs
       * @param value  Array of date fields
       * @return Array of date fields populated with chart's date fields
       */


      Component.prototype.dataSourceDateFields = function (value) {
        return value;
      };
      /**
       * This function is called by the [[DataSource]]'s `numberFields` adapater
       * so that particular chart types can popuplate this setting with their
       * own type-specific data fields so they are parsed properly.
       *
       * @ignore Exclude from docs
       * @param value  Array of number fields
       * @return Array of number fields populated with chart's number fields
       */


      Component.prototype.dataSourceNumberFields = function (value) {
        return value;
      };
      /**
       *
       * @ignore Exclude from docs
       * @todo Description
       * @param list        [description]
       * @param dataFields  [description]
       * @param targetList  [description]
       * @return [description]
       */


      Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {
        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](targetList, function (value) {
          if (dataFields[value] && _utils_Array__WEBPACK_IMPORTED_MODULE_12__["indexOf"](list, dataFields[value]) === -1) {
            list.push(dataFields[value]);
          }
        });

        return list;
      };
      /**
       * Sets events on a [[DataSource]].
       *
       * @ignore Exclude from docs
       */


      Component.prototype.setDataSourceEvents = function (ds, property) {
        var _this = this;

        ds.events.on("started", function (ev) {
          var preloader = _this.preloader;

          if (preloader) {
            preloader.progress = 0; //preloader.label.text = this.language.translate("Loading");
          }
        }, undefined, false);
        ds.events.on("loadstarted", function (ev) {
          var preloader = _this.preloader;

          if (preloader) {
            preloader.progress = 0.25;
          }
        }, undefined, false);
        ds.events.on("loadended", function (ev) {
          var preloader = _this.preloader;

          if (preloader) {
            preloader.progress = 0.5;
          }
        }, undefined, false);
        ds.events.on("parseended", function (ev) {
          var preloader = _this.preloader;

          if (preloader) {
            preloader.progress = 0.75;
          }
        }, undefined, false);
        ds.events.on("ended", function (ev) {
          var preloader = _this.preloader;

          if (preloader) {
            preloader.progress = 1;
          }
        }, undefined, false);
        ds.events.on("error", function (ev) {
          var preloader = _this.preloader;

          if (preloader) {
            preloader.progress = 1;
          }

          _this.openModal(ev.message);
        }, undefined, false);

        if (property) {
          ds.events.on("done", function (ev) {
            var preloader = _this.preloader;

            if (preloader) {
              preloader.progress = 1;
            }

            if (property == "data" && !_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isArray"](ev.data)) {
              ev.data = [ev.data];
            }

            if (ds.incremental && property == "data" && _this.data.length) {
              _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);
            } else if (ds.updateCurrentData && property == "data" && _this.data.length) {
              // cycle through existing data items
              _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](_this.data, function (item, index) {
                if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](ev.data[index])) {
                  _utils_Object__WEBPACK_IMPORTED_MODULE_16__["each"](item, function (key, val) {
                    if (_utils_Type__WEBPACK_IMPORTED_MODULE_17__["hasValue"](ev.data[index][key])) {
                      item[key] = ev.data[index][key];
                    }
                  });
                }
              });

              _this.invalidateRawData();
            } else {
              _this[property] = ev.data;
            }
          });
        }
      };

      Object.defineProperty(Component.prototype, "responsive", {
        /**
         * @return Responsive rules handler
         */
        get: function get() {
          if (!this._responsive) {
            this._responsive = new _utils_Responsive__WEBPACK_IMPORTED_MODULE_7__["Responsive"]();
            this._responsive.component = this;
          }

          return this._responsive;
        },

        /**
         * A [[Responsive]] instance to be used when applying conditional
         * property values.
         *
         * NOTE: Responsive features are currently in development and may not work
         * as expected, if at all.
         *
         * @param value  Responsive rules handler
         */
        set: function set(value) {
          this._responsive = value;
          this._responsive.component = this;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets current zoom.
       *
       * The range uses relative values from 0 to 1, with 0 marking beginning and 1
       * marking end of the available data range.
       *
       * This method will not have any effect when called on a chart object.
       * Since the chart can have a number of axes and series, each with its own
       * data, the meaning of "range" is very ambiguous.
       *
       * To zoom the chart use `zoom*` methods on its respective axes.
       *
       * @param range          Range
       * @param skipRangeEvent Should rangechanged event not be triggered?
       * @param instantly      Do not animate?
       * @return Actual modidied range (taking `maxZoomFactor` into account)
       */

      Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {
        var _this = this;

        if (skipRangeEvent === void 0) {
          skipRangeEvent = false;
        }

        if (instantly === void 0) {
          instantly = false;
        }

        var start = range.start;
        var end = range.end;
        var priority = range.priority;

        if (range.start == range.end) {
          range.start = range.start - 0.5 / this.maxZoomFactor;
          range.end = range.end + 0.5 / this.maxZoomFactor;
        }

        if (priority == "end" && end == 1 && start != 0) {
          if (start < this.start) {
            priority = "start";
          }
        }

        if (priority == "start" && start == 0) {
          if (end > this.end) {
            priority = "end";
          }
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](declination)) {
          declination = this.maxZoomDeclination;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](start) || !_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](end)) {
          return {
            start: this.start,
            end: this.end
          };
        }

        if (this._finalStart != start || this._finalEnd != end) {
          var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;
          var minZoomFactor = this.maxZoomFactor / this.maxZoomCount; // most likely we are dragging left scrollbar grip here, so we tend to modify end

          if (priority == "start") {
            if (this.maxZoomCount > 0) {
              // add to the end
              if (1 / (end - start) < minZoomFactor) {
                end = start + 1 / minZoomFactor;
              }
            } // add to the end


            if (1 / (end - start) > maxZoomFactor) {
              end = start + 1 / maxZoomFactor;
            } //unless end is > 0


            if (end > 1 && end - start < 1 / maxZoomFactor) {
              //end = 1;
              start = end - 1 / maxZoomFactor;
            }
          } // most likely we are dragging right, so we modify left
          else {
              if (this.maxZoomCount > 0) {
                // add to the end
                if (1 / (end - start) < minZoomFactor) {
                  start = end - 1 / minZoomFactor;
                }
              } // remove from start


              if (1 / (end - start) > maxZoomFactor) {
                start = end - 1 / maxZoomFactor;
              }

              if (start < 0 && end - start < 1 / maxZoomFactor) {
                //start = 0;
                end = start + 1 / maxZoomFactor;
              }
            }

          if (start < -declination) {
            start = -declination;
          }

          if (1 / (end - start) > maxZoomFactor) {
            end = start + 1 / maxZoomFactor;
          }

          if (end > 1 + declination) {
            end = 1 + declination;
          }

          if (1 / (end - start) > maxZoomFactor) {
            start = end - 1 / maxZoomFactor;
          }

          this._finalEnd = end;
          this._finalStart = start;
          this.skipRangeEvent = skipRangeEvent;
          this.dispatchImmediately("rangechangestarted");

          if (this.rangeChangeDuration > 0 && !instantly) {
            // todo: maybe move this to Animation
            var rangeChangeAnimation = this.rangeChangeAnimation;

            if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {
              var options = rangeChangeAnimation.animationOptions;

              if (options.length > 1) {
                if (options[0].to == start && options[1].to == end) {
                  return {
                    start: start,
                    end: end
                  };
                } else {
                  if (!rangeChangeAnimation.isDisposed()) {
                    rangeChangeAnimation.stop();
                  }
                }
              }
            }

            if (this.rangeChangeAnimation) {
              this.rangeChangeAnimation.kill();
            }

            rangeChangeAnimation = this.animate([{
              property: "start",
              to: start
            }, {
              property: "end",
              to: end
            }], this.rangeChangeDuration, this.rangeChangeEasing);
            this.rangeChangeAnimation = rangeChangeAnimation;

            if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {
              rangeChangeAnimation.events.on("animationended", function () {
                _this.dispatchImmediately("rangechangeended");
              });
            } else {
              this.dispatchImmediately("rangechangeended");
            }
          } else {
            this.start = start;
            this.end = end;
            this.dispatch("rangechangeended");
          }
        }

        return {
          start: start,
          end: end
        };
      };
      /**
       * Zooms to specific data items using their index in data.
       *
       * This method will not have any effect when called on a chart object.
       * Since the chart can have a number of axes and series, each with its own
       * data, the meaning of "index" is very ambiguous.
       *
       * To zoom the chart use `zoom*` methods on its respective axes.
       *
       * @param startIndex     Index of the starting data item
       * @param endIndex       Index of the ending data item
       * @param skipRangeEvent Should rangechanged event not be triggered?
       * @param instantly      Do not animate?
       */


      Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](startIndex) || !_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](endIndex)) {
          return;
        }

        var start = startIndex / this.dataItems.length;
        var end = endIndex / this.dataItems.length;
        this.zoom({
          start: start,
          end: end
        }, skipRangeEvent, instantly);
      };

      Object.defineProperty(Component.prototype, "zoomFactor", {
        /**
         * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of
         * the available data)
         *
         * @return Zoom factor
         */
        get: function get() {
          return _utils_Math__WEBPACK_IMPORTED_MODULE_11__["fitToRange"](1 / (this.end - this.start), 1, this.maxZoomFactor);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "maxZoomFactor", {
        /**
         * @return Maximum zoomFactor
         */
        get: function get() {
          return this.getPropertyValue("maxZoomFactor");
        },

        /**
         * Max available `zoomFactor`.
         *
         * The element will not allow zoom to occur beyond this factor.
         *
         * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that
         * category axis could be zoomed to one category and date axis allows to be
         * zoomed up to one base interval.
         *
         * In case you want to restrict category or date axis to be zoomed to more
         * than one category or more than one base interval, use `minZoomCount`
         * property (set it to `> 1`).
         *
         * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.
         *
         * Feel free to modify it to allow bigger zoom or to restrict zooming.
         *
         * @param value  Maximum zoomFactor
         */
        set: function set(value) {
          if (this.setPropertyValue("maxZoomFactor", value)) {
            if (value == 1) {
              this.maxZoomDeclination = 0;
            }

            this.invalidateDataRange();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "maxZoomDeclination", {
        /**
         * @ignore
         * @return Maximum zoom declination
         */
        get: function get() {
          return this.getPropertyValue("maxZoomDeclination");
        },

        /**
         * Max zoom declination.
         *
         * @ignore
         * @default 1
         * @param value  Maximum zoom declination
         */
        set: function set(value) {
          if (this.setPropertyValue("maxZoomDeclination", value)) {
            this.invalidateDataRange();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "startIndex", {
        /**
         * Current starting index.
         *
         * @return Start index
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](this._startIndex)) {
            this._startIndex = 0;
          }

          return this._startIndex;
        },

        /**
         * Sets current starting index.
         *
         * @ignore Exclude from docs
         * @param value Start index
         */
        set: function set(value) {
          this._startIndex = _utils_Math__WEBPACK_IMPORTED_MODULE_11__["fitToRange"](Math.round(value), 0, this.dataItems.length); //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series

          this.start = this.indexToPosition(this._startIndex);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @ignore
       * @todo:review description
       * returns item's relative position by the index of the item
       * @param index
       */

      Component.prototype.indexToPosition = function (index) {
        return index / this.dataItems.length;
      };

      Object.defineProperty(Component.prototype, "endIndex", {
        /**
         * Current ending index.
         *
         * @return End index
         */
        get: function get() {
          var count = this.dataItems.length;

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_17__["isNumber"](this._endIndex) || this._endIndex > count) {
            this._endIndex = count;
          }

          return this._endIndex;
        },

        /**
         * Sets current ending index.
         *
         * @ignore Exclude from docs
         * @param value End index
         */
        set: function set(value) {
          this._endIndex = _utils_Math__WEBPACK_IMPORTED_MODULE_11__["fitToRange"](Math.round(value), 0, this.dataItems.length); //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series

          this.end = this.indexToPosition(this._endIndex);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "start", {
        /**
         * @return Start (0-1)
         */
        get: function get() {
          if (!this._adapterO) {
            return this._start;
          } else {
            return this._adapterO.apply("start", this._start);
          }
        },

        /**
         * Start of the current data range (zoom).
         *
         * These are relative values from 0 (beginning) to 1 (end).
         *
         * @param value Start (0-1)
         */
        set: function set(value) {
          // value = $math.round(value, 10); not good
          //if (1 / (this.end - value) > this.maxZoomFactor) {
          //	value = this.end - 1 / this.maxZoomFactor;
          //}
          if (this._start != value) {
            this._start = value;
            var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);
            this._startIndex = Math.min(startIndex, this.dataItems.length);
            this.invalidateDataRange();
            this.invalidate();
            this.dispatchImmediately("startchanged");
            this.dispatch("startendchanged");
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "end", {
        /**
         * @return End (0-1)
         */
        get: function get() {
          if (!this._adapterO) {
            return this._end;
          } else {
            return this._adapterO.apply("end", this._end);
          }
        },

        /**
         * End of the current data range (zoom).
         *
         * These are relative values from 0 (beginning) to 1 (end).
         *
         * @param value End (0-1)
         */
        set: function set(value) {
          // value = $math.round(value, 10); // not good
          //if (1 / (value - this.start) > this.maxZoomFactor) {
          //	value = 1 / this.maxZoomFactor + this.start;
          //}
          if (this._end != value) {
            this._end = value;
            this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);
            this.invalidateDataRange();
            this.invalidate();
            this.dispatchImmediately("endchanged");
            this.dispatch("startendchanged");
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * [removeFromInvalids description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */

      Component.prototype.removeFromInvalids = function () {
        _super.prototype.removeFromInvalids.call(this);

        _Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].removeFromInvalidComponents(this);

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidDataItems, this);

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidDataRange, this);

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].invalidRawDatas, this);
      };

      Object.defineProperty(Component.prototype, "dataItems", {
        /**
         * Returns a list of source [[DataItem]] objects currently used in the chart.
         *
         * @return List of data items
         */
        get: function get() {
          if (this._currentDataSetId != "") {
            var dataItems = this.dataSets.getKey(this._currentDataSetId);

            if (dataItems) {
              return dataItems;
            }
          }

          return this._dataItems;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "dataSets", {
        /**
         * Holds data items for data sets (usually aggregated data).
         *
         * @ignore
         * @since 4.7.0
         * @return  Data sets
         */
        get: function get() {
          if (!this._dataSets) {
            this._dataSets = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["Dictionary"]();
          }

          return this._dataSets;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Makes the chart use particular data set.
       *
       * If `id` is not provided or there is no such data set, main data will be
       * used.
       *
       * @ignore
       * @since 4.7.0
       * @param  id  Data set id
       */

      Component.prototype.setDataSet = function (id) {
        if (this._currentDataSetId != id) {
          var dataSet = this.dataSets.getKey(id);

          if (!dataSet) {
            if (this._currentDataSetId != "") {
              this.dataItems.each(function (dataItem) {
                dataItem.__disabled = true;
              });
              this._currentDataSetId = "";
              this.invalidateDataRange();
              this._prevStartIndex = undefined;
              this.dataItems.each(function (dataItem) {
                dataItem.__disabled = false;
              });
              return true;
            }
          } else {
            this.dataItems.each(function (dataItem) {
              dataItem.__disabled = true;
            });
            this._currentDataSetId = id;
            this.invalidateDataRange();
            this._prevStartIndex = undefined;
            this.dataItems.each(function (dataItem) {
              dataItem.__disabled = false;
            });
            return true;
          }
        }

        return false;
      };

      Object.defineProperty(Component.prototype, "currentDataSetId", {
        /**
         * Returns id of the currently used data set, or `undefined` if main data set
         * is in use.
         *
         * @since 4.7.0
         * @return Current data set id
         */
        get: function get() {
          return this._currentDataSetId;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "mainDataSet", {
        /**
         * Returns reference to "main" data set (unaggregated data as it was supplied
         * in `data`).
         *
         * @since 4.7.0
         * @return Main data set
         */
        get: function get() {
          return this._dataItems;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Updates the indexes for the dataItems
       *
       * @ignore Exclude from docs
       */

      Component.prototype._updateDataItemIndexes = function (startIndex) {
        var dataItems = this.mainDataSet.values;
        var length = dataItems.length;

        for (var i = startIndex; i < length; ++i) {
          dataItems[i]._index = i;
        }
      };
      /**
       * Processes newly added [[DataItem]] as well as triggers data re-validation.
       *
       * @ignore Exclude from docs
       * @param event [description]
       */


      Component.prototype.handleDataItemAdded = function (event) {
        event.newValue.component = this;

        this._updateDataItemIndexes(event.index);

        if (!this.dataItemsInvalid) {
          this.invalidateDataItems();
        }
      };
      /**
       * removes [[DataItem]] as well as triggers data re-validation.
       *
       * @ignore Exclude from docs
       * @param event [description]
       */


      Component.prototype.handleDataItemRemoved = function (event) {
        //		event.oldValue.component = undefined; // not good, as some items might be not removed from component lists
        this._updateDataItemIndexes(event.index);

        if (!this.dataItemsInvalid) {
          this.invalidateDataItems();
        }
      };
      /**
       * Binds a data element's field to a specific field in raw data.
       * For example, for the very basic column chart you'd want to bind a `value`
       * field to a field in data, such as `price`.
       *
       * Some more advanced Components, like [[CandlestickSeries]] need several
       * data fields bound to data, such as ones for open, high, low and close
       * values.
       *
       * @todo Example
       * @param field  Field name
       * @param value  Field name in data
       */


      Component.prototype.bindDataField = function (field, value) {
        this.dataFields[field] = value;
        this.invalidateDataRange();
      };
      /**
       * Invalidates processed data.
       *
       * @ignore Exclude from docs
       */


      Component.prototype.invalidateProcessedData = function () {
        this.resetProcessedRange();
        this.invalidateDataRange();
      };
      /**
       * [resetProcessedRange description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */


      Component.prototype.resetProcessedRange = function () {
        this._prevEndIndex = null;
        this._prevStartIndex = null;
      };

      Object.defineProperty(Component.prototype, "dataUsers", {
        /**
         * Returns all other [[Component]] objects that are using this element's
         * data.
         *
         * @ignore Exclude from docs
         * @todo Description (review)
         * @return [description]
         */
        get: function get() {
          var _this = this;

          if (!this._dataUsers) {
            this._dataUsers = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"](); //this._disposers.push(new ListDisposer(this._dataUsers));
            // TODO better way of handling this? e.g. move into another module ?

            this._disposers.push(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_5__["Disposer"](function () {
              // TODO clear the list ?
              _utils_Iterator__WEBPACK_IMPORTED_MODULE_15__["each"](_this._dataUsers.iterator(), function (x) {
                x.dispose();
              });
            }));
          }

          return this._dataUsers;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns a clone of this element.
       *
       * @return Clone
       */

      Component.prototype.clone = function () {
        var component = _super.prototype.clone.call(this);

        component.dataFields = _utils_Utils__WEBPACK_IMPORTED_MODULE_14__["copyProperties"](this.dataFields, {});
        return component;
      };
      /**
       * Copies all parameters from another [[Component]].
       *
       * @param source Source Component
       */


      Component.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.data = source.data;
        this.sequencedInterpolation = source.sequencedInterpolation;
        this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;
        this.interpolationDuration = source.interpolationDuration;
        this.interpolationEasing = source.interpolationEasing;
      };
      /**
       * Invalidates the whole element, including all its children, causing
       * complete re-parsing of data and redraw.
       *
       * Use sparingly!
       */


      Component.prototype.reinit = function () {
        this._inited = false;
        this.deepInvalidate();
      };
      /**
       * Add an adapter for data.
       *
       * @return Exporting
       */


      Component.prototype.getExporting = function () {
        var _export = _super.prototype.getExporting.call(this);

        if (!_export.adapter.has("data", this._exportData, -1, this)) {
          _export.adapter.add("data", this._exportData, -1, this);

          this.events.on("datavalidated", function (ev) {
            if (_export.menu) {
              _export.menu.invalidate();
            }

            _export.handleDataUpdated();
          });
        }

        return _export;
      };

      Component.prototype._exportData = function (arg) {
        arg.data = this.data;
        return arg;
      };

      Component.prototype.setDisabled = function (value) {
        var changed = _super.prototype.setDisabled.call(this, value);

        if (changed) {
          this.invalidateData();
        }

        return changed;
      };
      /**
       * @ignore
       */


      Component.prototype.setShowOnInit = function (value) {
        if (value != this.getPropertyValue("showOnInit")) {
          if (value && !this.inited && !this.hidden) {
            this._showOnInitDisposer2 = this.events.once("dataitemsvalidated", this.hideInitially, this, false);

            this._disposers.push(this._showOnInitDisposer2);
          } else {
            if (this._showOnInitDisposer2) {
              this.removeDispose(this._showOnInitDisposer2);
            }
          }
        } // important order here


        _super.prototype.setShowOnInit.call(this, value);
      };

      Component.prototype.setBaseId = function (value) {
        if (value != this._baseId) {
          if (this.dataInvalid) {
            this.dataInvalid = false;

            _Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].removeFromInvalidComponents(this);

            this._baseId = value;
            this.invalidateData();
          }
        }

        _super.prototype.setBaseId.call(this, value);
      };

      Object.defineProperty(Component.prototype, "minZoomCount", {
        /**
         * @return Min zoom count
         */
        get: function get() {
          return this.getPropertyValue("minZoomCount");
        },

        /**
         * Use this for [[CategoryAxis]] or [[DateAxis]].
         *
         * Allows restricting zoom in beyond certain number of categories or base
         * intervals.
         *
         * @default 1
         * @param value  Min zoom count
         */
        set: function set(value) {
          this.setPropertyValue("minZoomCount", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Component.prototype, "maxZoomCount", {
        /**
         * @return Max zoom count
         */
        get: function get() {
          return this.getPropertyValue("maxZoomCount");
        },

        /**
         * Use this for [[CategoryAxis]] or [[DateAxis]].
         *
         * Limits how many categories or base intervals can be shown at the same
         * time.
         *
         * If there are more items in the chart, the chart will auto-zoom.
         *
         * @default 0 (no limit)
         * @since 4.6.2
         * @param value  Max zoom count
         */
        set: function set(value) {
          this.setPropertyValue("maxZoomCount", value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Called during the System.update method
       *
       * @ignore Exclude from docs
       */

      Component.prototype._systemCheckIfValidate = function () {
        if (this.dataInvalid || this.dataProvider && this.dataProvider.dataInvalid) {
          return false;
        } else {
          return true;
        }
      };
      /**
       * Adds easing functions to "function" fields.
       *
       * @param field  Field name
       * @return Assign as function?
       */


      Component.prototype.asFunction = function (field) {
        return field == "interpolationEasing" || field == "rangeChangeEasing" || _super.prototype.asIs.call(this, field);
      };

      return Component;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_10__["registry"].registeredClasses["Component"] = Component; //# sourceMappingURL=Component.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/Container.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/Container.js ***!
    \**********************************************************************/

  /*! exports provided: Container */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreContainerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Container", function () {
      return Container;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _SpriteState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./SpriteState */
    "./node_modules/@amcharts/amcharts4/.internal/core/SpriteState.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _interaction_Interaction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./interaction/Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _elements_Rectangle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./elements/Rectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Rectangle.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ./Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /**
     * Container module
     * @todo Needs description
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Container can contain multiple sprites and arrange them in various layouts.
     *
     * @see {@link IContainerEvents} for a list of available events
     * @see {@link IContainerAdapters} for a list of available Adapters
     * @important
     */

    var Container =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Container, _super);
      /**
       * Constructor
       */

      function Container() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Container children. (sorted by layout)
         *
         * @ignore Exclude from docs
         */


        _this._childrenByLayout = [];
        /**
         * Container's disposers for its child elements.
         *
         * @ignore Exclude from docs
         */

        _this._childrenDisposers = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__["Dictionary"]();
        /**
         * Indicates if this container contains any focused elements, including
         * itself.
         */

        _this.hasFocused = false;
        /**
         * An array of references to elements the state should be set, when it is set
         * on this element.
         */

        _this.setStateOnSprites = [];
        /*
         * @ignore
         */

        _this.layoutInvalid = false;
        _this._absoluteWidth = 0;
        _this._absoluteHeight = 0;
        /**
         * An array of child Sprites that should be ready before this object can
         * fire a "ready" event.
         */

        _this._shouldBeReady = [];
        /**
         * Enables touch tap protection.
         */

        _this._tapToActivate = false;
        /**
         * If `tapToActivate` is used, this setting will determine how long the chart
         * will stay in "active" mode.
         *
         * @default 3000
         * @since 4.4.0
         */

        _this.tapTimeout = 3000;
        _this.className = "Container";
        _this._element = _this.paper.addGroup("g");

        _this.group.add(_this.element);

        _this.setPropertyValue("pixelPerfect", false);

        _this.setPropertyValue("layout", "absolute");

        _this.setPropertyValue("fixedWidthGrid", false);

        _this.setPropertyValue("verticalCenter", "none");

        _this.setPropertyValue("horizontalCenter", "none");

        _this._positionPrecision = 4;

        _this._disposers.push(new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__["DictionaryDisposer"](_this._childrenDisposers));

        _this.children.events.on("inserted", _this.handleChildAdded, _this);

        _this.children.events.on("removed", _this.handleChildRemoved, _this);

        _this.applyTheme();

        return _this;
      }
      /**
       * Handles adding of a new child into `children`. Adding new children might
       * affect the whole layout so it needs to be revalidated.
       *
       * @ignore Exclude from docs
       * @param event Event object
       * @todo Throw an exception on adding a disposed object. Of course it's better NOT TO add disposed objects, so that what we should focus on.
       */


      Container.prototype.handleChildAdded = function (event) {
        this.processChild(event.newValue);
      };
      /**
       * @ignore
       */


      Container.prototype.processChild = function (child) {
        // try solves the problem when somedy adds child directly to children
        try {
          this._childrenDisposers.insertKey(child.uid, new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([// it's not enough to listen to POSITION_CHANGED only, as some extra redrawals will happen.
          child.events.on("transformed", this.handleChildTransform, this), child.events.on("zIndexChanged", this.sortAndAdd, this)]));
        } catch (err) {// void
        }

        if (this.element) {
          var group = this.element;
          group.add(child.group);
        }

        child.parent = this;
        child.paper = this.paper;
        this.dispatchImmediately("childadded", {
          type: "childadded",
          newValue: child
        });
        this.invalidate();
      };
      /**
       * @ignore
       */


      Container.prototype.sortAndAdd = function () {
        this.sortChildren();
        this.addChildren();
      };
      /**
       * Handles child removal. Changing size of the child may change the
       * whole layout of the Container, hence layout needs to be invalidated.
       *
       * @ignore Exclude from docs
       * @param event Event object
       */


      Container.prototype.handleChildRemoved = function (event) {
        var child = event.oldValue; // TODO figure out why the key sometimes doesn't exist

        this._childrenDisposers.removeKey(child.uid);

        if (this.element) {
          var group = this.element;
          group.removeElement(child.group);
        }

        if (child.isMeasured) {
          this.invalidateLayout();
        }

        this.dispatchImmediately("childremoved", {
          type: "childremoved",
          oldValue: child
        });
      };
      /**
       * Handles child transformation. Changing size of the child may change the
       * whole layout of the Container, hence layout needs to be invalidated.
       *
       * @ignore Exclude from docs
       * @param event Event object
       */


      Container.prototype.handleChildTransform = function (event) {
        var child = event.target;

        if (child.isMeasured) {
          // && this.layout != "none" && this.layout != "absolute") {
          this.invalidateLayout();
        }
      };
      /**
       * Invalidates Container's layout, causing it to be re-evaluated again.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.invalidateLayout = function () {
        if (this.layoutInvalid || this.disabled || this.isTemplate || this.layout == "none" || this.__disabled) {
          return;
        }

        this.layoutInvalid = true;

        _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].addToInvalidLayouts(this);

        _System__WEBPACK_IMPORTED_MODULE_15__["system"].requestFrame();
      };
      /**
       * Invalidates element.
       *
       * Object will be redrawn during the next update cycle.
       *
       * Please note that in most cases elements will auto-invalidate when needed. If
       * everything works, DO NOT use this method. Use it only if some changes do
       * not take otherwise.
       */


      Container.prototype.invalidate = function () {
        _super.prototype.invalidate.call(this);

        this.invalidateLayout();
      };
      /**
       * Invalidates the whole element, including layout AND all its child
       * elements.
       *
       * As this will essentially force all elements to redraw, use only if
       * absolutely necessary.
       */


      Container.prototype.deepInvalidate = function () {
        _super.prototype.invalidate.call(this); //this.sortChildren();


        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](this._childrenByLayout, function (child) {
          if (child instanceof Container) {
            child.deepInvalidate();
          } else {
            child.invalidate();
          }
        });

        this.invalidateLayout();
      };

      Object.defineProperty(Container.prototype, "children", {
        /**
         * Returns a list of the child [[Sprite]] elements contained in this
         * Container.
         *
         * @return List of child elements (Sprites)
         */
        get: function get() {
          // @todo Review if we can add all children to disposers
          if (!this._children) {
            this._children = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["List"](); //this._disposers.push(new ListDisposer(this._children));
          }

          return this._children;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "minWidth", {
        /**
         * @return Width (px)
         */
        get: function get() {
          return this.getPropertyValue("minWidth");
        },

        /**
         * Minimum width (px) for the Container. A container will not
         * auto-shrink beyond this value, even if child elements are smaller.
         *
         * @param value  Width (px)
         */
        set: function set(value) {
          if (this.setPropertyValue("minWidth", value)) {
            this.invalidateLayout();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "minHeight", {
        /**
         * @return Height (px)
         */
        get: function get() {
          return this.getPropertyValue("minHeight");
        },

        /**
         * Minimum height (px) for the Container. A container will not
         * auto-shrink beyond this value, even if child elements are smaller.
         *
         * @param value  Height (px)
         */
        set: function set(value) {
          if (this.setPropertyValue("minHeight", value)) {
            this.invalidateLayout();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Overrides the original `removeElement` so that Container's actual element
       * is not removed. We do not need to remove element of a Container.
       *
       * We do this because remove element each time will fail the `getBBox`.
       *
       * @ignore Exclude from docs
       */

      Container.prototype.removeElement = function () {};
      /**
       * Sorts Container's children: the ones with variable width and height are
       * put at the end of the list (depending on layout type), so that fixed-width
       * ones can be drawn first.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.sortChildren = function () {
        var _this = this;

        this._childrenByLayout = [];

        if (this.layout == "none" || this.layout == "absolute" || !this.layout) {
          //$iter.each(this.children.iterator(), (child) => {
          //	this._childrenByLayout.push(child);
          //});
          this._childrenByLayout = this.children.values;
        } else {
          // Assemble fixed-size and relative lists
          var fixed_1 = [];
          var relative_1 = [];

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["each"](this.children.iterator(), function (child) {
            if (_this.layout == "horizontal" || _this.layout == "grid") {
              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
                fixed_1.push(child);
              } else {
                relative_1.push(child);
              }
            } else if (_this.layout == "vertical") {
              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
                fixed_1.push(child);
              } else {
                relative_1.push(child);
              }
            } else {
              fixed_1.push(child);
            }
          }); // Concat everything into list


          this._childrenByLayout = fixed_1.concat(relative_1);
        }

        this.calculateRelativeSize();
      };
      /**
       * Calculates relative sizes for all Container's children.
       *
       * @ignore Exclude from docs
       * @todo Make it protected?
       */


      Container.prototype.calculateRelativeSize = function () {
        var _this = this;

        var totalRelativeWidth = 0;
        var totalRelativeHeight = 0;

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](this._childrenByLayout, function (child) {
          // if child is not measured, we do not care about it at all.
          if (child.isMeasured) {
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
              totalRelativeWidth += child.percentWidth;
            }

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
              totalRelativeHeight += child.percentHeight;
            }
          }
        });

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](this._childrenByLayout, function (child) {
          if (child.isMeasured) {
            if (_this.layout == "horizontal") {
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
                child.relativeWidth = child.percentWidth / totalRelativeWidth;
              }

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
                child.relativeHeight = child.percentHeight / 100;
              }
            }

            if (_this.layout == "vertical") {
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
                child.relativeHeight = child.percentHeight / totalRelativeHeight;
              }

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
                child.relativeWidth = child.percentWidth / 100;
              }
            }

            if (_this.layout == "grid") {
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
                child.relativeHeight = child.percentHeight / 100;
              }

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
                child.relativeWidth = child.percentWidth / 100;
              }
            }
          }

          if (_this.layout == "absolute" || !child.isMeasured) {
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
              child.relativeWidth = child.percentWidth / 100;
            }

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
              child.relativeHeight = child.percentHeight / 100;
            }
          }
        });
      };
      /**
       * Adds all children to Container's SVG element.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.addChildren = function () {
        /*
          Need this check because a child might be assigned to parent even before element is created, for example a theme
          access scrollbar.thumb
        */
        if (this.element) {
          var zindexed = _utils_Array__WEBPACK_IMPORTED_MODULE_12__["copy"](this.children.values); // not children by layout!


          var sortArray = zindexed.map(function (data, idx) {
            return {
              idx: idx,
              data: data
            };
          });
          sortArray.sort(function (a, b) {
            var ai = a.data.zIndex || 0;
            var bi = b.data.zIndex || 0;

            if (ai < bi) {
              return -1;
            }

            if (ai > bi) {
              return 1;
            }

            return a.idx - b.idx;
          });
          zindexed = sortArray.map(function (val) {
            return val.data;
          });
          var group_1 = this.element; // check, maybe the order is good already

          var isCorrect = true;

          if (group_1.node && group_1.node.childNodes) {
            for (var i = 0, len = group_1.node.childNodes.length; i < len; i++) {
              if (group_1.node.childNodes[i] != zindexed[i].group.node) {
                isCorrect = false;
                break;
              }
            }
          }

          if (!isCorrect) {
            _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](zindexed, function (child) {
              if (child.group) {
                group_1.add(child.group);
              }
            });

            if (this._background) {
              this.group.addToBack(this._background.group);
            }

            this.invalidateLayout();
          }
        }
      };
      /**
       * Creates a new element of specific type and assigns as a child to the
       * Container.
       *
       * @param Class type for the new element
       * @return New element
       */


      Container.prototype.createChild = function (classType) {
        var sprite = new classType();
        sprite.parent = this;
        return sprite;
      };
      /**
       * Removes all Container's children without actually destroying them.
       *
       * To destroy children use `disposeChildren()` instead.
       */


      Container.prototype.removeChildren = function () {
        // remove all children
        // TODO use iteration instead
        while (this.children.length > 0) {
          var child = this.children.getIndex(0);
          child.parent = undefined;
          this.children.removeValue(child);
        }
      };
      /**
       * Removes and destroys all Container's children.
       *
       * To remove children from Container without destroying them, use
       * `removeChildren()`.
       */


      Container.prototype.disposeChildren = function () {
        // TODO use iteration instead
        while (this.children.length > 0) {
          var child = this.children.getIndex(0);
          child.dispose();
          this.children.removeValue(child);
        }
      };

      Object.defineProperty(Container.prototype, "background", {
        /**
         * @return Background element
         */
        get: function get() {
          if (!this._background) {
            this._background = this.createBackground();
            this.processBackground();
          }

          return this._background;
        },

        /**
         * An element to use as container background.
         *
         * @param background  Background element
         */
        set: function set(background) {
          if (this._background && this.background != background) {
            this.removeDispose(this._background);
          }

          if (background) {
            this._background = background;

            this._disposers.push(background);

            this.processBackground();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Handles the situation where parent element is resized.
       *
       * @ignore Exclude from docs
       */

      Container.prototype.handleGlobalScale = function () {
        _super.prototype.handleGlobalScale.call(this);

        this.children.each(function (child) {
          child.handleGlobalScale();
        });
      };
      /**
       * Creates and returns a [[Rectangle]] to use as a background for Container.
       *
       * @ignore Exclude from docs
       * @return Background Rectangle element
       */


      Container.prototype.createBackground = function () {
        return new _elements_Rectangle__WEBPACK_IMPORTED_MODULE_7__["Rectangle"]();
      };
      /**
       * Decorates background element with required properties.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.processBackground = function () {
        var background = this._background;

        if (background) {
          background.isMeasured = false;
          this._background.fill = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_10__["InterfaceColorSet"]().getFor("background");
          background.parent = this;
          background.isMeasured = false;
          this.children.removeValue(background);

          this._disposers.push(background);

          this.group.addToBack(this._background.group);
        }
      };
      /**
       * Measures the size of container and informs its children of how much size
       * they can occupy, by setting their relative `maxWidth` and `maxHeight`
       * properties.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.validateLayout = function () {
        var _this = this;

        _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].removeFromInvalidLayouts(this);

        this.layoutInvalid = false; // prevents from drawing if topparent is 0x0

        /*
        let topParent = this.topParent;
        if (topParent) {
            if (!topParent.maxWidth || !topParent.maxHeight) {
                this._disposers.push(topParent.events.once("maxsizechanged", this.invalidateLayout, this));
            }
        }*/

        this._availableWidth = this.innerWidth;
        this._availableHeight = this.innerHeight;
        var measuredWidth = 0;
        var measuredHeight = 0;
        var allValid = true;

        if (this.children) {
          this.sortChildren(); // we itterate through list of children, sorted by layout priority. sprites which width non-relative width/height will go first, so we will reduce available width before proceeding to sprites with relative width/height

          _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](this._childrenByLayout, function (child) {
            var maxWidth;
            var maxHeight;

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.relativeWidth)) {
              maxWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["round"](_this._availableWidth * child.relativeWidth, 2);

              if (_this.layout == "horizontal") {
                // || this.layout == "absolute") {
                maxWidth -= child.pixelMarginRight + child.pixelMarginLeft;
              }
            } else {
              if (_this.layout == "horizontal") {
                if (child.invalid) {
                  child.validate();
                }
              }
            }

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.relativeHeight)) {
              maxHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["round"](_this._availableHeight * child.relativeHeight, 2);

              if (_this.layout == "vertical") {
                //  || this.layout == "absolute") {
                maxHeight -= child.pixelMarginTop + child.pixelMarginBottom;
              }
            } else {
              if (_this.layout == "vertical") {
                if (child.invalid) {
                  child.validate();
                }
              }
            } // if child is valid


            if (child.invalid == false) {
              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.relativeWidth)) {
                child.maxWidth = maxWidth;
              }

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.relativeHeight)) {
                child.maxHeight = maxHeight;
              }

              if (child.isMeasured) {
                // reduce available width if this is horizontal layout
                if (_this.layout == "horizontal") {
                  if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentWidth)) {
                    if (child.measuredWidth > 0) {
                      _this._availableWidth -= child.measuredWidth + child.pixelMarginLeft + child.pixelMarginRight;
                    }
                  }
                } // reduce available height if this is vertical layout


                if (_this.layout == "vertical") {
                  if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.percentHeight)) {
                    if (child.measuredHeight > 0) {
                      _this._availableHeight -= child.measuredHeight + child.pixelMarginTop + child.pixelMarginBottom;
                    }
                  }
                }

                var childMeasuredWidth = child.measuredWidth;
                var childMeasuredHeight = child.measuredHeight;

                if (child.align != "none") {
                  childMeasuredWidth += child.pixelMarginLeft + child.pixelMarginRight;
                }

                if (child.valign != "none") {
                  childMeasuredHeight += child.pixelMarginTop + child.pixelMarginBottom;
                }

                measuredWidth = Math.max(measuredWidth, childMeasuredWidth);
                measuredHeight = Math.max(measuredHeight, childMeasuredHeight);
              }
            } // if child is not valid
            else {
                // tell child what maximum width/ height it can occupy
                if (child.isMeasured) {
                  if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.relativeWidth)) {
                    if (child.maxWidth != maxWidth) {
                      // need to check this because of allValid
                      child.maxWidth = maxWidth;
                      allValid = false;
                    }
                  }

                  if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](child.relativeHeight)) {
                    if (child.maxHeight != maxHeight) {
                      // need to check this because of allValid
                      child.maxHeight = maxHeight;
                      allValid = false;
                    }
                  }
                }
              }
          });
        }

        this._absoluteWidth = measuredWidth;
        this._absoluteHeight = measuredHeight; // arrange after measuring, only if all children are valid already

        if (allValid) {
          this.arrange();
        }
      };
      /**
       * Arranges children according to layout specs and available space / child
       * sizes.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.arrange = function () {
        var _this = this;

        var children = this.children;
        /*
           in this method we not only arrange children but also find out the size of the container
           it might seem it would be easier to get container size using sprite's measure method,
           however it would return only actual size of the bbox. However as each child meight have
           margins set, we need to check each child - we do it here.
             This method doesn't do anything with DOM, so it's not expensive
        */

        var measuredWidth = 0;
        var measuredHeight = 0; //let innerWidth: number = this.innerWidth; //$math.max(this.innerWidth, this._measuredWidth - paddingLeft - paddingRight);
        //let innerHeight: number = this.innerHeight; //$math.max(this.innerHeight, this._measuredHeight - paddingTop - paddingBottom);
        // above is wrong, as if a w/h is not specified, it is 0 and alignment doesn't work at all.

        var innerWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](this.innerWidth, this._absoluteWidth);

        var innerHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](this.innerHeight, this._absoluteHeight);

        var left; // = 0;

        var right; // = innerWidth;

        var top; // = 0;

        var bottom; // = innerHeight;

        var paddingLeft = this.pixelPaddingLeft;
        var paddingRight = this.pixelPaddingRight;
        var paddingTop = this.pixelPaddingTop;
        var paddingBottom = this.pixelPaddingBottom;
        var nextX = 0;
        var nextY = 0;
        var row = 0;
        var column = 0;
        var columnWidth = [];
        var rowHeight = [];
        var maxCellWidth;
        var minCellWidth;
        var columnCount;
        var maxWidth = this.maxWidth;
        var maxHeight = this.maxHeight;
        var minWidth = this.minWidth;
        var minHeight = this.minHeight;

        var childrenCopy = _utils_Array__WEBPACK_IMPORTED_MODULE_12__["copy"](children.values);

        if (this.reverseOrder) {
          childrenCopy.reverse();
        } // GRID PRECALCULATIONS


        if (this.layout == "grid") {
          minCellWidth = maxWidth;
          maxCellWidth = 1;

          for (var i = 0, len = childrenCopy.length; i < len; i++) {
            var child = childrenCopy[i];

            if (child.isMeasured && !child.disabled && !child.__disabled) {
              var childMeasuredWidth = child.measuredWidth;

              if (childMeasuredWidth < minCellWidth) {
                minCellWidth = childMeasuredWidth;
              }

              if (childMeasuredWidth > maxCellWidth) {
                maxCellWidth = childMeasuredWidth;
              }
            }
          }

          minCellWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["fitToRange"](minCellWidth, 1, maxWidth);
          maxCellWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["fitToRange"](maxCellWidth, 1, maxWidth);

          if (this.fixedWidthGrid) {
            columnCount = maxWidth / maxCellWidth;
          } else {
            columnCount = maxWidth / minCellWidth; // predicted number of columns, yes it is usually much more than real number, but we fix that later
          }

          columnCount = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](1, Math.floor(columnCount));
          columnCount = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["min"](this.maxColumns, columnCount);
          columnWidth = this.getColumnWidth(childrenCopy, columnCount, maxCellWidth);
        }

        var contentLeft;
        var contentRight;
        var contentTop;
        var contentBottom; // we itterate through array of children
        // TODO use iterator instead

        for (var i = 0, len = childrenCopy.length; i < len; i++) {
          var child = childrenCopy[i];

          if (child.isMeasured && !child.disabled && !child.__disabled) {
            var x = undefined; //child.pixelX; // must reset

            var y = undefined; //child.pixelY; // must reset

            var childMarginLeft = child.pixelMarginLeft;
            var childMarginRight = child.pixelMarginRight;
            var childMarginTop = child.pixelMarginTop;
            var childMarginBottom = child.pixelMarginBottom;
            var childWidth = child.measuredWidth;
            var childHeight = child.measuredHeight;
            var childLeft = void 0;
            var childRight = void 0;
            var childTop = void 0;
            var childBottom = void 0;

            switch (this.layout) {
              case "none":
                break;
              // absolute layout

              case "absolute":
                // horizontal alignment
                switch (child.align) {
                  case "left":
                    x = childMarginLeft - child.maxLeft;
                    break;

                  case "center":
                    x = (innerWidth - childWidth) / 2 - child.maxLeft;
                    break;

                  case "right":
                    x = innerWidth - childMarginRight - child.maxRight;
                    break;

                  default:
                    if (!(child.x instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_8__["Percent"])) {
                      x = child.pixelX;
                    }

                    break;
                } // vertical alignment


                switch (child.valign) {
                  case "top":
                    y = childMarginTop - child.maxTop;
                    break;

                  case "middle":
                    y = (innerHeight - childHeight) / 2 - child.maxTop;
                    break;

                  case "bottom":
                    y = innerHeight - childMarginBottom - child.maxBottom;
                    break;

                  default:
                    if (!(child.y instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_8__["Percent"])) {
                      y = child.pixelY;
                    }

                    break;
                }

                break;
              // vertical layout

              case "vertical":
                //if ($type.isNumber(child.relativeHeight)) {
                //	childHeight = child.maxHeight;
                //}
                switch (child.align) {
                  case "left":
                    x = childMarginLeft - child.maxLeft;
                    break;

                  case "center":
                    x = (innerWidth - childWidth) / 2 - child.maxLeft;
                    break;

                  case "right":
                    x = innerWidth - childMarginRight - child.maxRight;
                    break;

                  default:
                    x = child.pixelX;
                    break;
                }

                y = nextY + childMarginTop - child.maxTop;
                nextY = y + child.maxBottom + childMarginBottom;
                break;
              // horizontal layout

              case "horizontal":
                //if ($type.isNumber(child.relativeHeight)) {
                //	childHeight = child.maxHeight;
                //}
                switch (child.valign) {
                  case "top":
                    y = childMarginTop - child.maxTop;
                    break;

                  case "middle":
                    y = (innerHeight - childHeight) / 2 - child.maxTop;
                    break;

                  case "bottom":
                    y = innerHeight - childMarginBottom - child.maxBottom;
                    break;

                  default:
                    y = child.pixelY;
                    break;
                }

                x = nextX + childMarginLeft - child.maxLeft;
                nextX = x + child.maxRight + childMarginRight;
                break;

              case "grid":
                x = nextX + childMarginLeft - child.maxLeft;

                switch (child.valign) {
                  case "top":
                    y = nextY + childMarginTop - child.maxTop;
                    break;

                  case "middle":
                    y = nextY + (innerHeight - childHeight) / 2 - child.maxTop;
                    break;

                  case "bottom":
                    y = nextY + innerHeight - childMarginBottom - child.maxBottom;
                    break;

                  default:
                    y = nextY - child.maxTop;
                    break;
                }

                nextX += columnWidth[column];
                rowHeight[row] = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](rowHeight[row], childHeight);
                column++;
                var nextColumnWidth = columnWidth[column];

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](nextColumnWidth)) {
                  nextColumnWidth = maxCellWidth;
                }

                if (nextX > _utils_Math__WEBPACK_IMPORTED_MODULE_13__["min"](this.innerWidth, maxWidth) - nextColumnWidth + 1 && column < columnCount) {
                  columnCount = column;
                  nextX = 0;
                  nextY = 0;
                  row = 0;
                  column = 0;
                  columnWidth = this.getColumnWidth(childrenCopy, columnCount, maxCellWidth);
                  rowHeight = [];
                  i = -1;
                  continue;
                }

                if (column >= columnCount) {
                  column = 0;
                  nextY += rowHeight[row];
                  row++;
                  nextX = 0;
                }

                break;
            }

            if (this.layout !== "none") {
              child.moveTo({
                x: x,
                y: y
              }); // must use moveTo, otherwise x/y set in percent won't work

              childLeft = x + child.maxLeft - childMarginLeft;
              childRight = x + child.maxRight + childMarginRight;
              childTop = y + child.maxTop - childMarginTop;
              childBottom = y + child.maxBottom + childMarginBottom;

              if (childRight > right || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](right)) {
                right = childRight;
              }

              if (childLeft < left || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](left)) {
                left = childLeft;
              }

              if (childTop < top || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](top)) {
                top = childTop;
              }

              if (childBottom > bottom || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](bottom)) {
                bottom = childBottom;
              }

              if (childRight > contentRight || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentRight)) {
                contentRight = childRight;
              }

              if (childLeft < contentLeft || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentLeft)) {
                contentLeft = childLeft;
              }

              if (childTop < contentTop || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentTop)) {
                contentTop = childTop;
              }

              if (childBottom > contentBottom || !_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentBottom)) {
                contentBottom = contentBottom;
              }
            }
          } else {
            child.validatePosition();
          }
        }

        if (this.layout == "none") {
          var noneBBox = this.bbox;
          left = noneBBox.x;
          right = noneBBox.x + noneBBox.width;
          top = noneBBox.y;
          bottom = noneBBox.y + noneBBox.height;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](left)) {
          left = 0;
          contentLeft = 0;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](right)) {
          right = this._availableWidth;
          contentRight = right;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](top)) {
          top = 0;
          contentTop = 0;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](bottom)) {
          bottom = this._availableHeight;
          contentBottom = bottom;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentTop)) {
          contentTop = 0;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentBottom)) {
          contentBottom = contentTop;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentLeft)) {
          contentLeft = 0;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](contentRight)) {
          contentRight = contentLeft;
        }

        measuredWidth = right - left;
        measuredHeight = bottom - top;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](this.relativeWidth)) {
          measuredWidth = maxWidth - paddingLeft - paddingRight;
          left = 0;
          right = measuredWidth;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](this.relativeHeight)) {
          measuredHeight = maxHeight - paddingTop - paddingBottom;
          top = 0;
          bottom = measuredHeight;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](this._pixelWidth)) {
          left = 0;
          measuredWidth = this._pixelWidth - paddingLeft - paddingRight;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](minWidth) && measuredWidth < minWidth) {
          left = 0;
          measuredWidth = this.minWidth - paddingLeft - paddingRight;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](this._pixelHeight)) {
          top = 0;
          measuredHeight = this._pixelHeight - paddingTop - paddingBottom;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](minHeight) && measuredHeight < minHeight) {
          top = 0;
          measuredHeight = minHeight - paddingTop - paddingBottom;
        }

        var measuredContentWidth = contentRight - contentLeft;
        var measuredContentHeight = contentBottom - contentTop; /// handle content alignment

        if (this.layout != "none" && (this.contentAlign || this.contentValign) && children.length > 0) {
          var dx_1;
          var dy_1;
          var mwa = measuredWidth;
          var mha = measuredHeight;

          if (mwa < measuredContentWidth) {
            mwa = measuredContentWidth;
          }

          if (mha < measuredContentHeight) {
            mha = measuredContentHeight;
          }

          if (this.contentAlign == "center") {
            dx_1 = (mwa - measuredContentWidth) / 2;
          }

          if (this.contentAlign == "right") {
            dx_1 = mwa - measuredContentWidth;
          }

          if (this.contentValign == "middle") {
            dy_1 = (mha - measuredContentHeight) / 2;
          }

          if (this.contentValign == "bottom") {
            dy_1 = mha - measuredContentHeight;
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](dx_1)) {
            _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["each"](children.iterator(), function (child) {
              var childLeft = child.maxLeft;
              var ddx = dx_1;

              if (_this.layout == "horizontal") {
                child.x = child.pixelX + ddx;
              } // individual grid elements can not be aligned vertically, that's why it's different from horizontal


              if (_this.layout == "grid") {
                child.x = child.pixelX + ddx;
              }

              if (_this.layout == "vertical") {
                ddx += child.pixelMarginLeft;

                if (child.align == "none") {
                  child.x = ddx - childLeft;
                }
              }

              if (_this.layout == "absolute") {
                ddx += child.pixelMarginLeft;

                if (child.align == "none") {
                  child.x = ddx - childLeft;
                }
              }
            });
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_14__["isNumber"](dy_1)) {
            _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["each"](children.iterator(), function (child) {
              var childTop = child.maxTop;
              var ddy = dy_1;

              if (_this.layout == "horizontal") {
                ddy += child.pixelMarginTop;

                if (child.valign == "none") {
                  child.y = ddy - childTop;
                }
              } // individual grid elements can not be aligned vertically, that's why it's different from horizontal


              if (_this.layout == "grid") {
                ddy += child.pixelMarginTop;
                child.y = ddy - childTop;
              }

              if (_this.layout == "vertical") {
                child.y = child.pixelY + ddy;
              }

              if (_this.layout == "absolute") {
                ddy += child.pixelMarginTop;

                if (child.valign == "none") {
                  child.y = ddy - childTop;
                }
              }
            });
          }
        }

        var oldBBox = this.bbox; // this will mess up maxw/maxh set by container layout, we need a separate min/maxwidth for users
        // this prevents invalidating layout in such cases as scrolling category axis, when labels go outside bounds and results transformed event
        // todo: need to check if this doesn't cause other problems.
        //if (this.maxWidth > 0) {
        //measuredWidth = $math.min(measuredWidth, this.maxWidth);
        //measuredWidth = $math.max(measuredWidth, this.minWidth);
        //}
        //if (this.maxHeight > 0) {
        //measuredHeight = $math.min(measuredHeight, this.maxHeight);
        //measuredHeight = $math.max(measuredHeight, this.minHeight);
        //}

        measuredWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](measuredWidth, minWidth);
        measuredHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](measuredHeight, minHeight);
        this.contentWidth = measuredWidth;
        this.contentHeight = measuredHeight; // new

        measuredWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["min"](measuredWidth, maxWidth);
        measuredHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["min"](measuredHeight, maxHeight);
        this._bbox = {
          x: left,
          y: top,
          width: measuredWidth,
          height: measuredHeight
        };
        var prevLeft = this.maxLeft;
        var prevTop = this.maxTop;
        var prevBotttom = this.maxBottom;
        var prevRight = this.maxRight;
        this.measure();

        if (prevLeft != this.maxLeft || prevRight != this.maxRight || prevTop != this.maxTop || prevBotttom != this.maxBottom) {
          if (this.events.isEnabled("transformed")) {
            var event_1 = {
              type: "transformed",
              target: this
            };

            if (oldBBox) {
              event_1.dummyData = oldBBox.width + " " + measuredWidth + "  " + oldBBox.height + " " + measuredHeight;
            }

            this.events.dispatchImmediately("transformed", event_1);
          }
        }

        this.dispatchImmediately("layoutvalidated");
      };
      /**
       * Positions element according its center settings.
       *
       * @todo Description (review)
       * @ignore Exclude from docs
       */


      Container.prototype.updateCenter = function () {
        _super.prototype.updateCenter.call(this);

        this.updateBackground();
      };
      /**
       * Update the background to fit into specific dimensions.
       *
       * @ignore Exclude from docs
       * @todo Make it protected?
       */


      Container.prototype.updateBackground = function () {
        var background = this._background; // accessing protected, as getter creates instance if it doesn't exist

        if (background) {
          background.x = this.maxLeft;
          background.y = this.maxTop;
          background.width = this.maxRight - this.maxLeft;
          background.height = this.maxBottom - this.maxTop;
        }
      };
      /**
       * Returns widths of all columns in a horizontal Container layout.
       *
       * @ignore Exclude from docs
       * @param columnCount   Number of columns
       * @param maxCellWidth  Maximum width of one grid cell
       * @return An array of column widths
       */


      Container.prototype.getColumnWidth = function (children, columnCount, maxCellWidth) {
        var _this = this;

        var columnWidth = [];
        var column = 0;

        _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](children, function (child) {
          if (child.isMeasured && !child.disabled && !child.__disabled) {
            if (_this.fixedWidthGrid) {
              columnWidth[column] = maxCellWidth;
            } else {
              columnWidth[column] = _utils_Math__WEBPACK_IMPORTED_MODULE_13__["max"](columnWidth[column], child.measuredWidth + child.pixelMarginRight + child.pixelMarginLeft);
            }

            column++;

            if (column == columnCount) {
              column = 0;
            }
          }
        });

        return columnWidth;
      };

      Object.defineProperty(Container.prototype, "layout", {
        /**
         * @return Layout
         */
        get: function get() {
          return this.getPropertyValue("layout");
        },

        /**
         * Container layout.
         *
         * Options: "absolute" (default), "vertical", "horizontal", "grid", "none". "none" is quite the same as "absolute" - the objects will
         * be positioned at their x, y coordinates, the difference is that with "absolute" you can still use align/valign for children and with "none" you can not.
         * Use "none" as much as you can as it's most cpu-saving layout.
         *
         * @default "absolute"
         * @param value Layout
         */
        set: function set(value) {
          if (this.setPropertyValue("layout", value)) {
            this.invalidateLayout();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "contentValign", {
        /**
         * @return Vertical alignment
         */
        get: function get() {
          return this.getPropertyValue("contentValign");
        },

        /**
         * Vertical alignment of the elements for the vertical Container.
         *
         * This is used when Container is larger than the height of all its children.
         *
         * @param value vertical alignment
         */
        set: function set(value) {
          this.setPropertyValue("contentValign", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "contentAlign", {
        /**
         * @return Horizontal alignment
         */
        get: function get() {
          return this.getPropertyValue("contentAlign");
        },

        /**
         * Horizontal alignment of the elements for the horizontal Container.
         *
         * This is used when Container is larger than the height of all its children.
         *
         * @param value  Horizontal alignment
         */
        set: function set(value) {
          this.setPropertyValue("contentAlign", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "fixedWidthGrid", {
        /**
         * @return Should use fixed width grid?
         */
        get: function get() {
          return this.getPropertyValue("fixedWidthGrid");
        },

        /**
         * Controls if the grid of the Container should use fixed width. Fixed width
         * grid will divide available space to all its columns/rows equally, without
         * adapting to actual child sizes or size requirements.
         *
         * @default false
         * @param value  Should use fixed width grid?
         */
        set: function set(value) {
          this.setPropertyValue("fixedWidthGrid", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "maxColumns", {
        /**
         * @return Should use fixed width grid?
         */
        get: function get() {
          return this.getPropertyValue("maxColumns");
        },

        /**
         * Maximum number of columns (when using `"grid"` layout).
         *
         * @param value  Should use fixed width grid?
         */
        set: function set(value) {
          this.setPropertyValue("maxColumns", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "reverseOrder", {
        /**
         * @return Reverse children?
         */
        get: function get() {
          return this.getPropertyValue("reverseOrder");
        },

        /**
         * If set to `true`, the children of the container will be drawn in reverse
         * order.
         *
         * @default false
         * @param value  Reverse children?
         */
        set: function set(value) {
          this.setPropertyValue("reverseOrder", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "setStateOnChildren", {
        /**
         * @return Set state on children
         */
        get: function get() {
          return this.getPropertyValue("setStateOnChildren");
        },

        /**
         * Specifies if, when state is applied on this container, the same state
         * should be applied to container's children as well as `background`.
         *
         * @default false
         * @param value  Set state on children
         */
        set: function set(value) {
          this.setPropertyValue("setStateOnChildren", value, true);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if point is within bounds of a container.
       *
       * @param point  A coordinate to check
       * @return `true` if it fits within container
       */

      Container.prototype.fitsToBounds = function (point) {
        var x = point.x;
        var y = point.y;
        var deviation = 0.5; // sometimes coordinates are rounded to numbers like .999 so we add deviation here

        if (x >= -deviation && x <= this.pixelWidth + deviation && y >= -deviation && y <= this.pixelHeight + deviation) {
          return true;
        } else {
          return false;
        }
      };
      /**
       * Copies all properties from different Container, including background
       * clone.
       *
       * @param source  Source Container to copy from
       */


      Container.prototype.copyFrom = function (source) {
        var _this = this;

        _super.prototype.copyFrom.call(this, source);

        this.layout = source.layout;
        this.setStateOnChildren = source.setStateOnChildren;

        if (source._background) {
          this.background = source._background.clone();
          this.background.copyFrom(source._background); // won't work without this
        }

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["each"](source.children.iterator(), function (child) {
          if (child.shouldClone) {
            var clonedChild = child.clone();
            clonedChild.parent = _this;
          }
        });
      };

      Object.defineProperty(Container.prototype, "preloader", {
        /**
         * @return Preloader instance
         */
        get: function get() {
          var preloader = this._preloader;

          if (preloader) {
            return preloader;
          } else if (this.parent) {
            return this.parent.preloader;
          }
        },

        /**
         * A [[Preloader]] instance to be used when Container is busy.
         *
         * @param preloader  Preloader instance
         */
        set: function set(preloader) {
          if (this._preloader) {
            this.removeDispose(this._preloader);
          }

          this._preloader = preloader;

          if (preloader) {
            preloader.parent = this.tooltipContainer;

            this._disposers.push(preloader);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets [[Paper]] instance to use to draw elements.
       * @ignore
       * @param paper Paper
       * @return true if paper was changed, false, if it's the same
       */

      Container.prototype.setPaper = function (paper) {
        var _this = this;

        var changed = _super.prototype.setPaper.call(this, paper);

        if (changed) {
          if (this._background) {
            this._background.paper = paper;
            this._background.topParent = this.topParent;
          }

          this.children.each(function (child) {
            child.setPaper(paper);
            child.topParent = _this.topParent;
          });
        }

        return changed;
      };
      /**
       * Removes Container from the system-wide list of invalid Containers.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.removeFromInvalids = function () {
        _super.prototype.removeFromInvalids.call(this);

        _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].removeFromInvalidLayouts(this);
      };
      /**
       * Sets a [[DataItem]] to be used as data for the Container.
       *
       * @todo Description
       * @param dataItem DataItem
       */


      Container.prototype.setDataItem = function (dataItem) {
        // this place is potentially dangerous, as if we set datItem for some dummy container, all children dataItems will be overriden
        // the main reason for doing this is that we need a setDataItem code to be called for each sprite, otherwise property fields won't be
        // applied. Also, getting dataItem from parent all the time is more expensive than saving value.
        if (this._dataItem != dataItem) {
          _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["each"](this.children.iterator(), function (child) {
            child.dataItem = dataItem;
          });

          if (this._background) {
            this._background.dataItem = dataItem;
          }
        }

        _super.prototype.setDataItem.call(this, dataItem);
      };
      /**
       * Measures the element.
       *
       * @ignore Exclude from docs
       */


      Container.prototype.measureElement = function () {
        if (this.disabled || this.isTemplate || this.layout == "none" || this.__disabled) {// void
        } else {
          this.validateLayout();
        }
      };

      Object.defineProperty(Container.prototype, "fontFamily", {
        /**
         * @return Font family
         */
        get: function get() {
          return this.getPropertyValue("fontFamily");
        },

        /**
         * Font family to be used for the text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param value Font family value
         */
        set: function set(value) {
          if (this.setPropertyValue("fontFamily", value, true)) {
            this.setSVGAttribute({
              "font-family": value
            });
            this.invalidateLabels();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "fontSize", {
        /**
         * @return Font size
         */
        get: function get() {
          return this.getPropertyValue("fontSize");
        },

        /**
         * Font size to be used for the text. The size can either be numeric, in
         * pixels, or other measurements.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param value Font size value
         */
        set: function set(value) {
          if (this.setPropertyValue("fontSize", value, true)) {
            this.setSVGAttribute({
              "font-size": value
            });
            this.invalidateLabels();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.
       */

      Container.prototype.invalidateLabels = function () {
        this.children.each(function (child) {
          // can't import Label because of Circular dependencies
          if (child["hardInvalidate"]) {
            child["hardInvalidate"](); // this fixes firefox and viewport issue

            child.events.once("validated", child.handleValidate, child, false);
          } else if (child instanceof Container) {
            child.invalidateLabels();
          }
        });
      };

      Object.defineProperty(Container.prototype, "fontWeight", {
        /**
         * @return Font weight
         */
        get: function get() {
          return this.getPropertyValue("fontWeight");
        },

        /**
         * Font weight to use for text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param value Font weight
         */
        set: function set(value) {
          this.setPropertyValue("fontWeight", value);
          this.setSVGAttribute({
            "font-weight": value
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Container.prototype, "textDecoration", {
        /**
         * @return Decoration
         */
        get: function get() {
          return this.getPropertyValue("textDecoration");
        },

        /**
         * A text decoration to use for text.
         *
         * Parts of the text may override this setting using in-line formatting.
         *
         * @param value  Decoration
         */
        set: function set(value) {
          this.setPropertyValue("textDecoration", value);
          this.setSVGAttribute({
            "text-decoration": value
          });
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Disposes (destroys) the element and all its children.
       */

      Container.prototype.dispose = function () {
        if (this._background) {
          this._background.dispose();
        }

        this._shouldBeReady = [];
        this.disposeChildren();

        _super.prototype.dispose.call(this);
      };
      /**
       * Applies a [[SpriteState]] on this element.
       *
       * The first parameter can either be a name of the state or a [[SpriteState]]
       * instance.
       *
       * When run, this method will apply SVG properties defined in a
       * [[SpriteState]], but only those that are relevant to this particular
       * element, that is are listed in its respective `properties` array.
       *
       * @see {@link SpriteState}
       * @param value               A state - name key or instance
       * @param transitionDuration  Duration of the transition between current and new state
       * @param easing              An easing function
       */


      Container.prototype.setState = function (value, transitionDuration, easing) {
        var stateName = value;

        if (value instanceof _SpriteState__WEBPACK_IMPORTED_MODULE_2__["SpriteState"]) {
          stateName = value.name;
        }

        if (this.setStateOnChildren) {
          _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["each"](this.children.iterator(), function (child) {
            child.setState(stateName, transitionDuration, easing); // not good to set it in child setState

            if (stateName != "active") {
              child.isActive = false;
            }
          });
        }

        if (this._background) {
          this._background.setState(stateName);
        }

        if (this.setStateOnSprites.length) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_12__["each"](this.setStateOnSprites, function (item) {
            item.setState(stateName, transitionDuration, easing);
          });
        }

        return _super.prototype.setState.call(this, value, transitionDuration, easing);
      }; // otherwise isActive won't work properly with background


      Container.prototype.setActive = function (value) {
        _super.prototype.setActive.call(this, value);

        if (this._background) {
          this._background.isActive = value;
        }
      };
      /**
       * Dispatches ready event. Dispatches when all children are ready.
       */


      Container.prototype.dispatchReady = function () {
        var _this = this;

        if (!this.isReady() && !this.isDisposed()) {
          var allReady_1 = true;

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_11__["eachContinue"](this.children.iterator(), function (sprite) {
            if (!sprite.__disabled && !sprite.disabled && !sprite.isReady()) {
              allReady_1 = false;
              return false;
            } else {
              return true;
            }
          });

          _utils_Array__WEBPACK_IMPORTED_MODULE_12__["eachContinue"](this._shouldBeReady, function (sprite) {
            if (!sprite.__disabled && !sprite.disabled && !sprite.isReady()) {
              allReady_1 = false;
              return false;
            } else {
              return true;
            }
          });

          if (allReady_1) {
            _super.prototype.dispatchReady.call(this);
          } else {
            _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].events.once("exitframe", function () {
              _this.dispatchReady();

              _System__WEBPACK_IMPORTED_MODULE_15__["system"].requestFrame();
            }, undefined, false);
          }
        }
      };
      /**
       * Called during the System.update method
       *
       * @ignore Exclude from docs
       */


      Container.prototype._systemUpdate = function (skippedSprites) {
        this.children.each(function (child) {
          if (child.invalid) {
            if (!child._systemCheckIfValidate()) {
              skippedSprites.push(child);
            } else if (child.dataItem && child.dataItem.component && child.dataItem.component.dataInvalid) {
              skippedSprites.push(child);
            } else {
              child.validate();
            }
          }
        });

        _super.prototype._systemUpdate.call(this, skippedSprites);
      };
      /**
       * Called during the System.validatePositions method
       *
       * @ignore Exclude from docs
       */


      Container.prototype._systemValidatePositions = function () {
        this.children.each(function (sprite) {
          if (sprite.positionInvalid) {
            sprite.validatePosition();
          }
        });

        _super.prototype._systemValidatePositions.call(this);
      };
      /**
       * Called during the System.validateLayouts method
       *
       * @ignore Exclude from docs
       */


      Container.prototype._systemValidateLayouts = function () {
        if (this.layoutInvalid && !this.isDisposed()) {
          this.validateLayout();
        }
      };

      Object.defineProperty(Container.prototype, "tapToActivate", {
        /**
         * @return Enable touch protection?
         */
        get: function get() {
          return this._tapToActivate;
        },

        /**
         * If set to `true` the chart's regular touch functionality will be suspended
         * so that the whole page it is located in remains scrollable, even when
         * swiping over the chart's body.
         *
         * User will need to tap the chart in order to activate its regular touch
         * functionality.
         *
         * The chart will remain "active" as long as user keeps interacting with the
         * chart. After `tapTimeout` milliseconds the chart will return to its
         * "protected" mode.
         *
         * @default false
         * @since 4.4.0
         * @param  value  Enable touch protection?
         * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.
         */
        set: function set(value) {
          if (this._tapToActivate != value) {
            this.setTapToActivate(value);
          }
        },
        enumerable: true,
        configurable: true
      });

      Container.prototype.setTapToActivate = function (value) {
        var _this = this;

        this._tapToActivate = value;
        this.interactions.isTouchProtected = value; // setEventDisposer will also remove listeners if value == false

        if (value) {
          this.interactions.setEventDisposer("container-tapToActivate", value, function () {
            return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([_this.events.on("hit", _this.handleTapToActivate, _this, false), _this.events.on("down", _this.initTapTimeout, _this, false), _this.events.on("track", _this.initTapTimeout, _this, false), //this.events.on("drag", this.initTapTimeout, this, false),
            Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_6__["getInteraction"])().body.events.on("down", function (ev) {
              if (!Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_6__["getInteraction"])().isLocalElement(ev.pointer, _this.paper.svg, _this.uid)) {
                _this.handleTapToActivateDeactivation();
              }
            }, _this, false)]);
          });
        }

        Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_6__["getInteraction"])();
      };
      /**
       * @todo Ignore on non-touch events
       */


      Container.prototype.handleTapToActivate = function () {
        this.interactions.isTouchProtected = false;
        this.initTapTimeout();
      };

      Container.prototype.handleTapToActivateDeactivation = function () {
        this.interactions.isTouchProtected = true;
      };

      Container.prototype.initTapTimeout = function () {
        var _this = this;

        if (this._tapToActivateTimeout) {
          this._tapToActivateTimeout.dispose();
        }

        if (this.tapToActivate && !this.interactions.isTouchProtected && this.tapTimeout) {
          this._tapToActivateTimeout = this.setTimeout(function () {
            _this.handleTapToActivateDeactivation();
          }, this.tapTimeout);
        }
      };
      /**
       * @ignore
       * @return Has license?
       */


      Container.prototype.hasLicense = function () {
        if (_Options__WEBPACK_IMPORTED_MODULE_16__["options"].commercialLicense) {
          return true;
        }

        for (var i = 0; i < _Options__WEBPACK_IMPORTED_MODULE_16__["options"].licenses.length; i++) {
          if (_Options__WEBPACK_IMPORTED_MODULE_16__["options"].licenses[i].match(/^CH.{5,}/i)) {
            return true;
          }
        }

        return false;
      };

      return Container;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_9__["registry"].registeredClasses["Container"] = Container; //# sourceMappingURL=Container.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/DataItem.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/DataItem.js ***!
    \*********************************************************************/

  /*! exports provided: DataItem */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDataItemJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataItem", function () {
      return DataItem;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Defines functionality for "Data Item"
     *
     * A Data Item can be any object that can hold data. For example [[LineSeries]]
     * holds a number of values, that comprise a line graph. Each of those values
     * (data points) is a {DataItem}.
     *
     * Furthermore the [[LineSeries]] itself can be represented as a entry in the
     * legend. Since legend needs access to Line Series' value, a DataItem is
     * created for the series.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */
    //import * as $object from "./utils/Object";

    /**
     * ============================================================================
     * DATA ITEM
     * ============================================================================
     * @hidden
     */

    /**
     * DataItem represents single element in data, for example a data point in a
     * Serial Chart Series, e.g. a column.
     *
     * DataItem defines relationship between structured data, required for specific
     * chart type or task, and raw source data.
     *
     * It also implements required calculations, updates related visual elements,
     * etc.
     *
     * @todo Description
     * @important
     */


    var DataItem =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DataItem, _super);
      /**
       * Constructor
       * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right
       */

      function DataItem() {
        var _this = _super.call(this) || this;
        /**
         * This Data Item is currently disabled.
         *
         * @ignore Exclude from docs
         */


        _this._disabled = false;
        /**
         * Indicates whether Data Item has any properties set.
         *
         * If it does not have any, the code can use this property to check whether
         * they need to apply costly operation of re-applying properties, whenever
         * Data Item-related element is redrawn, e.g. series.
         */

        _this.hasProperties = false;
        /**
         * An object containing calculated values.
         */

        _this.values = {};
        /**
         * An object container current working values.
         */
        //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};

        /**
         * An object containing categories.
         */

        _this.categories = {};
        /**
         * An object containing dates.
         */

        _this.dates = {};
        /**
         * An object containing locations for the Data Item.
         *
         * A location is a position within date or category, or, in some other cases,
         * where there is no single point but rather some period.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work
         */

        _this.locations = {};
        /**
         * Current working locations.
         */

        _this.workingLocations = {};
        /**
         * An object containing Data Item specific appearance properties in key-value
         * pairs.
         *
         * Sometimes a single Data Item needs to apply different properties than the
         * rest of the data [[Series]] it is part of. E.g. a single column,
         * represented by a Data Item needs to be filled with a different color than
         * the reset of the [[ColumnSeries]] it belongs to.
         *
         * That's where Data Item's `properties` come into play.
         *
         * Please note that you should set Data Item-specific properties using
         * `setProperty()` method, rather than access `properties` object directly.
         */

        _this.properties = {};
        /**
         * A list of [[Sprite]] elements that are associated with this Data Item.
         *
         * E.g. an [[Axis]] Data Item has several separate elements associated with
         * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].
         *
         * Data Item keeps track of all of them, so it can toggle all related visual
         * elements when it itself is toggled.
         */

        _this.sprites = [];
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         */

        _this.isTemplate = false;
        /**
         * The current index within the dataItems
         *
         * @ignore Exclude from docs
         */

        _this._index = null;
        /**
         * Is Data Item currently visible?
         *
         * @ignore Exclude from docs
         */

        _this._visible = true;
        /**
         * Is Data Item currently hidden?
         *
         * @ignore Exclude from docs
         */

        _this._hidden = false;
        /**
         * Should this Data Item be used when calculating data ranges and scales?
         *
         * @ignore Exclude from docs
         */

        _this._ignoreMinMax = false;
        /**
         * Some of the Data Item's data fields may contain an array of children. This
         * property contains an object indicating which fields hold an array, so that
         * they can be processed properly.
         *
         * @ignore Exclude from docs
         */

        _this.hasChildren = {};
        /**
         * Indicates whether Data Item is currently animiting from visible to hidden
         * state.
         */

        _this.isHiding = false;
        /**
         *
         * @ignore Exclude from docs
         */

        _this._valueAnimations = {};
        /**
         *
         * @ignore Exclude from docs
         */

        _this._locationAnimations = {};
        _this.className = "DataItem";

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(DataItem.prototype, "adapter", {
        /**
         * Holds Adapter.
         */
        get: function get() {
          if (!this._adapterO) {
            this._adapterO = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](this);
          }

          return this._adapterO;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "index", {
        /**
         * Data Item's position index in Component's data.
         *
         * @return Index
         */
        get: function get() {
          if (this.component) {
            if (this._index != null) {
              return this._index;
            } else {
              return -1;
            }
          } else {
            return -1;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "animations", {
        /**
         * A list of [[Animations]] objects currently mutating Data Item's values.
         *
         * @return [description]
         */
        get: function get() {
          if (!this._animations) {
            this._animations = [];

            this._disposers.push(new _utils_Animation__WEBPACK_IMPORTED_MODULE_3__["AnimationDisposer"](this._animations));
          }

          return this._animations;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "visible", {
        /**
         * Returns `true` if this Data Item is currently visible.
         *
         * @return Visible?
         */
        get: function get() {
          if (this._hidden) {
            return false;
          }

          return this._visible;
        },

        /**
         * Sets visibility of the Data Item.
         *
         * @param value Visible?
         */
        set: function set(value) {
          if (value) {
            this.hidden = false;
          }

          if (this._visible != value) {
            this.setVisibility(value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "hidden", {
        /**
         * Returns `true` if this Data Item is currently hidden.
         *
         * @return Hidden?
         */
        get: function get() {
          return this._hidden;
        },

        /**
         * Sets hidden flag for data item. Mostly used to initially hide data item.
         *
         * @param value Hidden?
         */
        set: function set(value) {
          if (this._hidden != value) {
            this._hidden = value;

            if (value) {
              this.setVisibility(false);
            } else {
              this.setVisibility(true, true);
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "__disabled", {
        /**
         * Is this Data Item currently disabled?
         *
         * @ignore Exclude from docs
         * @param {boolean}
         */
        get: function get() {
          return this._disabled;
        },

        /**
         * Disables all Sprites associated with this Data Item.
         *
         * @ignore Exclude from docs
         * @param {boolean}
         */
        set: function set(value) {
          //	if (this._disabled != value) { // not good
          this._disabled = value;

          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](this.sprites, function (sprite) {
            sprite.__disabled = value;
          }); //	}

        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets visibility of the Data Item.
       *
       * @param value Data Item
       */

      DataItem.prototype.setVisibility = function (value, noChangeValues) {
        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](this.sprites, function (sprite) {
          if (value) {
            sprite.visible = sprite.defaultState.properties.visible;
          } else {
            if (sprite.hiddenState) {
              sprite.visible = sprite.hiddenState.properties.visible;
            } else {
              sprite.visible = false;
            }
          }
        });

        this._visible = value;

        if (this._eventDispatcher && !this.__disabled) {
          if (this.events.isEnabled("visibilitychanged")) {
            var event_1 = {
              type: "visibilitychanged",
              target: this,
              visible: value
            };
            this.events.dispatchImmediately("visibilitychanged", event_1);
          }
        }
      };
      /**
       * Shows the Data Item and related visual elements.
       *
       * @param duration  Animation duration (ms)
       * @param delay     Delay animation (ms)
       * @param fields    A list of fields to set values of
       */


      DataItem.prototype.show = function (duration, delay, fields) {
        var _this = this;

        if (!this.hidden) {
          this.setVisibility(true, true);
          this.isHiding = false;

          if (this._hideDisposer) {
            this.removeDispose(this._hideDisposer);
          }

          var animation_1;

          if (fields) {
            _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](fields, function (field) {
              animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);
            });
          }

          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](this.sprites, function (sprite) {
            var animation = sprite.show(duration);

            if (animation != null && !animation.isFinished()) {
              _this._disposers.push(animation);

              if (delay != null && delay > 0) {
                animation.delay(delay);
              }
            }
          });

          return animation_1;
        }
      };
      /**
       * Destroys this object and all related data.
       */


      DataItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);

        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](this.sprites, function (sprite) {
          sprite.dispose();
        });

        this.sprites = [];
      };
      /**
       * Hides the Data Item and related visual elements.
       *
       * @param duration  Animation duration (ms)
       * @param delay     Delay animation (ms)
       * @param toValue   A value to set to `fields` when hiding
       * @param fields    A list of data fields to set value to `toValue`
       */


      DataItem.prototype.hide = function (duration, delay, toValue, fields) {
        var _this = this;

        this.isHiding = true;

        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](this.sprites, function (sprite) {
          var animation = sprite.hide(duration);

          if (animation != null && !animation.isFinished()) {
            _this._disposers.push(animation);

            if (delay != null && delay > 0) {
              animation.delay(delay);
            }
          }
        });

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](toValue) && fields) {
          var animation_2;

          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](fields, function (field) {
            var anim = _this.setWorkingValue(field, toValue, duration, delay);

            if (anim) {
              animation_2 = anim;
            }
          });

          if (animation_2 && !animation_2.isFinished()) {
            this._hideDisposer = animation_2.events.on("animationended", function () {
              _this.setVisibility(false, true);

              _this.isHiding = false;
            });

            this._disposers.push(this._hideDisposer);

            return animation_2;
          } else {
            this.isHiding = false;
            this.setVisibility(false, true);
          }
        } else {
          this.isHiding = false;
          this.setVisibility(false);
        }
      };
      /**
       * Returns a duration (ms) the Data Item should take to animate from one
       * value to another.
       *
       * If the duration is not specified via parameter, this method will try to
       * request a default duration from the related `Component`.
       *
       * @param duration  Default duration (ms)
       * @return Duration (ms)
       */


      DataItem.prototype.getDuration = function (duration) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](duration)) {
          var component = this.component;

          if (component) {
            duration = component.interpolationDuration;
          }
        }

        if (duration != null) {
          if (!this._adapterO) {
            return duration;
          } else {
            return this._adapterO.apply("duration", duration);
          }
        }
      };
      /**
       * Returns a numeric value for specific data field.
       *
       * If `calculated` is not set, it will return a raw value, as it is in
       * source data.
       *
       * If `calculated` is set, it will return a pre-calculated specific value.
       *
       * @param name        Data field name
       * @param calculated  A calculated value name
       * @return Value
       */


      DataItem.prototype.getValue = function (name, calculated) {
        if (name && this.component) {
          if (!calculated) {
            calculated = this.component.dataFields[name + "Show"];

            if (!calculated) {
              calculated = "value";
            }
          }

          var value = this.values[name][calculated];

          if (this._adapterO && this._adapterO.isEnabled("value")) {
            return this._adapterO.apply("value", {
              value: value,
              field: name
            }).value;
          } else {
            return value;
          }
        }
      };
      /**
       * Returns a current working value for a specific data field.
       *
       * The actual value may differ from the one returned by `getValue()`. The
       * latter returns static values from the data source.
       *
       * `getWorkingValue()` returns current value, which is usually different if
       * Data Item is animating from one state to another.
       *
       * @param name        Data field name
       * @return Value
       */


      DataItem.prototype.getWorkingValue = function (name) {
        if (name && this.component) {
          var realName = this.component.dataFields[name + "Show"];

          if (!realName) {
            realName = "workingValue";
          }

          if (this._adapterO) {
            return this._adapterO.apply("workingValue", {
              workingValue: this.values[name][realName],
              field: name
            }).workingValue;
          } else {
            return this.values[name][realName];
          }
        }
      };
      /**
       * @ignore
       * @return Value
       */


      DataItem.prototype.getActualWorkingValue = function (name) {
        return this.values[name].workingValue;
      };
      /**
       * Sets a numeric value for specific data field.
       *
       * @param name        Data field name
       * @param value       Value
       * @param calculated  Calculated data field name
       * @param duration    Duration (ms) to animate to new value to
       * @param delay       Delay animation (ms)
       */


      DataItem.prototype.setValue = function (name, value, duration, delay) {
        var currentValue = this.values[name].value;
        var newDuration = this.getDuration(duration);
        value = _utils_Type__WEBPACK_IMPORTED_MODULE_6__["toNumber"](value);

        if (currentValue !== value) {
          this.values[name].value = value;

          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("valuechanged")) {
              var event_2 = {
                type: "valuechanged",
                target: this,
                property: name
              };
              this.events.dispatchImmediately("valuechanged", event_2);
            }
          }

          if (this.component) {
            this.component.handleDataItemValueChange(this, name);
          }
        }

        this.setWorkingValue(name, value, newDuration, delay);
      };

      DataItem.prototype.setCalculatedValue = function (name, value, calculated) {
        var currentValue = this.values[name][calculated];

        if (currentValue !== value && _utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](value)) {
          this.values[name][calculated] = value;

          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("calculatedvaluechanged")) {
              var event_3 = {
                type: "calculatedvaluechanged",
                target: this,
                property: name
              };
              this.events.dispatchImmediately("calculatedvaluechanged", event_3);
            }
          }

          if (this.component) {
            this.component.handleDataItemCalculatedValueChange(this, name);
          }
        }
      };
      /**
       * Set current working numeric value for a specific data field.
       *
       * @param name        Data field name
       * @param value       Value
       * @param calculated  Calculated data field name
       * @param duration    Duration (ms) to animate to new value to
       * @param delay       Delay animation (ms)
       * @return An [[Animation]] object used for transition to new values
       */


      DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](this.values[name].value)) {
          var newDuration = this.getDuration(duration);
          var workingValue = this.values[name].workingValue;

          if (newDuration != null && newDuration > 0 && _utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](workingValue) && this.component) {
            // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop
            if (workingValue != value) {
              var animation = this.animate({
                childObject: this.values[name],
                property: "workingValue",
                from: workingValue,
                to: value,
                dummyData: name
              }, newDuration, this.component.interpolationEasing);

              if (delay != null) {
                animation.delay(delay);
              }

              animation.events.on("animationstarted", this.handleInterpolationProgress, this);
              animation.events.on("animationprogress", this.handleInterpolationProgress, this);
              animation.events.on("animationended", this.handleInterpolationProgress, this);
              this._valueAnimations[name] = animation;
              return animation;
            } else {
              var valueAnimation = this._valueAnimations[name];

              if (valueAnimation) {
                valueAnimation.stop();
              }

              this.values[name].workingValue = value;
            }
          } else {
            var valueAnimation = this._valueAnimations[name];

            if (valueAnimation) {
              valueAnimation.stop();
            }

            this.values[name].workingValue = value;

            if (this._eventDispatcher && !this.__disabled) {
              if (this.events.isEnabled("workingvaluechanged")) {
                var event_4 = {
                  type: "workingvaluechanged",
                  target: this,
                  property: name
                };
                this.events.dispatchImmediately("workingvaluechanged", event_4);
              }
            }

            if (this.component) {
              this.component.handleDataItemWorkingValueChange(this, name);
            }
          }
        }
      };
      /**
       * Sets a relative location for a data field.
       *
       * A location is always relative on a 0 to 1 scale, with 0 being beginning,
       * 0.5 middle and 1 end.
       *
       * @todo Rewiew description
       * @param name      Data field name
       * @param value     Location (0-1)
       * @param duration  Duration (ms) to animate to new value to
       * @param delay     Delay animation (ms)
       */


      DataItem.prototype.setLocation = function (name, value, duration, delay) {
        var currentLocation = this.locations[name];

        if (currentLocation !== value) {
          this.locations[name] = value;

          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("locationchanged")) {
              var event_5 = {
                type: "locationchanged",
                target: this,
                property: name
              };
              this.events.dispatchImmediately("locationchanged", event_5);
            }
          }

          if (this.component) {
            this.component.handleDataItemValueChange(this, name); // correct
          }

          this.setWorkingLocation(name, value, duration, delay);
        }
      };
      /**
       * Sets a current working location for a data field.
       *
       * @todo Rewiew description
       * @param name      Data field name
       * @param value     Location (0-1)
       * @param duration  Duration (ms) to animate to new value to
       * @param delay     Delay animation (ms)
       */


      DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {
        var newDuration = this.getDuration(duration);
        var workingLocation = this.workingLocations[name];

        if (newDuration != null && newDuration > 0 && _utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](workingLocation) && this.component) {
          // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop
          if (workingLocation != value) {
            var animation = this.animate({
              childObject: this.workingLocations,
              property: name,
              from: workingLocation,
              to: value,
              dummyData: name
            }, newDuration, this.component.interpolationEasing);

            if (delay != null) {
              animation.delay(delay);
            }

            animation.events.on("animationstarted", this.handleInterpolationProgress, this);
            animation.events.on("animationprogress", this.handleInterpolationProgress, this);
            animation.events.on("animationended", this.handleInterpolationProgress, this);
            this._locationAnimations[name] = animation;
            return animation;
          } else {
            var locationAnimation = this._locationAnimations[name];

            if (locationAnimation) {
              locationAnimation.stop();
            }

            this.workingLocations[name] = value;
          }
        } else {
          var locationAnimation = this._locationAnimations[name];

          if (locationAnimation) {
            locationAnimation.stop();
          }

          this.workingLocations[name] = value;

          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("workinglocationchanged")) {
              var event_6 = {
                type: "workinglocationchanged",
                target: this,
                property: name
              };
              this.events.dispatchImmediately("workinglocationchanged", event_6);
            }
          }

          if (this.component) {
            this.component.handleDataItemWorkingLocationChange(this, name);
          }
        }
      };
      /**
       * Sets Date value to a data field.
       *
       * @param name      Data field name
       * @param date      Date object
       * @param duration  Duration (ms) to animate to new value to
       */


      DataItem.prototype.setDate = function (name, date, duration) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isDate"](date) && this.component) {
          date = this.component.dateFormatter.parse(date);
        }

        var currentDate = this.dates[name];

        if (currentDate !== date) {
          this.dates[name] = date;
          this.setValue(name, date.getTime(), duration);
        }
      };
      /**
       * Returns a Date value of the data field.
       *
       * @param name  Data field name
       * @return Date object
       */


      DataItem.prototype.getDate = function (name) {
        if (this._adapterO) {
          return this._adapterO.apply("date", {
            date: this.dates[name],
            field: name
          }).date;
        } else {
          return this.dates[name];
        }
      };
      /**
       * Sets a Data Item-specific visual properties to apply to related elements.
       *
       * @param name   Property name
       * @param value  Property value
       */


      DataItem.prototype.setProperty = function (name, value) {
        if (this.properties[name] !== value) {
          this.hasProperties = true;
          this.properties[name] = value;

          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("propertychanged")) {
              var event_7 = {
                type: "propertychanged",
                target: this,
                property: name,
                value: value
              };
              this.events.dispatchImmediately("propertychanged", event_7);
            }
          }

          if (this.component) {
            this.component.handleDataItemPropertyChange(this, name);
          }
        }
      };
      /**
       * Sets a related category for this Data Item.
       *
       * @todo Review description
       * @param name   Data field name
       * @param value  Category
       */


      DataItem.prototype.setCategory = function (name, value) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isString"](value)) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_6__["castString"](value);
        }

        if (this.categories[name] !== value) {
          this.categories[name] = value;
        }
      };
      /**
       * Clones the Data Item, including all related data.
       *
       * @return New Data Item clone
       */
      //public clone(cloneId?: string): this {
      //	let dataItem: this = super.clone(cloneId);
      //	dataItem.copyFrom(this);
      //	return dataItem;
      //}

      /**
       * Copies all properties and related data from different data item.
       *
       * @param object Source data item
       */


      DataItem.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        if (source.dataContext) {
          this.dataContext = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["copy"](source.dataContext, {});
        }

        _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["copyProperties"](source.locations, this.locations);
        /*
        $utils.copyProperties(source.properties, this.properties);
        $utils.copyProperties(source.categories, this.categories);
        $utils.copyProperties(source.values, this.values);
        $utils.copyProperties(source.dates, this.dates);
          $object.each(source.values, (name, value) => {
            this.values[name] = $object.copy(value);
        });*/


        if (source._adapterO) {
          this.adapter.copyFrom(source._adapterO);
        } //this.events.copyFrom(source.events); // because copied in Base


        this.component = source.component;
      };

      Object.defineProperty(DataItem.prototype, "opacity", {
        /**
         * Sets opacity for all Data Item's related elements (Sprites).
         *
         * @param value Opacity (0-1)
         */
        set: function set(value) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["each"](this.sprites, function (sprite) {
            sprite.opacity = value;
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "ignoreMinMax", {
        /**
         * Exclude from min/max calculations?
         * @return Exclude from min/max calculations?
         */
        get: function get() {
          return this._ignoreMinMax;
        },

        /**
         * Sets whether this data point should not be included in the scale and
         * minimum/maximum calculations.
         *
         * E.g. some we may want to exclude a particular data point from influencing
         * [[ValueAxis]] scale.
         *
         * @param value  Exclude from min/max calculations?
         */
        set: function set(value) {
          this._ignoreMinMax = value;

          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("propertychanged")) {
              var event_8 = {
                type: "propertychanged",
                target: this,
                property: "ignoreMinMax",
                value: value
              };
              this.events.dispatchImmediately("propertychanged", event_8);
            }
          }

          if (this.component) {
            this.component.handleDataItemPropertyChange(this, "ignoreMinMax");
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates and starts an [[Animation]] to interpolate (morph) Data Item's
       * properties and/or values.
       *
       * @see {@link Animation}
       * @param animationOptions  Animation options
       * @param duration          Animation duration (ms)
       * @param easing            Easing function
       * @return Animation
       */

      DataItem.prototype.animate = function (animationOptions, duration, easing) {
        return new _utils_Animation__WEBPACK_IMPORTED_MODULE_3__["Animation"](this, animationOptions, duration, easing).start();
      };
      /**
       * Handles intermediate steps when Data Item is interpolating (morphing) from
       * one value to another.
       *
       * @ignore Exclude from docs
       * @param event Event object
       */


      DataItem.prototype.handleInterpolationProgress = function (event) {
        var animation = event.target; // it's always only one options, no need cycle

        var animationOptions = animation.animationOptions[0];

        if (animationOptions) {
          if (this._eventDispatcher && !this.__disabled) {
            if (this.events.isEnabled("workingvaluechanged")) {
              var event_9 = {
                type: "workingvaluechanged",
                target: this,
                property: animationOptions.dummyData
              };
              this.events.dispatchImmediately("workingvaluechanged", event_9);
            }
          }

          if (this.component) {
            this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);
          }
        }
      };
      /**
       * Checks whether Data Item has values set for all of the data fields,
       * supplied via argument.
       *
       * @ignore Exclude from docs
       * @param fields  Field list to check
       * @return Has values for all fields?
       */


      DataItem.prototype.hasValue = function (fields) {
        // todo: what about categories?
        for (var i = 0, len = fields.length; i < len; i++) {
          var values = this.values[fields[i]];

          if (!values || !_utils_Type__WEBPACK_IMPORTED_MODULE_6__["hasValue"](values.value)) {
            return false;
          }
        }

        return true;
      };

      Object.defineProperty(DataItem.prototype, "depth", {
        /**
         * Depth of the Data Item.
         *
         * In nested data structures, like TreeMap, this indicates the level this
         * data point is at, in relation to the parent Data Item.
         *
         * @return Depth
         */
        get: function get() {
          if (!this.parent) {
            return 0;
          } else {
            return this.parent.depth + 1;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataItem.prototype, "dataContext", {
        /**
         * Sets to a reference to an original object from Component's data.
         *
         * @return [description]
         */
        get: function get() {
          return this._dataContext;
        },

        /**
         * A reference to an original object in Component's data, that this Data Item
         * is derived from.
         *
         * @param value Original data object
         */
        set: function set(value) {
          this._dataContext = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * adds a sprite to dataItem.sprites array
       * @ignore
       */

      DataItem.prototype.addSprite = function (sprite) {
        if (sprite.dataItem && sprite.dataItem != this) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](sprite.dataItem.sprites, sprite);
        }

        if (!this.visible) {
          sprite.hide(0);
        }

        if (this.isHiding) {
          sprite.hide();
        }

        this.sprites.push(sprite);
        sprite.dataItem = this;
      };

      return DataItem;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"]); //# sourceMappingURL=DataItem.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/Options.js":
  /*!********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/Options.js ***!
    \********************************************************************/

  /*! exports provided: options */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreOptionsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "options", function () {
      return options;
    });
    /**
     * Global options.
     */


    var options = {
      verbose: true,
      commercialLicense: false,
      classNamePrefix: "amcharts-",
      autoSetClassName: false,
      minPolylineStep: 0.5,
      onlyShowOnViewport: false,
      queue: false,
      licenses: []
    }; //# sourceMappingURL=Options.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/Registry.js ***!
    \*********************************************************************/

  /*! exports provided: Registry, registry, is */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRegistryJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Registry", function () {
      return Registry;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "registry", function () {
      return registry;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "is", function () {
      return is;
    });
    /* harmony import */


    var _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./utils/EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_Cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./utils/Cache */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_String__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/String */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Registry is used to store miscellaneous system-wide information, like ids,
     * maps, themes, and registered classes.
     *
     * @ignore Exclude from docs
     */


    var Registry =
    /** @class */
    function () {
      function Registry() {
        /**
         * Event dispacther.
         */
        this.events = new _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__["EventDispatcher"]();
        /**
         * All currently applied themes. All new chart instances created will
         * automatically inherit and retain System's themes.
         */

        this.themes = [];
        /**
         * List of all loaded available themes.
         *
         * Whenever a theme loads, it registers itself in System's `loadedThemes`
         * collection.
         */

        this.loadedThemes = {};
        /**
         * An indeternal counter used to generate unique IDs.
         *
         * @ignore Exclude from docs
         */

        this._uidCount = 0;
        /**
         * Keeps register of class references so that they can be instnatiated using
         * string key.
         *
         * @ignore Exclude from docs
         */

        this.registeredClasses = {};
        /**
         * Holds all generated placeholders.
         */

        this._placeholders = {};
        /**
         * A list of invalid(ated) [[Sprite]] objects that need to be re-validated
         * during next cycle.
         *
         * @ignore Exclude from docs
         */

        this.invalidSprites = {};
        /**
         * Components are added to this list when their data provider changes to
         * a new one or data is added/removed from their data provider.
         *
         * @ignore Exclude from docs
         */

        this.invalidDatas = {};
        /**
         * Components are added to this list when values of their raw data change.
         * Used when we want a smooth animation from one set of values to another.
         *
         * @ignore Exclude from docs
         */

        this.invalidRawDatas = [];
        /**
         * Components are added to this list when values of their data changes
         * (but not data provider itself).
         *
         * @ignore Exclude from docs
         */

        this.invalidDataItems = [];
        /**
         * Components are added to this list when their data range (selection) is
         * changed, e.g. zoomed.
         *
         * @ignore Exclude from docs
         */

        this.invalidDataRange = [];
        /**
         * A list of [[Sprite]] objects that have invalid(ated) positions, that need
         * to be recalculated.
         *
         * @ignore Exclude from docs
         */

        this.invalidPositions = {};
        /**
         * A list of [[Container]] objects with invalid(ated) layouts.
         *
         * @ignore Exclude from docs
         */

        this.invalidLayouts = {};
        /**
         * An array holding all active (non-disposed) top level elemens.
         *
         * When, for example, a new chart is created, its instance will be added to
         * this array, and will be removed when the chart is disposed.
         */

        this.baseSprites = [];
        this.baseSpritesByUid = {};
        this.queue = [];
        this.uid = this.getUniqueId();
        this.invalidSprites.noBase = [];
        this.invalidDatas.noBase = [];
        this.invalidLayouts.noBase = [];
        this.invalidPositions.noBase = [];
      }
      /**
       * Generates a unique chart system-wide ID.
       *
       * @return Generated ID
       */


      Registry.prototype.getUniqueId = function () {
        var uid = this._uidCount;
        this._uidCount += 1;
        return "id-" + uid;
      };

      Object.defineProperty(Registry.prototype, "map", {
        /**
         * Returns a universal collection for mapping ids with objects.
         *
         * @ignore Exclude from docs
         * @return Map collection
         */
        get: function get() {
          if (!this._map) {
            this._map = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_1__["Dictionary"]();
          }

          return this._map;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Caches value in object's cache.
       *
       * @ignore Exclude from docs
       * @param key    Key
       * @param value  Value
       * @param ttl    TTL in seconds
       */

      Registry.prototype.setCache = function (key, value, ttl) {
        _utils_Cache__WEBPACK_IMPORTED_MODULE_2__["cache"].set(this.uid, key, value, ttl);
      };
      /**
       * Retrieves cached value.
       *
       * @ignore Exclude from docs
       * @param key    Key
       * @param value  Value to return if cache is not available
       * @return Value
       */


      Registry.prototype.getCache = function (key, value) {
        if (value === void 0) {
          value = undefined;
        }

        return _utils_Cache__WEBPACK_IMPORTED_MODULE_2__["cache"].get(this.uid, key, value);
      };
      /**
       * Dispatches an event using own event dispatcher. Will automatically
       * populate event data object with event type and target (this element).
       * It also checks if there are any handlers registered for this sepecific
       * event.
       *
       * @param eventType Event type (name)
       * @param data      Data to pass into event handler(s)
       */


      Registry.prototype.dispatch = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
          if (data) {
            data.type = eventType;
            data.target = data.target || this;
            this.events.dispatch(eventType, {
              type: eventType,
              target: this
            });
          } else {
            this.events.dispatch(eventType, {
              type: eventType,
              target: this
            });
          }
        }
      };
      /**
       * Works like `dispatch`, except event is triggered immediately, without
       * waiting for the next frame cycle.
       *
       * @param eventType Event type (name)
       * @param data      Data to pass into event handler(s)
       */


      Registry.prototype.dispatchImmediately = function (eventType, data) {
        // @todo Implement proper type check
        if (this.events.isEnabled(eventType)) {
          if (data) {
            data.type = eventType;
            data.target = data.target || this;
            this.events.dispatchImmediately(eventType, data);
          } else {
            this.events.dispatchImmediately(eventType, {
              type: eventType,
              target: this
            });
          }
        }
      };
      /**
       * Returns a unique placeholder suitable for the key.
       *
       * @param key  Key
       * @return Random string to be used as placeholder
       */


      Registry.prototype.getPlaceholder = function (key) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](this._placeholders[key])) {
          return this._placeholders[key];
        }

        this._placeholders[key] = "__amcharts_" + key + "_" + _utils_String__WEBPACK_IMPORTED_MODULE_4__["random"](8) + "__";
        return this._placeholders[key];
      };
      /**
       * @ignore
       */


      Registry.prototype.addToInvalidComponents = function (component) {
        if (component.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["move"](this.invalidDatas[component.baseId], component);
        } else {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["move"](this.invalidDatas["noBase"], component);
        }
      };
      /**
       * @ignore
       */


      Registry.prototype.removeFromInvalidComponents = function (component) {
        if (component.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidDatas[component.baseId], component);
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidDatas["noBase"], component);
      };
      /**
       * @ignore
       */


      Registry.prototype.addToInvalidSprites = function (sprite) {
        if (sprite.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["add"](this.invalidSprites[sprite.baseId], sprite);
        } else {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["add"](this.invalidSprites["noBase"], sprite);
        }
      };
      /**
       * @ignore
       */


      Registry.prototype.removeFromInvalidSprites = function (sprite) {
        if (sprite.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidSprites[sprite.baseId], sprite);
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidSprites["noBase"], sprite);
      };
      /**
       * @ignore
       */


      Registry.prototype.addToInvalidPositions = function (sprite) {
        if (sprite.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["add"](this.invalidPositions[sprite.baseId], sprite);
        } else {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["add"](this.invalidPositions["noBase"], sprite);
        }
      };
      /**
       * @ignore
       */


      Registry.prototype.removeFromInvalidPositions = function (sprite) {
        if (sprite.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidPositions[sprite.baseId], sprite);
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidPositions["noBase"], sprite);
      };
      /**
       * @ignore
       */


      Registry.prototype.addToInvalidLayouts = function (sprite) {
        if (sprite.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["add"](this.invalidLayouts[sprite.baseId], sprite);
        } else {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["add"](this.invalidLayouts["noBase"], sprite);
        }
      };
      /**
       * @ignore
       */


      Registry.prototype.removeFromInvalidLayouts = function (sprite) {
        if (sprite.baseId) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidLayouts[sprite.baseId], sprite);
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_5__["remove"](this.invalidLayouts["noBase"], sprite);
      };

      return Registry;
    }();
    /**
     * A singleton global instance of [[Registry]].
     *
     * @ignore Exclude from docs
     */


    var registry = new Registry();
    /**
     * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.
     *
     * @param object Object
     * @param name Class name
     * @return Is instance of class
     */

    function is(object, name) {
      var x = registry.registeredClasses[name];
      return x != null && object instanceof x;
    } //# sourceMappingURL=Registry.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js ***!
    \*******************************************************************/

  /*! exports provided: SpriteEventDispatcher, visualProperties, Sprite */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreSpriteJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "visualProperties", function () {
      return visualProperties;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Sprite", function () {
      return Sprite;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _SpriteState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./SpriteState */
    "./node_modules/@amcharts/amcharts4/.internal/core/SpriteState.js");
    /* harmony import */


    var _SpriteEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./SpriteEvents */
    "./node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SpriteEventDispatcher", function () {
      return _SpriteEvents__WEBPACK_IMPORTED_MODULE_2__["SpriteEventDispatcher"];
    });
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _rendering_Paper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./rendering/Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _rendering_fills_Pattern__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./rendering/fills/Pattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js");
    /* harmony import */


    var _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./rendering/fills/LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony import */


    var _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./rendering/fills/RadialGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./interaction/Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ./interaction/Mouse */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ./Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ./Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _formatters_NumberFormatter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! ./formatters/NumberFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js");
    /* harmony import */


    var _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! ./formatters/DateFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js");
    /* harmony import */


    var _formatters_DurationFormatter__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! ./formatters/DurationFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js");
    /* harmony import */


    var _formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! ./formatters/TextFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! ./utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _export_Export__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! ./export/Export */
    "./node_modules/@amcharts/amcharts4/.internal/core/export/Export.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! ./utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! ./utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Strings__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! ./utils/Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! ./utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! ./utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! ./System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! ./utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /**
     * This is the main class that encapsulates every object on the chart.
     *
     * If it's an element that is to be displayed on the screen at some point, its
     * class must extend [[Sprite]] class.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Defines list ofvisual properties
     */


    var visualProperties = ["fill", "fillOpacity", "stroke", "strokeOpacity", "strokeWidth", "strokeDasharray", "strokeDashoffset", "strokeLinecap", "strokeLinejoin"]; // do not add opacity here, as it is used for showing/hiding

    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Sprite represents any displayable element.
     *
     * This is the main class that encapsulates every object on the chart.
     *
     * If it's an element that is to be displayed on the screen at some point, its
     * class must extend [[Sprite]] class.
     *
     * [[Sprite]] class represents the a hierarchical structure. Every object that
     * extends [[Sprite]] can have children, that would inherit their properties,
     * such as language, formatters, etc.
     *
     * @see {@link SpriteState}
     * @see {@link ISpriteEvents} for a list of available events
     * @see {@link ISpriteAdapters} for a list of available Adapters
     *
     * @todo Review child elements that need to go into `_disposers`
     * @important
     */

    var Sprite =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Sprite, _super);
      /**
       * Constructor:
       * * Creates initial node
       * * Sets default properties
       * * Creates required default states
       * * Inits accessibility
       */

      function Sprite() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Holds values for Sprite's properties.
         */


        _this.properties = {};
        /**
         * @ignore
         */

        _this._eventDispatcher = new _SpriteEvents__WEBPACK_IMPORTED_MODULE_2__["SpriteEventDispatcher"](_this);
        /**
         * @ignore Exclude from docs
         * @todo Description
         */

        _this._bindings = {};
        /**
         * Holds indicator if this Sprite is a "template" to be used for creating
         * other Sprites from and should not be treated as full-fledged element.
         *
         * @ignore Exclude from docs
         */

        _this._isTemplate = false;
        _this._isPath = false;
        /**
         * Holds indicator whether this sprite was already initialized.
         *
         * @ignore Exclude from docs
         */

        _this._inited = false;
        /**
         * Holds indicator whether this sprite was already initialized and ready.
         *
         * @ignore Exclude from docs
         */

        _this._ready = false;
        /**
         * If `sprite.hide()` is called and we have "hidden" state and
         * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to
         * avoid restarting animations in case `hide()` method is called multiple
         * times.
         */

        _this.isHiding = false;
        /**
         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.
         * This was added becaus hidden state might have visibility set to true and so
         * there would not be possible to find out if a sprite is technically hidden or not.
         */

        _this._isHidden = false;
        /**
         * This property indicates if Sprite is currently being revealed from hidden
         * state. This is used to prevent multiple calls to `sprite.show()` to
         * restart reveal animation. (if enabled)
         */

        _this.isShowing = false;
        /**
         * Indicates if this element is a standalone instance. A "standalone
         * instance" means this is a autonomous object which maintains its own
         * set of controls like Preloader, Export, etc.
         *
         * @ignore Exclude from docs
         */

        _this.isStandaloneInstance = false;
        /**
         * Indicates if togglable Sprite is currently active (toggled on).
         *
         * @ignore Exclude from docs
         */

        _this._isActive = false;
        /**
         * A Sprite element to use as a mask for this Sprite.
         *
         * @ignore Exclude from docs
         */

        _this._mask = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MutableValueDisposer"]();
        /**
         * @ignore Exclude from docs
         * @todo Description
         */

        _this._positionPrecision = 3;
        /**
         * An instance of [[Language]].
         *
         * @ignore Exclude from docs
         */

        _this._language = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MutableValueDisposer"]();
        /**
         * Holds [[Export]] object.
         *
         * @ignore Exclude from docs
         */

        _this._exporting = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MutableValueDisposer"]();
        /**
         * Should this Sprite be included when exporting?
         */

        _this._exportable = true;
        /**
         * Defines bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         */

        _this._bbox = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
        /**
         * Indicates if this element is invalid and should be re-validated (redrawn).
         *
         * @ignore Exclude from docs
         */

        _this.invalid = false;
        /**
         * Indicates if this elements position is invalid and should be repositioned
         *
         * @ignore Exclude from docs
         */

        _this.positionInvalid = false;
        /**
         * A collection of key/value pairs that can be used to bind specific Sprite
         * properties to [[DataItem]].
         *
         * For example: `fill` property can be bound to `myCustomColor` field in
         * DataItem. The Sprite will automatically get the value for `fill` from its
         * DataItem.
         *
         * Can be set for each [[SpriteState]] individually to override default
         * bindings.
         *
         * @see {@link SpriteState}
         */

        _this.propertyFields = {};
        /**
         * Specifies if property changes on this object should be propagated to the
         * objects cloned from this object.
         *
         * This setting affects property changes *after* cloning, since at the moment
         * of cloning all of properties from source object are copied to the clone
         * anyway.
         *
         * @default false
         */

        _this.applyOnClones = false; // unrotated unscaled

        _this._measuredWidthSelf = 0;
        _this._measuredHeightSelf = 0; // read only, sprite extreme coordinates

        /**
         * @ignore
         */

        _this.maxLeft = 0;
        /**
         * @ignore
         */

        _this.maxRight = 0;
        /**
         * @ignore
         */

        _this.maxTop = 0;
        /**
         * @ignore
         */

        _this.maxBottom = 0; // not rotated and not scaled

        /**
         * @ignore
         */

        _this.maxLeftSelf = 0;
        /**
         * @ignore
         */

        _this.maxRightSelf = 0;
        /**
         * @ignore
         */

        _this.maxTopSelf = 0;
        /**
         * @ignore
         */

        _this.maxBottomSelf = 0;
        _this._isDragged = false;
        _this._isResized = false;
        /**
         * @deprecated Moved to [[SpriteProperties]]
         */

        _this._disabled = false;
        _this._internalDisabled = false;
        _this._updateDisabled = false;
        _this._internalDefaultsApplied = false;
        /**
         * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.
         */

        _this.rollOutDelay = 0;
        /**
         * This flag is set to `true` for the initial sprite you create and place
         * to the div so that we could clear all additional
         * sprites/containers when this sprite is disposed.
         *
         * @ignore
         */

        _this.isBaseSprite = false;
        /**
         * Indicates whether this sprite should be cloned when cloning its parent
         * container. We set this to `false` in those cases when a sprite is created
         * by the class, so that when cloning a duplicate sprite would not appear.
         */

        _this.shouldClone = true;
        /**
         * A read-only flag which indicates if a sprite has completed its initial
         * animation (if `showOnInit = true`).
         *
         * In case `showOnInit = false`, `appeared` is set to `true` on init.
         *
         * @readonly
         */

        _this.appeared = false;
        /**
         * [ex description]
         *
         * @todo Description
         * @ignore
         */

        _this.ex = 0;
        /**
         * [ey description]
         *
         * @todo Description
         * @ignore
         */

        _this.ey = 0;
        /**
         * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)
         * @ignore
         */

        _this.dragWhileResize = false;
        /**
         *  @ignore
         */

        _this.measureFailed = false;
        /**
         * If this flag is set to true, calling show() will not reveal the sprite.
         *
         * @ignore
         */

        _this.preventShow = false;
        /**
         * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.
         * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.
         */

        _this.cloneTooltip = true;
        _this.className = "Sprite";

        _this._disposers.push(_this._eventDispatcher); // Generate a unique ID


        _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["used"](_this.uid); // Create SVG group to hold everything in


        _this.group = _this.paper.addGroup("g"); // Set defaults
        // it is better to set defauls like this in order to save invaliation calls and events

        _this.setPropertyValue("scale", 1);

        _this.setPropertyValue("rotation", 0);

        _this.setPropertyValue("align", "none");

        _this.setPropertyValue("valign", "none");

        _this.setPropertyValue("pixelPerfect", false);

        _this.setPropertyValue("visible", true);

        _this.setPropertyValue("tooltipPosition", "fixed");

        _this.setPropertyValue("verticalCenter", "none");

        _this.setPropertyValue("horizontalCenter", "none");

        _this.setPropertyValue("tooltipX", Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_33__["percent"])(50));

        _this.setPropertyValue("tooltipX", Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_33__["percent"])(50));

        _this.setPropertyValue("marginTop", 0);

        _this.setPropertyValue("marginBottom", 0);

        _this.setPropertyValue("marginLeft", 0);

        _this.setPropertyValue("marginRight", 0);

        _this.setPropertyValue("dx", 0);

        _this.setPropertyValue("dy", 0);

        _this.setPropertyValue("paddingTop", 0);

        _this.setPropertyValue("paddingBottom", 0);

        _this.setPropertyValue("paddingRight", 0);

        _this.setPropertyValue("paddingLeft", 0);

        _this.setPropertyValue("togglable", false);

        _this.setPropertyValue("hidden", false);

        _this.setPropertyValue("urlTarget", "_self");

        _this.setPropertyValue("alwaysShowTooltip", false);

        _this.setPropertyValue("showTooltipOn", "hover");

        _this._prevMeasuredWidth = 0;
        _this._prevMeasuredHeight = 0;
        _this._measuredWidth = 0;
        _this._measuredHeight = 0;
        _this._isMeasured = true; // Invalidate the Sprite so that renderer knows it needs to be drawn

        _this.invalidate(); //this.states.create("default").properties.opacity = 1;
        // Apply the theme


        _this.applyTheme(); //this._disposers.push(this._clickable);
        // Decorate adapter with events so that we can apply its settings whenever
        // it is modified
        // @todo Think what to do here. We can't just apply the adapter value to
        // property since not all of those are for properties. Commented out for
        // now.

        /*this.adapter.events.on("inserted", (ev: any) => {
            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];
        });
        this.adapter.events.on("removed", (ev: any) => {
            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];
        });*/
        // Add disposable dependencies to `_disposers` so they are automatically
        // disposed of when this object is disposed


        _this._disposers.push(_this.events);

        _this._disposers.push(_this.group);

        _this._disposers.push(_this._mask);

        _this._disposers.push(_this._language);

        _this._disposers.push(_this._exporting); //this._disposers.push(this._parent);
        //this._disposers.push(this._modal);


        _this._disposers.push(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["Disposer"](function () {
          _utils_Object__WEBPACK_IMPORTED_MODULE_29__["each"](_this._bindings, function (key, value) {
            value.dispose();
          });
        }));

        _this.setPropertyValue("interactionsEnabled", true);

        return _this;
      }

      Object.defineProperty(Sprite.prototype, "events", {
        /**
         * Event dispatcher.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events
         */
        get: function get() {
          return this._eventDispatcher;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "adapter", {
        /**
         * Holds Adapter.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters
         */
        get: function get() {
          if (!this._adapterO) {
            this._adapterO = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_4__["Adapter"](this);
          }

          return this._adapterO;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * ==========================================================================
       * ELEMENT VALIDATION, INIT, AND DRAWING STUFF
       * ==========================================================================
       * @hidden
       */

      /**
       * Applies properties from all assigned themes.
       *
       * We do this here so that we can apply class names as well.
       *
       * @ignore Exclude from docs
       */

      Sprite.prototype.applyTheme = function () {
        _super.prototype.applyTheme.call(this);

        if (_Options__WEBPACK_IMPORTED_MODULE_17__["options"].autoSetClassName) {
          this.setClassName();
        }
      };
      /**
       * Returns theme(s) used by this object either set explicitly on this
       * element, inherited from parent, or inherited from [[System]].
       *
       * @return An array of theme references
       */


      Sprite.prototype.getCurrentThemes = function () {
        var themes = this._themes;

        if (themes) {
          return themes;
        } else {
          var parent_1 = this.parent;

          if (parent_1) {
            return parent_1.getCurrentThemes();
          } else {
            return _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].themes;
          }
        }
      };
      /**
       * Called just before element's validation, this function allows setting
       * defaults.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.applyInternalDefaults = function () {
        // Nothing here, but extending classes might override this function
        // so that they can set their defaults
        this._internalDefaultsApplied = true;
      };
      /**
       * Invalidates element.
       *
       * Object will be redrawn during the next update cycle.
       *
       * Please note that in most cases elements will auto-invalidate when needed. If
       * everything works, DO NOT use this method. Use it only if some changes do
       * not take otherwise.
       */


      Sprite.prototype.invalidate = function () {
        if (this.disabled || this._isTemplate) {
          return;
        } // We no longer reset this on each invalidate, so that they are applied
        // only once, and do not overwrite user-defined settings
        //this._internalDefaultsApplied = false;


        if (!this.invalid) {
          this.invalid = true;

          _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].addToInvalidSprites(this);

          _System__WEBPACK_IMPORTED_MODULE_32__["system"].requestFrame();
        }
      };
      /**
       * Validates element:
       * * Triggers events
       * * Redraws the element
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.validate = function () {
        this.dispatchImmediately("beforevalidated"); // prevents from drawing if topparent is 0x0

        /*
        let topParent = this.topParent;
          if (topParent) {
            if (!topParent.maxWidth || !topParent.maxHeight) {
                this._disposers.push(topParent.events.once("maxsizechanged", this.invalidate, this));
            }
        }*/
        // Set internal defaults

        if (!this._internalDefaultsApplied) {
          this.applyInternalDefaults();
        }

        this.beforeDraw();
        this.draw();
        this.invalid = false;

        _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].removeFromInvalidSprites(this);

        this.afterDraw();
      };
      /**
       * Invalidates element's position.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.invalidatePosition = function () {
        if (this.disabled || this._isTemplate) {
          return;
        }

        if (!this.positionInvalid) {
          this.positionInvalid = true;

          _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].addToInvalidPositions(this);

          _System__WEBPACK_IMPORTED_MODULE_32__["system"].requestFrame();
        }
      };
      /**
       * Transforms the element.
       *
       * @todo Description (review)
       * @ignore Exclude from docs
       */


      Sprite.prototype.validatePosition = function () {
        var pixelX = this.pixelX;
        var pixelY = this.pixelY;
        var dx = this.dx;
        var dy = this.dy;
        var x = pixelX + dx;
        var y = pixelY + dy;

        if (this._updateDisabled) {
          if (this._internalDisabled) {
            this.group.attr({
              "display": "none"
            });
          } else {
            if (!this.disabled) {
              this.removeSVGAttribute("display");
            }
          }

          this._updateDisabled = false;
        }

        var sizeChanged = this.measure(); //if (!this.invalid) {

        var prevGroupTransform = this.group.transformString;
        this.group.moveTo({
          x: x,
          y: y
        });
        this.group.rotation = this.rotation;

        if (this.nonScaling) {
          this.group.scale = this.scale / this.globalScale;
        } else {
          this.group.scale = this.scale;
        }

        if (prevGroupTransform != this.group.transformString || sizeChanged) {
          // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid
          if (prevGroupTransform == null) {
            this.dispatch("transformed");
          } else {
            this.dispatchImmediately("transformed");
          } // TODO clear existing positionchanged dispatches ?


          this.dispatch("positionchanged");

          if (this.showTooltipOn == "hit" || this.showTooltipOn == "always") {
            this.updateTooltipPosition();
          }
        } //}
        // it might happen that x and y changed again, so we only remove if they didn't


        if (pixelX + dx == x && pixelY + dy == y) {
          _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].removeFromInvalidPositions(this);

          this.positionInvalid = false;
        }

        var maskRectangle = this._maskRectangle; // todo: verify this

        if (maskRectangle) {
          this._clipElement.moveTo({
            x: maskRectangle.x - pixelX,
            y: maskRectangle.y - pixelY
          });
        }
      };
      /**
       * A placeholder method that is called **before** element begins to be drawn.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.beforeDraw = function () {};
      /**
       * A placeholder method that draws the element.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.draw = function () {};
      /**
       * A placeholder method that is called **after** element finishes drawing
       * itself.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.afterDraw = function () {
        var e_1, _a;

        if (this.isMeasured || this.horizontalCenter !== "none" || this.verticalCenter !== "none") {
          this.measureElement();
        } //this.applyMask();


        if (!this._inited) {
          if (this._adapterO) {
            try {
              // used to be applySVGAttrbutes here, this is more efficient
              for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;

                switch (key) {
                  case "mask":
                  case "fill":
                  case "opacity":
                  case "fillOpacity":
                  case "stroke":
                  case "strokeOpacity":
                  case "strokeWidth":
                  case "shapeRendering":
                  case "strokeDasharray":
                  case "strokeDashoffset":
                  case "strokeLinecap":
                  case "strokeLinejoin":
                  case "textDecoration":
                  case "fontSize":
                  case "fontFamily":
                  case "fontWeight":
                    //case "focusable":
                    //case "tabindex":
                    //case "role":
                    this[key] = this[key];
                    break;
                }
              }
            } catch (e_1_1) {
              e_1 = {
                error: e_1_1
              };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          }

          this.applyFilters();
          this.visible = this.visible;
          this.interactionsEnabled = this.getPropertyValue("interactionsEnabled"); // can't use .interactionsEnabled as it get's parent's

          this._inited = true;

          if (!this.showOnInit) {
            this.appeared = true;
          }

          if (this.hidden) {
            this.hide(0);
          }

          this.applyMask();
          this.dispatch("validated");
          this.dispatch("inited");
          this.dispatchReady();
        } else {
          this.dispatch("validated");
        }

        if (this.showTooltipOn == "always") {
          if (this.visible && !this.disabled && !this.__disabled) {
            this.showTooltip();
          } else {
            this.hideTooltip(0);
          }
        }
      };
      /**
       * Dispatches `"ready"` event. Sprite dispatches it right after `"inited"` event.
       *
       * @ignore
       */


      Sprite.prototype.dispatchReady = function () {
        if (!this.isReady()) {
          this._ready = true;
          this.dispatch("ready");
        }
      };
      /**
       * Triggers a re-initialization of this element.
       *
       * Will result in complete redrawing of the element.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.reinit = function () {
        this._inited = false;
        this.setState(this.defaultState);
        this.invalidate();
      };
      /**
       * Handles the situation where parent element is resized.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.handleGlobalScale = function () {
        this.dispatch("globalscalechanged");

        if (this.nonScalingStroke) {
          this.strokeWidth = this.strokeWidth;
        }

        if (this.nonScaling) {
          this.validatePosition();
        }

        this.updateFilterScale();
      };
      /**
       * Updates filter properties which might depend on scale
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.updateFilterScale = function () {
        var _this = this;

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_31__["each"](this.filters.iterator(), function (filter) {
          filter.scale = _this.globalScale;
        });
      };
      /**
       * Removes itself from system's invalid lists.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.removeFromInvalids = function () {
        _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].removeFromInvalidSprites(this);

        _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].removeFromInvalidPositions(this);
      };
      /**
       * Copies all parameters from another [[Sprite]].
       *
       * @param source Source Sprite
       */


      Sprite.prototype.copyFrom = function (source) {
        var _this = this;

        _super.prototype.copyFrom.call(this, source);

        this.isMeasured = source.isMeasured;
        this.states.copyFrom(source.states);

        if (source.filters.length > 0) {
          source.filters.each(function (filter) {
            _this.filters.push(filter.clone());
          });
        }

        if (source._adapterO) {
          this.adapter.copyFrom(source._adapterO);
        } //helps to avoid calling getter which creates instance


        if (source["_interaction"]) {
          this.interactions.copyFrom(source.interactions);
        }

        if (source["_plugins"]) {
          this.plugins.copyFrom(source.plugins);
        }

        this.configField = source.configField;
        this.applyOnClones = source.applyOnClones; // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.
        //this.mask = source.mask; need to think about this, generally this causes a lot of problems

        this.disabled = source.disabled;
        this.virtualParent = source.virtualParent;
        this.exportable = source.exportable; //@todo: create tooltip if it's on source but not on this?
        //const tooltip = this._tooltip;
        //if (tooltip) {
        //	tooltip.copyFrom(source.tooltip);
        //}

        if (source._tooltip) {
          if (this._tooltip) {
            this._tooltip.copyFrom(source.tooltip);
          } else {
            if (source.cloneTooltip) {
              this.tooltip = source.tooltip.clone();
            } else {
              this._tooltip = source.tooltip;
            }
          }
        } //if ((<any>source)["_tooltip"] && !this._tooltip) {
        //	this._tooltip = (<any>source)["_tooltip"];
        //}


        this._showSystemTooltip = source.showSystemTooltip;

        _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["copyProperties"](source.propertyFields, this.propertyFields);

        _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["copyProperties"](source.properties, this);

        if (source.fillModifier) {
          this.fillModifier = source.fillModifier.clone();
        }

        if (source.strokeModifier) {
          this.strokeModifier = source.strokeModifier.clone();
        }
      };
      /**
       * Destroys this object and all related data.
       */


      Sprite.prototype.dispose = function () {
        if (!this.isDisposed()) {
          if (this.showTooltipOn == "always" && this.tooltip) {
            this.tooltip.hide();
          }

          this.dispatchImmediately("beforedisposed");

          if (this.isBaseSprite) {
            if (this.htmlContainer) {
              while (this.htmlContainer.childNodes.length > 0) {
                this.htmlContainer.removeChild(this.htmlContainer.firstChild);
              }
            }

            this.isBaseSprite = false;
          }

          _super.prototype.dispose.call(this); // Clear adapters


          if (this._adapterO) {
            this._adapterO.clear();
          }

          if (this.applyOnClones) {
            if (this._clones) {
              for (var i = this._clones.length - 1; i >= 0; i--) {
                var clone = this._clones.getIndex(i);

                clone.dispose();
              }
            }
          }

          if (this._svgContainer) {
            this._svgContainer.dispose();
          }

          if (this._interactionDisposer) {
            this._interactionDisposer.dispose();

            this._interactionDisposer = undefined;
          }

          if (this._urlDisposer) {
            this._urlDisposer.dispose();
          }

          this.removeFromInvalids();

          if (this.element) {
            this.element.dispose();
          }

          if (this.group) {
            this.group.dispose();
          }

          if (this._numberFormatter) {
            this._numberFormatter.dispose();
          }

          if (this._focusFilter) {
            this._focusFilter.dispose();
          }

          var stroke = this.stroke;

          if (stroke && !(stroke instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) && stroke.dispose) {
            if (this.clonedFrom && this.clonedFrom.stroke == stroke) {// do nothing
            } else {
              stroke.dispose();
            }
          } // TODO a bit hacky


          var fill = this.fill;

          if (fill && !(fill instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) && fill.dispose) {
            if (this.clonedFrom && this.clonedFrom.fill == fill) {// do nothing
            } else {
              fill.dispose();
            }
          } // remove from map


          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.id)) {
            this.map.removeKey(this.id);
          }

          this.parent = undefined;

          if (this._filters) {
            while (this._filters.length > 0) {
              var filter = this._filters.getIndex(0);

              filter.dispose();

              this._filters.removeValue(filter);
            }
          }

          this._alwaysShowDisposers = undefined;
        }
      };

      Object.defineProperty(Sprite.prototype, "isTemplate", {
        /**
         * @ignore Exclude from docs
         * @return Is template?
         */
        get: function get() {
          return this._isTemplate;
        },

        /**
         * Indicates if this element is a "template".
         *
         * Template Sprites act only as a holders for config for other "real"
         * elements to be cloned from.
         *
         * Templates are treated differently, as they are not validated, redrawn, or
         * otherwise are processed.
         *
         * @ignore Exclude from docs
         * @param value Is template?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this._isTemplate != value) {
            this._isTemplate = value;

            if (this instanceof _Container__WEBPACK_IMPORTED_MODULE_10__["Container"]) {
              _utils_Iterator__WEBPACK_IMPORTED_MODULE_31__["each"](this.children.iterator(), function (child) {
                child.isTemplate = value;
              });
            }

            if (value) {
              this.parent = this.parent;
              this.removeFromInvalids();
            } else {
              this.invalidate();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "showSystemTooltip", {
        /**
         * @return Show system tooltip?
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this._showSystemTooltip)) {
            if (this.virtualParent) {
              return this.virtualParent.showSystemTooltip;
            } else if (this.parent) {
              return this.parent.showSystemTooltip;
            } else {
              return false;
            }
          }

          return this._showSystemTooltip;
        },

        /**
         * Indicates whether the element should attempt to construct itself in a way
         * so that system tooltip is shown if its `readerTitle` is set.
         *
         * @param value Show system tooltip?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this._showSystemTooltip != value) {
            this._showSystemTooltip = value;
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "topParent", {
        /**
         * ==========================================================================
         * HIERARCHY AND STRUCTURE RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Sprites's top-level [[Container]].
         *
         * Please note that in most cases it won't be the chart element.
         *
         * To access base chart element, use `baseSprite` instead.
         *
         * @return Top-level ascendant
         */
        get: function get() {
          if (this._topParent) {
            return this._topParent;
          } else {
            if (this.parent) {
              return this.parent.topParent;
            }
          }
        },

        /**
         * @ignore
         * @param value {Container} top parent of a sprite
         */
        set: function set(value) {
          this._topParent = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "parent", {
        /**
         * @return Parent container
         */
        get: function get() {
          return this._parent;
        },

        /**
         * Elements' parent [[Container]].
         *
         * @param parent  Parent container
         */
        set: function set(parent) {
          if (this._isTemplate) {
            return;
          } // TODO is this needed ?


          _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["used"](this.paper);

          var oldParent = this._parent;

          if (oldParent != parent) {
            if (oldParent) {
              oldParent.children.removeValue(this);
            }

            this._parent = parent;

            if (parent) {
              this.topParent = parent.topParent;

              if (parent.isTemplate) {
                this.isTemplate = true;
              }

              this.baseId = parent.baseId;
              parent.children.push(this); // insert handler at Container invalidates +  invalidatesLayout + adds to group

              if (this._tooltip && !this._tooltipContainer) {
                this._tooltip.parent = parent.tooltipContainer;
              }

              if (!this._dataItem) {
                this.dataItem = parent.dataItem;
              }

              this.handleAlwaysShowTooltip();
              this.dispatchImmediately("parentset");
            } else {
              this.topParent = undefined;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @ignore
       */

      Sprite.prototype.handleAlwaysShow = function () {
        this.showTooltip();
      };
      /**
       * @ignore
       */


      Sprite.prototype.handleAlwaysShowTooltip = function () {
        var sprite = this;
        var oldDisposers = this._alwaysShowDisposers;

        if (oldDisposers) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_28__["each"](oldDisposers, function (oldDisposer) {
            oldDisposer.dispose();
          });
        }

        this._alwaysShowDisposers = [];

        if (this.showTooltipOn == "always") {
          while (sprite != undefined) {
            var disposer = sprite.events.on("visibilitychanged", this.handleAlwaysShow, this, false);
            this.addDisposer(disposer);

            this._alwaysShowDisposers.push(disposer);

            sprite = sprite.parent;
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "virtualParent", {
        /**
         * @return Virtual parent
         */
        get: function get() {
          return this._virtualParent;
        },

        /**
         * Element's "virtual" parent.
         *
         * This is required in ordere to maintain proper inheritance (like
         * formatters).
         *
         * Sometimes an element is a "logical" parent, even though it's not a direct
         * ascendant.
         *
         * Example: a bullet is not a child of the axis, but it would make sense
         * for it to inherit series' formatters.
         *
         * @ignore Exclude from docs
         * @param value  Virtual parent
         */
        set: function set(value) {
          this._virtualParent = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Moves `<defs>` to correct place in DOM.
       *
       * Some elements are initially created in "ghost" container. When moving
       * those into proper place in DOM, their respective `<defs>` need to be moved
       * as well.
       *
       * @ignore Exclude from docs
       */

      Sprite.prototype.appendDefs = function () {
        if (this.filterElement) {
          this.paper.appendDef(this.filterElement);
        }

        var fill = this.fill;

        if (fill && fill.element) {
          this.paper.appendDef(fill.element);
        }

        var stroke = this.stroke;

        if (stroke && stroke.element) {
          this.paper.appendDef(stroke.element);
        }

        if (this.fillModifier && this.fill instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
          var fill_1 = this.fillModifier.modify(this.fill);

          if (fill_1 && fill_1.element) {
            this.paper.appendDef(fill_1.element);
          }
        }

        if (this.strokeModifier && this.stroke instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
          var stroke_1 = this.strokeModifier.modify(this.stroke);

          if (stroke_1 && stroke_1.element) {
            this.paper.appendDef(stroke_1.element);
          }
        }

        if (this._clipPath) {
          this.paper.appendDef(this._clipPath);
        }

        if (this._exportable === false) {
          this.exportable = false;
        }
      };

      Object.defineProperty(Sprite.prototype, "map", {
        /**
         * Returns a [[Dictionary]] which maps object ids with their respective
         * objects.
         *
         * Can be used to retrieve any object by id, e.g.:
         *
         * ```TypeScript
         * console.log(mySprite.map.getKey("myid"));
         * ```
         * ```JavaScript
         * console.log(mySprite.map.getKey("myid"));
         * ```
         *
         * @return Map collection
         */
        get: function get() {
          var top = this.topParent;

          if (top) {
            return top.map;
          } else if (!this._map) {
            this._map = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__["Dictionary"]();
          }

          return this._map;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "delayedMap", {
        /**
         * @ignore
         * @return Map collection
         */
        get: function get() {
          var top = this.topParent;

          if (top) {
            return top.delayedMap;
          } else if (!this._delayedMap) {
            this._delayedMap = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__["Dictionary"]();
          }

          return this._delayedMap;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "id", {
        /**
         * @return ID
         */
        get: function get() {
          return this._id;
        },

        /**
         * Element's user-defined ID.
         *
         * Will throw an Error if there already is an object with the same ID.
         *
         * Please note that above check will be performed withing the scope of the
         * current chart instance. It will not do checks across other chart instances
         * or in globally in DOM.
         *
         * Make sure the IDs are unique.
         *
         * @param value ID
         */
        set: function set(value) {
          if (this._id != value) {
            this._id = value;

            if (this.map.hasKey(value)) {
              throw Error("Duplicate id (" + value + ") used on multiple objects.");
            } else {
              this.map.setKey(value, this);
            }

            if (_Options__WEBPACK_IMPORTED_MODULE_17__["options"].autoSetClassName) {
              this.setClassName();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "dom", {
        /**
         * ==========================================================================
         * ELEMENT AND DOM TREE MANIPULATION AND MEASURING
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns DOM element reference associated with this element.
         *
         * @readonly
         * @return DOM element
         */
        get: function get() {
          return this.group.node;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return Paper
         */
        get: function get() {
          if (this._paper) {
            return this._paper;
          } else {
            if (this.parent) {
              return this.parent.paper;
            }
          }

          return Object(_rendering_Paper__WEBPACK_IMPORTED_MODULE_9__["getGhostPaper"])();
        },

        /**
         * A [[Paper]] instance to place elements on.
         *
         * If there's no Paper set for this element, it goes up the ascendant tree
         * until it finds one.
         *
         * This method is used by important `addChild()` method, so it's essential
         * to have a [[Paper]] instance.
         *
         * If this element has a separate `htmlContainer` set, it will have a
         * [[Paper]] instance itself.
         *
         * @ignore Exclude from docs
         * @param paper  Paper
         */
        set: function set(paper) {
          this.setPaper(paper);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets [[Paper]] instance to use to draw elements.
       * @ignore
       * @param paper Paper
       * @return true if paper was changed, false, if it's the same
       */

      Sprite.prototype.setPaper = function (paper) {
        var oldPaper = this._paper;

        if (oldPaper != paper) {
          this._paper = paper;
          this.appendDefs();
          return true;
        }

        return false;
      };

      Object.defineProperty(Sprite.prototype, "htmlContainer", {
        /**
         * @return HTML element
         */
        get: function get() {
          if (this._htmlContainer) {
            return this._htmlContainer;
          } else {
            if (this.parent) {
              return this.parent.htmlContainer;
            }
          }
        },

        /**
         * An HTML element to be used when placing wrapper element (`<div>`)
         * for the whole chart.
         *
         * This is the same for **all** elements within the same chart.
         *
         * @param htmlContainer HTML element
         */
        set: function set(htmlContainer) {
          this._htmlContainer = htmlContainer;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "titleElement", {
        /**
         * Creates (if not yet created) and returns element's `<title>` element.
         *
         * @ignore Exclude from docs
         * @return Title element
         */
        get: function get() {
          if (!this._titleElement) {
            this._titleElement = this.paper.add("title");
            this.group.add(this._titleElement);
          }

          return this._titleElement;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "descriptionElement", {
        /**
         * Creates (if not yet created) and returns element's `<desc>` element.
         *
         * @ignore Exclude from docs
         * @return Desc element
         */
        get: function get() {
          if (!this._descriptionElement) {
            this._descriptionElement = this.paper.add("desc");
            this.group.add(this._descriptionElement);
          }

          return this._descriptionElement;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "filters", {
        /**
         * Returns list of SVG filters (effects) applied to element. If the filter
         * list is not yet initilized, creates and returns an empty one.
         * Note, not all filters combine well with one another. We recommend using one filter per sprite.
         *
         * @return List of filters
         */
        get: function get() {
          if (!this._filters) {
            this._filters = new _utils_List__WEBPACK_IMPORTED_MODULE_6__["List"](); // TODO only add certain events ?

            this._disposers.push(this._filters.events.onAll(this.applyFilters, this));

            this._disposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_6__["ListDisposer"](this._filters));
          }

          return this._filters;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets required SVG attributes. Must be called every time an element is
       * redrawn so that attributes are (re)applied.
       *
       * @ignore Exclude from docs
       */

      Sprite.prototype.setSVGAttributes = function () {
        this.fill = this.fill;
        this.opacity = this.opacity;
        this.fillOpacity = this.fillOpacity;
        this.stroke = this.stroke;
        this.strokeOpacity = this.strokeOpacity;
        this.shapeRendering = this.shapeRendering;
        this.strokeDasharray = this.strokeDasharray;
        this.strokeDashoffset = this.strokeDashoffset;
        this.strokeLinecap = this.strokeLinecap;
        this.strokeLinejoin = this.strokeLinejoin;
        this.focusable = this.focusable;
        this.tabindex = this.tabindex;
        this.role = this.role;
      };
      /**
       * Sets an attribute directly on an SVG element.
       *
       * @ignore Exclude from docs
       * @param attribute Attribute object
       */


      Sprite.prototype.setSVGAttribute = function (attribute) {
        this.group.attr(attribute);
      };
      /**
       * Removes an attribute directly from SVG element.
       *
       * @param attribute Attribute key to remove
       */


      Sprite.prototype.removeSVGAttribute = function (attribute) {
        this.group.removeAttr(attribute);
      };
      /**
       * Sets `class` attribute of the elements SVG node.
       *
       * Uses `am4core.options.classNamePrefix`.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.setClassName = function () {
        var className = this.className;
        var classNamePrefix = _Options__WEBPACK_IMPORTED_MODULE_17__["options"].classNamePrefix;

        if (this.element) {
          this.element.addClass(classNamePrefix + className);
        }

        this.group.addClass(classNamePrefix + className + "-group");

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.id)) {
          this.group.addClass(classNamePrefix + this.id);
        }

        if (this.userClassName) {
          this.group.addClass(this.userClassName);
        }
      };
      /**
       * Adds an `id` attribute the the element and returns the id.
       *
       * @ignore Exclude from docs
       * @return Element's ID
       */


      Sprite.prototype.uidAttr = function () {
        this.setSVGAttribute({
          "id": this.uid
        });
        return this.uid;
      };
      /**
       * [updateClipPath description]
       *
       * @todo Description
       */


      Sprite.prototype.updateClipPath = function () {
        var element = this._clipElement;

        if (element) {
          element.moveTo({
            x: this.mask.pixelX,
            y: this.mask.pixelY
          });
        }
      };
      /**
       * @ignore
       */


      Sprite.prototype.createClipPath = function () {
        if (!this._clipPath) {
          this._clipPath = this.paper.addGroup("clipPath");
          this.paper.appendDef(this._clipPath);

          this._disposers.push(this._clipPath);

          var id = _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].getUniqueId();

          this._clipPath.attr({
            "id": id
          });

          this.group.attr({
            "clip-path": "url(\"" + _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["getBaseURI"]() + id + "\")"
          });
        }
      };
      /**
       * Applies the mask Sprite.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.applyMask = function () {
        var mask = this.mask;

        if (this._clipPath && mask) {
          // Container
          if (mask instanceof _Container__WEBPACK_IMPORTED_MODULE_10__["Container"]) {
            this._clipElement.attr({
              "width": _utils_Math__WEBPACK_IMPORTED_MODULE_26__["max"](0, mask.pixelWidth),
              "height": _utils_Math__WEBPACK_IMPORTED_MODULE_26__["max"](0, mask.pixelHeight)
            });

            var point = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["spritePointToSprite"]({
              x: mask.pixelX,
              y: mask.pixelY
            }, mask.parent, this);

            this._clipPath.x = point.x;
            this._clipPath.y = point.y;
          } // Sprite
          else {
              if (mask.element && mask.element != this._clipElement) {
                this._clipElement = mask.element;

                this._clipPath.add(this._clipElement);
              }

              this._clipPath.scale = mask.scale;
              this._clipPath.x = mask.pixelX;
              this._clipPath.y = mask.pixelY;
              this._clipPath.rotation = mask.rotation;
            }
        }
      };
      /**
       * Applies filters to the element.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.applyFilters = function () {
        var _this = this; // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.
        // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.


        if (this._filters && this._filters.length > 0) {
          var width_1 = 100;
          var height_1 = 100;

          if (!this.filterElement) {
            this.filterElement = this.paper.addGroup("filter");

            this._disposers.push(this.filterElement);
          } else {
            this.filterElement.removeChildNodes();
          }

          this.paper.appendDef(this.filterElement);
          var id = "filter-" + this.uid;
          this.filterElement.attr({
            "id": id
          });

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_31__["each"](this.filters.iterator(), function (filter) {
            filter.sprite = _this;
            filter.paper = _this.paper;
            filter.appendPrimitives(_this.filterElement);

            if (filter.width > width_1) {
              width_1 = filter.width;
            }

            if (filter.height > height_1) {
              height_1 = filter.height;
            }

            filter.scale = _this.globalScale;
          });

          var w = width_1 + "%";
          var h = height_1 + "%";
          /* temporarily removed as it is breaking tooltips on Safari @todo come back to this
          if (this._measuredHeight <= 1) {
              h = height + "";
          }
            if (this._measuredWidth <= 1) {
              h = width + "";
          }*/

          this.filterElement.attr({
            "width": w,
            "height": h,
            "x": -(width_1 - 100) / 2 + "%",
            "y": -(height_1 - 100) / 2 + "%"
          });
          this.group.attr({
            "filter": "url(\"" + _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["getBaseURI"]() + id + "\")"
          });
        } else if (this.filterElement) {
          this.group.removeAttr("filter");
          this.filterElement.removeChildNodes();
        }
      };
      /**
       * [removeClipPath description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */


      Sprite.prototype.removeClipPath = function () {
        if (this._clipPath) {
          //this._clipPath.dispose();
          this.removeDispose(this._clipPath);
          this._clipPath = undefined;
        }
      };
      /**
       * [setElement description]
       *
       * @ignore
       * @todo Description
       * @param element [description]
       */


      Sprite.prototype.setElement = function (element) {
        this.element = element;
        this.setSVGAttributes();
        this.applyAccessibility();
      };

      Object.defineProperty(Sprite.prototype, "element", {
        /**
         * @return Element
         */
        get: function get() {
          return this._element;
        },

        /**
         * The main element for this Sprite, usually an SVG `<g>`.
         *
         * All other sub-elements are created in it.
         *
         * @param element  Element
         */
        set: function set(element) {
          // Destroy previous element if there was one before
          this.removeElement(); // Set new element

          this._element = element; // Add element to group
          // Since we are adding Element to group, which is already in the
          // `.disposers` it will be removed automatically when Sprite is disposed
          // of

          this.group.add(element);

          if (element.node instanceof SVGPathElement) {
            this._isPath = true;
          } // This is needed if someone is setting element not in draw method but
          // from outside


          if (!this.invalid) {
            this.validate();
          }

          if (_Options__WEBPACK_IMPORTED_MODULE_17__["options"].autoSetClassName) {
            this.setClassName();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "svgContainer", {
        /**
         * HTML container (`<div>`) which is used to place chart's `<svg>` element
         * in.
         *
         * @return Container for chart elements
         */
        get: function get() {
          if (this._svgContainer) {
            return this._svgContainer;
          } else if (this.parent) {
            return this.parent.svgContainer;
          }
        },

        /**
         * Sets HTML container to add SVG and other chart elements to.
         *
         * @param svgContainer Container for chart elements
         */
        set: function set(svgContainer) {
          this._svgContainer = svgContainer;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Measures main element.
       *
       * Saves measurements into private `_bbox` property.
       *
       * @ignore Exclude from docs
       */

      Sprite.prototype.measureElement = function () {
        if (this.element) {
          if (this.definedBBox) {
            this._bbox = this.definedBBox;
          } else {
            var svgBBox = this.element.getBBox();
            this._bbox = {
              x: svgBBox.x,
              y: svgBBox.y,
              width: svgBBox.width,
              height: svgBBox.height
            };
          }
        }
      };
      /**
       * Positions element according its center settings.
       *
       * @todo Description (review)
       * @ignore Exclude from docs
       */


      Sprite.prototype.updateCenter = function () {
        if (this.element) {
          var prevElementTransform = this.element.transformString;
          var bbox = this.bbox;
          var ex = 0;
          var ey = 0;
          var elementX = bbox.x;
          var elementY = bbox.y;
          var elementWidth = bbox.width;
          var elementHeigth = bbox.height;
          var pixelPaddingLeft = this.pixelPaddingLeft;
          var pixelPaddingRight = this.pixelPaddingRight;
          var pixelPaddingTop = this.pixelPaddingTop;
          var pixelPaddingBottom = this.pixelPaddingBottom; // add padding to the measured size

          var measuredWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["max"](elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);

          var measuredHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["max"](elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight); // extremes


          var left = bbox.x;
          var right = bbox.x + measuredWidth;
          var top_1 = bbox.y;
          var bottom = bbox.y + measuredHeight;
          var horizontalCenter = this.horizontalCenter;
          var verticalCenter = this.verticalCenter;

          switch (horizontalCenter) {
            case "none":
              ex = elementX + pixelPaddingLeft;
              break;

            case "left":
              ex = pixelPaddingLeft;
              break;

            case "middle":
              ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;
              break;

            case "right":
              ex = -pixelPaddingRight - elementWidth;
              break;
          }

          switch (verticalCenter) {
            case "none":
              ey = elementY + pixelPaddingTop;
              break;

            case "top":
              ey = pixelPaddingTop;
              break;

            case "middle":
              ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;
              break;

            case "bottom":
              ey = -pixelPaddingBottom - elementHeigth;
              break;
          }

          this._measuredHeight = measuredHeight;
          this._measuredWidth = measuredWidth;

          var x = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](ex - elementX, this._positionPrecision, true);

          var y = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](ey - elementY, this._positionPrecision, true);

          this.ex = x - pixelPaddingLeft;
          this.ey = y - pixelPaddingTop;
          this.maxLeft = left + x - pixelPaddingLeft;
          this.maxRight = right + x - pixelPaddingLeft;
          this.maxTop = top_1 + y - pixelPaddingTop;
          this.maxBottom = bottom + y - pixelPaddingTop;

          if (this.pixelPerfect) {
            x -= 0.5;
            y -= 0.5;
          }

          this.element.moveTo({
            x: x,
            y: y
          });

          if (prevElementTransform != this.element.transformString) {
            this.dispatchImmediately("transformed");
          }
        }
      };
      /**
       * Measures the whole element.
       *
       * Returns `true` if the size has changed from the last measurement.
       *
       * @ignore Exclude from docs
       * @return Did the size changed from the last measurement?
       */


      Sprite.prototype.measure = function () {
        this.updateCenter();
        var measuredWidth = this._measuredWidth;
        var measuredHeight = this._measuredHeight; // extremes

        var left = this.maxLeft;
        var right = this.maxRight;
        var top = this.maxTop;
        var bottom = this.maxBottom; // non-parent wise size

        this._measuredWidthSelf = measuredWidth;
        this._measuredHeightSelf = measuredHeight;
        var positionPrecision = this._positionPrecision;
        this.maxLeftSelf = this.maxLeft;
        this.maxRightSelf = this.maxRight;
        this.maxTopSelf = this.maxTop;
        this.maxBottomSelf = this.maxBottom; // if a sprite is rotated or scaled, calculate measured size after transformations

        if (this.rotation !== 0 || this.scale !== 1) {
          // not good to handleGlobalScale here.
          if (this.nonScalingStroke) {
            this.strokeWidth = this.strokeWidth;
          }

          var svg = this.paper.svg;
          var matrix = svg.createSVGMatrix();
          var rotation = this.rotation;
          matrix.a = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["cos"](rotation) * this.scale;
          matrix.c = -_utils_Math__WEBPACK_IMPORTED_MODULE_26__["sin"](rotation) * this.scale;
          matrix.e = 0;
          matrix.b = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["sin"](rotation) * this.scale;
          matrix.d = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["cos"](rotation) * this.scale;
          matrix.f = 0;
          var p1 = svg.createSVGPoint();
          p1.x = left;
          p1.y = top;
          var p2 = svg.createSVGPoint();
          p2.x = right;
          p2.y = top;
          var p3 = svg.createSVGPoint();
          p3.x = right;
          p3.y = bottom;
          var p4 = svg.createSVGPoint();
          p4.x = left;
          p4.y = bottom;
          var pt1 = p1.matrixTransform(matrix);
          var pt2 = p2.matrixTransform(matrix);
          var pt3 = p3.matrixTransform(matrix);
          var pt4 = p4.matrixTransform(matrix);
          left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);
          right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);
          top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);
          bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);
          measuredWidth = right - left;
          measuredHeight = bottom - top;
          this.maxLeft = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](left, positionPrecision, true);
          this.maxRight = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](right, positionPrecision, true);
          this.maxTop = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](top, positionPrecision, true);
          this.maxBottom = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](bottom, positionPrecision, true);
        }

        this._measuredWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](measuredWidth, positionPrecision, true);
        this._measuredHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](measuredHeight, positionPrecision, true); // dispatch event

        if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {
          this._prevMeasuredHeight = this._measuredHeight;
          this._prevMeasuredWidth = this._measuredWidth; // TODO clear existing sizechanged dispatches ?

          this.dispatch("sizechanged");

          if ((this.isHover || this.showTooltipOn == "hit" || this.showTooltipOn == "always") && this.tooltip && this.tooltip.visible && (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipText) || _utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipHTML))) {
            this.updateTooltipPosition();
          }

          return true;
        }

        return false;
      };
      /**
       * Insert this element before sibling element.
       *
       * @param sprite  Target element
       * @return This element
       */


      Sprite.prototype.insertBefore = function (sprite) {
        var parent = this.parent;

        if (parent) {
          var index = parent.children.indexOf(sprite);

          if (index !== -1) {
            parent.children.moveValue(this, index);
            parent.sortChildren();
          }
        }

        return this;
      };
      /**
       * Insert this element after sibling element.
       *
       * @param sprite  Target element
       * @return This element
       */


      Sprite.prototype.insertAfter = function (sprite) {
        var parent = this.parent;

        if (parent) {
          var index = parent.children.indexOf(sprite);

          if (index !== -1) {
            parent.children.moveValue(this, index + 1);
            parent.sortChildren();
          }
        }

        return this;
      };
      /**
       * Removes the main SVG element.
       *
       * This does not destroy the whole Sprite element. To do that use
       * `dispose()` instead.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.removeElement = function () {
        // remove visual element
        if (this._element) {
          this.removeDispose(this._element);
          this._element = undefined;
        }
      };
      /**
       * Returns relative (percent) value of the X coordindate within this element.
       *
       * A relative value is a hundredth of a percent. So 100% would result in a 1
       * as relative value.
       *
       * @param value  Absolute or relative X coordinate
       * @return Relative value
       */


      Sprite.prototype.getRelativeX = function (value) {
        if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
          return value.value;
        } else if (this.parent) {
          return value / this.parent.innerWidth;
        }

        return 0;
      };
      /**
       * Returns relative (percent) value of the Y coordindate within this element.
       *
       * A relative value is a hundredth of a percent. So 100% would result in a 1
       * as relative value.
       *
       * @param value  Absolute or relative Y coordinate
       * @return Relative value
       */


      Sprite.prototype.getRelativeY = function (value) {
        if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
          return value.value;
        } else if (this.parent) {
          return value / this.parent.innerHeight;
        }

        return 0;
      };
      /**
       * Returns an X coordinate in pixel within the element.
       *
       * If number is passed in as parameter, the same number will be returned
       * back.
       *
       * If [[Percent]] is passed in, it will be recalculated to pixels.
       *
       * @param value  Absolute or relative X coordinate
       * @return X coordinate in pixels
       */


      Sprite.prototype.getPixelX = function (value) {
        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth
        // all the time and this would result chain of the same actions and will slow down the system a lot
        var pixel = 0;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
          pixel = value;
        } else if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
          var relative = value.value;

          if (this.parent) {
            pixel = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](this.parent.innerWidth * relative, this._positionPrecision, true);
          }
        }

        return pixel;
      };
      /**
       * Returns an Y coordinate in pixel within the element.
       *
       * If number is passed in as parameter, the same number will be returned
       * back.
       *
       * If [[Percent]] is passed in, it will be recalculated to pixels.
       *
       * @param value  Absolute or relative Y coordinate
       * @return Y coordinate in pixels
       */


      Sprite.prototype.getPixelY = function (value) {
        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth
        // all the time and this would result chain of the same actions and will slow down the system a lot
        var pixel = 0;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
          pixel = value;
        } else if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
          var relative = value.value;

          if (this.parent) {
            pixel = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](this.parent.innerHeight * relative, this._positionPrecision, true);
          }
        }

        return pixel;
      };
      /**
       * Moves the element to a specified coordinates.
       *
       * Using this method is preferred method of moving element, as it saves some
       * CPU processing power over setting `x` and `y` properties separately.
       *
       * The method respects element's center settings. The element will be
       * positioned so that `point` coordinates come in whatever "center" of the
       * element is, as set in `horizontalCenter` and `verticalCenter`.
       *
       * Besides moving the element, you can also at the same time scale and
       * rotate the element.
       *
       * @param point     New coordinates
       * @param rotation  New rotation
       * @param scale     New Scale
       */


      Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {
        if (this.isDragged && !isDragged) {
          return;
        }

        if (point) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](point.x)) {
            this.setPropertyValue("x", _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](point.x, this._positionPrecision, true));
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](point.y)) {
            this.setPropertyValue("y", _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](point.y, this._positionPrecision, true));
          }
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](rotation)) {
          this.rotation = rotation;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](scale)) {
          this.scale = scale;
        } // must leave this


        this.invalidatePosition();
      };

      Object.defineProperty(Sprite.prototype, "mask", {
        /**
         * Returns [[Sprite]] element currently used as mask for this element.
         *
         * @ignore Exclude from docs
         * @return A [[Sprite]] to use as mask
         */
        get: function get() {
          if (!this._adapterO) {
            return this._mask.get();
          } else {
            return this._adapterO.apply("mask", this._mask.get());
          }
        },

        /**
         * Sets another [[Sprite]] element as this elements mask.
         *
         * @ignore Exclude from docs
         * @param mask A [[Sprite]] to use as mask
         */
        set: function set(mask) {
          var _this = this;

          if (this._mask.get() !== mask) {
            // this is good
            if (mask) {
              this.createClipPath();

              if (!(mask instanceof _Container__WEBPACK_IMPORTED_MODULE_10__["Container"])) {
                mask.isMeasured = false;

                if (mask.element) {
                  this._clipElement = mask.element;
                }
              } else {
                this._clipElement = this.paper.add("rect");
              }

              if (this._clipElement) {
                this._clipPath.add(this._clipElement);
              }

              this._mask.set(mask, new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([//mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);
              mask.events.on("maxsizechanged", function () {
                if (_this.inited) {
                  _this.applyMask();
                }
              }, undefined, false), mask.events.on("validated", this.applyMask, this, false), mask.events.on("positionchanged", this.applyMask, this, false)]));

              this.applyMask();
            } else {
              this._mask.reset();

              this.group.removeAttr("clip-path");
              this.removeClipPath();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "maskRectangle", {
        /**
         * @ignore Exclude from docs
         * @return Mask Rectangle
         */
        get: function get() {
          return this._maskRectangle;
        },
        // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored

        /**
         * Instead of creating a [[Sprite]] for mask, you can just use a
         * [[Rectangle]] by setting this accessor.
         *
         * Please note that the element will not monitor any changes to the mask
         * rectangle.
         *
         * @ignore Exclude from docs
         * @param rect Mask Rectangle
         */
        set: function set(rect) {
          if (rect) {
            this.createClipPath();

            if (!this._clipElement) {
              this._clipElement = this.paper.add("rect");

              this._clipPath.add(this._clipElement);
            }

            this._clipElement.attr({
              "width": rect.width,
              "height": rect.height
            });
          } else {
            this.removeClipPath();
            this._clipElement = undefined;
          }

          this._maskRectangle = rect;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "isMeasured", {
        /**
         * @ignore Exclude from docs
         * @return Was element already measured?
         */
        get: function get() {
          return this._isMeasured;
        },

        /**
         * Indicates if this element was already measured.
         *
         * @ignore Exclude from docs
         * @param value Was element already measured?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (!value) {
            this._measuredWidth = 0;
            this._measuredHeight = 0; //this._pixelHeight = 0;
            //this._pixelWidth = 0;
          }

          if (this._isMeasured != value) {
            this._isMeasured = value;
            this.invalidatePosition();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if the this element has any of its parts overlapping with another
       * element.
       *
       * @todo Description (review)
       * @param sprite  Second element to test again
       * @return Overlapping?
       */

      Sprite.prototype.hitTest = function (sprite) {
        // validate, otherwise we will not know measuredWidth and measuredHeight
        if (this.invalid) {
          this.validate();
        }

        if (sprite.invalid) {
          sprite.validate();
        }

        var ax1 = this.pixelX;
        var ay1 = this.pixelY;
        var ax2 = ax1 + this.measuredWidth;
        var ay2 = ay1 + this.measuredHeight;
        var bx1 = sprite.pixelX;
        var by1 = sprite.pixelY;
        var bx2 = bx1 + sprite.measuredWidth;
        var by2 = by1 + sprite.measuredHeight;
        return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);
      };

      Object.defineProperty(Sprite.prototype, "inited", {
        /**
         * ==========================================================================
         * STATE-RELATED
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns `true` if Sprite has already finished initializing.
         *
         * @return Initialized?
         */
        get: function get() {
          return this._inited;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns `true` if Sprite has already finished initializing and is ready.
       *
       * If this object is a [[Container]] it will wait for all of its children
       * are ready before becoming ready itself and firing a `"ready"` event.
       *
       * @return is ready?
       */

      Sprite.prototype.isReady = function () {
        return this._ready;
      };

      Object.defineProperty(Sprite.prototype, "states", {
        /**
         * Returns a collection of element's available [[SpriteState]] entries.
         *
         * @see {@link SpriteState}
         * @return States
         */
        get: function get() {
          if (!this._states) {
            var state = new _SpriteState__WEBPACK_IMPORTED_MODULE_1__["SpriteState"](); // works

            this._states = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__["DictionaryTemplate"](state); // TODO what about removeKey ?

            this._disposers.push(this._states.events.on("insertKey", this.processState, this, false));

            this._disposers.push(this._states.events.on("setKey", this.processState, this, false));

            this._disposers.push(new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_5__["DictionaryDisposer"](this._states));

            this._disposers.push(state);
          }

          return this._states;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "hiddenState", {
        /**
         * Returns a [[SpriteState]] object for "hidden" state.
         *
         * This is a shortcut to `this.states.getKey("hidden")`.
         *
         * @return Hidden state
         */
        get: function get() {
          if (!this.states.getKey("hidden")) {
            var hiddenState = this.states.create("hidden");
            hiddenState.properties.opacity = 0;
            hiddenState.properties.visible = false;
          }

          return this.states.getKey("hidden");
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "defaultState", {
        /**
         * Returns a [[SpriteState]] object for "default" state.
         *
         * This is a shortcut to `this.states.getKey("default")`.
         *
         * @return Hidden state
         */
        get: function get() {
          if (!this.states.getKey("default")) {
            var defaultState = this.states.create("default");
            defaultState.properties.opacity = 1;
          }

          return this.states.getKey("default");
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if some key states are defined and updates Sprite properties
       * accordingly.
       *
       * For example if there's a state "down" defined for Sprite, we automatically
       * make it "clickable".
       *
       * @ignore Exclude from docs
       * @param event An event which caused state list update
       */

      Sprite.prototype.processState = function (event) {
        var state = event.newValue;
        state.sprite = this;
        state.name = event.key;

        if (this.states.hasKey("hover") || this.showTooltipOn == "hover" && (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipHTML) || _utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipText))) {
          this.hoverable = true;
        }

        if (this.states.hasKey("down") || this.showTooltipOn == "hover" && (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipHTML) || _utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipText))) {
          this.clickable = true;
        }

        if (this.states.hasKey("focus")) {
          this.focusable = true;
        } // Propagate the new state to clones


        if (this.applyOnClones) {
          var clones = this.clones.values;
          var length_1 = clones.length;

          for (var i = 0; i < length_1; ++i) {
            var clone = clones[i];

            if (!clone.isDisposed()) {
              clone.states.setKey(state.name, state);
            }
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "animations", {
        /**
         * Returns a list elements's animations currently being played.
         *
         * If the list has not been initialized it is created.
         *
         * @return List of animations
         */
        get: function get() {
          if (!this._animations) {
            this._animations = [];

            this._disposers.push(new _utils_Animation__WEBPACK_IMPORTED_MODULE_8__["AnimationDisposer"](this._animations));
          }

          return this._animations;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts element's local coordinates to the coordinates within the main
       * chart container.
       *
       * @param point  Local point
       * @return Global point
       */

      Sprite.prototype.getSvgPoint = function (point) {
        try {
          // Calculate SVG point
          var bbox = this.htmlContainer.getBoundingClientRect();
          return {
            "x": point.x - bbox.left,
            "y": point.y - bbox.top
          };
        } catch (e) {
          return point;
        }
      };
      /**
       * Creates and starts an [[Animation]] with given `animationOptions`.
       *
       * @see {@link Animation} for additional information about available options
       * @param animationOptions  Animation options
       * @param duration          Duration in milliseconds
       * @param easing            Easing function
       * @return Animation instance
       */


      Sprite.prototype.animate = function (animationOptions, duration, easing) {
        return new _utils_Animation__WEBPACK_IMPORTED_MODULE_8__["Animation"](this, animationOptions, duration, easing).start();
      };
      /**
       * Applies a [[SpriteState]] on this element.
       *
       * The first parameter can either be a name state or a [[SpriteState]]
       * instance.
       *
       * When run, this method will apply SVG properties defined in a
       * [[SpriteState]], but only those that are relevant to this particular
       * element, i.e. are in the `properties` array.
       *
       * @see {@link SpriteState}
       * @param value               A state - name key or instance
       * @param transitionDuration  Duration of the transition between current and new state
       * @param easing              An easing function
       */


      Sprite.prototype.setState = function (value, transitionDuration, easing) {
        var state;

        if (value instanceof _SpriteState__WEBPACK_IMPORTED_MODULE_1__["SpriteState"]) {
          this.states.setKey(value.name, value);
          state = value;
        } else {
          state = this.states.getKey(value);

          if (!state) {
            return;
          }
        } // stop previous transition
        // not good - foe expample, we are animating to some "active" state and in them middle "hover" state happens. then "active" stat won't be applied
        //if (this._transition) {
        //this._transition.stop();
        //}


        if (state.name == "hover") {
          if (this.isHidden) {
            return;
          }

          this.isHover = true;
        }

        if (state.name == "hidden") {
          this.isHiding = true;
        } else {
          if (!this.visible) {
            this.setVisibility(state.properties.visible || this.defaultState.properties.visible);
          }
        }

        if (state.name == "active") {
          this.isActive = true;
        } // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true


        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](transitionDuration)) {
          transitionDuration = state.transitionDuration;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](easing)) {
          easing = state.transitionEasing;
        }

        return this.transitTo(state, transitionDuration, easing);
      };
      /**
       * Applies proper state based on the condition of the element. A condition is
       * deducted in this order:
       * * "hover" if Sprite has currently any pointers over it
       * * "down" if Sprite has any pointers (touch or mouse) currently pressed over it
       * * "focus" if Sprite has currently got focus (accessibility)
       * * "hidden" if Sprite is currently hidden
       *
       * Returns an [[Animation]] object, which is handling gradual transition from
       * current values of properties, to the new target state(s).
       *
       * @param duration  Duration for the animation (ms)
       * @return [[Animation]] object which is handling the transition
       */


      Sprite.prototype.applyCurrentState = function (duration) {
        //if (!this.isHidden) { // this was done for hover state not to take effect if "hidden" is actually visible, need to think about it.
        var animation = this.setState(this.defaultState, duration);

        if (this.isHover) {
          animation = this.setState("hover", duration);
        }

        if (this.isDown && this.interactions.downPointers.length) {
          animation = this.setState("down", duration);
        }

        this.isFocused = this.isFocused;

        if (this.isActive) {
          animation = this.setState("active", duration);

          if (this.isHover && this.states.hasKey("hoverActive")) {
            animation = this.setState("hoverActive", duration);
          }
        }

        return animation; //}
      };
      /**
       * Starts an [[Animation]] of the properties to specific values as they are
       * set in `state`.
       *
       * @ignore Exclude from docs
       * @param state     Target State
       * @param duration  Duration in milliseconds
       * @param easing    Easing function
       * @return Transition Animation
       */


      Sprite.prototype.transitTo = function (state, duration, easing) {
        var _this = this; // Init


        var options = [],
            propValues = state.allValues,
            transition; // todo: do this for numeric/color properties only?
        // @todo use state.getPropertyValue instead

        _utils_Object__WEBPACK_IMPORTED_MODULE_29__["each"](propValues, function (propertyName, finalValue) {
          var currentValue = _this[propertyName]; // save current value to default state. this solves a big problem where values must be set both on sprite and default state

          if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {
            _this.defaultState.properties[propertyName] = currentValue;
          } //if (finalValue != currentValue && $type.hasValue(finalValue)) {


          if (finalValue != "__unset") {
            var option = {
              from: currentValue,
              to: finalValue,
              property: propertyName
            };
            options.push(option);
          }
        });

        if (options.length > 0) {
          transition = this.animate(options, duration, easing);

          if (transition && !transition.isFinished()) {
            // TODO should this use events.once ?
            // TODO push onto _disposers array ?
            this._disposers.push(transition.events.on("animationended", function () {
              _this.dispatchImmediately("transitionended");
            }));
          } else {
            this.dispatchImmediately("transitionended");
          }
        } // apply filters if set


        if (state.filters.length > 0) {
          var newFilters_1 = []; // check for the same filters

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_31__["each"](state.filters.iterator(), function (stateFilter) {
            var newFilter = stateFilter.clone();
            newFilters_1.push(newFilter);
            var animationOptions = [];

            _utils_Iterator__WEBPACK_IMPORTED_MODULE_31__["each"](_this.filters.iterator(), function (currentFilter) {
              // if we have the same filters
              if (currentFilter.className == newFilter.className) {
                if (!_utils_Iterator__WEBPACK_IMPORTED_MODULE_31__["contains"](_this.defaultState.filters.iterator(), function (x) {
                  return x.className === newFilter.className;
                })) {
                  _this.defaultState.filters.push(currentFilter);
                }

                _utils_Object__WEBPACK_IMPORTED_MODULE_29__["each"](newFilter.properties, function (propertyName, newValue) {
                  var currentValue = currentFilter.properties[propertyName]; // if values are not the same, push to animation options array

                  if (currentValue != newValue) {
                    animationOptions.push({
                      property: propertyName,
                      from: currentValue,
                      to: newValue
                    });
                  }
                });
              }
            }); // animate to new value


            newFilter.animate(animationOptions, duration, easing);
          });

          this.filters.clear();
          this.filters.pushAll(newFilters_1);
        }

        return transition;
      };
      /**
       * Returns `true` if Sprite is currently transiting from one state/value to
       * another.
       *
       * @return Is in transition?
       */


      Sprite.prototype.isInTransition = function () {
        return this.animations.length > 0;
      };

      Object.defineProperty(Sprite.prototype, "isHover", {
        /**
         * Returns indicator if this element has a mouse pointer currently hovering
         * over it, or if it has any touch pointers pressed on it.
         *
         * @return Is hovered?
         */
        get: function get() {
          if (this.isInteractive()) {
            return this.interactions.isHover;
          }

          return false;
        },

        /**
         * Indicates if this element has a mouse pointer currently hovering
         * over it, or if it has any touch pointers pressed on it.
         *
         * @param value Is hovered?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (value !== this.isHover) {
            if (this.isInteractive()) {
              this.interactions.isHover = value;

              if (value) {
                this.handleOver();
              } else {
                this.interactions.isRealHover = false;
                this.handleOut();
              }
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "isDragged", {
        /**
         * Returns indicator if this element is being dragged at the moment.
         *
         * @return Is dragged?
         */
        get: function get() {
          return this._isDragged;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "isResized", {
        /**
         * Returns indicator if this element is being resized at the moment.
         *
         * @return Is resized?
         */
        get: function get() {
          return this._isResized;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "isDown", {
        /**
         * @return Is down?
         */
        get: function get() {
          if (this.isInteractive()) {
            return this.interactions.isDown;
          }

          return false;
        },

        /**
         * Indicates if this element has any pointers (mouse or touch) pressing down
         * on it.
         *
         * @param value Is down?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.isInteractive() && this.isDown != value) {
            this.interactions.isDown = value;

            if (value) {
              this.handleDown();
            } else {
              this.handleUp();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "isFocused", {
        /**
         * @return Is focused?
         */
        get: function get() {
          if (this.isInteractive()) {
            return this.interactions.isFocused;
          }

          return false;
        },

        /**
         * Indicates if this element is focused (possibly by tab navigation).
         *
         * @param value Is focused?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.focusable && this.isFocused != value) {
            if (this.isInteractive()) {
              this.interactions.isFocused = value;

              if (value === true) {
                this.handleFocus();
              } else {
                this.handleBlur();
              }
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "isActive", {
        /**
         * @return Is active?
         */
        get: function get() {
          return this._isActive;
        },

        /**
         * Indicates if this element is currently active (toggled on) or not
         * (toggled off).
         *
         * @param value Is active?
         */
        set: function set(value) {
          this.setActive(value);
        },
        enumerable: true,
        configurable: true
      });

      Sprite.prototype.setActive = function (value) {
        value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

        if (this._isActive !== value) {
          this._isActive = value;

          if (value && this.states.hasKey("active")) {
            this.setState("active");

            if (this.isHover && this.states.hasKey("hoverActive")) {
              this.setState("hoverActive");
            }
          } else {
            this.applyCurrentState();
          }

          this.dispatchImmediately("toggled");
        }
      };

      Object.defineProperty(Sprite.prototype, "disabled", {
        /**
         * @return Disabled?
         */
        get: function get() {
          //if(this._internalDisabled){
          //	return true;
          //}
          var current = this.getPropertyValue("disabled");

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](current)) {
            return current;
          } else {
            if (this.virtualParent) {
              return this.virtualParent.disabled;
            }

            if (this.parent) {
              return this.parent.disabled;
            }
          }

          return false;
        },

        /**
         * Controls if element is disabled.
         *
         * A disabled element is hidden, and is removed from any processing, layout
         * calculations, and generally treated as if it does not exist.
         *
         * The element itself is not destroyed, though. Setting this back to `false`,
         * will "resurrect" the element.
         *
         * @param value  Disabled?
         */
        set: function set(value) {
          this.setDisabled(value);
        },
        enumerable: true,
        configurable: true
      });

      Sprite.prototype.setDisabled = function (value) {
        value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);
        var current = this.getPropertyValue("disabled");

        if (current != value) {
          this.setPropertyValue("disabled", value, true);

          if (value) {
            this.parent = this.parent;
            this.removeFromInvalids();
            this.group.attr({
              "display": "none"
            });
            this.dispatch("disabled");
          } else {
            if (this.parent) {
              var group = this.parent.element;

              if (!group.hasChild(this.group)) {
                group.add(this.group);
              }
            }

            if (this instanceof _Container__WEBPACK_IMPORTED_MODULE_10__["Container"]) {
              this.deepInvalidate();

              if (this._background) {
                this._background.invalidate();
              }
            } else {
              this.invalidate();
            }

            if (!this.__disabled) {
              this.removeSVGAttribute("display");
            }

            this.dispatch("enabled");
          }

          this.dispatch("transformed");

          _System__WEBPACK_IMPORTED_MODULE_32__["system"].requestFrame();

          return true;
        }

        return false;
      };

      Object.defineProperty(Sprite.prototype, "__disabled", {
        /**
         * @ignore
         * @return Disabled?
         */
        get: function get() {
          return this._internalDisabled;
        },

        /**
         * Internal disable method.
         *
         * Do not use it for disabling elements. Use `disabled` accessor instead.
         *
         * @ignore Exclude from docs
         * @param value Disabled?
         */
        set: function set(value) {
          if (this._internalDisabled != value) {
            this._internalDisabled = value;
            this._updateDisabled = true;
            this.invalidatePosition(); // better use this instead of invalidate()
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "numberFormatter", {
        /**
         * @return A [[NumberFormatter]] instance to be used
         */
        get: function get() {
          if (this._numberFormatter) {
            return this._numberFormatter;
          } else if (this.virtualParent) {
            return this.virtualParent.numberFormatter;
          } else if (this.parent) {
            return this.parent.numberFormatter;
          }

          this._numberFormatter = new _formatters_NumberFormatter__WEBPACK_IMPORTED_MODULE_19__["NumberFormatter"]();
          this._numberFormatter.language = this.language;
          return this.numberFormatter;
        },

        /**
         * ==========================================================================
         * FORMATTERS AND OTHER EXTERNAL HELPERS
         * ==========================================================================
         * @hidden
         */

        /**
         * A [[NumberFormatter]] instance.
         *
         * This is used to format numbers.
         *
         * ```TypeScript
         * chart.numberFormatter.numberFormat = "#,###.#####";
         * ```
         * ```JavaScript
         * chart.numberFormatter.numberFormat = "#,###.#####";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "numberFormatter": {
         *     "numberFormat": "#,###.#####"
         *   }
         * }
         * ```
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         *
         * @see {@link NumberFormatter} for more info on formatting numbers
         * @param value  An instance of NumberFormatter
         */
        set: function set(value) {
          this._numberFormatter = value;
          this._numberFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "dateFormatter", {
        /**
         * @return An instance of DateFormatter
         */
        get: function get() {
          if (this._dateFormatter) {
            return this._dateFormatter;
          } else if (this.virtualParent) {
            return this.virtualParent.dateFormatter;
          } else if (this.parent) {
            return this.parent.dateFormatter;
          }

          this._dateFormatter = new _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_20__["DateFormatter"]();
          this._dateFormatter.language = this.language;
          return this.dateFormatter;
        },

        /**
         * A [[DateFormatter]] instance.
         *
         * This is used to format dates, e.g. on a date axes, balloons, etc.
         *
         * ```TypeScript
         * chart.dateFormatter.dateFormat = "yyyy-MM-dd";
         * ```
         * ```JavaScript
         * chart.dateFormatter.dateFormat = "yyyy-MM-dd";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dateFormatter": {
         *     "dateFormat": "yyyy-MM-dd"
         *   }
         * }
         * ```
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         * @see {@link DateFormatter} for more info on dates formatting
         * @param value  An instance of DateFormatter
         */
        set: function set(value) {
          this._dateFormatter = value;
          this._dateFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "durationFormatter", {
        /**
         * @return An instance of DurationFormatter
         */
        get: function get() {
          if (this._durationFormatter) {
            return this._durationFormatter;
          } else if (this.virtualParent) {
            return this.virtualParent.durationFormatter;
          } else if (this.parent) {
            return this.parent.durationFormatter;
          }

          this._durationFormatter = new _formatters_DurationFormatter__WEBPACK_IMPORTED_MODULE_21__["DurationFormatter"]();
          this._durationFormatter.language = this.language;
          return this.durationFormatter;
        },

        /**
         * A [[DurationFormatter]] instance.
         *
         * This is used to format numbers as durations, e.g. on a value axes.
         *
         * You can set a separate instance of formatter for each
         * individual element. However that would be unnecessary overhead as
         * all elements would automatically inherit formatter from their parents,
         * all the way up to the chart itself.
         *
         * @see {@link DurationFormatter} for more info on durations
         * @param value  An instance of DurationFormatter
         */
        set: function set(value) {
          this._durationFormatter = value;
          this._durationFormatter.language = this.language;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "language", {
        /**
         * @return An instance of Language
         */
        get: function get() {
          var language = this._language.get();

          if (language) {
            return language;
          } else if (this.virtualParent) {
            return this.virtualParent.language;
          } else if (this.parent) {
            return this.parent.language;
          }

          language = new _utils_Language__WEBPACK_IMPORTED_MODULE_23__["Language"]();
          this.language = language;
          return language;
        },

        /**
         * A [[Language]] instance to use for translations.
         *
         * Normally it is enough to set language for the top-most element - chart.
         *
         * All other element child elements will automatically re-use that language
         * object.
         *
         * @param value  An instance of Language
         */
        set: function set(value) {
          var _this = this;

          if (this._language.get() !== value) {
            this._language.set(value, value.events.on("localechanged", function (ev) {
              if (_this._numberFormatter) {
                _this._numberFormatter.language = _this.language;
              }

              if (_this._dateFormatter) {
                _this._dateFormatter.language = _this.language;
              }

              if (_this._durationFormatter) {
                _this._durationFormatter.language = _this.language;
              }

              if (_this._exporting.get()) {
                var exporting = _this._exporting.get();

                exporting.numberFormatter.language = _this.language;
                exporting.dateFormatter.language = _this.language;
                exporting.durationFormatter.language = _this.language;
                exporting.language = _this.language;
              }

              if (_this instanceof _Container__WEBPACK_IMPORTED_MODULE_10__["Container"]) {
                _this.deepInvalidate();
              }
            }));
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * ==========================================================================
       * DATA-RELATED STUFF
       * ==========================================================================
       * @hidden
       */

      /**
       * Parses the string for meta tags `{tag}` and replaces them with a real
       * value. Supports straight up tags referring to the field in data, i.e.
       * `{value}` or tags with additional formatting info. E.g.:
       *
       * ```Text
       * {myfield.formatDate("yyyy-MM-dd")}
       * {myfield.formatDate()}
       * {myfield.formatNumber("#,####.00")}
       * {myfield.formatNumber()}
       * {myField.formatDuration("mm:ss")}
       * ```
       *
       * Etc.
       *
       * This method Will automatically detect and use proper formatter for the
       * value.
       *
       * The source value will be looked up in various places: (in order)
       * * Sprite's own `dataItem`
       * * Sprite's properties
       * * Parent's `dataItem`
       * * Parent's properties
       *
       * @ignore Exclude from docs
       * @param string            A string to format
       * @param dataItem          DataItem
       * @return Formatted string
       */

      Sprite.prototype.populateString = function (string, dataItem) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](string)) {
          string = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["castString"](string);
          string = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_22__["getTextFormatter"])().escape(string);
          var tags = string.match(/\{([^}]+)\}/g);
          var i = void 0;

          if (tags) {
            for (i = 0; i < tags.length; i++) {
              var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
              var value = this.getTagValue(tag, "", dataItem);

              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
                value = "";
              }

              string = string.split(tags[i]).join(value);
            }
          }

          string = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_22__["getTextFormatter"])().unescape(string);
        } else {
          string = "";
        }

        if (!this._adapterO) {
          return string;
        } else {
          return this._adapterO.apply("populateString", string);
        }
      };
      /**
       * Gets the value from data item and formats it according to specified format.
       *
       * If `format` is specified, it will use its contents to choose formatter for
       * the value. Otherwise it will select formatter accordingly to actual value
       * type.
       *
       * @ignore Exclude from docs
       * @todo Ability to force certain formatter on known numeric and date values
       * @see {@link NumberFormatter}
       * @see {@link DateFormatter}
       * @see {@link DurationFormatter}
       * @param tagName           Tag name to replace
       * @param format            Format to use
       * @param dataItem          DataItem
       * @return Formatted value
       */


      Sprite.prototype.getTagValue = function (tagName, format, dataItem) {
        var value;

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](dataItem)) {
          dataItem = this.dataItem;
        } // Parse parts


        var parts = [];
        var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
        ;
        var matches;

        while (true) {
          matches = reg.exec(tagName);

          if (matches === null) {
            break;
          }

          if (matches[3]) {
            // Simple property
            parts.push({
              prop: matches[3]
            });
          } else {
            // Method
            // Parse parameters
            var params = [];

            if (_utils_Utils__WEBPACK_IMPORTED_MODULE_25__["trim"](matches[2]) != "") {
              var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
              var matches2 = void 0;

              while (true) {
                matches2 = reg2.exec(matches[2]);

                if (matches2 === null) {
                  break;
                }

                params.push(matches2[1] || matches2[2] || matches2[3]);
              }
            }

            parts.push({
              method: matches[1],
              params: params
            });
          }
        } // Check if we can retrieve the value from data item


        if (dataItem) {
          // Check values
          value = this.getTagValueFromObject(parts, dataItem.values); // Check properties

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value) || _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isObject"](value)) {
            // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and wont't get to the dateX date.
            value = this.getTagValueFromObject(parts, dataItem);
          } // Check data context


          var dataContext = dataItem.dataContext;

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value) && dataContext) {
            value = this.getTagValueFromObject(parts, dataItem.dataContext); // scond data context level sometimes exist (tree map)

            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value) && dataContext.dataContext) {
              value = this.getTagValueFromObject(parts, dataContext.dataContext);
            }
          } // Check component's data item


          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value) && dataItem.component && dataItem.component.dataItem !== dataItem) {
            value = dataItem.component.getTagValue(tagName, format);
          }
        } // Check sprite's properties


        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
          value = this.getTagValueFromObject(parts, this.populateStringFrom || this);
        } // Finally, check the parent


        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value) && this.parent) {
          value = this.parent.getTagValue(tagName, format);
        }

        return value;
      };
      /**
       * Tries to retrieve values from properties of any object, then applies
       * proper formatting to it.
       *
       * @ignore Exclude from docs
       * @todo Description (improve)
       * @param parts   Properties ant methods to access
       * @param object  Source object
       * @param format  A specific format to apply
       * @return Formatted value
       */


      Sprite.prototype.getTagValueFromObject = function (parts, object, format) {
        var current = object;
        var formatApplied = false;

        for (var i = 0, len = parts.length; i < len; i++) {
          var part = parts[i];

          if (part.prop) {
            // Regular property
            current = current[part.prop];

            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](current)) {
              // Not set, return undefined
              return;
            }
          } else {
            // Method
            switch (part.method) {
              case "formatNumber":
                var numberValue = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["anyToNumber"](current);

                if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](numberValue)) {
                  current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);
                  formatApplied = true;
                }

                break;

              case "formatDate":
                var dateValue = void 0;

                if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isString"](current)) {
                  dateValue = this.dateFormatter.parse(current);
                } else {
                  dateValue = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["anyToDate"](current);
                }

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isDate"](dateValue) || _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNaN"](dateValue.getTime())) {
                  // Was not able to get date out of value, quitting and letting
                  // calling method try another value
                  return;
                }

                if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](dateValue)) {
                  current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);
                  formatApplied = true;
                }

                break;

              case "formatDuration":
                var durationValue = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["anyToNumber"](current);

                if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](durationValue)) {
                  current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);
                  formatApplied = true;
                }

                break;

              case "urlEncode":
              case "encodeURIComponent":
                current = encodeURIComponent(current);
                break;

              default:
                if (current[part.method]) {
                  current[part.method].apply(this, part.params);
                }

                break;
            }
          }
        } // Apply default format if it wasn't applied explicitly


        if (!formatApplied) {
          var formatParts = [{
            method: "",
            params: format
          }];

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](format)) {
            // Format is not set
            // Determine from the type of the value
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](current)) {
              formatParts[0].method = "formatNumber";
              formatParts[0].params = "";
            } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isDate"](current)) {
              formatParts[0].method = "formatDate";
              formatParts[0].params = "";
            }
          } else {
            // Format set
            // Try to determine formatter based on the format
            var formatterType = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["getFormat"](format); // format


            if (formatterType === _utils_Strings__WEBPACK_IMPORTED_MODULE_27__["NUMBER"]) {
              formatParts[0].method = "formatNumber";
            } else if (formatterType === _utils_Strings__WEBPACK_IMPORTED_MODULE_27__["DATE"]) {
              formatParts[0].method = "formatDate";
            } else if (formatterType === _utils_Strings__WEBPACK_IMPORTED_MODULE_27__["DURATION"]) {
              formatParts[0].method = "formatDuration";
            }
          } // Apply format


          if (formatParts[0].method) {
            current = this.getTagValueFromObject(formatParts, current);
          }
        }

        return current;
      };

      Object.defineProperty(Sprite.prototype, "dataItem", {
        /**
         * @return [[DataItem]]
         */
        get: function get() {
          if (!this._dataItem) {
            if (this.virtualParent) {
              return this.virtualParent.dataItem;
            }

            if (this.parent) {
              return this.parent.dataItem;
            }
          }

          return this._dataItem;
        },

        /**
         * A [[DataItem]] to use as element's data source.
         *
         * @todo Review type
         * @param dataItem  DataItem
         */
        set: function set(dataItem) {
          //an not use this["_dataItem"] here, as we return parent data item if this sprite doesn't have one.
          // @todo:think about it
          this.setDataItem(dataItem);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets currently used [[DataItem]].
       *
       * If the element has also `configField` set, it will also look for any
       * config in DataItem's data context to apply to this element.
       *
       * @param dataItem DataItem
       */

      Sprite.prototype.setDataItem = function (dataItem) {
        var _this = this;

        if (this._dataItem != dataItem) {
          this._dataItem = dataItem;

          if (dataItem) {
            if (this.configField) {
              var dataContext_1 = dataItem.dataContext;

              if (dataContext_1) {
                this.config = dataContext_1[this.configField];

                if (!this.config && dataContext_1.dataContext) {
                  this.config = dataContext_1.dataContext[this.configField];
                }
              }
            }

            var dataContext_2 = dataItem.dataContext;

            if (dataContext_2) {
              var dataContext2_1 = dataContext_2.dataContext;

              _utils_Object__WEBPACK_IMPORTED_MODULE_29__["each"](this.propertyFields, function (propertyName, fieldValue) {
                if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](dataContext_2[fieldValue])) {
                  var anyThis = _this;
                  anyThis[propertyName] = dataContext_2[fieldValue];
                } else {
                  if (dataContext2_1) {
                    var value = dataContext2_1[fieldValue];

                    if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
                      var anyThis = _this;
                      anyThis[propertyName] = value;
                    }
                  }
                }
              });
            }
          }

          this.invalidate();
        }
      };
      /**
       * ==========================================================================
       * PROPERTY UTILITIES
       * ==========================================================================
       * @hidden
       */

      /**
       * Returns element's property value.
       *
       * Will check if there are any bindings with [[DataItem]].
       *
       * Will also apply any adapters bound to `propertyName`.
       *
       * @param propertyName  Property name
       * @return Property value
       */


      Sprite.prototype.getPropertyValue = function (propertyName) {
        var propValue = this.properties[propertyName]; // Apply adapter

        if (!this._isTemplate) {
          if (this._adapterO) {
            propValue = this._adapterO.apply(propertyName, propValue);
          }
        }

        return propValue;
      };

      Sprite.prototype.setColorProperty = function (property, value, invalidate) {
        var currentValue = this.properties[property];

        if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"] && currentValue instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"] && value.toString() == currentValue.toString()) {
          return false;
        } else {
          return this.setPropertyValue(property, value, invalidate);
        }
      };

      Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {
        value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumberOrPercent"](value);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
          value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, precision, floor);
          return this.setPropertyValue(property, value, invalidate, transform);
        } else {
          var currentValue = this.properties[property];

          if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"] && currentValue instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"] && value.value == currentValue.value) {
            return false;
          } else {
            return this.setPropertyValue(property, value, invalidate, transform);
          }
        }
      };
      /**
       * Sets elements's property value. Will also propagate the same property value
       * on all element's clones.
       *
       * @param property    Property
       * @param value       Value
       * @param invalidate  Should the sprite be invalidated, cause it's re-rendering
       * @param transform   Re-apply positioning of the element
       * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same
       * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.
       */


      Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {
        if (this.properties[property] !== value && !this.isDisposed()) {
          this.properties[property] = value;

          if (this.events.isEnabled("propertychanged")) {
            var event_1 = {
              type: "propertychanged",
              target: this,
              property: property
            };
            this.events.dispatchImmediately("propertychanged", event_1);
          }

          if (invalidate) {
            this.invalidate();
          }

          if (transform) {
            this.invalidatePosition();
          }

          if (this.applyOnClones) {
            var clones = this.clones.values;
            var length_2 = clones.length;

            for (var i = 0; i < length_2; ++i) {
              var clone = clones[i];

              if (!clone.isDisposed()) {
                //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);
                clone[property] = value;
              }
            }
          }

          return true;
        }

        return false;
      };

      Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {
        var _this = this;

        if (bindToProperty === void 0) {
          bindToProperty = property;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this._bindings[property])) {
          this._bindings[property].dispose();
        } // set current value


        this[property] = source[bindToProperty]; //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);

        this._bindings[property] = source.events.on("propertychanged", function (event) {
          if (event.property === bindToProperty) {
            var value = source[bindToProperty];

            if (modifier) {
              value = modifier(value);
            } // TODO clonesById


            _this[property] = value;
          }
        });
      };
      /**
       * Sets up and obeserver function to monitor changes in particular property
       * or properties.
       *
       * @ignore Exclude from docs
       * @param property  Element's property name
       * @param listener  Handler function
       * @param context   Context for handler function
       * @returns Event Disposer
       */


      Sprite.prototype.observe = function (property, listener, context, shouldClone) {
        var _this = this;

        return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"](_utils_Array__WEBPACK_IMPORTED_MODULE_28__["map"](_utils_Array__WEBPACK_IMPORTED_MODULE_28__["toArray"](property), function (prop) {
          return _this.events.on("propertychanged", function (e) {
            if (e.property === prop) {
              listener.call(context, e);
            }
          }, context, shouldClone);
        }));
      };
      /**
       * ==========================================================================
       * ACCESSIBILITY-RELATED PROPERTIES
       * ==========================================================================
       * @hidden
       */

      /**
       * Applies accessibility to the SVG element.
       *
       * Adds `<title>` and `<description>` elements as well as `aria-labelledby`
       * and `role` properties.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.applyAccessibility = function () {
        // Check if we need to add label and description
        var title = this.readerTitle,
            description = this.readerDescription,
            role = this.role,
            hidden = this.readerHidden,
            checked = this.readerChecked,
            controls = this.readerControls,
            live = this.readerLive,
            orientation = this.readerOrientation,
            valueNow = this.readerValueNow,
            valueText = this.readerValueText; // Init label/describe ids

        var labelledByIds = [],
            describedByIds = [];
        var labelledBy = this.readerLabelledBy;

        if (labelledBy) {
          labelledByIds.push(labelledBy);
        }

        var describedBy = this.readerDescribedBy;

        if (describedBy) {
          describedByIds.push(describedBy);
        } // Consolidate title and description if system tooltip is disabled


        if (!this.showSystemTooltip && title) {
          if (description) {
            description = title + " -- " + description;
          } else {
            description = title;
          }

          title = undefined;
        } // If we have only label, we use `aria-label` attribute.
        // If there are both label and description, we'll go with separate tags and
        // use `aria-labelledby`


        if (title && !description && !this.showSystemTooltip) {
          // Only label is set, use attribute
          this.setSVGAttribute({
            "aria-label": title
          }); // Remove previous elements

          this.removeSVGAttribute("aria-description");

          if (this._titleElement) {
            this.group.removeElement(this._titleElement);
            this._titleElement = undefined;
          }

          if (this._descriptionElement) {
            this.group.removeElement(this._descriptionElement);
            this._descriptionElement = undefined;
          }
        } else {
          if (title) {
            var titleElement = this.titleElement;
            var titleId = this.uid + "-title";

            if (titleElement.node.textContent != title) {
              titleElement.node.textContent = title;
              titleElement.attr({
                id: titleId
              });
            }

            labelledByIds.push(titleId);
          } else if (this._titleElement) {
            this.group.removeElement(this._titleElement);
            this._titleElement = undefined;
          }

          var descriptionId = this.uid + "-description";

          if (description) {
            var descriptionElement = this.descriptionElement;

            if (descriptionElement.node.textContent != description) {
              descriptionElement.node.textContent = description;
              descriptionElement.attr({
                id: descriptionId
              });
            }

            describedByIds.push(descriptionId);
          } else if (this._descriptionElement) {
            this.group.removeElement(this._descriptionElement);
            this._descriptionElement = undefined;

            _utils_Array__WEBPACK_IMPORTED_MODULE_28__["remove"](describedByIds, descriptionId);
          }
        } // Add label and described properties


        if (labelledByIds.length) {
          this.setSVGAttribute({
            "aria-labelledby": labelledByIds.join(" ")
          });
        } else {
          this.removeSVGAttribute("aria-labelledby");
        }

        if (describedByIds.length) {
          this.setSVGAttribute({
            "aria-describedby": describedByIds.join(" ")
          });
        } else {
          this.removeSVGAttribute("aria-describedby");
        } // Apply role


        if (role) {
          this.setSVGAttribute({
            "role": role
          });
        } else {
          this.removeSVGAttribute("role");
        } // Apply aria-hidden


        if (hidden) {
          this.setSVGAttribute({
            "aria-hidden": "true"
          });
        } else {
          this.removeSVGAttribute("aria-hidden");
        } // Apply aria-checked


        if (checked) {
          this.setSVGAttribute({
            "aria-checked": "true"
          });
        } else if (checked === false) {
          this.setSVGAttribute({
            "aria-checked": "false"
          });
        } else {
          this.removeSVGAttribute("aria-checked");
        } // Apply aria-controls


        if (controls) {
          this.setSVGAttribute({
            "aria-controls": controls
          });
        } else {
          this.removeSVGAttribute("aria-controls");
        } // Apply aria-live


        if (live) {
          this.setSVGAttribute({
            "aria-live": live
          });
        } else {
          this.removeSVGAttribute("aria-live");
        } // Apply aria-orientation


        if (orientation) {
          this.setSVGAttribute({
            "aria-orientation": orientation
          });
        } else {
          this.removeSVGAttribute("aria-orientation");
        } // Apply aria-valuenow


        if (valueNow) {
          this.setSVGAttribute({
            "aria-valuenow": valueNow
          });
        } else {
          this.removeSVGAttribute("aria-valuenow");
        } // Apply aria-valuetext


        if (valueText) {
          this.setSVGAttribute({
            "aria-valuetext": valueText
          });
        } else {
          this.removeSVGAttribute("aria-valuetext");
        }
      };

      Object.defineProperty(Sprite.prototype, "readerTitle", {
        /**
         * @return Title
         */
        get: function get() {
          var title = this.getPropertyValue("readerTitle");

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](title) && this.dataItem) {
            return this.populateString(title);
          }

          return title;
        },

        /**
         * Screen reader title of the element.
         *
         * @param value Title
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerTitle", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerDescription", {
        /**
         * @return Description
         */
        get: function get() {
          return this.getPropertyValue("readerDescription");
        },

        /**
         * Screen reader description of the element.
         *
         * @param value Description
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerDescription", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "role", {
        /**
         * @return Role
         */
        get: function get() {
          return this.getPropertyValue("role");
        },

        /**
         * A WAI-ARIA role for the element.
         *
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles
         * @param value  Role
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("role", value)) {
            this.applyAccessibility();

            if (value == "slider") {
              this.setSVGAttribute({
                "aria-valuemin": "0"
              });
              this.setSVGAttribute({
                "aria-valuemax": "100"
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerHidden", {
        /**
         * @return Hidden?
         */
        get: function get() {
          return this.getPropertyValue("readerHidden");
        },

        /**
         * Controls if element should be hidden from screen readers.
         *
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information
         * @param value  Hidden?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("readerHidden", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerChecked", {
        /**
         * @ignore Exclude from docs
         * @return Checked?
         */
        get: function get() {
          return this.getPropertyValue("readerChecked");
        },

        /**
         * Controls if element is currently marked as "checked".
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information
         * @param value Checked?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("readerChecked", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerControls", {
        /**
         * @ignore Exclude from docs
         * @return Setting value
         */
        get: function get() {
          return this.getPropertyValue("readerControls");
        },

        /**
         * A `uid` of an element this element controls.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information
         * @param value Setting value
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerControls", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerLive", {
        /**
         * @ignore Exclude from docs
         * @return Setting value
         */
        get: function get() {
          return this.getPropertyValue("readerLive");
        },

        /**
         * Controls accessibility setting "aria-live" for the element.
         *
         * @ignore Exclude from docs
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information
         * @param value Setting value
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerLive", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerLabelledBy", {
        /**
         * @ignore Exclude from docs
         * @return Target element
         */
        get: function get() {
          return this.getPropertyValue("readerLabelledBy");
        },

        /**
         * A `uid` of an element that describes this element.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information
         * @param value Target element
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerLabelledBy", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerDescribedBy", {
        /**
         * @ignore Exclude from docs
         * @return Target element
         */
        get: function get() {
          return this.getPropertyValue("readerDescribedBy");
        },

        /**
         * A `uid` of an element that describes this element.
         *
         * @ignore Exclude from docs
         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information
         * @param value Target element
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerDescribedBy", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerOrientation", {
        /**
         * @return Orientation
         */
        get: function get() {
          return this.getPropertyValue("readerOrientation");
        },

        /**
         * Orientation of the element.
         *
         * @since 4.7.16
         * @param value Orientation
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerOrientation", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerValueNow", {
        /**
         * @return Current value
         */
        get: function get() {
          return this.getPropertyValue("readerValueNow");
        },

        /**
         * Current value of the element.
         *
         * @since 4.7.16
         * @param value Current value
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerValueNow", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "readerValueText", {
        /**
         * @return Current value (text)
         */
        get: function get() {
          return this.getPropertyValue("readerValueText");
        },

        /**
         * Text representation of the current value of the element.
         *
         * @since 4.7.16
         * @param value Current value (text)
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("readerValueText", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "keyboardOptions", {
        /**
         * ==========================================================================
         * USER INTERACTIONS
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns elements keyboard options.
         *
         * @return Keyboard options
         */
        get: function get() {
          if (!this.interactions.keyboardOptions) {
            if (this.virtualParent) {
              return this.virtualParent.keyboardOptions;
            }

            if (this.parent) {
              return this.parent.keyboardOptions;
            }
          }

          return this.interactions.keyboardOptions;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "mouseOptions", {
        /**
         * Mouse options.
         *
         * Enables controlling options related to the mouse, for example sensitivity
         * of its mouse wheel.
         *
         * E.g. the below will reduce chart's wheel-zoom speed to half its default
         * speed:
         *
         * ```TypeScript
         * chart.plotContainer.mouseOptions.sensitivity = 0.5;
         * ```
         * ```JavaScript
         * chart.plotContainer.mouseOptions.sensitivity = 0.5;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "plotContainer": {
         *     "mouseOptions": {
         *       "sensitivity": 0.5
         *     }
         *   }
         * }
         * ```
         *
         * @return Mouse options
         */
        get: function get() {
          if (!this.interactions.mouseOptions) {
            if (this.virtualParent) {
              return this.virtualParent.mouseOptions;
            }

            if (this.parent) {
              return this.parent.mouseOptions;
            }
          }

          return this.interactions.mouseOptions;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "interactions", {
        /**
         * Returns (creates if necessary) an [[InteractionObject]] associated with
         * this element.
         *
         * [[InteractionObject]] is used to attach all kinds of user-interactions to
         * the element, e.g. click/touch, dragging, hovering, and similar events.
         *
         * @return Interaction object
         */
        get: function get() {
          if (!this._interaction) {
            var interaction = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().getInteraction(this.dom);
            this._interaction = interaction;
            this._interaction.clickable = this.clickable;
            this._interaction.hoverable = this.hoverable;
            this._interaction.trackable = this.trackable;
            this._interaction.draggable = this.draggable;
            this._interaction.swipeable = this.swipeable;
            this._interaction.resizable = this.resizable;
            this._interaction.wheelable = this.wheelable;
            this._interaction.contextMenuDisabled = this.contextMenuDisabled;
            this._interaction.inert = this.inert;
            this._interaction.sprite = this;

            this._disposers.push(this._interaction);
          }

          return this._interaction;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.
       * @return Is Sprite interactive?
       */

      Sprite.prototype.isInteractive = function () {
        if (this._interaction) {
          return true;
        } else {
          return false;
        }
      };

      Object.defineProperty(Sprite.prototype, "focusable", {
        /**
         * @return Can element be focused?
         */
        get: function get() {
          return this.getPropertyValue("focusable");
        },

        /**
         * ==========================================================================
         * ELEMENT FOCUS-RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Controls if the element can gain focus.
         *
         * Focusable element will be selectable via TAB key.
         *
         * Please note, clicking it with a mouse or touching will not add focus to
         * it.
         *
         * Focused element will show a system-specific highlight, which might ruin
         * the overal look. This is why we don't focus element on click/touch.
         *
         * A default setting varies for different elements. By default all elements
         * are not focusable, except certain items like buttons, legend items, etc.
         *
         * @default undefined (auto)
         * @param value  Can element be focused?
         */
        set: function set(value) {
          var _this = this;

          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("focusable", value)) {
            if (!value && !this.isInteractive()) {} else {
              this.interactions.focusable = value;

              if (value) {
                this.setSVGAttribute({
                  "focusable": value
                });

                if (!this._tabindex) {
                  this.tabindex = 0;
                }
              } else {
                this.removeSVGAttribute("focusable");
                this.tabindex = undefined;
              } // Set focus events that would apply "focus" state
              // setEventDisposer will also remove listeners if value == false


              this.interactions.setEventDisposer("sprite-focusable", value, function () {
                return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([_this.events.on("blur", _this.handleBlur, _this, false), _this.events.on("focus", _this.handleFocus, _this, false)]);
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Applies filters (if set) when element gains focus.
       *
       * @ignore Exclude from docs
       * @param ev Original event
       */

      Sprite.prototype.handleFocus = function (ev) {
        if (this.focusable) {
          if (this.topParent) {
            this.topParent.hasFocused = true;
          }

          if (this.focusFilter) {
            // Any `filters` manipulation will trigger `applyFilters()` so we don't
            // need to call it here
            this.filters.push(this.focusFilter);
          }

          if (this.hoverOnFocus) {
            // Trigger a hover event as well
            this.isHover = true;
            this.handleOver();
          }
        }
      };
      /**
       * Removes focus filter (if set) when elementloses focus.
       *
       * @ignore Exclude from docs
       * @param ev Original event
       */


      Sprite.prototype.handleBlur = function (ev) {
        if (this.focusable) {
          if (this.topParent) {
            this.topParent.hasFocused = false;
          }

          if (this.focusFilter) {
            // Any `filters` manipulation will trigger `applyFilters()` so we don't
            // need to call it here
            this.filters.removeValue(this.focusFilter);
          }

          if (this.hoverOnFocus) {
            // Trigger a out event as well
            this.isHover = false;
            this.handleOut();
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "focusFilter", {
        /**
         * A reference to a [[Filter]] to apply to element when it gains focus.
         *
         * Normally, browsers will draw a default ugly square around focused element,
         * which totally makes sense because its purpose is to help identify active
         * element for visually impaired people.
         *
         * However, if you would rather apply a filter, so you can modify how focused
         * element looks like, use `focusFilter`.
         *
         * Simply set it to an anstance of [[FocusFilter]], or any other filter
         * object.
         *
         * ```TypeScript
         * chart.focusFilter = new am4core.FocusFilter();
         * ```
         * ```JavaScript
         * chart.focusFilter = new am4core.FocusFilter();
         * ```
         * ```JSON
         * {
         *   // ...
         *   "focusFilter": {
         *     "type": "FocusFilter"
         *   },
         *   // ...
         * }
         * ```
         *
         * @see {@link Filter}
         * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility
         * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance
         * @ignore Exclude from docs
         * @return Focused element filter
         */
        get: function get() {
          /*if (!this._focusFilter) {
              this._focusFilter = new FocusFilter();
              this._disposers.push(this._focusFilter);
          }*/
          //return this._focusFilter;
          var focusFilter = this._focusFilter;

          if (focusFilter) {
            return focusFilter;
          }

          if (this.virtualParent) {
            return this.virtualParent.focusFilter;
          } else if (this.parent) {
            return this.parent.focusFilter;
          } //this._focusFilter = new FocusFilter();
          //this._disposers.push(this._focusFilter);

        },

        /**
         * @see {@link Filter}
         * @ignore Exclude from docs
         * @todo This is still experimental, don't use it
         */
        set: function set(value) {
          this._focusFilter = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "hoverOnFocus", {
        /**
         * @return Trigger hover on focus?
         */
        get: function get() {
          return this.getPropertyValue("hoverOnFocus");
        },

        /**
         * If set to `true`, this element will also trigger `"over"` event with all
         * the related consequences, like "hover" state being applied and tooltip
         * being shown.
         *
         * Useful as an accessibility feature to display rollover tooltips on items
         * selected via keyboard.
         *
         * @param value  Trigger hover on focus?
         * @default false
         */
        set: function set(value) {
          if (value !== this.hoverOnFocus) {
            this.setPropertyValue("hoverOnFocus", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tabindex", {
        /**
         * Returns current TAB index for focusable item.
         *
         * @return TAB index
         */
        get: function get() {
          var index = this._tabindex;

          if (index != null) {
            return index;
          } else if (this.virtualParent) {
            return this.virtualParent.tabindex;
          } else if (this.parent) {
            return this.parent.tabindex;
          }
        },

        /**
         * Sets TAB index.
         *
         * Tab index maintains the order in which focusable elements gain focus when
         * TAB key is pressed.
         *
         * Please note, tab index is not local to the chart. It affects the whole
         * of the page, including non-SVG elements. Maintain extreme causion when
         * setting tab indexes, as it affects the user experience for the whole
         * web page.
         *
         * @param value TAB index
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumber"](value);

          if (this.setPropertyValue("tabindex", value) && _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            this.interactions.tabindex = value;
            this.setSVGAttribute({
              "tabindex": value
            });
            this._tabindex = value;

            if (value > -1) {
              this.focusable = true;
            } else {
              this.focusable = undefined;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "inertiaOptions", {
        /**
         * ==========================================================================
         * DRAGGING AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns element's options to be used for inertia. This setting is
         * inheritable, meaning that if not set directly, it will search in all its
         * ascendants until very top.
         *
         * Inertia is used only if element's `inert` is set to `true`.
         *
         * "Inert" element, when dragged and released, will carry the momentum of the
         * movement, and will continue moving in the same drag direction, gradually
         * reducing in speed until finally stops.
         *
         * Check [[IInertiaOptions]] for how you tweak inertia animations.
         *
         * @return Inertia options
         */
        get: function get() {
          if (!this.interactions.inertiaOptions) {
            if (this.parent) {
              return this.parent.inertiaOptions;
            }
          }

          return this.interactions.inertiaOptions;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "draggable", {
        /**
         * @return `true` if element can be dragged
         */
        get: function get() {
          return this.getPropertyValue("draggable");
        },

        /**
         * Controls if the element is draggable.
         *
         * @param value  `true` if element can be dragged
         */
        set: function set(value) {
          var _this = this;

          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("draggable", value)) {
            if (!value && !this.isInteractive()) {} else {
              this.applyCursorStyle();
              this.interactions.draggable = value; //interaction.processDraggable(this);
              // Add events
              // @todo Maybe attach to InteractionObject's multidisposer so that
              // sprites events get disposed together with them?
              // this.interactions.disposers.getItem("movable")
              // setEventDisposer will also remove listeners if value == false

              this.interactions.setEventDisposer("sprite-draggable", value, function () {
                return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([_this.events.on("down", _this.handleDown, _this, false), _this.events.on("dragstart", _this.handleDragStart, _this, false), _this.events.on("drag", _this.handleDragMove, _this, false), _this.events.on("dragstop", _this.handleDragStop, _this, false)]);
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Executes when dragged element is being started to drag.
       *
       * @ignore Exclude from docs
       */

      Sprite.prototype.handleDragStart = function (ev) {
        if (!this.interactions.isTouchProtected || !ev.touch) {
          this.interactions.originalPosition = {
            x: this.pixelX,
            y: this.pixelY
          };
          this._isDragged = true;
          this.hideTooltip(0);
        }
      };
      /**
       * Tell this element to start being dragged. This is useful if you want to
       * drag items by interactions performed not directly on the target element.
       *
       * Parameter `pointer` is highly recommended. By passing in the Pointer you
       * will ensure that movement is tracked for the pointer that you want. If not
       * supplied, the system will try to determine the most logical pointer.
       *
       * However this may fail if you have more than one pointer active, which
       * might happen if you have several objects being dragged on a touch device.
       *
       * @ignore Exclude from docs
       * @param pointer Pointer to use for movement
       */


      Sprite.prototype.dragStart = function (pointer) {
        //this.dragStop(pointer);
        //this.draggable = true;
        this._isDragged = true;
        Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().dragStart(this.interactions, pointer);
      };
      /**
       * Executes when dragged element is being dropped.
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype.handleDragStop = function (ev) {
        if (!this.interactions.isTouchProtected || !ev.touch) {
          this._isDragged = false;
          this.showTooltip();
          this.interactions.originalPosition = undefined;
        }
      };
      /**
       * Stops manually initiated dragging of the element.
       *
       * @ignore Exclude from docs
       * @param pointer Pointer to use as a reference
       */


      Sprite.prototype.dragStop = function (pointer) {
        //this.draggable = false;
        this._isDragged = false;
        Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().dragStop(this.interactions, pointer); //this.handleDragStop();
      };
      /**
       * Executes when {Sprite} is being dragged.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       * @todo Implement parent position offset calculation
       */


      Sprite.prototype.handleDragMove = function (ev) {
        if (!this.interactions.isTouchProtected || !ev.touch) {
          var point = this.interactions.originalPosition;

          if (point && this._isDragged) {
            var globalScale = this.parent.globalScale * this.svgContainer.cssScale;
            this.moveTo({
              x: point.x + ev.shift.x / globalScale,
              y: point.y + ev.shift.y / globalScale
            }, undefined, undefined, true);
          }

          this.dispatchImmediately("dragged", ev);
        }
      };

      Object.defineProperty(Sprite.prototype, "inert", {
        /**
         * @return `true` if element should use inertia when animated
         */
        get: function get() {
          return this.getPropertyValue("inert");
        },

        /**
         * Controls if the element should use inertia when interacted with.
         *
         * "Inert" element, when dragged and released, will carry the momentum of the
         * movement, and will continue moving in the same drag direction, gradually
         * reducing in speed until finally stops.
         *
         * @default false
         * @param value `true` if element should use inertia when animated
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("inert", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              this.interactions.inert = value;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "hoverOptions", {
        /**
         * ==========================================================================
         * HOVERING
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns Sprite's hover options.
         *
         * @see {@link IHoverOptions} for available options.
         * @return Options
         */
        get: function get() {
          if (!this.interactions.hoverOptions) {
            if (this.virtualParent) {
              return this.virtualParent.hoverOptions;
            }

            if (this.parent) {
              return this.parent.hoverOptions;
            }
          }

          return this.interactions.hoverOptions;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "hoverable", {
        /**
         * @return `true` if element is hoverable
         */
        get: function get() {
          return this.getPropertyValue("hoverable");
        },

        /**
         * Controls if the element is hoverable (hover events are registered).
         *
         * Use `over` and `out` events, to watch for those respective actions.
         *
         * @default false
         * @param value `true` if element can be hovered
         */
        set: function set(value) {
          var _this = this;

          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("hoverable", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              this.applyCursorStyle();
              this.interactions.hoverable = value; // setEventDisposer will also remove listeners if value == false

              this.interactions.setEventDisposer("sprite-hoverable", value, function () {
                return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([_this.events.on("over", _this.handleOver, _this, false), _this.events.on("out", _this.handleOut, _this, false)]);
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Handles tasks when element becomes hovered:
       * * Shows [[Tooltip]] if applicable
       * * Applies "hover" state
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */

      Sprite.prototype.handleOver = function (ev) {
        if (this._outTimeout) {
          this._outTimeout.dispose();
        }

        if (this.isHover) {
          if (this.states.hasKey("hover")) {
            //this.setState("hover");
            // This will check `isHover` and will set "hover" state
            if (!this.isHidden) {
              this.applyCurrentState();
            }
          }

          var point = void 0;

          if (ev && ev.pointer) {
            point = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSvg"](ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);
          }

          if (this.showTooltipOn == "hover") {
            this.showTooltip(point);
          }
        } else {
          if (this.showTooltipOn == "hover") {
            this.hideTooltip();
          }

          if (!this.isHidden && this.states.hasKey("hover")) {
            this.applyCurrentState();
          }
        }
      };
      /**
       * Handles tasks when element loses hover:
       *
       * * Hides [[Tooltip]]
       * * Applies default state
       *
       * @ignore Exclude from docs
       * @param ev [description]
       */


      Sprite.prototype.handleOut = function (ev) {
        var _this = this;

        if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {
          this._outTimeout = this.setTimeout(function () {
            if (!_this.tooltip.isHover) {
              if (_this.tooltip.targetSprite == _this) {
                _this.hideTooltip();
              }

              _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);
            }
          }, 10);
          return;
        }

        if (this.showTooltipOn == "hover") {
          this.hideTooltip();
        }

        this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);
      };
      /**
       * [handleOutReal description]
       *
       * @ignore
       * @todo description
       */


      Sprite.prototype.handleOutReal = function () {
        if (!this.isHidden && !this.isHiding && this.states.hasKey("hover")) {
          this.applyCurrentState();
        }
      };

      Object.defineProperty(Sprite.prototype, "hitOptions", {
        /**
         * ==========================================================================
         * CLICKING/TAPPING AND TOGGLING STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns Sprite's click (hit) options.
         *
         * Click (hit) options control things like double-click, timeouts, etc.
         *
         * @see {@link IHitOptions} for available options.
         * @return Options
         */
        get: function get() {
          if (!this.interactions.hitOptions) {
            if (this.virtualParent) {
              return this.virtualParent.hitOptions;
            }

            if (this.parent) {
              return this.parent.hitOptions;
            }
          }

          return this.interactions.hitOptions;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Prepares element's after `down` event.
       *
       * @ignore Exclude from docs
       * @param ev Event
       */

      Sprite.prototype.handleDown = function (ev) {
        if (this.interactions.downPointers.length === 1) {
          this.interactions.originalPosition = {
            x: this.pixelX,
            y: this.pixelY
          };
          this.interactions.originalAngle = this.rotation;
          this.interactions.originalScale = this.scale;

          if (this.states.hasKey("down")) {
            this.setState("down");
          }
        }
      };
      /**
       * Prepares element's after `up` event.
       *
       * @ignore Exclude from docs
       * @param ev Event
       */


      Sprite.prototype.handleUp = function (ev) {
        var _this = this;
        /*if (!this.isDown) {
            this.interactions.originalPosition = null;
            this.interactions.originalAngle = null;
            this.interactions.originalScale = null;
        }*/


        this._isResized = false;

        if (this.states.hasKey("down")) {
          this.applyCurrentState();
        }

        if (this.showTooltipOn == "hit") {
          this.showTooltip();

          this._disposers.push(Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().body.events.once("down", function (ev) {
            _this.hideTooltip();
          }));
        }
      };

      Object.defineProperty(Sprite.prototype, "clickable", {
        /**
         * @return {boolean}
         */
        get: function get() {
          return this.getPropertyValue("clickable");
        },

        /**
         * Indicates if the element is clickable.
         *
         * Some type of the elements, like buttons are clickable by default.
         *
         * Most of the elements are not clickable by default.
         *
         * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for
         * respective click/touch actions.
         *
         * @param value `true` if element can be clicked
         */
        set: function set(value) {
          var _this = this;

          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("clickable", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              this.applyCursorStyle();
              this.interactions.clickable = value; // setEventDisposer will also remove listeners if value == false

              this.interactions.setEventDisposer("sprite-clickable", value, function () {
                return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([_this.events.on("down", _this.handleDown, _this, false), _this.events.on("up", _this.handleUp, _this, false)]);
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "togglable", {
        /**
         * @return Is togglable?
         */
        get: function get() {
          return this.getPropertyValue("togglable");
        },

        /**
         * Indicates if element can be toggled on and off by subsequent clicks/taps.
         *
         * Togglable element will alternate its `isActive` property between `true`
         * and `false` with each click.
         *
         * @param value Is togglable?
         */
        set: function set(value) {
          var _this = this;

          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("togglable", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              // setEventDisposer will also remove listeners if value == false
              this.interactions.setEventDisposer("sprite-togglable", value, function () {
                return _this.events.on("hit", _this.handleToggle, _this, false);
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Handles toggling of the element.
       *
       * @ignore Exclude from docs
       * @param ev Event
       */

      Sprite.prototype.handleToggle = function (ev) {
        this.isActive = !this.isActive;
      };

      Object.defineProperty(Sprite.prototype, "contextMenuDisabled", {
        /**
         * @return Context menu disabled?
         */
        get: function get() {
          return this.getPropertyValue("contextMenuDisabled");
        },

        /**
         * Should element prevent context menu to be displayed, e.g. when
         * right-clicked?
         *
         * @default false
         * @param value Context menu disabled?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("contextMenuDisabled", value)) {
            this.interactions.contextMenuDisabled = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "url", {
        /**
         * @return URL
         */
        get: function get() {
          return this.getPropertyValue("url");
        },

        /**
         * Click-through URL for this element.
         *
         * If set, clicking/tapping this element will open the new URL in a target
         * window/tab as set by `urlTarget`.
         *
         * Please note that URL will be parsed by data placeholders in curly
         * brackets, to be populated from data. E.g.:
         *
         * ```TypeScript
         * series.columns.template.url = "https://www.google.com/search?q={category.urlEncode()}";
         * ```
         * ```JavaScript
         * series.columns.template.url = "https://www.google.com/search?q={category.urlEncode()}";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "series": [{
         *     // ...
         *     "columns": {
         *       "url": "https://www.google.com/search?q={category.urlEncode()}"
         *     }
         *   }]
         * }
         * ```
         *
         * @param value URL
         */
        set: function set(value) {
          if (this.setPropertyValue("url", value)) {
            if (this._urlDisposer) {
              this._urlDisposer.dispose();
            } // If URL is not empty, set up events


            if (_utils_Utils__WEBPACK_IMPORTED_MODULE_25__["isNotEmpty"](value)) {
              this._urlDisposer = this.events.on("hit", this.urlHandler, this, false); // Set other required parameters

              this.clickable = true;
              this.cursorOverStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].pointer;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "baseId", {
        /**
         * [baseId description]
         *
         * @ignore
         * @return [description]
         */
        get: function get() {
          if (!this._baseId && this.parent) {
            this.baseId = this.parent.baseId;
          }

          return this._baseId;
        },

        /**
         * [baseId description]
         *
         * @ignore
         * @param  value  [description]
         */
        set: function set(value) {
          this.setBaseId(value);
        },
        enumerable: true,
        configurable: true
      });

      Sprite.prototype.setBaseId = function (value) {
        if (value != this._baseId) {
          if (this.invalid) {
            this.invalid = false;

            _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].removeFromInvalidSprites(this);

            this.invalidate();
          }

          this._baseId = value;
        }
      };

      Object.defineProperty(Sprite.prototype, "baseSprite", {
        /**
         * Returns the mail chart object that this element belongs to.
         *
         * In most cases it will mean the chart object.
         *
         * Can be used to retrieve chart object in various events and adapters.
         *
         * ```TypeScript
         * chart.seriesContainer.events.on("hit", function(ev) {
         *   console.log(ev.target.baseSprite);
         * });
         * ```
         * ```JavaScript
         * chart.seriesContainer.events.on("hit", function(ev) {
         *   console.log(ev.target.baseSprite);
         * });
         * ```
         * ```JSON
         * {
         *   // ...
         *   "seriesContainer": {
         *     "events": {
         *       "hit": function(ev) {
         *         console.log(ev.target.baseSprite);
         *       }
         *     }
         *   }
         * }
         * ```
         *
         * @readonly
         * @return  Base chart object
         */
        get: function get() {
          if (this.isBaseSprite) {
            return this;
          } else if (this.parent) {
            return this.parent.baseSprite;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "urlTarget", {
        /**
         * @return URL target
         */
        get: function get() {
          return this.getPropertyValue("urlTarget");
        },

        /**
         * Target to use for URL clicks:
         *
         * * _blank
         * * _self (default)
         * * _parent
         * * _top
         * * Name of the window/frame
         *
         * Ignored if `url` is not set.
         *
         * @param value URL target
         */
        set: function set(value) {
          this.setPropertyValue("urlTarget", value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Handles URL transition on element click.
       *
       * @ignore Exclude from docs
       * @param ev An event object
       */

      Sprite.prototype.urlHandler = function (ev) {
        // Is URL set?
        if (_utils_Utils__WEBPACK_IMPORTED_MODULE_25__["isNotEmpty"](this.url)) {
          // Proceed to the URL
          var url = this.populateString(this.url);

          if (this.urlTarget === "_self") {
            window.location.href = url;
          } else {
            window.open(url, this.urlTarget);
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "swipeOptions", {
        /**
         * ==========================================================================
         * SWIPING GESTURE TRACKING
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns element's swipe gesture options.
         *
         * @return Swipe gesture options
         */
        get: function get() {
          if (!this.interactions.swipeOptions) {
            if (this.virtualParent) {
              return this.virtualParent.swipeOptions;
            }

            if (this.parent) {
              return this.parent.swipeOptions;
            }
          }

          return this.interactions.swipeOptions;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "swipeable", {
        /**
         * @return Element swipable?
         */
        get: function get() {
          return this.getPropertyValue("swipeable");
        },

        /**
         * Controls if element is swipeable.
         *
         * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,
         * when quick horizontal drag action is performed with either mouse or touch.
         *
         * Please note that combining swipe and drag is possible, however will incur
         * a slight but noticeable delay in drag start.
         *
         * @param value  Element swipable?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("swipeable", value)) {
            this.applyCursorStyle();

            if (!value && !this.isInteractive()) {// void
            } else {
              this.interactions.swipeable = value;
            } //interaction.processSwipeable(this);

          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "trackable", {
        /**
         * @return Track cursor movement over element?
         */
        get: function get() {
          return this.getPropertyValue("trackable");
        },

        /**
         * ==========================================================================
         * POINTER TRACKING
         * ==========================================================================
         * @hidden
         */

        /**
         * Indicates if the element is trackable (mouse position over it is reported to
         * event listeners).
         *
         * Will invoke `track` events whenever pointer (cursor) changes position
         * while over element.
         *
         * Please note, touch devices will also invoke `track` events when touch
         * point is moved while holding down on a trackable element.
         *
         * @param value Track cursor movement over element?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("trackable", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              this.applyCursorStyle();
              this.interactions.trackable = value;
            } //interaction.processTrackable(this);

          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "wheelable", {
        /**
         * @return Mouse wheel events enabled?
         */
        get: function get() {
          return this.getPropertyValue("wheelable");
        },

        /**
         * ==========================================================================
         * MOUSE-WHEEL RELATED
         * ==========================================================================
         * @hidden
         */

        /**
         * Indicates if the element can be interacted with mouse wheel.
         *
         * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`
         * events when using mouse wheel over the element.
         *
         * @param value Mouse wheel events enabled?
         */
        set: function set(value) {
          if (this.setPropertyValue("wheelable", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              this.applyCursorStyle();
              this.interactions.wheelable = value;
            } //interaction.processWheelable(this);

          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "resizable", {
        /**
         * @return Element resizable?
         */
        get: function get() {
          return this.getPropertyValue("resizable");
        },

        /**
         * ==========================================================================
         * RESIZE
         * ==========================================================================
         * @hidden
         */

        /**
         * Indicates if this element is resizable.
         *
         * Enabling resize will turn on various interactions on the element. Their
         * actual functionality will depend on other properties.
         *
         * If the element also `draggable`, resize will only happen with two points
         * of contact on a touch device.
         *
         * If the element is not draggable, resize can be performed with just one
         * point of contact, touch or mouse.
         *
         * Will invoke `resize` event every time the size of the element changes.
         *
         * @param value  Element resizable?
         */
        set: function set(value) {
          var _this = this;

          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("resizable", value)) {
            if (!value && !this.isInteractive()) {// void
            } else {
              this.applyCursorStyle();
              this.interactions.resizable = value; // setEventDisposer will also remove listeners if value == false

              this.interactions.setEventDisposer("sprite-resizable", value, function () {
                return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([_this.events.on("down", _this.handleDown, _this, false), _this.events.on("resize", _this.handleResize, _this, false)]);
              });
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Handles resize intermediate step.
       *
       * By default this method resizes actual element. Each element, can override
       * this method to implement their own resize logic.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */

      Sprite.prototype.handleResize = function (ev) {
        if (!this.interactions.isTouchProtected || !ev.touch) {
          this._isResized = true;
          this.scale = this.interactions.originalScale * ev.scale;
          this.validatePosition();
          /*center: (io.draggable
          ? $math.getMidPoint(point1, point2)
          : {
              "x": io.originalPosition.x,
              "y": io.originalPosition.y
          })*/
          //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);

          if (this.draggable || this.dragWhileResize) {
            this._isDragged = false;

            var svgPoint1 = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSvg"](ev.point1, this.htmlContainer, this.svgContainer.cssScale);

            var svgPoint2 = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSvg"](ev.point2, this.htmlContainer, this.svgContainer.cssScale);

            var svgMidPoint = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["getMidPoint"](svgPoint1, svgPoint2);

            var parentPoint1 = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSprite"](ev.startPoint1, this.parent);

            var parentPoint2 = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSprite"](ev.startPoint2, this.parent);

            var originalPosition = this.interactions.originalPosition;
            var originalScale = this.interactions.originalScale;

            if (originalPosition) {
              var spritePoint1 = {
                x: (parentPoint1.x - originalPosition.x) / originalScale,
                y: (parentPoint1.y - originalPosition.y) / originalScale
              };
              var spritePoint2 = {
                x: (parentPoint2.x - originalPosition.x) / originalScale,
                y: (parentPoint2.y - originalPosition.y) / originalScale
              };

              var spriteMidPoint = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["getMidPoint"](spritePoint1, spritePoint2);

              var parentPoint = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["svgPointToSprite"](svgMidPoint, this.parent);

              this.moveTo({
                x: parentPoint.x - spriteMidPoint.x * this.scale,
                y: parentPoint.y - spriteMidPoint.y * this.scale
              }, undefined, undefined, true);
            }
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "cursorOptions", {
        /**
         * ==========================================================================
         * MOUSE-RELATED
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns element's cursor options.
         *
         * Cursor options usually define cursor style for various states of the
         * hovered element.
         *
         * Elements inherit `cursorOptions` from their parents if they don't have
         * them set explicitly.
         *
         * @see {@link ICursorOptions} for a list of available options
         * @return Cursor options
         */
        get: function get() {
          if (!this.interactions.cursorOptions) {
            if (this.virtualParent) {
              return this.virtualParent.cursorOptions;
            }

            if (this.parent) {
              return this.parent.cursorOptions;
            }
          }

          return this.interactions.cursorOptions;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "cursorOverStyle", {
        /**
         * A shortcut to setting mouse cursor on hover.
         *
         * Example:
         *
         * ```TypeScript
         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;
         * ```
         * ```JavaScript
         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "series": {
         *     // ...
         *     "slices": {
         *       "cursorOverStyle": "pointer"
         *     }
         *   }
         * }
         * ```
         *
         * @param style An array of styles to apply onhover
         */
        set: function set(style) {
          if (!this.cursorOptions.overStyle) {
            this.interactions.cursorOptions = {
              defaultStyle: this.cursorOptions.defaultStyle
            };
          }

          this.cursorOptions.overStyle = style;
          Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().applyCursorOverStyle(this.interactions);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "cursorDownStyle", {
        /**
         * A shortcut to setting mouse cursor when button is pressed down.
         *
         * Example:
         *
         * ```TypeScript
         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;
         * ```
         * ```JavaScript
         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "series": {
         *     // ...
         *     "slices": {
         *       "cursorDownStyle": "grabbing"
         *     }
         *   }
         * }
         * ```
         *
         * @param style An array of styles to apply onhover
         */
        set: function set(style) {
          this.cursorOptions.downStyle = style;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Applies default cursor styles for interactable elements.
       *
       * @ignore Exclude from docs
       * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default
       */

      Sprite.prototype.applyCursorStyle = function () {// Draggable styles

        /*if (this.draggable) {
              if (!$type.hasValue(this.cursorOptions.overStyle)) {
                this.cursorOptions.overStyle = MouseCursorStyle.grab;
            }
              if (!$type.hasValue(this.cursorOptions.downStyle)) {
                this.cursorOptions.downStyle = MouseCursorStyle.grabbing;
            }
        }*/
      };

      Object.defineProperty(Sprite.prototype, "interactionsEnabled", {
        /**
         * @return Is interaction enabled for this element?
         */
        get: function get() {
          var value = this.getPropertyValue("interactionsEnabled");

          if (value === false) {
            return false;
          }

          if (this.virtualParent) {
            return this.virtualParent.interactionsEnabled;
          }

          if (this.parent) {
            return this.parent.interactionsEnabled;
          }

          return true;
        },

        /**
         * Setting this to `false` will effectively disable all interactivity on the
         * element.
         *
         * @param value  Is interaction enabled for this element?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("interactionsEnabled", value)) {
            var pointerEvents = null; // must be null, not "null"!

            if (!value) {
              pointerEvents = "none";
            } else {
              // this is for IE
              this.group.node.style.pointerEvents = "";
            }

            this.group.node.style.pointerEvents = pointerEvents;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "exporting", {
        /**
         * @return Export instance
         */
        get: function get() {
          return this.getExporting();
        },

        /**
         * ==========================================================================
         * EXPORT-RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * An [[Export]] instance.
         *
         * Used to access API of the chart export functionality.
         *
         * If `exporting` is not set, the element inherits [[Export]] instance from
         * its parents.
         *
         * Upon request, if no parent has such instance, a new one is created, using
         * default settings, what in most cases is just enough.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting
         * @param exp  Export
         */
        set: function set(exp) {
          this._exporting.set(exp, exp);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * This is here as a method so that inheriting classes could override it.
       *
       * @return Export instance
       */

      Sprite.prototype.getExporting = function () {
        var _export = this._exporting.get();

        if (_export) {
          return _export;
        } else {
          if (this.isStandaloneInstance || !this.parent) {
            _export = new _export_Export__WEBPACK_IMPORTED_MODULE_24__["Export"](this.svgContainer.SVGContainer);
            _export.sprite = this;
            _export.language = this.language;
            _export.numberFormatter = this.numberFormatter;
            _export.dateFormatter = this.dateFormatter;
            _export.durationFormatter = this.durationFormatter;

            this._exporting.set(_export, _export);
          } else {
            return this.parent.exporting;
          }
        }

        return _export;
      };

      Object.defineProperty(Sprite.prototype, "exportable", {
        /**
         * @return Export?
         */
        get: function get() {
          return this._exportable;
          /*const svgContainer = this.svgContainer;
          return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/
        },

        /**
         * If set to `false` this element will be omitted when exporting the chart
         * to an image.
         *
         * @default true
         * @param value  Export?
         */
        set: function set(value) {
          var svgContainer = this.svgContainer;
          this._exportable = value;

          if (svgContainer) {
            if (value) {
              _utils_Array__WEBPACK_IMPORTED_MODULE_28__["remove"](svgContainer.nonExportableSprites, this);
            } else if (_utils_Array__WEBPACK_IMPORTED_MODULE_28__["indexOf"](svgContainer.nonExportableSprites, this) == -1) {
              svgContainer.nonExportableSprites.push(this);
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * ==========================================================================
       * MODAL/POPUP RELATED STUFF
       * ==========================================================================
       * @hidden
       */

      /**
       * Private method to be used for "classPrefix" adapter for modals/popups.
       *
       * @param value  Prefix
       */

      Sprite.prototype.modalPrefix = function (value) {
        value = _Options__WEBPACK_IMPORTED_MODULE_17__["options"].classNamePrefix + value;
        return value;
      };

      Object.defineProperty(Sprite.prototype, "modal", {
        /**
         * Returns a [[Modal]] instance, associated with this chart.
         * (elements top parent)
         *
         * Accessing modal does not make it appear. To make a modal appear, use
         * `showModal()` method.
         *
         * @see {@link Modal} for more information about using Modal windows
         * @return Modal instance
         */
        get: function get() {
          var svgContainer = this.svgContainer;

          if (svgContainer) {
            var modal = svgContainer.modal;

            if (!modal.adapter.has("classPrefix", this.modalPrefix)) {
              modal.adapter.add("classPrefix", this.modalPrefix);
            }

            return modal;
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Opens a modal window with specific content (`text` parameter) and,
       * optionally, `title`.
       *
       * The `text` parameter can contain HTML content.
       *
       * @see {@link Modal} for more information about using Modal windows
       * @param text   Modal contents
       * @param title  Title for the modal window
       */

      Sprite.prototype.openModal = function (text, title) {
        var svgContainer = this.svgContainer;

        if (svgContainer) {
          return svgContainer.openModal(text, title);
        }
      };
      /**
       * Hides modal window if there is one currently open.
       */


      Sprite.prototype.closeModal = function () {
        var svgContainer = this.svgContainer;

        if (svgContainer) {
          svgContainer.closeModal();
        }
      };

      Object.defineProperty(Sprite.prototype, "popups", {
        /**
         * A list of popups for this chart.
         *
         * @return Popups
         */
        get: function get() {
          var svgContainer = this.svgContainer;

          if (svgContainer) {
            var popups = svgContainer.popups;
            popups.template.sprite = this;

            if (!popups.template.adapter.has("classPrefix", this.modalPrefix)) {
              popups.template.adapter.add("classPrefix", this.modalPrefix);
            }

            return popups;
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates, opens, and returns a new [[Popup]] window.
       *
       * `text` can be any valid HTML.
       *
       * `title` is currently not supported.
       *
       * @param text   Popup contents
       * @param title  Popup title
       * @return Popup instance
       */

      Sprite.prototype.openPopup = function (text, title) {
        var svgContainer = this.svgContainer;

        if (svgContainer) {
          return svgContainer.openPopup(text, title);
        }
      };
      /**
       * Closes all currently open popup windows
       */


      Sprite.prototype.closeAllPopups = function () {
        var svgContainer = this.svgContainer;

        if (svgContainer) {
          svgContainer.closeAllPopups();
        }
      };

      Object.defineProperty(Sprite.prototype, "x", {
        /**
         * @return X coordinate
         */
        get: function get() {
          return this.getPropertyValue("x");
        },

        /**
         * ==========================================================================
         * POSITIONAL PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Element's absolute or relative X coordinate.
         *
         * If setting both X and Y, please consider using `moveTo()` method instead,
         * as it will be faster to set both coordinates at once.
         *
         * @param value X coordinate
         */
        set: function set(value) {
          if (!this.isDragged) {
            this.setPercentProperty("x", value, false, true, this._positionPrecision, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelX", {
        /**
         * Returns element's current absolute X coordinate in pixels.
         *
         * @readonly
         * @return X coordinate (px)
         */
        get: function get() {
          var value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["fitToRange"](this.getPixelX(this.x), this.minX, this.maxX);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelX", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeX", {
        /**
         * Returns element's current relative X coordinate in [[Percent]].
         *
         * @return X coordinate ([[Percent]])
         */
        get: function get() {
          if (!this._adapterO) {
            return this.getRelativeX(this.x);
          } else {
            return this._adapterO.apply("relativeX", this.getRelativeX(this.x));
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "minX", {
        /**
         * @ignore Exclude from docs
         * @return Min X (px)
         */
        get: function get() {
          return this.getPropertyValue("minX");
        },

        /**
         * The smallest allowable absolute X coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param value Min X (px)
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, this._positionPrecision, true);
            this.setPropertyValue("minX", value, false, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "maxX", {
        /**
         * @ignore Exclude from docs
         * @return Max X (px)
         */
        get: function get() {
          return this.getPropertyValue("maxX");
        },

        /**
         * The biggest allowable absolute X coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param value Max X (px)
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, this._positionPrecision, true);
            this.setPropertyValue("maxX", value, false, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "y", {
        /**
         * @return Y coordinate
         */
        get: function get() {
          return this.getPropertyValue("y");
        },

        /**
         * Element's absolute or relative Y coordinate.
         *
         * If setting both X and Y, please consider using `moveTo()` method instead,
         * as it will be faster to set both coordinates at once.
         *
         * @param value  Y coordinate
         */
        set: function set(value) {
          if (!this.isDragged) {
            this.setPercentProperty("y", value, false, true, this._positionPrecision, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelY", {
        /**
         * Returns element's current absolute Y coordinate in pixels.
         *
         * @readonly
         * @return Y coordinate (px)
         */
        get: function get() {
          var value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["fitToRange"](this.getPixelY(this.y), this.minY, this.maxY);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelY", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeY", {
        /**
         * Returns element's current relative Y coordinate in [[Percent]].
         *
         * @readonly
         * @return Y coordinate ([[Percent]])
         */
        get: function get() {
          if (!this._adapterO) {
            return this.getRelativeX(this.y);
          } else {
            return this._adapterO.apply("relativeY", this.getRelativeX(this.y));
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "minY", {
        /**
         * @ignore Exclude from docs
         * @return Min Y (px)
         */
        get: function get() {
          return this.getPropertyValue("minY");
        },

        /**
         * The smallest allowable absolute Y coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param value Min Y (px)
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, this._positionPrecision, true);
            this.setPropertyValue("minY", value, false, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "maxY", {
        /**
         * @ignore Exclude from docs
         * @return Max Y (px)
         */
        get: function get() {
          return this.getPropertyValue("maxY");
        },

        /**
         * The biggest allowable absolute Y coordinate for this element.
         *
         * This is used to contain element movement within certain boundaries.
         *
         * @ignore Exclude from docs
         * @param value  Max Y (px)
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, this._positionPrecision, true);
            this.setPropertyValue("maxY", value, false, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "dx", {
        /**
         * @return Horizontal offset (px)
         */
        get: function get() {
          return this.getPropertyValue("dx");
        },

        /**
         * A horizontal offset for the element in pixels.
         *
         * Can be negative value for offset to the left.
         *
         * @param value  Horizontal offset (px)
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, this._positionPrecision, true);
            this.setPropertyValue("dx", value, false, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "dy", {
        /**
         * @return Vertical offset (px)
         */
        get: function get() {
          return this.getPropertyValue("dy");
        },

        /**
         * A vertical offset for the element in pixels.
         *
         * Can be negative value for offset upwards.
         *
         * @param value  Vertical offset (px)
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](value, this._positionPrecision, true);
            this.setPropertyValue("dy", value, false, true);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "rotation", {
        /**
         * @return Rotation (0-360)
         */
        get: function get() {
          return this.getPropertyValue("rotation");
        },

        /**
         * Rotation of the element in degrees. (0-360)
         *
         * Note: For convenience purposes, negative values (for counter-clockwise
         * rotation) and values exceeding 360 can also be used.
         *
         * @param value  Rotation (0-360)
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumber"](value);

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
            value = 0;
          }

          this.setPropertyValue("rotation", value, false, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "align", {
        /**
         * @return Horizontal align
         */
        get: function get() {
          return this.getPropertyValue("align");
        },

        /**
         * Controls horizontal alignment of the element.
         *
         * This is used by parent [[Container]] when layouting its children.
         *
         * @param value  Horizontal align
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("align", value)) {
            if (this.parent) {
              this.parent.invalidateLayout();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "valign", {
        /**
         * @return Vertical align
         */
        get: function get() {
          return this.getPropertyValue("valign");
        },

        /**
         * Controls vertical alignment of the element.
         *
         * This is used by parent [[Container]] when layouting its children.
         *
         * @param value  Vertical align
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("valign", value)) {
            if (this.parent) {
              this.parent.invalidateLayout();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "horizontalCenter", {
        /**
         * @return Horizontal center
         */
        get: function get() {
          return this.getPropertyValue("horizontalCenter");
        },

        /**
         * Controls which part of the element to treat as a horizontal center.
         *
         * The setting will be used when positioning, resizing and rotating the
         * element.
         *
         * @param value  Horizontal center
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("horizontalCenter", value)) {
            this.updateCenter();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "verticalCenter", {
        /**
         * @return Vertical center
         */
        get: function get() {
          return this.getPropertyValue("verticalCenter");
        },

        /**
         * Controls which part of the element to treat as a vertical center.
         *
         * The setting will be used when positioning, resizing and rotating the
         * element.
         *
         * @param value  Vertical center
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("verticalCenter", value)) {
            this.updateCenter();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "maxWidth", {
        /**
         * @return Maximum width (px)
         */
        get: function get() {
          var maxWidth = this.getPropertyValue("maxWidth");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](maxWidth)) {
            if (this.parent) {
              var parentWidth = this.parent.maxWidth;

              if (this.parent.layout != "absolute" && this.align != "none" && this.align != undefined) {
                parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;
              }

              return parentWidth;
            }
          }

          return maxWidth;
        },

        /**
         * ==========================================================================
         * DIMENSIONAL PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Maximum allowed width for the element in pixels.
         *
         * @param value  Maximum width (px)
         */
        set: function set(value) {
          this.setMaxWidth(value);
        },
        enumerable: true,
        configurable: true
      });

      Sprite.prototype.setMaxWidth = function (value) {
        var prevWidth = this.maxWidth;
        var prevHeight = this.maxHeight;

        if (this.setPropertyValue("maxWidth", value)) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this.relativeWidth)) {
            this.invalidate();
          }

          var event_2 = {
            type: "maxsizechanged",
            target: this,
            previousWidth: prevWidth,
            previousHeight: prevHeight
          };
          this.dispatchImmediately("maxsizechanged", event_2);
        }
      };

      Object.defineProperty(Sprite.prototype, "maxHeight", {
        /**
         * @return Maximum height (px)
         */
        get: function get() {
          var maxHeight = this.getPropertyValue("maxHeight");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](maxHeight)) {
            if (this.parent) {
              var parentHeight = this.parent.maxHeight;

              if (this.parent.layout != "absolute" && this.valign != "none" && this.valign != undefined) {
                parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;
              }

              return parentHeight;
            }
          }

          return maxHeight;
        },

        /**
         * Maximum allowed height for the element in pixels.
         *
         * @param value  Maximum height (px)
         */
        set: function set(value) {
          this.setMaxHeight(value);
        },
        enumerable: true,
        configurable: true
      });

      Sprite.prototype.setMaxHeight = function (value) {
        var prevWidth = this.maxWidth;
        var prevHeight = this.maxHeight;

        if (this.setPropertyValue("maxHeight", value)) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this.relativeHeight)) {
            this.invalidate();
          }

          var event_3 = {
            type: "maxsizechanged",
            target: this,
            previousWidth: prevWidth,
            previousHeight: prevHeight
          };
          this.dispatchImmediately("maxsizechanged", event_3);
        }
      };

      Object.defineProperty(Sprite.prototype, "minWidth", {
        /**
         * @return Minimum width (px)
         */
        get: function get() {
          return this.getPropertyValue("minWidth");
        },

        /**
         * Minimum width of the element in pixels.
         *
         * Set to `undefined` to remove the limit.
         *
         * @param value  Minimum width (px)
         */
        set: function set(value) {
          this.setPropertyValue("minWidth", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "minHeight", {
        /**
         * @return Minimum height (px)
         */
        get: function get() {
          return this.getPropertyValue("minHeight");
        },

        /**
         * Minimum height for the element in pixels.
         *
         * Set to `undefined` to remove the limit.
         *
         * @param value  Minimum height (px)
         */
        set: function set(value) {
          this.setPropertyValue("minHeight", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "width", {
        /**
         * @return Width (absolute or relative)
         */
        get: function get() {
          return this.getPropertyValue("width");
        },

        /**
         * Element's absolute or relative width.
         *
         * The width can either be absolute, set in numeric pixels, or relative, set
         * in [[Percent]].
         *
         * Relative width will be calculated using closest measured ancestor
         * [[Container]].
         *
         * @param value  Width (numeric in pixels or relative)
         */
        set: function set(value) {
          var changed = this.setPercentProperty("width", value, true, false, this._positionPrecision, true);

          if (changed) {
            this.percentWidth = undefined;
            this.relativeWidth = undefined;

            if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
              this.percentWidth = value.percent;

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this._pixelWidth)) {
                this.maxWidth = undefined;
              }

              this._pixelWidth = undefined;
            } else {
              this._pixelWidth = Number(value); //this._measuredWidth = this._pixelWidth;

              this.maxWidth = this._pixelWidth;
            }

            this.invalidatePosition();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "height", {
        /**
         * @return height (absolute or relative)
         */
        get: function get() {
          return this.getPropertyValue("height");
        },

        /**
         * Element's absolute or relative height.
         *
         * The height can either be absolute, set in numeric pixels, or relative, set
         * in [[Percent]].
         *
         * Relative height will be calculated using closest measured ancestor
         * [[Container]].
         *
         * @param value  Height (numeric in pixels or relative)
         */
        set: function set(value) {
          var changed = this.setPercentProperty("height", value, true, false, this._positionPrecision, true);

          if (changed) {
            this.percentHeight = undefined;
            this._relativeHeight = undefined;

            if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
              this.percentHeight = value.percent;

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this._pixelHeight)) {
                this.maxHeight = undefined;
              }

              this._pixelHeight = undefined;
            } else {
              this._pixelHeight = Number(value); //this._measuredHeight = this._pixelHeight;

              this.maxHeight = this._pixelHeight; // yes, we reset maxWidth
            }

            this.invalidatePosition();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelWidth", {
        /**
         * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.
         *
         * @readonly
         * @return Width (px)
         */
        get: function get() {
          var width;

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this.percentWidth)) {
            width = this.maxWidth;
          } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this._pixelWidth)) {
            width = this._pixelWidth;
          } else {
            width = 0;
          }

          var minWidth = this.minWidth;

          if (minWidth != null && width < minWidth) {
            width = minWidth;
          }

          var value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](width, this._positionPrecision, true);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelWidth", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelHeight", {
        /**
         * Returns element's height in pixels. For actual height use measuredHeight property.
         *
         * @readonly
         * @return Height (px)
         */
        get: function get() {
          var height;

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this.percentHeight)) {
            height = this.maxHeight;
          } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](this._pixelHeight)) {
            height = this._pixelHeight;
          } else {
            height = 0; //this._measuredHeightSelf;
          }

          var minHeight = this.minHeight;

          if (minHeight != null && height < minHeight) {
            height = minHeight;
          }

          var value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["round"](height, this._positionPrecision, true);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelHeight", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeWidth", {
        /**
         * @return Relative width
         * @ignore
         */
        get: function get() {
          var relativeWidth = this._relativeWidth;

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](relativeWidth)) {
            if (!this._adapterO) {
              return relativeWidth;
            } else {
              return this._adapterO.apply("relativeWidth", relativeWidth);
            }
          }
        },

        /**
         * Element's relative width in [[Percent]].
         * @ignore
         *
         * @param value  Relative width
         */
        set: function set(value) {
          if (this._relativeWidth != value) {
            this._relativeWidth = value; //			this.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeHeight", {
        /**
         * @return Relative height
         * @ignore
         */
        get: function get() {
          var relativeHeight = this._relativeHeight;

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](relativeHeight)) {
            if (!this._adapterO) {
              return relativeHeight;
            } else {
              return this._adapterO.apply("relativeHeight", relativeHeight);
            }
          }
        },

        /**
         * Element's relative height in [[Percent]].
         *
         * @param value  Relative height
         * @ignore
         */
        set: function set(value) {
          if (this._relativeHeight != value) {
            this._relativeHeight = value; //			this.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "measuredWidth", {
        /**
         * Returns element's measured width in pixels.
         *
         * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that
         * rotation and scale is taken into account.
         *
         * @readonly
         * @return Width (px)
         */
        get: function get() {
          if (this.disabled || this.__disabled) {
            return 0;
          }

          if (!this._adapterO) {
            return this._measuredWidth;
          } else {
            return this._adapterO.apply("measuredWidth", this._measuredWidth);
          } // it's not good to fit to min/max range as then rotations and scale won't be taken into account
          //return this.adapter.apply("measuredWidth", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));

        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "measuredHeight", {
        /**
         * Returns elements's measured height in pixels.
         *
         * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that
         * rotation and scale taken into account.
         *
         * @readonly
         * @return Height (px)
         */
        get: function get() {
          if (this.disabled || this.__disabled) {
            return 0;
          } // it's not good to fit to min/max range as then rotations and scale won't be taken into account
          //return this.adapter.apply("measuredHeight", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));


          if (!this._adapterO) {
            return this._measuredHeight;
          } else {
            return this._adapterO.apply("measuredHeight", this._measuredHeight);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "outerWidth", {
        /**
         * Returns element's measured width plus its left and right margins in
         * pixels.
         *
         * @readonly
         * @return Outer width (px)
         */
        get: function get() {
          var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("outerWidth", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "outerHeight", {
        /**
         * Returns element's measured height plus its top and bottom margins in
         * pixels.
         *
         * @readonly
         * @return Outer height (px)
         */
        get: function get() {
          var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("outerHeight", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "innerWidth", {
        /**
         * Returns element's measured inner width in pixels.
         *
         * Inner width is actual available space for content, e.g. element's width
         * minus horizontal padding.
         *
         * @readonly
         * @return Inner width (px)
         */
        get: function get() {
          var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("innerWidth", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "innerHeight", {
        /**
         * Returns element's measured inner height in pixels.
         *
         * Inner height is actual available space for content, e.g. element's height
         * minus vertical padding.
         *
         * @readonly
         * @return Inner height (px)
         */
        get: function get() {
          var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("innerHeight", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "globalScale", {
        /**
         * Returns element's current "global" scale.
         *
         * Scale values accumulate over hierarchy of elements.
         *
         * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,
         * the child's `globalScale` will be 4. (a multitude of `2 x 2`)
         *
         * @readonly
         * @return Global scale
         */
        get: function get() {
          var scale = this.scale;

          if (this.parent) {
            scale = scale * this.parent.globalScale;
          }

          if (!this._adapterO) {
            return scale;
          } else {
            return this._adapterO.apply("globalScale", scale);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "scale", {
        /**
         * @return Scale (0-1)
         */
        get: function get() {
          return this.getPropertyValue("scale");
        },

        /**
         * Scale of the element.
         *
         * The scale is set from 0 (element reduced to nothing) to 1 (default size).
         * * 2 will mean element is increased twice.
         * * 0.5 - reduced by 50%.
         *
         * Etc.
         *
         * @param value  Scale (0-1)
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumber"](value);

          if (value < 0) {
            value = 0;
          }

          if (value != this.getPropertyValue("scale")) {
            this.setPropertyValue("scale", value, false, true);
            this.handleGlobalScale();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets all four margins for the element at once.
       *
       * Margins are set in pixels.
       *
       * @param top     Top margin
       * @param right   Right margin
       * @param bottom  Bottom margin
       * @param left    Left margin
       * @return Current element
       */

      Sprite.prototype.margin = function (top, right, bottom, left) {
        this.marginTop = top;
        this.marginRight = right;
        this.marginBottom = bottom;
        this.marginLeft = left;
        return this;
      };

      Object.defineProperty(Sprite.prototype, "marginLeft", {
        /**
         * @return Margin value
         */
        get: function get() {
          return this.getPropertyValue("marginLeft");
        },

        /**
         * Left margin - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Margin value
         */
        set: function set(value) {
          this.setPercentProperty("marginLeft", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "marginRight", {
        /**
         * @return Margin value
         */
        get: function get() {
          return this.getPropertyValue("marginRight");
        },

        /**
         * Right margin - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Margin value
         */
        set: function set(value) {
          this.setPercentProperty("marginRight", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "marginTop", {
        /**
         * @return Margin value
         */
        get: function get() {
          return this.getPropertyValue("marginTop");
        },

        /**
         * Top margin - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Margin value
         */
        set: function set(value) {
          this.setPercentProperty("marginTop", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "marginBottom", {
        /**
         * @return Margin value
         */
        get: function get() {
          return this.getPropertyValue("marginBottom");
        },

        /**
         * Bottom margin - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Margin value
         */
        set: function set(value) {
          this.setPercentProperty("marginBottom", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelMarginRight", {
        /**
         * Returns current right margin in pixels.
         *
         * @readonly
         * @return Right margin (px)
         */
        get: function get() {
          var value = this.getPixelX(this.marginRight);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelMarginRight", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeMarginRight", {
        /**
         * Returns current relative right margin.
         *
         * @readonly
         * @return Relative right margin
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          var value = this.getRelativeX(this.marginRight);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("relativeMarginRight", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelMarginLeft", {
        /**
         * Returns current left margin in pixels.
         *
         * @readonly
         * @return Left margin (px)
         */
        get: function get() {
          var value = this.getPixelX(this.marginLeft);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelMarginLeft", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeMarginLeft", {
        /**
         * Returns current relative left margin.
         *
         * @readonly
         * @return Relative left margin
         */
        get: function get() {
          //@todo Maybe use [[Percent]]?
          var value = this.getRelativeX(this.marginLeft);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("relativeMarginLeft", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelMarginTop", {
        /**
         * Returns current top margin in pixels.
         *
         * @readonly
         * @return Top margin (px)
         */
        get: function get() {
          var value = this.getPixelY(this.marginTop);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelMarginTop", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeMarginTop", {
        /**
         * Returns current relative top margin.
         *
         * @readonly
         * @return Relative top margin
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          var value = this.getRelativeY(this.marginTop);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("relativeMarginTop", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelMarginBottom", {
        /**
         * Returns current bottom margin in pixels.
         *
         * @readonly
         * @return Bottom margin (px)
         */
        get: function get() {
          var value = this.getPixelY(this.marginBottom);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("pixelMarginBottom", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativeMarginBottom", {
        /**
         * Returns current relative bottom margin.
         *
         * @readonly
         * @return Relative bottom margin
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          var value = this.getRelativeY(this.marginBottom);

          if (!this._adapterO) {
            return value;
          } else {
            return this._adapterO.apply("relativeMarginBottom", value);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets padding for the element in pixels.
       *
       * @param top     Top padding (px)
       * @param right   Right padding (px)
       * @param bottom  Bottom padding (px)
       * @param left    Left padding (px)
       * @return Element
       */

      Sprite.prototype.padding = function (top, right, bottom, left) {
        this.paddingTop = top;
        this.paddingRight = right;
        this.paddingBottom = bottom;
        this.paddingLeft = left;
        return this;
      };

      Object.defineProperty(Sprite.prototype, "paddingLeft", {
        /**
         * @return Padding value
         */
        get: function get() {
          return this.getPropertyValue("paddingLeft");
        },

        /**
         * Left padding - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Padding value
         */
        set: function set(value) {
          this.setPercentProperty("paddingLeft", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "paddingRight", {
        /**
         * @return Padding value
         */
        get: function get() {
          return this.getPropertyValue("paddingRight");
        },

        /**
         * Right padding - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Padding value
         */
        set: function set(value) {
          this.setPercentProperty("paddingRight", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "paddingTop", {
        /**
         * @return Padding value
         */
        get: function get() {
          return this.getPropertyValue("paddingTop");
        },

        /**
         * Top padding - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Padding value
         */
        set: function set(value) {
          this.setPercentProperty("paddingTop", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "paddingBottom", {
        /**
         * @return Padding value
         */
        get: function get() {
          return this.getPropertyValue("paddingBottom");
        },

        /**
         * Bottom padding - absolute (px) or relative ([[Percent]]).
         *
         * @param value  Padding value
         */
        set: function set(value) {
          this.setPercentProperty("paddingBottom", value, true, true, this._positionPrecision, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelPaddingRight", {
        /**
         * Returns current right padding in pixels.
         *
         * @readonly
         * @return Right padding (px)
         */
        get: function get() {
          return this.getPixelX(this.paddingRight);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativePaddingRight", {
        /**
         * Returns current relative right padding.
         *
         * @readonly
         * @return Relative right padding
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          return this.getRelativeX(this.paddingRight);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelPaddingLeft", {
        /**
         * Returns current left padding in pixels.
         *
         * @readonly
         * @return Left padding (px)
         */
        get: function get() {
          return this.getPixelX(this.paddingLeft);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativePaddingLeft", {
        /**
         * Returns current relative left padding.
         *
         * @readonly
         * @return Relative left padding
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          return this.getRelativeX(this.paddingLeft);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelPaddingTop", {
        /**
         * Returns current top padding in pixels.
         *
         * @readonly
         * @return Top padding (px)
         */
        get: function get() {
          return this.getPixelY(this.paddingTop);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativePaddingTop", {
        /**
         * Returns current relative top padding.
         *
         * @readonly
         * @return Relative top padding
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          return this.getRelativeY(this.paddingTop);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelPaddingBottom", {
        /**
         * Returns current bottom padding in pixels.
         *
         * @readonly
         * @return Bottom padding (px)
         */
        get: function get() {
          return this.getPixelY(this.paddingBottom);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "relativePaddingBottom", {
        /**
         * Returns current relative bottom padding.
         *
         * @readonly
         * @return Relative bottom padding
         */
        get: function get() {
          // @todo Maybe use [[Percent]]?
          return this.getRelativeY(this.paddingBottom);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "path", {
        /**
         * @return Path of a Sprite element
         */
        get: function get() {
          return this.getPropertyValue("path");
        },

        /**
         * ==========================================================================
         * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Path of Sprite element
         */
        set: function set(value) {
          this.setPath(value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @ignore
       */

      Sprite.prototype.setPath = function (value) {
        if (this.setPropertyValue("path", value)) {
          if (this._adapterO) {
            value = this._adapterO.apply("path", value);
          }

          if (!this._isPath) {
            if (!this.element || this.element.node && !(this.element.node instanceof SVGPathElement)) {
              this.element = this.paper.add("path");
            }

            this._isPath = true;
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
            this.element.attr({
              "d": value
            });
          } else {
            this.element.removeAttr("d");
          }

          this.invalidatePosition(); // otherwise is 0x0

          if (!this.inited) {
            this.events.once("inited", this.validatePosition, this, false);
          }

          return true;
        }

        return false;
      };

      Object.defineProperty(Sprite.prototype, "fillModifier", {
        /**
         * @return Fill color modifier
         */
        get: function get() {
          return this.getPropertyValue("fillModifier");
        },

        /**
         * [[ColorModifier]] that can be used to modify color and pattern of the
         * element's fill, e.g. create gradients.
         *
         * @param value  Fill color modifiier
         */
        set: function set(value) {
          if (this.setPropertyValue("fillModifier", value)) {
            this.setFill(this.fill);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "strokeModifier", {
        /**
         * @return Stroke color modifier
         */
        get: function get() {
          return this.getPropertyValue("strokeModifier");
        },

        /**
         * [[ColorModifier]] that can be used to modify color and pattern of the
         * element's stroke (outline), e.g. create gradients.
         *
         * @param value  Stroke color modifier
         */
        set: function set(value) {
          this.setPropertyValue("strokeModifier", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "fillOpacity", {
        /**
         * @return Opacity (0-9)
         */
        get: function get() {
          return this.getPropertyValue("fillOpacity");
        },

        /**
         * Element's fill opacity.
         *
         * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).
         *
         * @param value  Opacity (0-1)
         */
        set: function set(value) {
          value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["toNumberRange"](value, 0, 1);

          if (this.setPropertyValue("fillOpacity", value)) {
            this.setSVGAttribute({
              "fill-opacity": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "fill", {
        /**
         * @return Fill
         */
        get: function get() {
          return this.getPropertyValue("fill");
        },

        /**
         * Element's fill color or pattern.
         *
         * @param value  Fill
         */
        set: function set(value) {
          this.setFill(value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets actual `fill` property on the SVG element, including applicable color
       * modifiers.
       *
       * @ignore Exclude from docs
       * @param value  Fill
       */

      Sprite.prototype.setFill = function (value) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isObject"](value)) {
          value = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_14__["toColor"])(value);
        }

        if (this.setColorProperty("fill", value) || this.fillModifier) {
          // this can not go into next if, as value is turned to Gradient
          if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
            if (this.fillModifier) {
              value = this.fillModifier.modify(value);
            }
          }

          this.realFill = value; // todo: review this place when some Color type will be added

          if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
            this.setSVGAttribute({
              "fill": value.toString()
            });
          } else if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
            this.removeSVGAttribute("fill");
          } else if (value instanceof _rendering_fills_Pattern__WEBPACK_IMPORTED_MODULE_11__["Pattern"] || value instanceof _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_12__["LinearGradient"] || value instanceof _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_13__["RadialGradient"]) {
            var fill = value;
            fill.paper = this.paper;
            this.setSVGAttribute({
              "fill": "url(\"" + _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["getBaseURI"]() + fill.id + "\")"
            });
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "opacity", {
        /**
         * @return Opacity (0-1)
         */
        get: function get() {
          return this.getPropertyValue("opacity");
        },

        /**
         * Element's opacity.
         *
         * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).
         *
         * ATTENTION: It is highly not recommended to use `opacity` directly on the
         * element. The charts use `opacity` to hide/show elements, so your setting
         * might be lost if element is hidden and then later shown.
         *
         * Instead use methods `hide()` and `show()` to completely toggle off and on
         * the element.
         *
         * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make
         * the element semi-transparent.
         *
         * @param value Opacity (0-1)
         */
        set: function set(value) {
          value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["toNumberRange"](value, 0, 1);

          if (this.setPropertyValue("opacity", value)) {
            this.setSVGAttribute({
              "opacity": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "stroke", {
        /**
         * @return Stroke setting
         */
        get: function get() {
          return this.getPropertyValue("stroke");
        },

        /**
         * Element's stroke (outline) color or pattern.
         *
         * @param value  Stroke setting
         */
        set: function set(value) {
          this.setStroke(value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets actual `stroke` property on the SVG element, including applicable
       * color modifiers.
       *
       * @ignore Exclude from docs
       * @param value Stroke setting
       */

      Sprite.prototype.setStroke = function (value) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isObject"](value)) {
          value = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_14__["toColor"])(value);
        }

        if (this.setColorProperty("stroke", value) || this.strokeModifier) {
          // this can not go into next if, as value is turned to Gradient
          if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
            if (this.strokeModifier) {
              value = this.strokeModifier.modify(value);
            }
          }

          this.realStroke = value;

          if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
            if (value.hex == "none") {
              this.removeSVGAttribute("stroke");
            } else {
              this.setSVGAttribute({
                "stroke": value.toString()
              });
            }
          } else if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
            this.removeSVGAttribute("stroke");
          } else if (value instanceof _rendering_fills_Pattern__WEBPACK_IMPORTED_MODULE_11__["Pattern"] || value instanceof _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_12__["LinearGradient"] || value instanceof _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_13__["RadialGradient"]) {
            var stroke = value;
            stroke.paper = this.paper;
            this.setSVGAttribute({
              "stroke": "url(\"" + _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["getBaseURI"]() + stroke.id + "\")"
            });
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "strokeOpacity", {
        /**
         * @return Opacity (0-1)
         */
        get: function get() {
          return this.getPropertyValue("strokeOpacity");
        },

        /**
         * Stroke (outline) opacity.
         *
         * The values may range from 0 (fully transparent) to 1 (fully opaque).
         *
         * @param value  Opacity (0-1)
         */
        set: function set(value) {
          value = _utils_Math__WEBPACK_IMPORTED_MODULE_26__["toNumberRange"](value, 0, 1);

          if (this.setPropertyValue("strokeOpacity", value)) {
            this.setSVGAttribute({
              "stroke-opacity": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "nonScalingStroke", {
        /**
         * @return Do not scale stroke (outline)
         */
        get: function get() {
          return this.getPropertyValue("nonScalingStroke");
        },

        /**
         * Controls if the element's stroke (outline) should remain keep constant
         * thicnkess and do not scale when the whole element is resized.
         *
         * @param value  Do not scale stroke (outline)
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (this.setPropertyValue("nonScalingStroke", value)) {
            this.strokeWidth = this.strokeWidth;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "nonScaling", {
        /**
         * @return Is element scaleable?
         */
        get: function get() {
          return this.getPropertyValue("nonScaling");
        },

        /**
         * Controls if element should keep constant size and not scale even if there is
         * space available, or it does not fit.
         *
         * @param value  Is element scaleable?
         */
        set: function set(value) {
          // @todo Description (review)
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);
          this.setPropertyValue("nonScaling", value, false, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "strokeWidth", {
        /**
         * @return Thickness (px)
         */
        get: function get() {
          return this.getPropertyValue("strokeWidth");
        },

        /**
         * Stroke (outline) thickness in pixels.
         *
         * @param value  Thickness (px)
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumber"](value);
          this.setPropertyValue("strokeWidth", value, true);

          if (this.nonScalingStroke) {
            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
              value = 1;
            }

            value = value / this.globalScale;
          }

          this.setSVGAttribute({
            "stroke-width": value
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "strokeDasharray", {
        /**
         * @return `stroke-dasharray`
         */
        get: function get() {
          return this.getPropertyValue("strokeDasharray");
        },

        /**
         * A `stroke-dasharray` for the stroke (outline).
         *
         * "Dasharray" allows setting rules to make lines dashed, dotted, etc.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`
         * @param value  `stroke-dasharray`
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("strokeDasharray", value)) {
            this.setSVGAttribute({
              "stroke-dasharray": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "strokeDashoffset", {
        /**
         * @return `stroke-dashoffset`
         */
        get: function get() {
          return this.getPropertyValue("strokeDashoffset");
        },

        /**
         * A `stroke-dashoffset` for the stroke (outline).
         *
         * "Dashoffset" allows setting the start position of the dashes if
         * `strokeDasharray` is used.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`
         * @param value  `stroke-dashoffset`
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumber"](value);

          if (this.setPropertyValue("strokeDashoffset", value)) {
            this.setSVGAttribute({
              "stroke-dashoffset": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "strokeLinecap", {
        /**
         * @return `stroke-linecap`
         */
        get: function get() {
          return this.getPropertyValue("strokeLinecap");
        },

        /**
         * A `stroke-linecap` to indicate how line ends are drawn.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`
         * @param value  `stroke-linecap`
         */
        set: function set(value) {
          if (this.setPropertyValue("strokeLinecap", value)) {
            this.setSVGAttribute({
              "stroke-linecap": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "strokeLinejoin", {
        /**
         * @return `stroke-linejoin`
         */
        get: function get() {
          return this.getPropertyValue("strokeLinejoin");
        },

        /**
         * A `stroke-linejoin` to indicate how line ends are drawn.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`
         * @param value  `stroke-linejoin`
         */
        set: function set(value) {
          if (this.setPropertyValue("strokeLinejoin", value)) {
            this.setSVGAttribute({
              "stroke-linejoin": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "shapeRendering", {
        /**
         * @return 'shape-rendering' value
         */
        get: function get() {
          return this.getPropertyValue("shapeRendering");
        },

        /**
         * An SVG-specific `shape-rendering` value.
         *
         * `shape-rendering` controls how vector graphics are drawn and rendered.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`
         * @default "auto"
         * @param value  'shape-rendering' value
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (this.setPropertyValue("shapeRendering", value)) {
            this.setSVGAttribute({
              "shape-rendering": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "pixelPerfect", {
        /**
         * @return Use pixel perfect?
         */
        get: function get() {
          return this.getPropertyValue("pixelPerfect");
        },

        /**
         * Controls if SVG vectors should be drawn with "pixel" precision, producing
         * perfectly crisp lines on retina displays.
         *
         * Setting this to `true` might improve visual quality, but may have a
         * negative effect on performance.
         *
         * Different elements use different default setting for `pixelPerfect`.
         *
         * We recommend leaving this at their default settings, unless there's a
         * specific need.
         *
         * @param value  Use pixel perfect?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (value) {
            this._positionPrecision = 0;
          } else {
            this._positionPrecision = 3;
          }

          this.setPropertyValue("pixelPerfect", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "rtl", {
        /**
         * @return RTL?
         */
        get: function get() {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this._rtl)) {
            return this._rtl;
          } else if (this.virtualParent) {
            return this.virtualParent.rtl;
          } else if (this.parent) {
            return this.parent.rtl;
          } //this.rtl = false;


          return false;
        },

        /**
         * An RTL (right-to-left) setting.
         *
         * RTL may affect alignment, text, and other visual properties.
         *
         * @param value  `true` for to use RTL
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);
          this._rtl = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * ==========================================================================
       * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF
       * ==========================================================================
       * @hidden
       */

      /**
       * Reveals hidden element.
       *
       * Has no effect if element is already visible.
       *
       * If `duration` is not specified, it will use default.
       *
       * @param duration  Fade in duration (ms)
       * @return Animation object if such object was created
       */

      Sprite.prototype.show = function (duration) {
        return this.showReal(duration);
      };
      /**
       * Performs actual operations to reveal this element.
       *
       * @ignore Exclude from docs
       * @param duration Fade in duration (ms)
       * @return Fade in duration (ms)
       */


      Sprite.prototype.showReal = function (duration) {
        var _this = this;

        if (this.preventShow) {
          return;
        }

        var transition;
        var properties = this.defaultState.properties;

        if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || properties.opacity != null && this.opacity < properties.opacity && !this.isShowing) && !this.isDisposed()) {
          // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position
          if (this.invalid) {
            this.validate();
          }

          if (this.positionInvalid) {
            this.validatePosition();
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](duration)) {
            duration = this.defaultState.transitionDuration;
          }

          if (this._hideAnimation) {
            this._hideAnimation.kill();

            this._hideAnimation = undefined;
          } // Cancel hide handler just in case it was there


          if (this._showHideDisposer) {
            this.removeDispose(this._showHideDisposer);
          }

          this._isHidden = false;
          this.isHiding = false;
          this.isShowing = true; // Apply current state

          transition = this.applyCurrentState(duration);

          if (transition && !transition.isFinished()) {
            this._showHideDisposer = transition.events.on("animationended", function () {
              _this.isShowing = false;
            });

            this._disposers.push(this._showHideDisposer);
          } else {
            this.isShowing = false;
          } // Make it visible


          var visible = this.defaultState.properties.visible;

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](visible)) {
            visible = true;
          }

          this.visible = visible; // Unhide from screen readers

          this.readerHidden = false; // Dispatch "show" event

          this.dispatchImmediately("shown");
        }

        return transition;
      };
      /**
       * Initiates hiding of Sprite.
       * When called it will fade out the the Sprite to transparency, then make it
       * invisible.
       * @param duration Duration in millisecons
       */

      /**
       * Hides the element, by applying `hidden` state.
       *
       * Has no effect if element is already hidden.
       *
       * If `duration` is not specified, it will use default.
       *
       * While element is fading out, its `isHiding` property will resolve to
       * `true`.
       *
       * When element is hidden, its `visible` property will resolve to `false`.
       *
       * @param duration  Fade out duration (ms)
       * @return hide Animation object if such object was created
       */


      Sprite.prototype.hide = function (duration) {
        return this.hideReal(duration);
      };
      /**
       * Hides actual SVG elements and handles hiding animations.
       *
       * @param duration  Fade out duration (ms)
       * @return Fade out duration (ms)
       * @ignore
       */


      Sprite.prototype.hideReal = function (duration) {
        var _this = this;

        var transition;

        if (!this.isHiding && this.visible && !this.isDisposed()) {
          // added to solve 51375
          if (this.tooltip && this.tooltip.currentSprite == this) {
            this.hideTooltip(0);
          }

          if (this._hideAnimation) {
            this._hideAnimation.kill();

            this._hideAnimation = undefined;
          }

          this.isShowing = false; // Cancel hide handler just in case it was there

          if (this._showHideDisposer) {
            this.removeDispose(this._showHideDisposer);
          } // Get state


          var hiddenState = this.hiddenState; // Transition to "hidden" state, provided Sprite has one set

          if (hiddenState) {
            // Yes, we have a "hidden" state
            // `setState` will return an `Animation` object which we can set
            // events on
            transition = this.setState(hiddenState, duration, undefined);

            if (transition && !transition.isFinished()) {
              this._hideAnimation = transition;
              this._showHideDisposer = transition.events.on("animationended", function () {
                _this.isHiding = false;
                _this._isHidden = true;
              }, this);

              this._disposers.push(this._showHideDisposer); // Thrown everything into `_disposers` just in case Sprite gets
              // destroyed in the meantime


              this._disposers.push(transition);
            } else {
              this.isHiding = false;
              this._isHidden = true;
            }
          } else {
            // No hidden state, let's just set `visible` and call it a day
            this.visible = false;
            this.isHiding = false;
            this._isHidden = true;
          } // Hide from screen readers


          this.readerHidden = true; // Dispach "hidden" event

          this.dispatchImmediately("hidden");
          this.invalidate(); // hide it at once to avoid flickers // validate() causes SO
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](duration)) {
          duration = this.hiddenState.transitionDuration;
        }

        return transition;
      };

      Object.defineProperty(Sprite.prototype, "visible", {
        /**
         * Returns current visibility of the element.
         *
         * @return Visible?
         */
        get: function get() {
          return this.getVisibility();
        },

        /**
         * Sets visibility of the element.
         *
         * @param value Visible?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);
          this.setVisibility(value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns visibility value
       * @ignore
       */

      Sprite.prototype.getVisibility = function () {
        var value = this.getPropertyValue("visible");

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](value)) {
          value = true;
        }

        return value;
      };
      /**
       * Sets `visibility` property:
       *
       * * `true` - visible
       * * `false` - hidden
       *
       * @param value  true - visible, false - hidden
       * @return Current visibility
       */


      Sprite.prototype.setVisibility = function (value) {
        if (this.setPropertyValue("visible", value)) {
          if (value) {
            this.group.removeAttr("visibility");
          } else {
            this.group.attr({
              "visibility": "hidden"
            });
          } //this.invalidatePosition();


          if (this.events.isEnabled("visibilitychanged")) {
            var event_4 = {
              type: "visibilitychanged",
              target: this,
              visible: value
            };
            this.events.dispatchImmediately("visibilitychanged", event_4);
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "zIndex", {
        /**
         * @return zIndex
         */
        get: function get() {
          return this.getPropertyValue("zIndex");
        },

        /**
         * A "zIndex" of the element.
         *
         * "zIndex" determines the order of how elements are placed over each other.
         *
         * Higher "zIndex" will mean the element will be draw on top of elements
         * with lower "zIndexes".
         *
         * @param value  zIndex
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toNumber"](value);

          if (this.setPropertyValue("zIndex", value)) {
            this.dispatch("zIndexChanged");
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Moves the element to the very top in element order, so that it appears
       * in front of other elements.
       */

      Sprite.prototype.toFront = function () {
        var parent = this.parent;

        if (parent && parent.children.indexOf(this) != parent.children.length - 1) {
          parent.children.moveValue(this, parent.children.length - 1);
          this.dispatch("zIndexChanged");
        }
      };
      /**
       * Moves the element to the very bottom in the element order, so that it
       * appears behind other elements.
       */


      Sprite.prototype.toBack = function () {
        var parent = this.parent;

        if (parent && parent.children.indexOf(this) != 0) {
          parent.children.moveValue(this, 0);
          this.dispatch("zIndexChanged");
        }
      };

      Object.defineProperty(Sprite.prototype, "userClassName", {
        /**
         * @return Class name
         */
        get: function get() {
          return this.getPropertyValue("userClassName");
        },

        /**
         * A custom class name to set on the element.
         *
         * If set, the value will be added to element's `class` attribute.
         *
         * @since 4.9.11
         * @param  value  Class name
         */
        set: function set(value) {
          if (this.setPropertyValue("userClassName", value)) {
            if (!value && this.userClassName) {
              this.group.removeClass(this.userClassName);
            }

            this.setClassName();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltip", {
        /**
         * @return Tooltip
         */
        get: function get() {
          if (this._tooltip) {
            return this._tooltip;
          } else if (this.virtualParent) {
            return this.virtualParent.tooltip;
          } else if (this.parent) {
            return this.parent.tooltip;
          }
        },

        /**
         * ==========================================================================
         * TOOLTIP-RELATED PROPERTIES STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * A [[Tooltip]] object to be used when displayed rollover information for
         * the element.
         *
         * @param tooltip  Tooltip
         */
        set: function set(tooltip) {
          if (this._tooltip) {
            //this._tooltip.dispose();
            this.removeDispose(this._tooltip);
          }

          this._tooltip = tooltip;

          if (tooltip) {
            tooltip.parent = this.tooltipContainer;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipDataItem", {
        /**
         * @return Tooltip data item
         */
        get: function get() {
          var tooltipDataItem = this._tooltipDataItem;

          if (tooltipDataItem) {
            return tooltipDataItem;
          } else {
            return this.dataItem;
          }
        },

        /**
         * A [[DataItem]] to use when populating content for the element's
         * [[Tooltip]].
         *
         * @see {@link Tooltip}
         * @see {@link DataItem}
         * @param value  Tooltip data item
         */
        set: function set(value) {
          // important: do not dispose tooltip dataItem, as it is some actual data item from data!
          this._tooltipDataItem = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipColorSource", {
        /**
         * @return Tooltip color source
         */
        get: function get() {
          return this._tooltipColorSource;
        },

        /**
         * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,
         * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.
         *
         * @see {@link Tooltip}
         * @see {@link Sprite}
         * @param sprite Sprite
         */
        set: function set(sprite) {
          this._tooltipColorSource = sprite;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Shows the element's [[Tooltip]].
       *
       * A tooltip will be populated using text templates in either `tooltipHTML` or
       * `tooltipText` as well as data in `tooltipDataItem`.
       *
       * @see {@link Tooltip}
       * @param optional point (sprite-related) to which tooltip must point.
       * @return returns true if the tooltip was shown and false if it wasn't (no text was found)
       */

      Sprite.prototype.showTooltip = function (point) {
        if (this.showTooltipOn == "always" && !this._tooltip && this.tooltip) {
          this._tooltip = this.tooltip.clone();
        }

        if (!point && this.tooltipPosition == "pointer" && this.isHover) {
          point = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSvg"](Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);
        } // do not show if hidden


        var sprite = this;

        while (sprite != undefined) {
          if (!sprite.visible || sprite.disabled || sprite.__disabled) {
            if (this._tooltip && this._tooltip.visible) {
              this._tooltip.hide(0);
            }

            return;
          }

          sprite = sprite.parent;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipText) || _utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](this.tooltipHTML)) {
          var tooltip = this.tooltip;
          var tooltipDataItem = this.tooltipDataItem;

          if (tooltip) {
            tooltip.targetSprite = this;
            var colorSource_1 = this;
            var tooltipColorSource_1 = this.tooltipColorSource;

            if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {
              if (tooltipColorSource_1.isTemplate) {
                if (tooltipDataItem) {
                  _utils_Array__WEBPACK_IMPORTED_MODULE_28__["eachContinue"](tooltipDataItem.sprites, function (sprite) {
                    if (sprite.clonedFrom == tooltipColorSource_1) {
                      colorSource_1 = sprite;
                      return false;
                    }

                    return true;
                  });
                }
              } else {
                colorSource_1 = tooltipColorSource_1;
              }
            }

            if (tooltip.getStrokeFromObject) {
              var stroke = this.stroke;
              var source = colorSource_1;

              while (source.parent != undefined) {
                stroke = source.stroke;

                if (stroke == undefined) {
                  source = source.parent;
                }

                if (stroke != undefined) {
                  break;
                }
              }

              if (stroke instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
                tooltip.background.animate({
                  property: "stroke",
                  to: stroke
                }, tooltip.animationDuration);
              } else {
                tooltip.background.stroke = stroke;
              }
            } // Set data item


            tooltip.dataItem = tooltipDataItem;
            tooltip.label.populateStringFrom = this;

            if (tooltip.getFillFromObject) {
              var fill = this.fill;
              var source = colorSource_1;

              while (source.parent != undefined) {
                fill = source.fill;

                if (fill == undefined || fill instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"] && fill.rgb == undefined) {
                  source = source.parent;
                } else if (fill != undefined) {
                  break;
                }
              }

              if (fill == undefined) {
                fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_14__["color"])("#000000");
              }

              if (fill instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
                if (!tooltip.visible) {
                  tooltip.background.fill = fill;
                } else {
                  tooltip.background.animate({
                    property: "fill",
                    to: fill
                  }, tooltip.animationDuration);
                }
              } else {
                tooltip.background.fill = fill;
              }

              if (tooltip.autoTextColor && fill instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_14__["Color"]) {
                tooltip.label.fill = fill.alternative;
              }
            } // Apply tooltip text


            var text = "";

            if (this.tooltipHTML) {
              tooltip.html = this.tooltipHTML;
              text = this.tooltipHTML;
            }

            if (this.tooltipText) {
              tooltip.text = this.tooltipText;
              text = this.tooltipText;
            }

            if (this.updateTooltipPosition(point)) {
              // Set accessibility option
              tooltip.readerDescribedBy = this.uidAttr(); // make label to render to be able to check currentText

              if (tooltip.label.invalid) {
                tooltip.label.validate();
              }

              if (text != undefined && text != "" && tooltip.label.currentText != "") {
                //@todo: think of how to solve this better
                if (tooltip && !tooltip.parent) {
                  tooltip.parent = this.tooltipContainer;
                } // Reveal tooltip
                // showing it in 1 ms helps to avoid strange flickering in IE


                var duration = tooltip.defaultState.transitionDuration;

                if (duration <= 0) {
                  duration = 1;
                }

                tooltip.show(duration);
                tooltip.currentSprite = this;
                return true;
              } else {
                this.hideTooltip(0);
              }
            } else {
              this.hideTooltip(0);
            }
          }
        }

        return false;
      };
      /**
       * @ignore
       */


      Sprite.prototype.updateTooltipPosition = function (point) {
        var _this = this;

        if (this.tooltipPosition == "pointer") {
          if (this._interactionDisposer) {
            this._interactionDisposer.dispose();
          }

          this._interactionDisposer = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_15__["getInteraction"])().body.events.on("track", function (ev) {
            return _this.pointTooltipTo(_utils_Utils__WEBPACK_IMPORTED_MODULE_25__["documentPointToSvg"](ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);
          });

          if (point) {
            return this.pointTooltipTo(point, true);
          }
        } else {
          // Point to the X/Y of this Sprite
          var globalPoint = _utils_Utils__WEBPACK_IMPORTED_MODULE_25__["spritePointToSvg"]({
            "x": this.getTooltipX(),
            "y": this.getTooltipY()
          }, this);

          return this.pointTooltipTo(globalPoint);
        }
      };
      /**
       * Sets the point the [[Tooltip]] should point to.
       *
       * @param point      Coordinates to point to
       * @param instantly  Move instantly without animation
       */


      Sprite.prototype.pointTooltipTo = function (point, instantly) {
        var tooltip = this.tooltip;

        if (tooltip && this.topParent) {
          if (tooltip.showInViewport) {
            tooltip.pointTo(point, instantly);
            return true;
          }

          if (_utils_Math__WEBPACK_IMPORTED_MODULE_26__["isInRectangle"](point, {
            x: 0,
            y: 0,
            width: this.topParent.maxWidth,
            height: this.topParent.maxHeight
          })) {
            tooltip.pointTo(point, instantly);
            return true;
          }
        }

        return false;
      };
      /**
       * Hides element's [[Tooltip]].
       *
       * @see {@link Tooltip}
       */


      Sprite.prototype.hideTooltip = function (duration) {
        if (this.showTooltipOn == "always") {
          return;
        }

        var tooltip = this.tooltip;

        if (tooltip) {
          if (tooltip.targetSprite == this) {
            tooltip.targetSprite = undefined;
          }

          tooltip.hide(duration);

          if (this._interactionDisposer) {
            this._interactionDisposer.dispose();

            this._interactionDisposer = undefined;
          }
        }
      };

      Object.defineProperty(Sprite.prototype, "tooltipHTML", {
        /**
         * @return Tooltip HTML content template
         */
        get: function get() {
          return this.getPropertyValue("tooltipHTML");
        },

        /**
         * An HTML template to be used to populate [[Tooltip]] contents.
         *
         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed
         * for any data values to be replaced with the values from respective data
         * items.
         *
         * @param value Tooltip HTML content template
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);
          this.hoverable = true;

          if (this.setPropertyValue("tooltipHTML", value)) {
            if (this.tooltip) {
              if (this.tooltip.visible) {
                this.showTooltip();
              }
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipText", {
        /**
         * @return Tooltip content template
         */
        get: function get() {
          return this.getPropertyValue("tooltipText");
        },

        /**
         * A text template to be used to populate Tooltip's contents.
         *
         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed
         * for any data values to be replaced with the values from respective data
         * items.
         *
         * This template will also be parsed for any special formatting tags.
         *
         * @param value Tooltip content template
         * @see {@link TextFormatter}
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toText"](value);

          if (value) {
            this.hoverable = true;
          }

          if (this.setPropertyValue("tooltipText", value)) {
            if (this.tooltip) {
              if (this.tooltip.visible) {
                this.showTooltip();
              }
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipContainer", {
        /**
         * @ignore Exclude from docs
         * @return Container
         */
        get: function get() {
          if (this._tooltipContainer) {
            return this._tooltipContainer;
          } else if (this.parent) {
            return this.parent.tooltipContainer;
          }
        },

        /**
         * A container reference that should be used to place element's
         * [[Tooltip]] in.
         *
         * Will use parent's container if does not have one set.
         *
         * @ignore Exclude from docs
         * @param value Container
         * @todo Dispose of the old _tooltipContainer ?
         */
        set: function set(value) {
          this._tooltipContainer = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipX", {
        /**
         * @return Tooltip X (px)
         */
        get: function get() {
          return this.getTooltipX();
        },

        /**
         * X coordinate the [[Tooltip]] should be shown at.
         *
         * @param value  Tooltip X (px)
         */
        set: function set(value) {
          if (this.setPercentProperty("tooltipX", value) && this.tooltip) {
            this.tooltip.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "alwaysShowTooltip", {
        /**
         * @return Always show tooltip?
         */
        get: function get() {
          return this.getPropertyValue("showTooltipOn") == "always";
        },

        /**
         * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible
         * setting: `showTooltipOn`. Please use `showTooltipOn = "always"` instead.
         *
         * Indicates if this element should display a tooltip permanently.
         *
         * Useful, if you want to show permanent tooltips on some items.
         *
         * @default false
         * @since 4.5.4
         * @deprecated Use `showTooltipOn = "always"` instead
         * @param  value  Always show tooltip?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);

          if (value) {
            this.showTooltipOn = "always";
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "showTooltipOn", {
        /**
         * @return When to show tooltip
         */
        get: function get() {
          return this.getPropertyValue("showTooltipOn");
        },

        /**
         * Indicates when tooltip needs to be shown on this element:
         *
         * * `"hover"` (default) - Tooltip will be shown when element is hovered on.
         * * `"hit"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.
         * * `"always"` - Tooltip will be shown on the element permanently.
         *
         * For example, if you would like to show tooltips on all of the columns of
         * a [[ColumnSeries]]:
         *
         * ```TypeScript
         * series.columns.template.showTooltipOn = "always";
         * ```
         * ```JavaScript
         * series.columns.template.showTooltipOn = "always";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "series": [{
         *     // ...
         *     "columns": {
         *       "showTooltipOn": "always"
         *     }
         *   }]
         * }
         * ```
         *
         * It can even be set to display on a selected columns via `propertyFields`:
         *
         * ```TypeScript
         * series.columns.template.propertyFields.showTooltipOn = "tooltip";
         * ```
         * ```JavaScript
         * series.columns.template.propertyFields.showTooltipOn = "tooltip";
         * ```
         * ```JSON
         * {
         *   // ...
         *   "series": [{
         *     // ...
         *     "columns": {
         *       "propertyFields": {
         *         "showTooltipOn": "tooltip"
         *       }
         *     }
         *   }]
         * }
         * ```
         *
         * @default "hover"
         * @since 4.7.9
         * @param  value  When to show tooltip
         */
        set: function set(value) {
          if (this.setPropertyValue("showTooltipOn", value)) {
            if (value == "hit") {
              this.clickable = true;
            }

            if (this.tooltip) {
              if (value == "always") {
                this.showTooltip();
              } else {
                this.handleAlwaysShowTooltip();
              }
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipPosition", {
        /**
         * Position
         */
        get: function get() {
          return this.getPropertyValue("tooltipPosition");
        },

        /**
         * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay
         * at the fixed position.
         *
         * @param value  Position
         */
        set: function set(value) {
          this.setPropertyValue("tooltipPosition", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "tooltipY", {
        /**
         * @return Tooltip Y (px)
         */
        get: function get() {
          return this.getTooltipY();
        },

        /**
         * Y coordinate the [[Tooltip]] should be shown at.
         *
         * @param value  Tooltip Y (px)
         */
        set: function set(value) {
          if (this.setPercentProperty("tooltipY", value) && this.tooltip) {
            this.tooltip.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns Tooltip X coordinate if it's set, or middle of the element.
       *
       * @ignore Exclude from docs
       * @return X (px)
       */

      Sprite.prototype.getTooltipX = function () {
        var x = this.getPropertyValue("tooltipX");

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](x)) {
          x = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_33__["percent"])(50);
        }

        var value;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](x)) {
          value = x;
        }

        if (x instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
          value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
          value = 0;
        }

        return value;
      };
      /**
       * Returns Tooltip Y coordinate if it's set, or middle of the element.
       *
       * @ignore Exclude from docs
       * @return Y (px)
       */


      Sprite.prototype.getTooltipY = function () {
        var y = this.getPropertyValue("tooltipY");

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](y)) {
          y = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_33__["percent"])(50);
        }

        var value;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](y)) {
          value = y;
        }

        if (y instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_33__["Percent"]) {
          value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_30__["isNumber"](value)) {
          value = 0;
        }

        return value;
      };
      /**
       * Displays a modal or console message with error, and halts any further
       * processing of this item.
       *
       * @ignore Exclude from docs
       * @param e Error
       * @todo Implement from applying further actions to this item
       */


      Sprite.prototype.raiseCriticalError = function (e, closable) {
        if (this.svgContainer) {
          if (!this._adapterO) {
            this.modal.content = e.message;
          } else {
            this.modal.content = this._adapterO.apply("criticalError", e).message;
          }

          if (!closable) {
            this.disabled = true;
          } else {
            this.modal.closable = true;
          }

          this.modal.open();
        }

        if (_Options__WEBPACK_IMPORTED_MODULE_17__["options"].verbose) {
          console.log(e);
        }
      };
      /**
      * Processes JSON-based config before it is applied to the object.
      *
      * @ignore Exclude from docs
      * @param config  Config
      */


      Sprite.prototype.processConfig = function (config) {
        if (config) {
          // Tooltip color source
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](config.tooltipColorSource) && _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isString"](config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {
            config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);
          } // Cursor styles


          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](config.cursorOverStyle) && _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isString"](config.cursorOverStyle)) {
            config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](config.cursorDowntyle) && _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isString"](config.cursorDowntyle)) {
            config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](config.cursorOptions)) {
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](config.cursorOptions.overStyle) && _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isString"](config.cursorOptions.overStyle)) {
              config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);
            }

            if (_utils_Type__WEBPACK_IMPORTED_MODULE_30__["hasValue"](config.cursorOptions.downStyle) && _utils_Type__WEBPACK_IMPORTED_MODULE_30__["isString"](config.cursorOptions.downStyle)) {
              config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);
            }
          }
        }

        _super.prototype.processConfig.call(this, config);

        this.processDelayedMap();
      };
      /**
       * Converts string name of the cursor into actual [[MouseCursorStyle]].
       *
       * @param style  Cursor type
       * @return Cursor definition
       */


      Sprite.prototype.getCursorStyle = function (style) {
        switch (style) {
          case "grab":
            return _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].grab;

          case "grabbing":
            return _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].grabbing;

          case "pointer":
            return _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].pointer;

          case "horizontalResize":
            return _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].horizontalResize;

          case "verticalResize":
            return _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].verticalResize;

          default:
            return _interaction_Mouse__WEBPACK_IMPORTED_MODULE_16__["MouseCursorStyle"].default;
        }
      };
      /**
       * This function is used to sort element's JSON config properties, so that
       * some properties that absolutely need to be processed last, can be put at
       * the end.
       *
       * @ignore Exclude from docs
       * @param a  Element 1
       * @param b  Element 2
       * @return Sorting number
       */


      Sprite.prototype.configOrder = function (a, b) {
        if (a == b) {
          return 0;
        } // Must come last
        else if (a == "tooltipColorSource") {
            return 1;
          } else if (b == "tooltipColorSource") {
            return -1;
          } else {
            return _super.prototype.configOrder.call(this, a, b);
          }
      };

      Object.defineProperty(Sprite.prototype, "isHidden", {
        /**
         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.
         * This was added becaus hidden state might have visibility set to true and so
         * there would not be possible to find out if a sprite is technically hidden or not.
         */
        get: function get() {
          if (this._isHidden) {
            return this._isHidden;
          } else if (this._parent) {
            return this._parent.isHidden;
          }

          return false;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "showOnInit", {
        /**
         * @return Show on init?
         */
        get: function get() {
          return this.getPropertyValue("showOnInit");
        },

        /**
         * If this is set to `true`, Sprite, when inited will be instantly hidden
         * ("hidden" state applied) and then shown ("default" state applied).
         *
         * If your "default" state's `transitionDuration > 0` this will result in
         * initial animation from "hidden" state to "default" state.
         *
         * If you need a Sprite which has `showOnInit = true` not to be shown
         * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`
         * will not prevent the animation and the sprite will be shown.
         *
         * @param value show on init?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);
          this.setShowOnInit(value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @ignore
       */

      Sprite.prototype.setShowOnInit = function (value) {
        if (this.setPropertyValue("showOnInit", value)) {
          if (!this.isTemplate) {
            if (value && !this.inited && !this.hidden) {
              this._showOnInitDisposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_7__["MultiDisposer"]([_Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].events.once("enterframe", this.hideInitially, this), this.events.once("beforevalidated", this.hideInitially, this, false), this.events.on("inited", this.appear, this, false)]);

              this._disposers.push(this._showOnInitDisposer);
            } else {
              if (this._showOnInitDisposer) {
                this._showOnInitDisposer.dispose();
              }
            }
          }
        }
      };
      /**
       * @ignore
       */


      Sprite.prototype.hideInitially = function () {
        if (!this.isDisposed()) {
          this.appeared = false; //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.

          if (!this.inited) {
            this.hide(0);
          }
        }
      };
      /**
       * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.
       */


      Sprite.prototype.appear = function () {
        var _this = this;

        this.appeared = false;

        if (!this.hidden && !this.isHidden) {
          this.hide(0);
        }

        if (!this.hidden) {
          var animation = this.show();

          if (animation && !animation.isFinished()) {
            this.addDisposer(animation.events.on("animationended", function () {
              _this.appeared = true;

              _this.dispatch("appeared");
            }));
          } else {
            this.appeared = true;
            this.dispatch("appeared");
          }
        } else {
          this.appeared = true;
          this.dispatch("appeared");
        }
      };

      Object.defineProperty(Sprite.prototype, "hidden", {
        /**
         * @return Is initially hidden?
         */
        get: function get() {
          return this.getPropertyValue("hidden");
        },

        /**
         * If a sprite has `showOnInit = true`, it will animate from "hidden" to
         * "default" state when initialized. To prevent this but keep
         * `showOnInit = true`, you can set `sprite.hidden = true`.
         *
         * @param value initially hidden?
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_30__["toBoolean"](value);
          this.setPropertyValue("hidden", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "bbox", {
        /**
         * Returns bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         */
        get: function get() {
          if (this.definedBBox) {
            return this.definedBBox;
          }

          return this._bbox;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Sprite.prototype, "plugins", {
        /**
         * A list of plugins (objects that implement [[IPlugin]] interface) attached
         * to this object.
         *
         * @since 4.2.2
         * @return List of plugins
         */
        get: function get() {
          var _this = this;

          if (!this._plugins) {
            this._plugins = new _utils_List__WEBPACK_IMPORTED_MODULE_6__["List"]();

            this._disposers.push(this._plugins.events.on("inserted", function (ev) {
              ev.newValue.target = _this;
              ev.newValue.init();
            }));

            this._disposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_6__["ListDisposer"](this._plugins));
          }

          return this._plugins;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Called during the System.update method
       *
       * @ignore Exclude from docs
       */

      Sprite.prototype._systemUpdate = function (skippedSprites) {
        this.validate();
      };
      /**
       * Called during the System.update method
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype._systemCheckIfValidate = function () {
        return true;
      };
      /**
       * Called during the System.validatePositions method
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype._systemValidatePositions = function () {
        this.validatePosition();
      };
      /**
       * Called during the System.validateLayouts method
       *
       * @ignore Exclude from docs
       */


      Sprite.prototype._systemValidateLayouts = function () {};

      return Sprite;
    }(_Base__WEBPACK_IMPORTED_MODULE_3__["BaseObjectEvents"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_18__["registry"].registeredClasses["Sprite"] = Sprite; //# sourceMappingURL=Sprite.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js ***!
    \*************************************************************************/

  /*! exports provided: SpriteEventDispatcher */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreSpriteEventsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SpriteEventDispatcher", function () {
      return SpriteEventDispatcher;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./utils/EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /**
     * An [[EventDispatcher]] for [[Sprite]].
     *
     * @important
     */


    var SpriteEventDispatcher =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SpriteEventDispatcher, _super);

      function SpriteEventDispatcher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_interactionEvents description]
         *
         * @todo Description
         */


        _this._interactionEvents = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_1__["Dictionary"]();
        return _this;
      }
      /**
       * [_dispatchSpriteEvent description]
       *
       * @todo Description
       */


      SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {
        if (this.target.disabled || this.target.isTemplate) {
          return;
        } // TODO remove this <any> later


        if (this.target.events.isEnabled(ev.type)) {
          var imev = _utils_Object__WEBPACK_IMPORTED_MODULE_5__["merge"](ev, {
            target: this.target
          });

          this.target.events.dispatchImmediately(imev.type, imev);
        }
      };
      /**
       * [_dispatchSpritePointEvent description]
       *
       * @todo Description
       */


      SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {
        if (this.target.disabled || this.target.isTemplate) {
          return;
        } // TODO remove this <any> later


        if (this.target.events.isEnabled(ev.type)) {
          var imev = _utils_Object__WEBPACK_IMPORTED_MODULE_5__["merge"](ev, {
            target: this.target,
            spritePoint: _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["documentPointToSprite"](ev.point, this.target),
            svgPoint: this.target.getSvgPoint(ev.point)
          });

          this.target.events.dispatchImmediately(imev.type, imev);
        }
      };
      /**
       * [_addInteractionObjectEvent description]
       *
       * @todo Description
       */


      SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context, shouldClone) {
        var _this = this;

        var counter = this._interactionEvents.insertKeyIfEmpty(type, function () {
          var disposer = _this.target.interactions.events.on(type, callback, context, shouldClone);

          return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["CounterDisposer"](function () {
            _this._interactionEvents.removeKey(type);

            disposer.dispose();
          });
        });

        return counter.increment();
      };
      /**
       * [_on description]
       *
       * @todo Description
       */


      SpriteEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {
        var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);

        var disposers = [info.disposer];
        /**
         * Catching Sprite-related events, converting them to [[SpriteEvent]] and
         * triggering them on sprite
         */

        switch (type) {
          case "hit":
          case "track":
          case "doublehit":
          case "wheel":
          case "wheelup":
          case "wheeldown":
          case "wheelleft":
          case "wheelright":
            disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this, shouldClone));
            break;

          case "rightclick":
          case "down": //case "hold":

          case "up":
          case "drag":
          case "dragged":
          case "dragstart":
          case "dragstop":
          case "over":
          case "out":
          case "swipe":
          case "swipeleft":
          case "swiperight":
          case "resize": //case "rotate":

          case "focus":
          case "blur":
          case "toggled":
            disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this, shouldClone));
            break;
        }
        /**
         * Set functional properties based on events. For example if we add a
         * "drag" event handler, we want to make the Sprite draggable, even if we
         * don't explicitly set "draggable"
         */


        switch (type) {
          case "hit":
          case "doublehit":
          case "rightclick":
          case "down":
          case "up":
            this.target.clickable = true;
            break;

          case "toggled":
            this.target.togglable = true;
            break;

          case "drag":
          case "dragstart":
          case "dragstop":
            this.target.draggable = true;
            break;

          case "track":
            this.target.trackable = true;
            break;

          case "resize":
            this.target.resizable = true;
            break;

          case "swipe":
          case "swipeleft":
          case "swiperight":
            this.target.swipeable = true;
            break;

          case "wheel":
          case "wheelup":
          case "wheeldown":
          case "wheelleft":
          case "wheelright":
            this.target.wheelable = true;
            break;

          case "over":
            this.target.hoverable = true;

          case "out":
            this.target.hoverable = true;
            break;

          case "focus":
          case "blur":
            this.target.focusable = true;
            break;
        }

        info.disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["MultiDisposer"](disposers);
        return info;
      };

      return SpriteEventDispatcher;
    }(_utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__["TargetedEventDispatcher"]); //# sourceMappingURL=SpriteEvents.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/SpriteState.js":
  /*!************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/SpriteState.js ***!
    \************************************************************************/

  /*! exports provided: SpriteState */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreSpriteStateJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SpriteState", function () {
      return SpriteState;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Module contains functionality related to [[Sprite]] states.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Defines a state for [[Sprite]].
     *
     * A "state" is a special object that has all the same properties as the
     * [[Sprite]] of the same type, and which can be used to quickly apply a set
     * of property values. (set state)
     *
     * When [[Sprite]] (or any object that extends Sprite) is created it creates a
     * "default" state. You can modify the "default" state so that when the Sprite
     * returns to default state certain properties are added.
     *
     * Default state can be accessed using Sprite's `defaultState` getter.
     *
     * ```TypeScript
     * sprite.defaultState.properties.fillOpacity = 0.5;
     * ```
     * ```JavaScript
     * sprite.defaultState.properties.fillOpacity = 0.5;
     * ```
     * ```JSON
     * {
     *   // ...
     *   "defaultState": {
     *     "properties": {
     *       "fillOpacity": 0.5
     *     }
     *   }
     * }
     * ```
     *
     * If Sprite is "hoverable", it automatically adds a "hover" state, which is
     * applied when it has a cursor over it.
     *
     * ```TypeScript
     * let hoverstate = sprite.states.create("hover");
     * hoverstate.properties.fillOpacity = 1;
     * ```
     * ```JavaScript
     * var hoverstate = sprite.states.create("hover");
     * hoverstate.properties.fillOpacity = 1;
     * ```
     * ```JSON
     * {
     *   // ...
     *   "states": {
     *     "hover": {
     *       "properties": {
     *         "fillOpacity": 0.5
     *       }
     *     }
     *   }
     * }
     * ```
     *
     * The above will automatically apply "hover" state when the Sprite is hovered,
     * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when
     * it's no longer hovered.
     *
     * Every object that inherits from [[Sprite]] can and will add their own
     * properties to the available list.
     *
     * User can create their own states, and apply them as needed:
     *
     * ```TypeScript
     * let myCustomState = sprite.states.create("mystate");
     * myCustomState.properties.fillOpacity = 0.5;
     * myCustomState.properties.strokeOpacity = 0.8;
     * sprite.setState("mystate");
     * ```
     * ```JavaScript
     * var myCustomState = sprite.states.create("mystate");
     * myCustomState.properties.fillOpacity = 0.5;
     * myCustomState.properties.strokeOpacity = 0.8;
     * sprite.setState("mystate");
     * ```
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/states/}
     * @important
     */


    var SpriteState =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SpriteState, _super);
      /**
       * Constructor
       */

      function SpriteState() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Duration of the transition to this state. 0 means instantenous transition.
         * Any number means the [[Sprite]] will transit smoothly to this state,
         * animating all animatable properties.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */


        _this.transitionDuration = 0;
        /**
         * Easing function to use when transitioning to this state.
         *
         * @default cubicOut
         * @see {@link Ease}
         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations
         */

        _this.transitionEasing = _utils_Ease__WEBPACK_IMPORTED_MODULE_8__["cubicOut"];
        /**
         * Collection of properties and their values that should be applied to [[Sprite]]
         * when switching to this State.
         *
         * The property values set on a [[SpriteState]] will override the ones set
         * directly on a [[Sprite]].
         */

        _this.properties = {};
        /**
         * A collection of key/value pairs that can be used to bind specific Sprite
         * properties to [[DataItem]].
         *
         * For example: `fill` property can be bound to `myCustomColor` field in
         * DataItem. The Sprite will automatically get the value for `fill` from its
         * DataItem.
         *
         * SpriteState-specific binding will override binding set directly on
         * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by
         * adding a `fill` binding to a different DataItem key for Sprite's "hover"
         * state object.
         *
         * @see {@link Sprite}
         */

        _this.propertyFields = {}; //public propertyFields: Dictionary<keyof this["_properties"], string> = new Dictionary<keyof this["_properties"], string>();;

        /**
         * A list of [[Filter]] elements to be applied to the relative [[Sprite]]
         * when switching to this State.
         *
         * @param {List}
         */

        _this.filters = new _utils_List__WEBPACK_IMPORTED_MODULE_4__["List"]();
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         */

        _this.isTemplate = false;
        _this.className = "SpriteState"; // Make filter list disposable

        _this._disposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_4__["ListDisposer"](_this.filters)); // Apply theme


        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(SpriteState.prototype, "adapter", {
        /**
         * Holds Adapter.
         */
        get: function get() {
          var _this = this;

          if (!this._adapterO) {
            this._adapterO = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_3__["Adapter"](this); // Decorate adapter with events so that we can apply its settings whenever
            // it is modified

            this._adapterO.events.on("inserted", function (ev) {
              _this[ev.newValue.key] = _this[ev.newValue.key];
            }, undefined, false);

            this._adapterO.events.on("removed", function (ev) {
              _this[ev.newValue.key] = _this[ev.newValue.key];
            }, undefined, false);
          }

          return this._adapterO;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns [[Sprite]] element's property value.
       *
       * Will check if there are any bindings with [[DataItem]] and if there are
       * any method callbacks set up for the specific property.
       *
       * @param propertyName  Property name
       * @return Property value
       */

      SpriteState.prototype.getPropertyValue = function (propertyName) {
        var propValue = this.properties[propertyName];
        var sprite = this.sprite;

        if (sprite) {
          var fieldName = this.propertyFields[propertyName];

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_10__["hasValue"](fieldName)) {
            if (sprite.dataItem) {
              propValue = sprite.dataItem.dataContext[fieldName];
            }

            if (propValue == undefined) {
              propValue = "__unset";
            }
          } // Apply adapters
          // If the value itself is undefined, we're going to pass in Sprite's
          // value to adapters
          // @todo get rid of <any>


          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_10__["hasValue"](propValue)) {
            var spriteValue = sprite.getPropertyValue(propertyName);

            if (this._adapterO) {
              propValue = this._adapterO.apply(propertyName, spriteValue);
            } else {
              propValue = spriteValue;
            }

            if (propValue == spriteValue) {
              propValue = undefined;
            }
          } else {
            if (this._adapterO) {
              propValue = this._adapterO.apply(propertyName, propValue);
            }
          }
          /*let method = this.propertyMethods.getKey(propertyName);
          if (method) {
              propValue = method(sprite, propertyName);
          }*/

        }

        return propValue;
      };
      /**
       * Copies all property and style values from another [[SpriteState]] object.
       *
       * @param source  Source [[SpriteState]]
       */


      SpriteState.prototype.copyFrom = function (source) {
        if (source && source != this) {
          this.transitionDuration = source.transitionDuration;
          this.transitionEasing = source.transitionEasing;

          _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["copyProperties"](source.properties, this.properties);

          _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["copyProperties"](source.propertyFields, this.propertyFields);

          this.filters.copyFrom(source.filters);

          if (source._adapterO) {
            this.adapter.copyFrom(source._adapterO);
          }
        }
      };

      Object.defineProperty(SpriteState.prototype, "allValues", {
        /**
         * Returns all values that should be applied by the SpriteState.
         *
         * It takes adapters into account.
         *
         * @ignore Exclude from docs
         * @return Properties
         * @todo Add adapter values
         * @todo proper type this["_properties"]
         */
        get: function get() {
          var _this = this; // Init return value


          var res = {}; // Apply adapters to all values

          _utils_Object__WEBPACK_IMPORTED_MODULE_9__["each"](this.properties, function (prop, value) {
            res[prop] = _this.getPropertyValue(prop);
          }); // Cycle through all adapters and add values for missing properties


          if (this._adapterO) {
            var keys = this._adapterO.keys();

            _utils_Object__WEBPACK_IMPORTED_MODULE_9__["each"](keys, function (_x, prop) {
              var value = _this.getPropertyValue(prop);

              res[prop] = value;
            });
          } // Cycle through all property fileds and add values for missing properties


          var propertyFields = this.propertyFields;

          _utils_Object__WEBPACK_IMPORTED_MODULE_9__["each"](propertyFields, function (prop) {
            var value = _this.getPropertyValue(prop);

            res[prop] = value;
          });

          return res;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Resets the State to initial state - no values or Filters applied.
       */

      SpriteState.prototype.reset = function () {
        this.properties = {};
        this.filters.clear();
      };
      /**
       * Processes JSON-based config before it is applied to the object.
       *
       * @ignore Exclude from docs
       * @param config  Config
       */


      SpriteState.prototype.processConfig = function (config) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_10__["hasValue"](config) && _utils_Type__WEBPACK_IMPORTED_MODULE_10__["hasValue"](config["properties"])) {
          _utils_Object__WEBPACK_IMPORTED_MODULE_9__["each"](config["properties"], function (key, value) {
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_10__["isString"](value)) {
              if (value.match(/^[0-9.\-]+\%$/)) {
                config["properties"][key] = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_6__["percent"])(_utils_Type__WEBPACK_IMPORTED_MODULE_10__["toNumber"](value));
              } else if (value.match(/^\#[0-9abcdef]{3,}$/i)) {
                config["properties"][key] = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["toColor"])(value);
              }
            }
          });
        }

        _super.prototype.processConfig.call(this, config);
      };
      /**
       * Adds easing functions to "function" fields.
       *
       * @param field  Field name
       * @return Assign as function?
       */


      SpriteState.prototype.asFunction = function (field) {
        return field == "transitionEasing" || _super.prototype.asIs.call(this, field);
      };

      return SpriteState;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["SpriteState"] = SpriteState; //# sourceMappingURL=SpriteState.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/System.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/System.js ***!
    \*******************************************************************/

  /*! exports provided: System, system */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreSystemJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "System", function () {
      return System;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "system", function () {
      return system;
    });
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _utils_AsyncPending__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./utils/AsyncPending */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils/Log */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Log.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * The main class that handles system-wide tasks, like caching, heartbeats, etc.
     * @important
     */


    var System =
    /** @class */
    function () {
      /**
       * Performs initialization of the System object.
       *
       * Called when the first [[Sprite]] object is created.
       *
       * @ignore Exclude from docs
       */
      function System() {
        /**
         * A flag indicating if the system is on pause.
         */
        this._isPaused = false;
        /**
         * Holds the list of currently playing animations.
         *
         * @ignore Exclude from docs
         */

        this.animations = [];
        /**
         * Unique ID of the object.
         */

        this.uid = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].getUniqueId();
        /**
         * @todo Description
         * @todo Needed?
         * @ignore Exclude from docs
         */

        this.dummyCounter = 0;
        this._frameRequested = false;
        this.updateStepDuration = 45;
        this.time = Date.now();
      }
      /**
       * Reports time elapsed since timer was reset.
       *
       * @ignore Exclude from docs
       * @todo Needed?
       * @param msg    Message to report in console
       * @param reset  Reset time counter
       */


      System.prototype.reportTime = function (msg, reset) {
        if (this.dummyCounter < 6) {//console.log(Date.now() - this.time, msg, this.dummyCounter2);
        }

        if (reset) {
          this.time = Date.now();
        }
      };
      /**
       * Performs "heartbeat" operations `frameRate` number of times per second.
       *
       * When the chart element is invalidated, it is not immediately redrawn.
       *
       * Instead it waits for the next `update()` cycle to be re-validated.
       *
       * @ignore Exclude from docs
       * @todo Maybe should be private?
       */


      System.prototype.update = function () {
        var _this = this;

        if (this._isPaused) {
          return;
        }

        this._frameRequested = false;
        var time = Date.now();

        _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].dispatchImmediately("enterframe"); //this.validateLayouts();
        //this.validatePositions();

        /*
                for (let key in registry.invalidLayouts) {
                    this.validateLayouts(key);
                }
                for (let key in registry.invalidPositions) {
                    this.validatePositions(key);
                }
        */


        var skippedComponents = []; // data objects first - do all calculations
        // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.
        // important to go backwards, as items are removed!
        // TODO use iterator instead

        for (var key in _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDatas) {
          if (_utils_Object__WEBPACK_IMPORTED_MODULE_4__["hasKey"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDatas, key)) {
            var invalidData = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDatas[key];

            while (invalidData.length > 0) {
              var component = invalidData[0];
              var dataProvider = component.dataProvider;

              if (!component.isDisposed()) {
                if (dataProvider && dataProvider.dataInvalid) {
                  try {
                    dataProvider.validateData();

                    if (dataProvider.dataValidationProgress < 1) {
                      break;
                    }
                  } catch (e) {
                    _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidData, dataProvider);

                    dataProvider.raiseCriticalError(e);
                  }
                } else {
                  try {
                    component.validateData();

                    if (component.dataValidationProgress < 1) {
                      break;
                    }
                  } catch (e) {
                    _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidData, component);

                    component.raiseCriticalError(e);
                  }
                }
              } else {
                _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidData, component);
              }
            }

            if (Date.now() - time > this.updateStepDuration) {
              break;
            }
          }
        }

        while (_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidRawDatas.length > 0) {
          var component = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidRawDatas[0];

          if (!component.isDisposed()) {
            try {
              component.validateRawData();
            } catch (e) {
              _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidRawDatas, component);

              component.raiseCriticalError(e);
            }
          } else {
            _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidRawDatas, component);
          }
        } // TODO use iterator instead


        while (_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataItems.length > 0) {
          var component = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataItems[0];
          var dataProvider = component.dataProvider; // this is needed to avoid partial value validation when data is parsed in chunks

          if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {// void
          } else {
            try {
              component.validateDataItems();
            } catch (e) {
              _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataItems, component);

              component.raiseCriticalError(e);
            }
          } // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)


          _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataItems, component);
        } // TODO use iterator instead


        while (_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataRange.length > 0) {
          var component = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataRange[0];
          var dataProvider = component.dataProvider;

          if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {// void
          } else {
            try {
              component.validateDataRange();

              if (!component.skipRangeEvent) {
                component.dispatchImmediately("datarangechanged");
              }

              component.skipRangeEvent = false;
            } catch (e) {
              _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataRange, component);

              component.raiseCriticalError(e);
            }
          } // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)


          _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDataRange, component);
        }

        var skippedSprites = []; // display objects later
        // TODO use iterator instead

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidLayouts, function (key) {
          _this.validateLayouts(key);
        });

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidPositions, function (key) {
          _this.validatePositions(key);
        });

        var hasSkipped = false;
        time = Date.now();

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidSprites, function (key, invalidSprites) {
          var count = 0;

          while (invalidSprites.length > 0) {
            _this.validateLayouts(key);

            _this.validatePositions(key);

            count++;

            if (count == 5) {
              if (Date.now() - time > _this.updateStepDuration) {
                break;
              }

              count = 0;
            }

            var sprite = invalidSprites[invalidSprites.length - 1]; // we need to check this, as validateLayout might validate sprite

            if (sprite && !sprite.isDisposed()) {
              if (!sprite._systemCheckIfValidate()) {
                // void
                skippedSprites.push(sprite);
              } else {
                if (!_this.checkIfValidate2(sprite)) {
                  // void
                  skippedSprites.push(sprite);
                } else {
                  try {
                    sprite._systemUpdate(skippedSprites);
                  } catch (e) {
                    sprite.invalid = false;

                    _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidSprites, sprite);

                    sprite.raiseCriticalError(e);
                  }
                }
              } // this might seem too much, but it's ok


              sprite.invalid = false;
            }

            _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidSprites, sprite);
          }

          _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidSprites[key] = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidSprites[key].concat(skippedSprites);
        });

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidSprites, function (key, value) {
          if (value.length > 0) {
            hasSkipped = true;
          }
        });

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDatas, function (key, value) {
          if (value.length > 0) {
            hasSkipped = true;
          }
        }); // TODO make this more efficient
        // TODO don't copy the array


        _utils_Array__WEBPACK_IMPORTED_MODULE_3__["each"](_utils_Array__WEBPACK_IMPORTED_MODULE_3__["copy"](this.animations), function (x) {
          x.update();
        }); //if(!hasSkipped){


        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidLayouts, function (key) {
          _this.validateLayouts(key);
        });

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidPositions, function (key) {
          _this.validatePositions(key);
        }); //}


        Object(_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_2__["triggerIdle"])();

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidLayouts, function (key) {
          _this.validateLayouts(key);
        });

        _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidPositions, function (key) {
          _this.validatePositions(key);
        });

        _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].dispatchImmediately("exitframe");

        if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {
          this.requestFrame();
        }

        if (this.updateStepDuration < 200) {
          var all0_1 = true;

          _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidDatas, function (key, value) {
            if (value.length > 0) {
              all0_1 = false;
            }
          });

          _utils_Object__WEBPACK_IMPORTED_MODULE_4__["each"](_Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidSprites, function (key, value) {
            if (value.length > 0) {
              all0_1 = false;
            }
          });

          if (all0_1) {
            this.updateStepDuration = 200;
          }
        }
      };

      System.prototype.checkIfValidate2 = function (sprite) {
        if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {
          return false;
        } else {
          return true;
        }
      };
      /**
       * Requests new animation frame
       */


      System.prototype.requestFrame = function () {
        var _this = this;

        if (!this._frameRequested) {
          Object(_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_2__["raf"])(function () {
            _this.update();
          });
          this._frameRequested = true;
        }
      };
      /**
       * Call this method if you update data or config of a chart that is in
       * hidden container, after revealing the container, so that labels and
       * possibly other elements can correctly arrange themselves.
       *
       * @since 4.7.10
       * @param  container  Target container
       */


      System.prototype.softInvalidate = function (container) {
        var _this = this;

        container.children.each(function (child) {
          if (child instanceof _Container__WEBPACK_IMPORTED_MODULE_1__["Container"]) {
            _this.softInvalidate(child);
          }

          if (child.measureFailed) {
            if (Object(_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(child, "Label")) {
              child.hardInvalidate();
            } else {
              child.invalidate();
            }

            child.measureFailed = false;
          }
        });
      };
      /**
       * Triggers position re-validation on all [[Sprite]] elements that have
       * invalid(ated) positions.
       *
       * @ignore Exclude from docs
       * @todo Maybe should be private?
       */


      System.prototype.validatePositions = function (id) {
        // invalid positions
        // TODO use iterator instead
        var invalidPositions = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidPositions[id];

        while (invalidPositions.length > 0) {
          var sprite = invalidPositions[invalidPositions.length - 1];

          if (!sprite.isDisposed()) {
            try {
              sprite._systemValidatePositions();
            } catch (e) {
              sprite.positionInvalid = false;

              _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidPositions, sprite);

              sprite.raiseCriticalError(e);
            }
          } else {
            _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidPositions, sprite);
          }
        }
      };
      /**
       * Triggers position re-validation on all [[Container]] elements that have
       * invalid(ated) layouts.
       *
       * @ignore Exclude from docs
       * @todo Maybe should be private?
       */


      System.prototype.validateLayouts = function (id) {
        // invalid positions
        // TODO use iterator instead
        var invalidLayouts = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].invalidLayouts[id];

        while (invalidLayouts.length > 0) {
          var container = invalidLayouts[invalidLayouts.length - 1];

          if (!container.isDisposed()) {
            try {
              container.children.each(function (sprite) {
                sprite._systemValidateLayouts();
              });
              container.validateLayout();
            } catch (e) {
              container.layoutInvalid = false;

              _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidLayouts, container);

              container.raiseCriticalError(e);
            }
          } else {
            _utils_Array__WEBPACK_IMPORTED_MODULE_3__["remove"](invalidLayouts, container);
          }
        }
      };
      /**
       * Outputs string to console if `verbose` is `true`.
       *
       * @param value Message to output to console
       */


      System.prototype.log = function (value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_5__["log"](value);
      };

      Object.defineProperty(System.prototype, "isPaused", {
        /**
         * @return Is system on pause?
         */
        get: function get() {
          return this._isPaused;
        },

        /**
         * Pauses all the processes of all the amCharts objects on the page
         *
         * @return is paused?
         */
        set: function set(value) {
          this._isPaused = value;

          if (!value) {
            this._frameRequested = false;
            this.requestFrame();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * amCharts Version.
       *
       * This follows npm's semver specification.
       *
       * @see {@link https://docs.npmjs.com/misc/semver}
       */

      System.VERSION = "4.9.12";
      return System;
    }();
    /**
     * A singleton global instance of [[System]].
     *
     * All code should use this, rather than instantiating their
     * own System objects.
     */


    var system = new System(); //# sourceMappingURL=System.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/data/CSVParser.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/data/CSVParser.js ***!
    \***************************************************************************/

  /*! exports provided: CSVParser */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDataCSVParserJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CSVParser", function () {
      return CSVParser;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _DataParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./DataParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * CSV parser.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Define possible separators.
     */


    var separators = [",", ";", "\t"];
    /**
     * A parser for CSV format.
     *
     * @important
     */

    var CSVParser =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CSVParser, _super);

      function CSVParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Content-type suitable for CSV format.
         */


        _this.contentType = "text/csv";
        /**
         * Parser options.
         *
         * @see {@link ICSVOptions} for description of each option
         */

        _this.options = {
          delimiter: "",
          reverse: false,
          skipRows: 0,
          skipEmpty: true,
          useColumnNames: false
        };
        return _this;
      }
      /**
       * Tests if the format is CSV.
       *
       * @param data  Source data
       * @return Is it CSV?
       */


      CSVParser.isCSV = function (data) {
        return CSVParser.getDelimiterFromData(data) ? true : false;
      };
      /**
       * Tries to determine a column separator.
       *
       * @param data  Source data
       * @return Separator
       */


      CSVParser.getDelimiterFromData = function (data) {
        // We're going to take first few lines of the CSV with different
        // possible separators and check if it results in same number of columns.
        // If it does, we're going to assume it's a CSV
        var lines = data.split("\n");
        var len = lines.length;
        var separator;

        _utils_Array__WEBPACK_IMPORTED_MODULE_3__["each"](separators, function (sep) {
          var columns = 0,
              lineColums = 0; // TODO replace with iterators

          for (var i = 0; i < len; ++i) {
            // Get number of columns in a line
            columns = lines[i].split(sep).length;

            if (columns > 1) {
              // More than one column - possible candidate
              if (lineColums === 0) {
                // First line
                lineColums = columns;
              } else if (columns != lineColums) {
                // Incorrect number of columns, give up on this separator
                lineColums = 0;
                break;
              }
            } else {
              // Not this separator
              // Not point in continuing
              lineColums = 0;
              break;
            }
          } // Check if we have a winner


          if (lineColums) {
            separator = sep;
          }
        });

        return separator;
      };
      /**
       * Parses and returns data.
       *
       * @param data  Unparsed data
       * @return Parsed data
       */


      CSVParser.prototype.parse = function (csv) {
        // Check if we have delimiter set
        if (!this.options.delimiter) {
          this.options.delimiter = CSVParser.getDelimiterFromData(csv);
        } // Get CSV data as array


        var data = this.CSVToArray(csv, this.options.delimiter); // Do we need to cast some fields to numbers?

        var empty = _utils_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](this.options.emptyAs);

        var numbers = this.parsableNumbers;
        var dates = this.parsableDates; // Init resuling array

        var res = [],
            cols = [],
            col,
            i; // Skip rows

        for (i = 0; i < this.options.skipRows; i++) {
          data.shift();
        } // First row holds column names?


        if (this.options.useColumnNames) {
          cols = data.shift(); // Normalize column names

          for (var x = 0; x < cols.length; x++) {
            // trim
            col = _utils_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](cols[x]) ? cols[x].replace(/^\s+|\s+$/gm, "") : ""; // Check for empty

            if ("" === col) {
              col = "col" + x;
            }

            cols[x] = col;
          }
        } // Iterate through the result set


        var row;

        while (true) {
          row = this.options.reverse ? data.pop() : data.shift();

          if (!row) {
            break;
          }

          if (this.options.skipEmpty && row.length === 1 && row[0] === "") {
            continue;
          }

          var dataPoint = {};

          for (i = 0; i < row.length; i++) {
            col = undefined === cols[i] ? "col" + i : cols[i];
            dataPoint[col] = row[i] === "" ? this.options.emptyAs : row[i]; // Convert

            if (empty) {
              dataPoint[col] = this.maybeToEmpty(dataPoint[col]);
            }

            if (numbers) {
              dataPoint[col] = this.maybeToNumber(col, dataPoint[col]);
            }

            if (dates) {
              dataPoint[col] = this.maybeToDate(col, dataPoint[col]);
            }
          }

          res.push(dataPoint);
        }

        return res;
      };
      /**
       * Converts CSV into array.
       *
       * The functionality of this function is taken from here:
       * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm
       *
       * @param data       Source data
       * @param delimiter  Column delimiter
       * @return Parsed array
       */


      CSVParser.prototype.CSVToArray = function (data, delimiter) {
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        delimiter = delimiter || ','; // Create a regular expression to parse the CSV values.

        var objPattern = new RegExp( // Delimiters.
        "(\\" + delimiter + "|\\r?\\n|\\r|^)" + // Quoted fields.
        "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + // Standard fields.
        "([^\"\\" + delimiter + "\\r\\n]*))", "gi"); // Create an array to hold our data. Give the array
        // a default empty first row.

        var arrData = [[]]; // Create an array to hold our individual pattern
        // matching groups.

        var arrMatches = null; // Keep looping over the regular expression matches
        // until we can no longer find a match.

        while (true) {
          arrMatches = objPattern.exec(data);

          if (!arrMatches) {
            break;
          } // Get the delimiter that was found.


          var strMatchedDelimiter = arrMatches[1]; // Check to see if the given delimiter has a length
          // (is not the start of string) and if it matches
          // field delimiter. If id does not, then we know
          // that this delimiter is a row delimiter.

          if (strMatchedDelimiter.length && strMatchedDelimiter !== delimiter) {
            // Since we have reached a new row of data,
            // add an empty row to our data array.
            arrData.push([]);
          } // Now that we have our delimiter out of the way,
          // let's check to see which kind of value we
          // captured (quoted or unquoted).


          var strMatchedValue = void 0;

          if (arrMatches[2]) {
            // We found a quoted value. When we capture
            // this value, unescape any double quotes.
            strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
          } else {
            // We found a non-quoted value.
            strMatchedValue = arrMatches[3];
          } // Now that we have our value string, let's add
          // it to the data array.


          arrData[arrData.length - 1].push(strMatchedValue);
        } // Return the parsed data.


        return arrData;
      };

      return CSVParser;
    }(_DataParser__WEBPACK_IMPORTED_MODULE_1__["DataParser"]); //# sourceMappingURL=CSVParser.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js ***!
    \****************************************************************************/

  /*! exports provided: DataLoader, dataLoader */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDataDataLoaderJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataLoader", function () {
      return DataLoader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dataLoader", function () {
      return dataLoader;
    });
    /* harmony import */


    var _CSVParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./CSVParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/CSVParser.js");
    /* harmony import */


    var _JSONParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./JSONParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_Net__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Net */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * Data Loader is responsible for loading and parsing external data
     */


    ;
    /**
     * Data Loader is responsible for loading and parsing external data.
     *
     * There is just one instance of DataLoader per system. Unless you have a
     * speicific reason, do not instantiate additional instances.
     *
     * The global instance of Data Loader is accessible via:
     *
     * ```TypeScript
     * am4core.dataLoader;
     * ```
     * ```JavaScript
     * am4core.dataLoader;
     * ```
     *
     * A loading of specific data source is done via [[DataSource]].
     *
         Please refer to [[DataSource]] for information how to use it.
     *
     * @see {@link IDataLoaderAdapters} for a list of available Adapters
     */

    var DataLoader =
    /** @class */
    function () {
      function DataLoader() {
        /**
         * Adapter.
         */
        this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](this);
      }
      /**
       * Loads a supplied [[DataSource]] or an array of data sources, then calls
       * their respective `parse` methods.
       *
       * @param source  A single data source or an array of multiple of data sources
       */


      DataLoader.prototype.load = function (source) {
        var sources = Array.isArray(source) ? source : [source]; // Add each Source to the list to be loaded simultaneously

        var promises = _utils_Array__WEBPACK_IMPORTED_MODULE_4__["map"](sources, function (x) {
          // Dispatch events
          x.dispatchImmediately("started");
          x.dispatchImmediately("loadstarted");
          return _utils_Net__WEBPACK_IMPORTED_MODULE_3__["load"](x.url, x, x.requestOptions);
        }); // Run all promises in parallel


        Promise.all(promises).then(function (res) {
          // Process each loaded source
          _utils_Array__WEBPACK_IMPORTED_MODULE_4__["each"](res, function (result) {
            // Get Source
            var source = result.target; // Dispatch events

            source.dispatchImmediately("loadended");

            if (result.error) {
              if (source.events.isEnabled("error")) {
                source.events.dispatchImmediately("error", {
                  type: "error",
                  code: result.xhr.status,
                  message: source.language.translate("Unable to load file: %1", null, source.url),
                  target: source
                });
              }
            } else {
              // Initiate parsing of the loaded data
              source.processData(result.response, result.type);
            }

            source.dispatchImmediately("ended");
          });
        }).catch(function (res) {
          if (res.target) {
            res.target.dispatchImmediately("loadended");

            if (res.target.events.isEnabled("error")) {
              res.target.events.dispatchImmediately("error", {
                type: "error",
                code: res.xhr.status,
                message: res.target.language.translate("Unable to load file: %1", null, res.target.url),
                target: res.target
              });
            }

            res.target.dispatchImmediately("ended");
          }
        });
      };
      /**
       * Instantiates a [[DataParser]] object based on the data type.
       * Built-in parser types are as follows:
       *
       * * "csv" or "text/csv"
       * * "json" or "application/json"
       *
       * @param contentType  A format type
       * @return A parser object
       */


      DataLoader.prototype.getParserByType = function (contentType) {
        // Let some plugin decide
        var parser = this.adapter.apply("getParserByType", {
          parser: null,
          type: contentType
        }).parser;

        if (parser) {
          return parser;
        }

        if (contentType == "csv" || contentType == "text/csv" || contentType == "application/vnd.ms-excel") {
          return new _CSVParser__WEBPACK_IMPORTED_MODULE_0__["CSVParser"]();
        }

        if (contentType == "json" || contentType == "application/json") {
          return new _JSONParser__WEBPACK_IMPORTED_MODULE_1__["JSONParser"]();
        }

        return;
      };
      /**
       * Tries to determine a parser out of content type and/or actual data.
       *
       * @param data         Data
       * @param contentType  Content-type
       * @return Parser instance
       */


      DataLoader.prototype.getParserByData = function (data, contentType) {
        // Let some plugin decide
        var parser = this.adapter.apply("getParserByData", {
          parser: null,
          data: data,
          type: contentType
        }).parser; // Check if we have parser from outside code

        if (!parser) {
          // No, let's try to figure it out
          parser = this.getParserByType(contentType);

          if (parser) {
            // We're able to figure out parser by content-type
            return parser;
          } else if (_JSONParser__WEBPACK_IMPORTED_MODULE_1__["JSONParser"].isJSON(data)) {
            return this.getParserByType("json");
          } else if (_CSVParser__WEBPACK_IMPORTED_MODULE_0__["CSVParser"].isCSV(data)) {
            return this.getParserByType("csv");
          }
        }

        return parser;
      };

      return DataLoader;
    }();
    /**
     * Create instance of Data Loader
     */


    var dataLoader = new DataLoader(); //# sourceMappingURL=DataLoader.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js ***!
    \****************************************************************************/

  /*! exports provided: DataParser */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDataDataParserJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataParser", function () {
      return DataParser;
    });
    /* harmony import */


    var _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../formatters/DateFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Data parser module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Base class for the data parsers.
     */


    var DataParser =
    /** @class */
    function () {
      function DataParser() {}
      /**
       * A "placeholder" function for real parsers to override.
       *
       * @ignore Exclude from docs
       * @param data  Source data
       * @return Parsed data (empty)
       */


      DataParser.prototype.parse = function (data) {
        return [];
      };

      ;
      Object.defineProperty(DataParser.prototype, "parsableNumbers", {
        /**
         * Checks if there are any numeric fields that need to be converted to
         * numbers.
         *
         * @return Numeric fields?
         */
        get: function get() {
          return this.options.numberFields && this.options.numberFields.length > 0;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts a value to 'number' if it is in `numberFields`.
       *
       * @param field  Field name
       * @param value  Value
       * @return Parsed or original value
       */

      DataParser.prototype.maybeToNumber = function (field, value) {
        if (this.options.numberFields.indexOf(field) !== -1) {
          return _utils_Utils__WEBPACK_IMPORTED_MODULE_1__["anyToNumber"](value);
        }

        return value;
      };

      Object.defineProperty(DataParser.prototype, "parsableDates", {
        /**
         * Checks if there are any date fields that need to be converted to `Date`
         * objects.
         *
         * @return Date fields?
         */
        get: function get() {
          return this.options.dateFields && this.options.dateFields.length > 0;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts a value to `Date` if it is in `dateFields`.
       *
       * @param field  Field name
       * @param value  Value
       * @return Parsed or original value
       */

      DataParser.prototype.maybeToDate = function (field, value) {
        if (this.options.dateFields.indexOf(field) !== -1) {
          return this.options.dateFormatter.parse(value, this.dateFormat);
        }

        return value;
      };
      /**
       * Replaces empty value with something else.
       *
       * @param value  Source value
       * @return Source value or replacement
       */


      DataParser.prototype.maybeToEmpty = function (value) {
        if ((!_utils_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](value) || value == "") && _utils_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](this.options.emptyAs)) {
          return this.options.emptyAs;
        }

        return value;
      };

      Object.defineProperty(DataParser.prototype, "dateFormatter", {
        /**
         * [[DateFormatter]] object for date parsing.
         *
         * If there was not [[DateFormatter]] supplied in parser options, a new one
         * is created.
         *
         * @return Date formatter
         * @see {@link DateFormatter}
         */
        get: function get() {
          if (!this.options.dateFormatter) {
            this.options.dateFormatter = new _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_0__["DateFormatter"]();

            if (this.options.dateFormat) {
              this.options.dateFormat = this.options.dateFormat;
            }
          }

          return this.options.dateFormatter;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataParser.prototype, "dateFormat", {
        /**
         * A date format to use when parsing dates.
         *
         * @return Date format
         * @see {@link DateFormatter}
         */
        get: function get() {
          return this.options.dateFormat || this.dateFormatter.inputDateFormat;
        },
        enumerable: true,
        configurable: true
      });
      return DataParser;
    }(); //# sourceMappingURL=DataParser.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js ***!
    \****************************************************************************/

  /*! exports provided: DataSource */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDataDataSourceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataSource", function () {
      return DataSource;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _DataLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./DataLoader */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js");
    /* harmony import */


    var _JSONParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./JSONParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js");
    /* harmony import */


    var _CSVParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./CSVParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/CSVParser.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../formatters/DateFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Represents a single data source - external file with all of its settings,
     * such as format, data parsing, etc.
     *
     * ```TypeScript
     * chart.dataSource.url = "http://www.myweb.com/data.json";
     * chart.dataSource.parser = am4core.JSONParser;
     * ```
     * ```JavaScript
     * chart.dataSource.url = "http://www.myweb.com/data.json";
     * chart.dataSource.parser = am4core.JSONParser;
     * ```
     * ```JSON
     * {
     *   // ...
     *   "dataSource": {
     *     "url": "http://www.myweb.com/data.json",
     *     "parser": "JSONParser"
     *   },
     *   // ...
     * }
     * ```
     *
     * @see {@link IDataSourceEvents} for a list of available events
     * @see {@link IDataSourceAdapters} for a list of available Adapters
     */

    var DataSource =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DataSource, _super);
      /**
       * Constructor
       */

      function DataSource(url, parser) {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Adapter.
         */


        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_5__["Adapter"](_this);
        /**
         * Custom options for HTTP(S) request.
         */

        _this._requestOptions = {};
        /**
         * If set to `true`, any subsequent data loads will be considered incremental
         * (containing only new data points that are supposed to be added to existing
         * data).
         *
         * NOTE: this setting works only with element's `data` property. It won't
         * work with any other externally-loadable data property.
         *
         * @default false
         */

        _this._incremental = false;
        /**
         * A collection of key/value pairs to attach to a data source URL when making
         * an incremental request.
         */

        _this._incrementalParams = {};
        /**
         * This setting is used only when `incremental = true`. If set to `true`,
         * it will try to retain the same number of data items across each load.
         *
         * E.g. if incremental load yeilded 5 new records, then 5 items from the
         * beginning of data will be removed so that we end up with the same number
         * of data items.
         *
         * @default false
         */

        _this._keepCount = false;
        /**
         * If set to `true`, each subsequent load will be treated as an update to
         * currently loaded data, meaning that it will try to update values on
         * existing data items, not overwrite the whole data.
         *
         * This will work faster than complete update, and also will animate the
         * values to their new positions.
         *
         * Data sources across loads must contain the same number of data items.
         *
         * Loader will not truncate the data set if loaded data has fewer data items,
         * and if it is longer, the excess data items will be ignored.
         *
         * @default false
         * @since 4.5.5
         */

        _this._updateCurrentData = false;
        /**
         * Will show loading indicator when loading files.
         */

        _this.showPreloader = true;
        _this.className = "DataSource"; // Set defaults

        if (url) {
          _this.url = url;
        } // Set parser


        if (parser) {
          if (typeof parser == "string") {
            _this.parser = _DataLoader__WEBPACK_IMPORTED_MODULE_1__["dataLoader"].getParserByType(parser);
          } else {
            _this.parser = parser;
          }
        }

        return _this;
      }
      /**
       * Processes the loaded data.
       *
       * @ignore Exclude from docs
       * @param data         Raw (unparsed) data
       * @param contentType  Content type of the loaded data (optional)
       */


      DataSource.prototype.processData = function (data, contentType) {
        // Parsing started
        this.dispatchImmediately("parsestarted"); // Check if parser is set

        if (!this.parser) {
          // Try to resolve from data
          this.parser = _DataLoader__WEBPACK_IMPORTED_MODULE_1__["dataLoader"].getParserByData(data, contentType);

          if (!this.parser) {
            // We have a problem - nobody knows what to do with the data
            // Raise error
            if (this.events.isEnabled("parseerror")) {
              var event_1 = {
                type: "parseerror",
                message: this.language.translate("No parser available for file: %1", null, this.url),
                target: this
              };
              this.events.dispatchImmediately("parseerror", event_1);
            }

            this.dispatchImmediately("parseended");
            return;
          }
        } // Apply options adapters


        this.parser.options = this.adapter.apply("parserOptions", this.parser.options);
        this.parser.options.dateFields = this.adapter.apply("dateFields", this.parser.options.dateFields || []);
        this.parser.options.numberFields = this.adapter.apply("numberFields", this.parser.options.numberFields || []); // Check if we need to pass in date formatter

        if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {
          this.parser.options.dateFormatter = this.dateFormatter;
        } // Parse


        this.data = this.adapter.apply("parsedData", this.parser.parse(this.adapter.apply("unparsedData", data))); // Check for parsing errors

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](this.data) && this.events.isEnabled("parseerror")) {
          var event_2 = {
            type: "parseerror",
            message: this.language.translate("Error parsing file: %1", null, this.url),
            target: this
          };
          this.events.dispatchImmediately("parseerror", event_2);
        } // Wrap up


        this.dispatchImmediately("parseended");

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](this.data)) {
          this.dispatchImmediately("done", {
            "data": this.data
          });
        } // The component is responsible for updating its own data vtriggered via
        // events.
        // Update last data load


        this.lastLoad = new Date();
      };

      Object.defineProperty(DataSource.prototype, "url", {
        /**
         * @return URL
         */
        get: function get() {
          // Get URL
          var url = this.disableCache ? this.timestampUrl(this._url) : this._url; // Add incremental params

          if (this.incremental && this.component.data.length) {
            url = this.addUrlParams(url, this.incrementalParams);
          }

          return this.adapter.apply("url", url);
        },

        /**
         * URL of the data source.
         *
         * @param value  URL
         */
        set: function set(value) {
          this._url = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "requestOptions", {
        /**
         * @return Options
         */
        get: function get() {
          return this.adapter.apply("requestOptions", this._requestOptions);
        },

        /**
         * Custom options for HTTP(S) request.
         *
         * At this moment the only option supported is: `requestHeaders`, which holds
         * an array of objects for custom request headers, e.g.:
         *
         * ```TypeScript
         * chart.dataSource.requestOptions.requestHeaders = [{
         *   "key": "x-access-token",
         *   "value": "123456789"
         * }];
         * ``````JavaScript
         * chart.dataSource.requestOptions.requestHeaders = [{
         *   "key": "x-access-token",
         *   "value": "123456789"
         * }];
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dataSource": {
         *     // ...
         *     "requestOptions": {
         *       "requestHeaders": [{
         *         "key": "x-access-token",
         *         "value": "123456789"
         *       }]
         *     }
         *   }
         * }
         * ```
         *
         * NOTE: setting this options on an-already loaded DataSource will not
         * trigger a reload.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._requestOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "parser", {
        /**
         * @return Data parser
         */
        get: function get() {
          if (!this._parser) {
            this._parser = new _JSONParser__WEBPACK_IMPORTED_MODULE_2__["JSONParser"]();
          }

          return this.adapter.apply("parser", this._parser);
        },

        /**
         * A parser to be used to parse data.
         *
         * ```TypeScript
         * chart.dataSource.url = "http://www.myweb.com/data.json";
         * chart.dataSource.parser = am4core.JSONParser;
         * ```
         * ```JavaScript
         * chart.dataSource.url = "http://www.myweb.com/data.json";
         * chart.dataSource.parser = am4core.JSONParser;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "dataSource": {
         *     "url": "http://www.myweb.com/data.json",
         *     "parser": "JSONParser"
         *   },
         *   // ...
         * }
         * ```
         *
         * @default JSONParser
         * @param value  Data parser
         */
        set: function set(value) {
          this._parser = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "reloadFrequency", {
        /**
         * @return Reload frequency (ms)
         */
        get: function get() {
          return this.adapter.apply("reloadTimeout", this._reloadFrequency);
        },

        /**
         * Data source reload frequency.
         *
         * If set, it will reload the same URL every X milliseconds.
         *
         * @param value Reload frequency (ms)
         */
        set: function set(value) {
          var _this = this;

          if (this._reloadFrequency != value) {
            this._reloadFrequency = value; // Should we schedule a reload?

            if (value) {
              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](this._reloadDisposer)) {
                this._reloadDisposer = this.events.on("ended", function (ev) {
                  _this._reloadTimeout = setTimeout(function () {
                    _this.load();
                  }, _this.reloadFrequency);
                });
              }
            } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](this._reloadDisposer)) {
              this._reloadDisposer.dispose();

              this._reloadDisposer = undefined;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "incremental", {
        /**
         * @return Incremental load?
         */
        get: function get() {
          return this.adapter.apply("incremental", this._incremental);
        },

        /**
         * Should subsequent reloads be treated as incremental?
         *
         * Incremental loads will assume that they contain only new data items
         * since the last load.
         *
         * If `incremental = false` the loader will replace all of the target's
         * data with each load.
         *
         * This setting does not have any effect trhe first time data is loaded.
         *
         * NOTE: this setting works only with element's `data` property. It won't
         * work with any other externally-loadable data property.
         *
         * @default false
         * @param Incremental load?
         */
        set: function set(value) {
          this._incremental = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "incrementalParams", {
        /**
         * @return Incremental request parameters
         */
        get: function get() {
          return this.adapter.apply("incrementalParams", this._incrementalParams);
        },

        /**
         * An object consisting of key/value pairs to apply to an URL when data
         * source is making an incremental request.
         *
         * @param value  Incremental request parameters
         */
        set: function set(value) {
          this._incrementalParams = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "keepCount", {
        /**
         * @return keepCount load?
         */
        get: function get() {
          return this.adapter.apply("keepCount", this._keepCount);
        },

        /**
         * This setting is used only when `incremental = true`. If set to `true`,
         * it will try to retain the same number of data items across each load.
         *
         * E.g. if incremental load yeilded 5 new records, then 5 items from the
         * beginning of data will be removed so that we end up with the same number
         * of data items.
         *
         * @default false
         * @param Keep record count?
         */
        set: function set(value) {
          this._keepCount = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "updateCurrentData", {
        /**
         * @return Update current data?
         */
        get: function get() {
          return this.adapter.apply("updateCurrentData", this._updateCurrentData);
        },

        /**
         * If set to `true`, each subsequent load will be treated as an update to
         * currently loaded data, meaning that it will try to update values on
         * existing data items, not overwrite the whole data.
         *
         * This will work faster than complete update, and also will animate the
         * values to their new positions.
         *
         * Data sources across loads must contain the same number of data items.
         *
         * Loader will not truncate the data set if loaded data has fewer data items,
         * and if it is longer, the excess data items will be ignored.
         *
         * NOTE: this setting is ignored if `incremental = true`.
         *
         * @default false
         * @since 2.5.5
         * @param Update current data?
         */
        set: function set(value) {
          this._updateCurrentData = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "language", {
        /**
         * @return A [[Language]] instance to be used
         */
        get: function get() {
          if (this._language) {
            return this._language;
          } else if (this.component) {
            this._language = this.component.language;
            return this._language;
          }

          this.language = new _utils_Language__WEBPACK_IMPORTED_MODULE_6__["Language"]();
          return this.language;
        },

        /**
         * Language instance to use.
         *
         * Will inherit and use chart's language, if not set.
         *
         * @param value An instance of Language
         */
        set: function set(value) {
          this._language = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DataSource.prototype, "dateFormatter", {
        /**
         * @return A [[DateFormatter]] instance to be used
         */
        get: function get() {
          if (this._dateFormatter) {
            return this._dateFormatter;
          } else if (this.component) {
            this._dateFormatter = this.component.dateFormatter;
            return this._dateFormatter;
          }

          this.dateFormatter = new _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_7__["DateFormatter"]();
          return this.dateFormatter;
        },

        /**
         * A [[DateFormatter]] to use when parsing dates from string formats.
         *
         * Will inherit and use chart's DateFormatter if not ser.
         *
         * @param value An instance of [[DateFormatter]]
         */
        set: function set(value) {
          this._dateFormatter = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Adds current timestamp to the URL.
       *
       * @param url  Source URL
       * @return Timestamped URL
       */

      DataSource.prototype.timestampUrl = function (url) {
        var tstamp = new Date().getTime().toString();
        var params = {};
        params[tstamp] = "";
        return this.addUrlParams(url, params);
      };
      /**
       * Disposes of this object.
       */


      DataSource.prototype.dispose = function () {
        _super.prototype.dispose.call(this);

        if (this._reloadTimeout) {
          clearTimeout(this._reloadTimeout);
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](this._reloadDisposer)) {
          this._reloadDisposer.dispose();

          this._reloadDisposer = undefined;
        }
      };
      /**
       * Initiate the load.
       *
       * All loading in JavaScript is asynchronous. This function will trigger the
       * load and will exit immediately.
       *
       * Use DataSource's events to watch for loaded data and errors.
       */


      DataSource.prototype.load = function () {
        if (this.url) {
          if (this._reloadTimeout) {
            clearTimeout(this._reloadTimeout);
          }

          _DataLoader__WEBPACK_IMPORTED_MODULE_1__["dataLoader"].load(this);
        }
      };
      /**
       * Adds parameters to `url` as query strings. Will take care of proper
       * separators.
       *
       * @param url     Source URL
       * @param params  Parameters
       * @return New URL
       */


      DataSource.prototype.addUrlParams = function (url, params) {
        var join = url.match(/\?/) ? "&" : "?";
        var add = [];

        _utils_Object__WEBPACK_IMPORTED_MODULE_10__["each"](params, function (key, value) {
          if (value != "") {
            add.push(key + "=" + encodeURIComponent(value));
          } else {
            add.push(key);
          }
        });

        if (add.length) {
          return url + join + add.join("&");
        }

        return url;
      };
      /**
       * Processes JSON-based config before it is applied to the object.
       *
       * @ignore Exclude from docs
       * @param config  Config
       */


      DataSource.prototype.processConfig = function (config) {
        _Registry__WEBPACK_IMPORTED_MODULE_8__["registry"].registeredClasses["json"] = _JSONParser__WEBPACK_IMPORTED_MODULE_2__["JSONParser"];
        _Registry__WEBPACK_IMPORTED_MODULE_8__["registry"].registeredClasses["JSONParser"] = _JSONParser__WEBPACK_IMPORTED_MODULE_2__["JSONParser"];
        _Registry__WEBPACK_IMPORTED_MODULE_8__["registry"].registeredClasses["csv"] = _CSVParser__WEBPACK_IMPORTED_MODULE_3__["CSVParser"];
        _Registry__WEBPACK_IMPORTED_MODULE_8__["registry"].registeredClasses["CSVParser"] = _CSVParser__WEBPACK_IMPORTED_MODULE_3__["CSVParser"];

        _super.prototype.processConfig.call(this, config);
      };

      return DataSource;
    }(_Base__WEBPACK_IMPORTED_MODULE_4__["BaseObjectEvents"]); //# sourceMappingURL=DataSource.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js ***!
    \****************************************************************************/

  /*! exports provided: JSONParser */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDataJSONParserJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "JSONParser", function () {
      return JSONParser;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _DataParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./DataParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * JSON parser.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * A parser for JSON.
     *
     * @important
     */


    var JSONParser =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(JSONParser, _super);

      function JSONParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Content-type suitable for JSON format.
         */


        _this.contentType = "application/json";
        /**
         * Parser options.
         *
         * @see {@link IJSONOptions} for description of each option
         */

        _this.options = {};
        return _this;
      }
      /**
       * Tests if the data is valid JSON.
       *
       * @param data  Source data
       * @return Is it JSON?
       */


      JSONParser.isJSON = function (data) {
        try {
          // Try parsing JSON
          JSON.parse(data); // If we got to this point it means it's a valid JSON

          return true;
        } catch (e) {
          return false;
        }
      };
      /**
       * Parses and returns data.
       *
       * @param data  Unparsed data
       * @return Parsed data
       */


      JSONParser.prototype.parse = function (data) {
        var _this = this; // Init return


        var res; // Try parsing

        try {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](JSON)) {
            res = JSON.parse(data);
          }
        } catch (e) {
          return undefined;
        } // Do we need to cast some fields to numbers or dates?


        var empty = _utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](this.options.emptyAs);

        var numbers = this.parsableNumbers;
        var dates = this.parsableDates;

        if (Array.isArray(res) && (numbers || dates || empty)) {
          var _loop_1 = function _loop_1(i, len) {
            var row = res[i];

            _utils_Object__WEBPACK_IMPORTED_MODULE_2__["each"](row, function (key, value) {
              if (empty) {
                row[key] = _this.maybeToEmpty(row[key]);
              }

              if (numbers) {
                row[key] = _this.maybeToNumber(key, row[key]);
              }

              if (dates) {
                row[key] = _this.maybeToDate(key, row[key]);
              }
            });
          }; // Iterate through the data and check if it needs to be converted


          for (var i = 0, len = res.length; i < len; i++) {
            _loop_1(i, len);
          }
        } // Convert to array
        //return Array.isArray(res) ? res : [res];


        return res;
      };

      return JSONParser;
    }(_DataParser__WEBPACK_IMPORTED_MODULE_1__["DataParser"]); //# sourceMappingURL=JSONParser.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/defs/SVGDefaults.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/defs/SVGDefaults.js ***!
    \*****************************************************************************/

  /*! exports provided: SVGDefaults */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreDefsSVGDefaultsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SVGDefaults", function () {
      return SVGDefaults;
    });
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /**
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Defines a class that holds default properties for new SVG elements
     */


    var SVGDefaults =
    /** @class */
    function () {
      function SVGDefaults() {}

      SVGDefaults.opacity = 1;
      SVGDefaults.strokeOpacity = 1;
      SVGDefaults.strokeWidth = 1;
      SVGDefaults.fillOpacity = 1;
      SVGDefaults.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_0__["color"])("#000000");
      SVGDefaults.stroke = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_0__["color"])("#000000");
      SVGDefaults.focusable = undefined;
      SVGDefaults.tabindex = 0;
      return SVGDefaults;
    }(); //# sourceMappingURL=SVGDefaults.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Cone.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Cone.js ***!
    \*****************************************************************************/

  /*! exports provided: Cone */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElements3dConeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Cone", function () {
      return Cone;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _elements_Ellipse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../elements/Ellipse */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js");
    /* harmony import */


    var _rendering_fills_LinearGradientModifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../rendering/fills/LinearGradientModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradientModifier.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Cone module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Builds a round cone/cylinder.
     *
     * @see {@link IConeEvents} for a list of available events
     * @see {@link IConeAdapters} for a list of available Adapters
     */


    var Cone =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Cone, _super);
      /**
       * Constructor
       */

      function Cone() {
        var _this = _super.call(this) || this;

        _this.className = "Cone";
        _this.angle = 30;
        _this.radius = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_5__["percent"])(100);
        _this.topRadius = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_5__["percent"])(100);
        _this.top = _this.createChild(_elements_Ellipse__WEBPACK_IMPORTED_MODULE_3__["Ellipse"]);
        _this.top.shouldClone = false;
        _this.bottom = _this.createChild(_elements_Ellipse__WEBPACK_IMPORTED_MODULE_3__["Ellipse"]);
        _this.bottom.shouldClone = false;
        _this.body = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);
        _this.body.shouldClone = false;

        _this.body.setElement(_this.paper.add("path"));

        _this.layout = "none";
        _this.bodyFillModifier = new _rendering_fills_LinearGradientModifier__WEBPACK_IMPORTED_MODULE_4__["LinearGradientModifier"]();
        _this.bodyFillModifier.lightnesses = [0, -0.25, 0];
        _this.body.fillModifier = _this.bodyFillModifier;

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Cone.prototype.draw = function () {
        _super.prototype.draw.call(this);

        _utils_Object__WEBPACK_IMPORTED_MODULE_6__["copyProperties"](this, this.top, _Sprite__WEBPACK_IMPORTED_MODULE_2__["visualProperties"]);

        _utils_Object__WEBPACK_IMPORTED_MODULE_6__["copyProperties"](this, this.bottom, _Sprite__WEBPACK_IMPORTED_MODULE_2__["visualProperties"]);

        _utils_Object__WEBPACK_IMPORTED_MODULE_6__["copyProperties"](this, this.body, _Sprite__WEBPACK_IMPORTED_MODULE_2__["visualProperties"]);

        var w = this.innerWidth;
        var h = this.innerHeight;
        var bottom = this.bottom;
        var top = this.top;
        var angle = this.angle;
        var radiusBase;
        var dx;
        var dy;

        if (this.orientation == "horizontal") {
          radiusBase = h / 2;
          bottom.y = h / 2;
          top.y = h / 2;
          top.x = w;
          dx = (90 - angle) / 90;
          dy = 0;
          this.bodyFillModifier.gradient.rotation = 90;
        } else {
          dx = 0;
          dy = (90 - angle) / 90;
          radiusBase = w / 2;
          bottom.y = h;
          bottom.x = w / 2;
          top.x = w / 2;
          this.bodyFillModifier.gradient.rotation = 0;
        }

        var radius = this.radius.value * radiusBase;
        var topRadius = this.topRadius.value * radiusBase;
        bottom.radius = radius - radius * dx;
        bottom.radiusY = radius - radius * dy;
        top.radius = topRadius - topRadius * dx;
        top.radiusY = topRadius - topRadius * dy;
        var path;

        if (this.orientation == "horizontal") {
          path = _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["moveTo"]({
            x: 0,
            y: h / 2 - bottom.radiusY
          }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["arcTo"](-90, -180, bottom.radius, bottom.radiusY) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["lineTo"]({
            x: w,
            y: h / 2 + top.radiusY
          }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["arcTo"](90, 180, top.radius, top.radiusY) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["closePath"]();
        } else {
          path = _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["moveTo"]({
            x: w / 2 - top.radius,
            y: 0
          }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["arcTo"](180, -180, top.radius, top.radiusY) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["lineTo"]({
            x: w / 2 + bottom.radius,
            y: h
          }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["arcTo"](0, 180, bottom.radius, bottom.radiusY) + _rendering_Path__WEBPACK_IMPORTED_MODULE_7__["closePath"]();
        }

        this.body.path = path;
      };

      Object.defineProperty(Cone.prototype, "angle", {
        /**
         * @return Angle
         */
        get: function get() {
          return this.getPropertyValue("angle");
        },

        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param value  Angle
         */
        set: function set(value) {
          this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Cone.prototype, "radius", {
        /**
         * @return Bottom radius
         */
        get: function get() {
          return this.getPropertyValue("radius");
        },

        /**
         * A relative radius of the cone's bottom (base).
         *
         * It is relevant to the inner width or height of the element.
         *
         * @default Percent(100)
         * @param value  Bottom radius
         */
        set: function set(value) {
          this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Cone.prototype, "topRadius", {
        /**
         * @return Top radius
         */
        get: function get() {
          return this.getPropertyValue("topRadius");
        },

        /**
         * A relative radius of the cone's top (tip).
         *
         * It is relevant to the inner width or height of the element.
         *
         * @default Percent(0)
         * @param value  Top radius
         */
        set: function set(value) {
          this.setPropertyValue("topRadius", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Cone.prototype, "orientation", {
        /**
         * Orientation
         */
        get: function get() {
          return this.getPropertyValue("orientation");
        },

        /**
         * Orientation of the cone
         *
         * @default "vertical"
         * @param value  Orientation
         */
        set: function set(value) {
          this.setPropertyValue("orientation", value, true);
        },
        enumerable: true,
        configurable: true
      });
      return Cone;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]); //# sourceMappingURL=Cone.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Rectangle3D.js":
  /*!************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Rectangle3D.js ***!
    \************************************************************************************/

  /*! exports provided: Rectangle3D */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElements3dRectangle3DJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Rectangle3D", function () {
      return Rectangle3D;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../rendering/fills/RadialGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js");
    /* harmony import */


    var _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../rendering/fills/LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony import */


    var _rendering_filters_LightenFilter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../../rendering/filters/LightenFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Creates a 3D rectangle.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Builds a 3D rectangle
     * @see {@link IRectangle3DEvents} for a list of available events
     * @see {@link IRectangle3DAdapters} for a list of available Adapters
     */


    var Rectangle3D =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Rectangle3D, _super);
      /**
       * Constructor
       */

      function Rectangle3D() {
        var _this = _super.call(this) || this;

        _this.angle = 30;
        _this.depth = 30;
        _this.className = "Rectangle3D";
        _this.layout = "none";

        var sideBack = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        sideBack.shouldClone = false;
        sideBack.setElement(_this.paper.add("path"));
        sideBack.isMeasured = false;
        _this.sideBack = sideBack;

        _this._disposers.push(_this.sideBack);

        var sideBottom = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        sideBottom.shouldClone = false;
        sideBottom.setElement(_this.paper.add("path"));
        sideBottom.isMeasured = false;
        _this.sideBottom = sideBottom;

        _this._disposers.push(_this.sideBottom);

        var sideLeft = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        sideLeft.shouldClone = false;
        sideLeft.setElement(_this.paper.add("path"));
        sideLeft.isMeasured = false;
        _this.sideLeft = sideLeft;

        _this._disposers.push(_this.sideLeft);

        var sideRight = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        sideRight.shouldClone = false;
        sideRight.setElement(_this.paper.add("path"));
        sideRight.isMeasured = false;
        _this.sideRight = sideRight;

        _this._disposers.push(_this.sideRight);

        var sideTop = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        sideTop.shouldClone = false;
        sideTop.setElement(_this.paper.add("path"));
        sideTop.isMeasured = false;
        _this.sideTop = sideTop;

        _this._disposers.push(_this.sideTop);

        var sideFront = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        sideFront.shouldClone = false;
        sideFront.setElement(_this.paper.add("path"));
        sideFront.isMeasured = false;
        _this.sideFront = sideFront;

        _this._disposers.push(_this.sideFront);

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Rectangle3D.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var w = this.innerWidth;
        var h = this.innerHeight;
        var depth = this.depth;
        var angle = this.angle;

        var sin = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](angle);

        var cos = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](angle);

        var a = {
          x: 0,
          y: 0
        };
        var b = {
          x: w,
          y: 0
        };
        var c = {
          x: w,
          y: h
        };
        var d = {
          x: 0,
          y: h
        };
        var ah = {
          x: depth * cos,
          y: -depth * sin
        };
        var bh = {
          x: depth * cos + w,
          y: -depth * sin
        };
        var ch = {
          x: depth * cos + w,
          y: -depth * sin + h
        };
        var dh = {
          x: depth * cos,
          y: -depth * sin + h
        };
        this.sideFront.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](a) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](b) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](c) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](d) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
        this.sideBack.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](ah) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](bh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ch) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](dh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
        this.sideLeft.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](a) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ah) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](dh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](d) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
        this.sideRight.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](b) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](bh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ch) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](c) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
        this.sideBottom.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](d) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](dh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ch) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](c) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
        this.sideTop.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](a) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ah) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](bh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](b) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
      };

      Object.defineProperty(Rectangle3D.prototype, "depth", {
        /**
         * @return Depth (px)
         */
        get: function get() {
          return this.getPropertyValue("depth");
        },

        /**
         * Depth (Z dimension) of the 3D rectangle in pixels.
         *
         * @default 30
         * @param value  Depth (px)
         */
        set: function set(value) {
          this.setPropertyValue("depth", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Rectangle3D.prototype, "angle", {
        /**
         * @return Angle
         */
        get: function get() {
          return this.getPropertyValue("angle");
        },

        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param value  Angle
         */
        set: function set(value) {
          this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets actual `fill` property on the SVG element, including applicable color
       * modifiers.
       *
       * @ignore Exclude from docs
       * @param value  Fill
       */

      Rectangle3D.prototype.setFill = function (value) {
        _super.prototype.setFill.call(this, value);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_9__["isString"](value)) {
          value = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["toColor"])(value);
        }

        var colorStr;

        if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_5__["Color"]) {
          colorStr = value.hex;
        } else if (value instanceof _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_7__["LinearGradient"] || value instanceof _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_6__["RadialGradient"]) {
          colorStr = value.stops.getIndex(0).color.hex;
        } else {
          var filter = new _rendering_filters_LightenFilter__WEBPACK_IMPORTED_MODULE_8__["LightenFilter"]();
          filter.lightness = -0.2;
          this.sideBack.filters.push(filter);
          var filter2 = filter.clone();
          filter2.lightness = -0.4;
          this.sideLeft.filters.push(filter2);
          var filter3 = filter.clone();
          filter3.lightness = -0.2;
          this.sideRight.filters.push(filter3);
          var filter4 = filter.clone();
          filter4.lightness = -0.1;
          this.sideTop.filters.push(filter4);
          var filter5 = filter.clone();
          filter5.lightness = -0.5;
          this.sideBottom.filters.push(filter5);
        }

        if (colorStr) {
          this.sideBack.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["color"])(colorStr).lighten(-0.2);
          this.sideLeft.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["color"])(colorStr).lighten(-0.4);
          this.sideRight.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["color"])(colorStr).lighten(-0.2);
          this.sideTop.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["color"])(colorStr).lighten(-0.1);
          this.sideBottom.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_5__["color"])(colorStr).lighten(-0.5);
        }
      };
      /**
       * Copies all properties and related data from a different instance of Rectangle3D.
       *
       * @param source Source Rectangle3D
       */


      Rectangle3D.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.sideBack.copyFrom(source.sideBack);
        this.sideLeft.copyFrom(source.sideLeft);
        this.sideRight.copyFrom(source.sideRight);
        this.sideTop.copyFrom(source.sideTop);
        this.sideBottom.copyFrom(source.sideBottom);
      };

      return Rectangle3D;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]); //# sourceMappingURL=Rectangle3D.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Slice3D.js":
  /*!********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Slice3D.js ***!
    \********************************************************************************/

  /*! exports provided: Slice3D */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElements3dSlice3DJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Slice3D", function () {
      return Slice3D;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Slice */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../rendering/fills/RadialGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js");
    /* harmony import */


    var _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../../rendering/fills/LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony import */


    var _rendering_filters_LightenFilter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../../rendering/filters/LightenFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js");
    /**
     * 3D slice module
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Used to draw a 3D slice of a Pie chart.
     *
     * @see {@link ISlice3DEvents} for a list of available events
     * @see {@link ISlice3DAdapters} for a list of available Adapters
     */


    var Slice3D =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Slice3D, _super);
      /**
       * Constructor
       */

      function Slice3D() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "Slice3D";
        _this.layout = "none"; // Create edge container

        var edge = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        _this.edge = edge;
        edge.shouldClone = false;
        edge.isMeasured = false;
        edge.toBack(); // Set defaults

        _this.angle = 30;
        _this.depth = 20; // Create side A element

        var sideA = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        _this.sideA = sideA;
        sideA.shouldClone = false;
        sideA.isMeasured = false; //sideA.setElement(this.paper.add("path"));
        //sideA.strokeOpacity = 0;
        // Crate side B element

        var sideB = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);

        _this.sideB = sideB;
        sideB.shouldClone = false;
        sideB.isMeasured = false; //sideB.setElement(this.paper.add("path"));
        //sideB.strokeOpacity = 0;
        // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * Sets actual `fill` property on the SVG element, including applicable color
       * modifiers.
       *
       * @ignore Exclude from docs
       * @param value  Fill
       */


      Slice3D.prototype.setFill = function (value) {
        _super.prototype.setFill.call(this, value);

        var colorStr;

        if (value instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_6__["Color"]) {
          colorStr = value.hex;
        } else if (value instanceof _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_8__["LinearGradient"] || value instanceof _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_7__["RadialGradient"]) {
          colorStr = value.stops.getIndex(0).color.hex;
        } else {
          var filter = new _rendering_filters_LightenFilter__WEBPACK_IMPORTED_MODULE_9__["LightenFilter"]();
          filter.lightness = -0.25;
          this.edge.filters.push(filter);
          this.sideA.filters.push(filter.clone());
          this.sideB.filters.push(filter.clone());
        }

        if (colorStr) {
          var edgeFill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_6__["color"])(colorStr).lighten(-0.25);
          this.edge.fill = edgeFill;
          this.sideA.fill = edgeFill;
          this.sideB.fill = edgeFill;
          this.edge.stroke = edgeFill;
          this.sideA.stroke = edgeFill;
          this.sideB.stroke = edgeFill;
        }
      };
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Slice3D.prototype.draw = function () {
        this.cornerRadius = 0;
        this.innerCornerRadius = 0;

        _super.prototype.draw.call(this);

        if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {
          this.sideB.show(0);
          this.sideA.show(0);
          this.edge.show(0);
          var startAngle = this.startAngle;
          var arc = this.arc;
          var innerRadius = this.pixelInnerRadius || 0;
          var radiusY = this.radiusY || 0; //let cornerRadius = this.cornerRadius || 0;
          //let innerCornerRadius = this.innerCornerRadius;

          var radius = this.radius; // this is code duplicate with $path.arc. @todo to think how to avoid it

          var endAngle = startAngle + arc; //let crSin = $math.sin($math.min(arc, 45) / 2);
          //innerCornerRadius = innerCornerRadius || cornerRadius;

          var innerRadiusY = radiusY / radius * innerRadius; //let cornerRadiusY = (radiusY / radius) * cornerRadius;
          //let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;
          //cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);
          //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
          //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);
          //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
          //cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);
          //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);
          //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);
          //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);
          //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;
          //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;
          //if (innerRadius < innerCornerRadius) {
          //	innerRadius = innerCornerRadius;
          //}
          //if (innerRadiusY < innerCornerRadiusY) {
          //	innerRadiusY = innerCornerRadiusY;
          //}
          //let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;
          //let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;
          //if (!$type.isNumber(crInnerAngle)) {
          //	crInnerAngle = 0;
          //}
          //if (!$type.isNumber(crInnerAngleY)) {
          //	crInnerAngleY = 0;
          //}
          //let middleAngle = startAngle + arc / 2;
          //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };

          var a0 = {
            x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](startAngle) * innerRadius,
            y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](startAngle) * innerRadiusY
          };
          var b0 = {
            x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](startAngle) * radius,
            y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](startAngle) * radiusY
          };
          var c0 = {
            x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](endAngle) * radius,
            y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](endAngle) * radiusY
          };
          var d0 = {
            x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](endAngle) * innerRadius,
            y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](endAngle) * innerRadiusY
          }; // end of duplicate

          var h = this.depth;
          var ah = {
            x: a0.x,
            y: a0.y - h
          };
          var bh = {
            x: b0.x,
            y: b0.y - h
          };
          var ch = {
            x: c0.x,
            y: c0.y - h
          };
          var dh = {
            x: d0.x,
            y: d0.y - h
          };
          var edgePath = "";
          var count = Math.ceil(arc / 5);
          var step = arc / count;
          var mangle = startAngle;
          var prevPoint = bh;

          for (var i = 0; i < count; i++) {
            mangle += step;

            if (mangle > 0 && mangle < 180) {
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](prevPoint);
              var pp = {
                x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](mangle) * radius,
                y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](mangle) * radiusY - h
              };
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"]({
                x: prevPoint.x,
                y: prevPoint.y + h
              });
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"]({
                x: pp.x,
                y: pp.y + h
              }, radius, radiusY, true);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](pp);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"](prevPoint, radius, radiusY);
              edgePath += "z";
              prevPoint = pp;
            } else {
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](prevPoint);
              var pp = {
                x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](mangle) * radius,
                y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](mangle) * radiusY - h
              };
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"](pp, radius, radiusY, true);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"]({
                x: pp.x,
                y: pp.y + h
              });
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"]({
                x: prevPoint.x,
                y: prevPoint.y + h
              }, radius, radiusY);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](prevPoint);
              edgePath += "z";
              prevPoint = pp;
            }
          }

          prevPoint = ah;
          mangle = startAngle;

          for (var i = 0; i < count; i++) {
            mangle += step;

            if (mangle > 0 && mangle < 180) {
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](prevPoint);
              var pp = {
                x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](mangle) * innerRadius,
                y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](mangle) * innerRadiusY - h
              };
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"]({
                x: prevPoint.x,
                y: prevPoint.y + h
              });
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"]({
                x: pp.x,
                y: pp.y + h
              }, innerRadius, innerRadiusY, true);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](pp);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"](prevPoint, innerRadius, innerRadiusY);
              edgePath += "z";
              prevPoint = pp;
            } else {
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](prevPoint);
              var pp = {
                x: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](mangle) * innerRadius,
                y: _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](mangle) * innerRadiusY - h
              };
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"](pp, innerRadius, innerRadiusY, true);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"]({
                x: pp.x,
                y: pp.y + h
              });
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["arcToPoint"]({
                x: prevPoint.x,
                y: prevPoint.y + h
              }, innerRadius, innerRadiusY);
              edgePath += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](prevPoint);
              edgePath += "z";
              prevPoint = pp;
            }
          }

          this.edge.path = edgePath;
          /*
                      a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };
                      b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };
                      c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };
                      d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };
                      // end of duplicate
          
                      ah = { x: a0.x, y: a0.y - h };
                      bh = { x: b0.x, y: b0.y - h };
                      ch = { x: c0.x, y: c0.y - h };
                      dh = { x: d0.x, y: d0.y - h };
          */

          this.sideA.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](a0) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](b0) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](bh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ah) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
          this.sideB.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](c0) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](d0) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](dh) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](ch) + _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();

          if (this.startAngle < 90) {
            this.sideA.toBack();
          } else {
            this.sideA.toFront();
          }

          if (this.startAngle + this.arc > 90) {
            this.sideB.toBack();
          } else {
            this.sideB.toFront();
          }

          this.slice.dy = -h;
        } else {
          this.sideA.hide(0);
          this.sideB.hide(0);
          this.edge.hide(0);
        }
      };

      Object.defineProperty(Slice3D.prototype, "depth", {
        /**
         * @return Depth (px)
         */
        get: function get() {
          return this.getPropertyValue("depth");
        },

        /**
         * Depth (height) of the 3D slice in pixels.
         *
         * @default 20
         * @param depth  Depth (px)
         */
        set: function set(depth) {
          this.setPropertyValue("depth", depth, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice3D.prototype, "angle", {
        /**
         * @return Angle
         */
        get: function get() {
          var angle = this.getPropertyValue("angle");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](angle)) {
            angle = 0;
          }

          return angle;
        },

        /**
         * Angle of the point of view to the 3D element. (0-360)
         *
         * @default 30
         * @param value  Angle
         */
        set: function set(value) {
          this.setPropertyValue("angle", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice3D.prototype, "radiusY", {
        /**
         * @return Vertical radius (0-1)
         */
        get: function get() {
          var radiusY = this.getPropertyValue("radiusY");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](radiusY)) {
            radiusY = this.radius - this.radius * this.angle / 90;
          }

          return radiusY;
        },

        /**
         * Vertical radius for creating skewed slices.
         *
         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half
         * the `radius`.
         *
         * @param value Vertical radius (0-1)
         */
        set: function set(value) {
          this.setPropertyValue("radiusY", value, true);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all properties and related data from a different instance of Axis.
       *
       * @param source Source Axis
       */

      Slice3D.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.edge.copyFrom(source.edge);
        this.sideA.copyFrom(source.sideA);
        this.sideB.copyFrom(source.sideB);
      };

      return Slice3D;
    }(_Slice__WEBPACK_IMPORTED_MODULE_1__["Slice"]); //# sourceMappingURL=Slice3D.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/AmChartsLogo.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/AmChartsLogo.js ***!
    \**********************************************************************************/

  /*! exports provided: AmChartsLogo */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsAmChartsLogoJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AmChartsLogo", function () {
      return AmChartsLogo;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _Polyspline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Polyspline */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/fills/LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony import */


    var _rendering_filters_DesaturateFilter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../rendering/filters/DesaturateFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DesaturateFilter.js");
    /**
     * AmChartsLogo module.
     *
     * AmChartsLogo shows amCharts logo for non-commercial users of a library.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * A class used to draw and display progress indicator.
     *
     * @see {@link IAmChartsLogoEvents} for a list of available events
     * @see {@link IAmChartsLogoAdapters} for a list of available Adapters
     * @ignore Exclude from docs
     */


    var AmChartsLogo =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AmChartsLogo, _super);
      /**
       * Constructor
       */

      function AmChartsLogo() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "AmChartsLogo";
        _this.valign = "bottom";
        var d = 0.3;
        _this.opacity = 0.3;
        _this.defaultState.properties.opacity = 0.4;
        _this.url = "https://www.amcharts.com/";
        _this.urlTarget = "_blank";
        _this.showSystemTooltip = true;
        _this.readerTitle = "Chart created using amCharts library";
        _this.width = 220 * d;
        _this.height = 70 * d;
        _this.background.opacity = 0;
        var aColor = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_4__["color"])("#474758");

        if (new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_2__["InterfaceColorSet"]().getFor("background").alternative.hex == "#ffffff") {
          aColor = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_4__["color"])("#ffffff");
        }

        var aGradient = new _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_5__["LinearGradient"]();
        aGradient.addColor(aColor);
        aGradient.addColor(aColor, 1, 0.75);
        aGradient.addColor(Object(_utils_Color__WEBPACK_IMPORTED_MODULE_4__["color"])("#3cabff"), 1, 0.755);
        aGradient.rotation = -10;
        var aStroke = aGradient;

        var m = _this.createChild(_Polyspline__WEBPACK_IMPORTED_MODULE_3__["Polyspline"]);

        m.shouldClone = false;
        m.isMeasured = false;
        m.segments = [[{
          x: 50 * d,
          y: 50 * d
        }, {
          x: 90 * d,
          y: 50 * d
        }, {
          x: 120 * d,
          y: 20 * d
        }, {
          x: 135 * d,
          y: 35 * d
        }, {
          x: 150 * d,
          y: 20 * d
        }, {
          x: 180 * d,
          y: 50 * d
        }, {
          x: 200 * d,
          y: 50 * d
        }]];
        m.strokeWidth = 6 * d;
        m.tensionX = 0.8;
        m.tensionY = 1;
        m.stroke = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_4__["color"])("#3cabff");

        var a = _this.createChild(_Polyspline__WEBPACK_IMPORTED_MODULE_3__["Polyspline"]);

        a.shouldClone = false;
        a.isMeasured = false;
        a.segments = [[{
          x: 20 * d,
          y: 50 * d
        }, {
          x: 50 * d,
          y: 50 * d
        }, {
          x: 90 * d,
          y: 12 * d
        }, {
          x: 133 * d,
          y: 50 * d
        }, {
          x: 170 * d,
          y: 50 * d
        }, {
          x: 200 * d,
          y: 50 * d
        }]];
        a.strokeWidth = 6 * d;
        a.tensionX = 0.75;
        a.tensionY = 1;
        a.stroke = aStroke;

        _this._disposers.push(a);

        var desaturateFilter = new _rendering_filters_DesaturateFilter__WEBPACK_IMPORTED_MODULE_6__["DesaturateFilter"]();

        _this.filters.push(desaturateFilter);

        var desaturateFilterHover = new _rendering_filters_DesaturateFilter__WEBPACK_IMPORTED_MODULE_6__["DesaturateFilter"]();
        desaturateFilterHover.saturation = 1;

        var hoverState = _this.states.create("hover");

        hoverState.properties.opacity = 1;
        hoverState.filters.push(desaturateFilterHover); // Apply theme

        _this.applyTheme();

        return _this;
      }

      return AmChartsLogo;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]); //# sourceMappingURL=AmChartsLogo.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js ***!
    \****************************************************************************/

  /*! exports provided: Button */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsButtonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Button", function () {
      return Button;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Label__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Label */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js");
    /* harmony import */


    var _elements_RoundedRectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../elements/RoundedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Functionality for drawing simple buttons.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Button class is capable of drawing a simple rectangular button with
     * optionally rounded corners and an icon in it.
     *
     * @see {@link IButtonEvents} for a list of available events
     * @see {@link IButtonAdapters} for a list of available Adapters
     */


    var Button =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Button, _super);
      /**
       * Constructor
       */

      function Button() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "Button";
        _this.tooltipY = 0; // Set defaults

        _this.iconPosition = "left";
        _this.layout = "horizontal";
        _this.contentAlign = "center";
        _this.contentValign = "middle";

        _this.padding(8, 16, 8, 16);

        _this.setStateOnChildren = true;
        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__["InterfaceColorSet"](); // Create background

        var background = _this.background;
        background.fill = interfaceColors.getFor("secondaryButton");
        background.stroke = interfaceColors.getFor("secondaryButtonStroke");
        background.fillOpacity = 1;
        background.strokeOpacity = 1;
        background.cornerRadius(3, 3, 3, 3); // Create the label element

        _this.label = new _Label__WEBPACK_IMPORTED_MODULE_2__["Label"]();
        _this.label.fill = interfaceColors.getFor("secondaryButtonText");
        ;
        _this.label.shouldClone = false; // Create default states

        var hoverState = background.states.create("hover");
        hoverState.properties.fillOpacity = 1;
        hoverState.properties.fill = interfaceColors.getFor("secondaryButtonHover");
        var downState = background.states.create("down");
        downState.transitionDuration = 100;
        downState.properties.fill = interfaceColors.getFor("secondaryButtonDown");
        downState.properties.fillOpacity = 1; // Set up accessibility
        // A button should be always focusable

        _this.role = "button";
        _this.focusable = true; // Apply theme

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(Button.prototype, "icon", {
        /**
         * @return Icon Sprite
         */
        get: function get() {
          return this._icon;
        },

        /**
         * A [[Sprite]] to be used as an icon on button.
         *
         * @param icon Icon Sprite
         */
        set: function set(icon) {
          var currentIcon = this._icon;

          if (currentIcon) {
            //this._icon.dispose();
            //this.removeDispose(currentIcon);
            currentIcon.parent = undefined;
          }

          if (icon) {
            this._icon = icon;
            icon.parent = this;
            icon.interactionsEnabled = false;
            icon.shouldClone = false;
            this.iconPosition = this.iconPosition;

            this._disposers.push(icon);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Button.prototype, "iconPosition", {
        /**
         * @return Icon position
         */
        get: function get() {
          return this.getPropertyValue("iconPosition");
        },

        /**
         * Icon position: "left" or "right".
         *
         * @default "left"
         * @param position  Icon position
         */
        set: function set(position) {
          this.setPropertyValue("iconPosition", position);

          if (this.icon) {
            if (position == "left") {
              this.icon.toBack();
            } else {
              this.icon.toFront();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Button.prototype, "label", {
        /**
         * @return Label element
         */
        get: function get() {
          return this._label;
        },

        /**
         * [[Label]] element to be used for text.
         *
         * @param label element
         */
        set: function set(label) {
          if (this._label) {
            //this._label.dispose();
            this.removeDispose(this._label);
          }

          this._label = label;

          if (label) {
            label.parent = this;
            label.interactionsEnabled = false;

            this._disposers.push(this._label);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates a background element for the button.
       *
       * @ignore Exclude from docs
       * @return Background element
       */

      Button.prototype.createBackground = function () {
        return new _elements_RoundedRectangle__WEBPACK_IMPORTED_MODULE_3__["RoundedRectangle"]();
      };
      /**
       * Copies properties and other attributes.
       *
       * @param source  Source
       */


      Button.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        if (source.label) {
          this.label.copyFrom(source.label);
        }

        if (source.icon) {
          this.icon = source.icon.clone();
        }
      };

      return Button;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_5__["registry"].registeredClasses["Button"] = Button; //# sourceMappingURL=Button.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js ***!
    \****************************************************************************/

  /*! exports provided: Circle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsCircleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Circle", function () {
      return Circle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Functionality for drawing circles.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Used to create a circle
     * @see {@link ICircleEvents} for a list of available events
     * @see {@link ICircleAdapters} for a list of available Adapters
     */


    var Circle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Circle, _super);
      /**
       * Constructor
       */

      function Circle() {
        var _this = _super.call(this) || this;

        _this.className = "Circle";
        _this.element = _this.paper.add("circle");

        _this.setPercentProperty("radius", Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_2__["percent"])(100));

        _this.setPropertyValue("horizontalCenter", "middle");

        _this.setPropertyValue("verticalCenter", "middle");

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the circle.
       */


      Circle.prototype.draw = function () {
        _super.prototype.draw.call(this);

        this.element.attr({
          "r": this.pixelRadius
        });
      };

      Object.defineProperty(Circle.prototype, "radius", {
        /**
         * @return Radius
         */
        get: function get() {
          return this.getPropertyValue("radius");
        },

        /**
         * Radius of the circle.
         *
         * Can be either absolute (pixels) or relative ([Percent]).
         *
         * @param value  Radius
         */
        set: function set(value) {
          this.setPercentProperty("radius", value, true, false, 10, false);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Circle.prototype, "pixelRadius", {
        /**
         * Radius of the circle in pixels.
         *
         * This is a read-only property. To set radius in pixels, use `radius`
         * property.
         *
         * @readonly
         * @return Radius (px)
         */
        get: function get() {
          return _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["relativeToValue"](this.radius, _utils_Math__WEBPACK_IMPORTED_MODULE_5__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Updates bounding box.
       *
       * @ignore Exclude from docs
       */

      Circle.prototype.measureElement = function () {
        var pixelRadius = this.pixelRadius;
        this._bbox = {
          x: -pixelRadius,
          y: -pixelRadius,
          width: pixelRadius * 2,
          height: pixelRadius * 2
        };
      };

      return Circle;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["Circle"] = Circle; //# sourceMappingURL=Circle.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/CloseButton.js":
  /*!*********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/CloseButton.js ***!
    \*********************************************************************************/

  /*! exports provided: CloseButton */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsCloseButtonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CloseButton", function () {
      return CloseButton;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _core_utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../core/utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _core_interaction_Mouse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../core/interaction/Mouse */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js");
    /**
     * Zoom out button functionality.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a zoom out button.
     *
     * @see {@link ICloseButtonEvents} for a list of available events
     * @see {@link ICloseButtonAdapters} for a list of available Adapters
     */


    var CloseButton =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CloseButton, _super);
      /**
       * Constructor
       */

      function CloseButton() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "CloseButton";

        _this.padding(8, 8, 8, 8);

        _this.showSystemTooltip = true;
        _this.width = 30;
        _this.height = 30;
        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__["InterfaceColorSet"]();
        _this.cursorOverStyle = _core_interaction_Mouse__WEBPACK_IMPORTED_MODULE_7__["MouseCursorStyle"].pointer;
        var background = _this.background;
        background.cornerRadius(20, 20, 20, 20);
        var bgc = interfaceColors.getFor("background");
        background.fill = bgc;
        background.stroke = interfaceColors.getFor("primaryButton");
        background.strokeOpacity = 1;
        background.strokeWidth = 1;
        var downColor = interfaceColors.getFor("primaryButtonActive");
        var bhs = background.states.getKey("hover");
        bhs.properties.strokeWidth = 3;
        bhs.properties.fill = bgc;
        var bds = background.states.getKey("down");
        bds.properties.stroke = downColor;
        bds.properties.fill = bgc; // Create an icon

        var icon = new _Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]();
        icon.element = _this.paper.add("path");
        icon.stroke = background.stroke;
        _this.icon = icon; // Apply theme

        _this.applyTheme();

        return _this;
      }

      CloseButton.prototype.validate = function () {
        _super.prototype.validate.call(this);

        var w = this.pixelWidth / 3;
        var h = this.pixelHeight / 3;

        var path = _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["moveTo"]({
          x: -w / 2,
          y: -h / 2
        });

        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["lineTo"]({
          x: w / 2,
          y: h / 2
        });
        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["moveTo"]({
          x: w / 2,
          y: -h / 2
        });
        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["lineTo"]({
          x: -w / 2,
          y: h / 2
        });
        this.icon.path = path;
        this.invalidateLayout();
      };
      /**
       * Sets defaults that instantiate some objects that rely on parent, so they
       * cannot be set in constructor.
       */


      CloseButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);

        if (!_core_utils_Type__WEBPACK_IMPORTED_MODULE_6__["hasValue"](this.readerTitle)) {
          this.readerTitle = this.language.translate("Close");
        }
      };

      return CloseButton;
    }(_Button__WEBPACK_IMPORTED_MODULE_1__["Button"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["CloseButton"] = CloseButton; //# sourceMappingURL=CloseButton.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js ***!
    \*****************************************************************************/

  /*! exports provided: Ellipse */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsEllipseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Ellipse", function () {
      return Ellipse;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Circle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Circle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Ellipse module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws an ellipse
     * @see {@link IEllipseEvents} for a list of available events
     * @see {@link IEllipseAdapters} for a list of available Adapters
     */


    var Ellipse =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Ellipse, _super);
      /**
       * Constructor
       */

      function Ellipse() {
        var _this = _super.call(this) || this;

        _this.className = "Ellipse";
        _this.element = _this.paper.add("ellipse");

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the ellipsis.
       */


      Ellipse.prototype.draw = function () {
        _super.prototype.draw.call(this);

        this.element.attr({
          "rx": this.radius
        });
        this.element.attr({
          "ry": this.radiusY
        });
      };

      Object.defineProperty(Ellipse.prototype, "radiusY", {
        /**
         * @return Vertical radius
         */
        get: function get() {
          return this.innerHeight / 2;
        },

        /**
         * Vertical radius.
         *
         * It's a relative size to the `radius`.
         *
         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's
         * horizontal radius.
         *
         * @param value  Vertical radius
         */
        set: function set(value) {
          this.height = value * 2;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Ellipse.prototype, "radius", {
        /**
         * @return Horizontal radius
         */
        get: function get() {
          return this.innerWidth / 2;
        },

        /**
         * Horizontal radius.
         *
         * @param value  Horizontal radius
         */
        set: function set(value) {
          this.width = value * 2;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      return Ellipse;
    }(_Circle__WEBPACK_IMPORTED_MODULE_1__["Circle"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Ellipse"] = Ellipse; //# sourceMappingURL=Ellipse.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Image.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Image.js ***!
    \***************************************************************************/

  /*! exports provided: Image */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsImageJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Image", function () {
      return Image;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Functionality for adding images in SVG tree.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Used to add `<image>` elements to SVG.
     *
     * @see {@link IImageEvents} for a list of available events
     * @see {@link IImageAdapters} for a list of available Adapters
     */


    var Image =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Image, _super);
      /**
       * Constructor
       */

      function Image() {
        var _this = _super.call(this) || this;

        _this.className = "Image";
        _this.element = _this.paper.add("image");

        _this.applyTheme();

        _this.width = 50;
        _this.height = 50;
        return _this;
      }
      /**
       * Draws an `<image>` element.
       *
       * @ignore Exclude from docs
       */


      Image.prototype.draw = function () {
        _super.prototype.draw.call(this);

        if (this.href) {
          var width = this.innerWidth;
          var height = this.innerHeight;

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](this.widthRatio)) {
            width = height * this.widthRatio;
            this.width = width;
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](this.heightRatio)) {
            height = width * this.heightRatio;
            this.height = height;
          }

          this.element.attr({
            "width": width,
            "height": height
          });
          this.element.attrNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_3__["XLINK"], "xlink:href", this.href);
        }
      };

      Object.defineProperty(Image.prototype, "href", {
        /**
         * @return Image URI
         */
        get: function get() {
          return this.getPropertyValue("href");
        },

        /**
         * An image URI.
         *
         * @param value  Image URI
         */
        set: function set(value) {
          this.setPropertyValue("href", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Image.prototype, "widthRatio", {
        /**
         * @return Ratio
         */
        get: function get() {
          return this.getPropertyValue("widthRatio");
        },

        /**
         * Sets image `width` relatively to its `height`.
         *
         * If image's `height = 100` and `widthRatio = 0.5` the actual width will be
         * `50`.
         *
         * @param value  Ratio
         */
        set: function set(value) {
          this.setPropertyValue("widthRatio", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Image.prototype, "heightRatio", {
        /**
         * @return Ratio
         */
        get: function get() {
          return this.getPropertyValue("heightRatio");
        },

        /**
         * Sets image `height` relatively to its `width`.
         *
         * If image's `width = 100` and `heightRatio = 0.5` the actual height will be
         * `50`.
         *
         * @param value  Ratio
         */
        set: function set(value) {
          this.setPropertyValue("heightRatio", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Image.prototype, "bbox", {
        /**
         * Returns bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         */
        get: function get() {
          return {
            x: 0,
            y: 0,
            width: this.pixelWidth,
            height: this.pixelHeight
          };
        },
        enumerable: true,
        configurable: true
      });
      return Image;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Image"] = Image; //# sourceMappingURL=Image.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js ***!
    \***************************************************************************/

  /*! exports provided: Label */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsLabelJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Label", function () {
      return Label;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../formatters/TextFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Responsive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Responsive */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Responsive.js");
    /**
     * Text class deals with all text placed on chart.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Text is used to display highly configurable, data-enabled textual elements.
     *
     * ## Data Binding
     *
     * A Text element can dynamically parse and populate its contents with values
     * from a [[DataItem]].
     *
     * To activate such binding, set element's `dataItem` property.
     *
     * When activated, text contents will be parsed for special tags, e.g.:
     *
     * ```TypeScript
     * label.dataItem = myDataItem;
     * label.text = "The title is: {title}";
     * ```
     * ```JavaScript
     * label.dataItem = myDataItem;
     * label.text = "The title is: {title}";
     * ```
     *
     * The above will automatically replace "{title}" in the string with the
     * actual data value from `myDataItem`.
     *
     * Note, that most often dataItem is set by the Component.
     *
     *
     * @see {@link ILabelEvents} for a list of available events
     * @see {@link ILabelAdapters} for a list of available Adapters
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/} for info on string formatting and data binding
     * @todo Vertical align
     * @important
     */

    var Label =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Label, _super);
      /**
       * Constructor
       */

      function Label() {
        var _this = // Execute super's constructor
        _super.call(this) || this;
        /**
         * Indicates if the whole text does not fit into max dimenstions set for it.
         */


        _this.isOversized = false; // Set this class name

        _this.className = "Label";
        _this.fill = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_5__["InterfaceColorSet"]().getFor("text"); // not good to set this, as then these will appear on each label and values set on container won't be applied.
        //this.textDecoration = "none";
        //this.fontWeight = "normal";
        // Set defaults

        _this.wrap = false;
        _this.truncate = false;
        _this.fullWords = true;
        _this.ellipsis = "…";
        _this.textAlign = "start";
        _this.textValign = "top";
        _this.layout = "absolute";
        _this.baseLineRatio = -0.27; //this.pixelPerfect = true;

        _this._positionPrecision = 1; // Add events to watch for maxWidth/maxHeight changes so that we can
        // invalidate this

        _this.events.on("maxsizechanged", function () {
          if (_this.inited) {
            _this.handleMaxSize();
          }
        }, _this, false); // this solves strange bug when text just added to svg is 0x0


        _this.events.once("validated", _this.handleValidate, _this, false); // Aply theme


        _this.applyTheme();

        return _this;
      }
      /**
       * A placeholder method that is called **after** element finishes drawing
       * itself.
       *
       * @ignore Exclude from docs
       */


      Label.prototype.afterDraw = function () {
        // since we removed validatePosition from sprite, we still need it here to handle rotated text
        _super.prototype.afterDraw.call(this);

        this.validatePosition();
      };
      /**
       * Sets [[Paper]] instance to use to draw elements.
       * @ignore
       * @param paper Paper
       * @return true if paper was changed, false, if it's the same
       */


      Label.prototype.setPaper = function (paper) {
        var changed = _super.prototype.setPaper.call(this, paper);

        if (changed) {
          this.hardInvalidate();
        }

        return changed;
      };
      /**
       * @ignore
       */


      Label.prototype.handleValidate = function () {
        if ((this.currentText || this.text) && (this.bbox.width == 0 || this.bbox.height == 0)) {
          _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].events.once("exitframe", this.hardInvalidate, this);
        }
      };
      /**
       * @ignore
       */


      Label.prototype.handleMaxSize = function () {
        if (this.bbox.width > this.availableWidth || this.bbox.width < this.availableWidth && (this.isOversized || this.truncate) || this.bbox.height > this.availableHeight || this.bbox.height < this.availableHeight && this.isOversized) {
          this.invalidate();
        } else {
          this.alignSVGText();
        }
      };
      /**
       * [arrange description]
       *
       * @ignore Exclude from docs
       * @todo Description
       */


      Label.prototype.arrange = function () {};
      /**
       * Updates current text according to data item and supported features.
       * Returns `true` if current text has changed.
       *
       * @return Text changed?
       */


      Label.prototype.updateCurrentText = function () {
        // Determine output format
        var output, text;

        if (_utils_Utils__WEBPACK_IMPORTED_MODULE_7__["isNotEmpty"](this.html) && this.paper.supportsForeignObject()) {
          // We favor HTML text if it's set and browser supports `foreignObject`
          output = "html";
          text = this.html;
        } else {
          output = "svg";
          text = this.text;
        } // Need to toString source?


        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["isObject"](text)) {
          text = text.toString();
        } // Need to format text all the time


        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](text) && text !== "") {
          text = this.populateString(text, this.dataItem);
        }

        if (output == "html") {
          if (this._adapterO) {
            text = this._adapterO.apply("htmlOutput", text);
          }
        } else {
          if (this._adapterO) {
            text = this._adapterO.apply("textOutput", text);
          }
        } // Update the text


        var changed = text != this.currentText || output != this._currentFormat;
        this.currentText = text;
        this._currentFormat = output;
        return changed;
      };
      /**
       * Hard invalidate means the text will be redrawn even if it hasn't changed.
       * This is used when we change `fontSize`, `fontFamily`, or for some other
       * reasons.
       */


      Label.prototype.hardInvalidate = function () {
        this._prevStatus = "";
        this.invalidate();
      };
      /**
       * Gets line bbox, uses caching to save cpu
       * @ignore
       */


      Label.prototype.getLineBBox = function (lineInfo) {
        //let cacheKey = lineInfo.text + lineInfo.style;
        //let lineBBox = this.getCache(cacheKey);
        //if (!lineBBox) {
        //lineBBox = lineInfo.element.getBBox();
        //if (lineBBox.width != 0 && lineBBox.height != 0) {
        //	this.setCache(cacheKey, lineBBox, 5000);
        //}
        //}
        var element = lineInfo && lineInfo.element;
        var node = element && element.node; // Check for the parent Node to avoid FF from throwing errors

        if (node && node.parentNode) {
          lineInfo.bbox = element.getBBox();
        }
      };
      /**
       * Draws the textual label.
       *
       * @ignore Exclude from docs
       */


      Label.prototype.draw = function () {
        // Draw super
        _super.prototype.draw.call(this);

        var oldW = this.bbox.width;
        var oldH = this.bbox.height;
        var topParent = this.topParent;

        if (topParent) {
          if (!topParent.maxWidth || !topParent.maxHeight) {
            topParent.events.once("maxsizechanged", this.hardInvalidate, this, false);
            return;
          }
        } // Calculate max width and height


        var maxWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](this.availableWidth - this.pixelPaddingLeft - this.pixelPaddingRight, 0);

        var maxHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](this.availableHeight - this.pixelPaddingTop - this.pixelPaddingBottom, 0); // save


        var status = maxHeight + "," + maxWidth + this.wrap + this.truncate + this.fullWords + this.rtl + this.ellipsis; // Update text

        if (!this.updateCurrentText() && this.inited && this._prevStatus == status) {
          return;
        }

        this._measuredWidth = 0;
        this._measuredHeight = 0; // Reset

        this.isOversized = false; // Determine output format

        var output = this._currentFormat;
        var text = this.currentText; // Empty string

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](text) || text == "") {
          this.element.attr({
            display: "none"
          });
          return;
        } // Chop up text into lines
        // We're still processing SVG and HTML in the same way for now


        var lines = text.split("\n"); // Do we need to go through the trouble of measuring lines
        //let measure: boolean = true;// (lines.length > 1) || this.wrap;

        this._prevStatus = status;
        this.textAlign = this.textAlign; // need this to measure

        var display = this.group.getAttr("display");

        if (display == "none") {
          this.group.removeAttr("display");
        }

        if (this.textPathElement) {
          this.textPathElement.removeChildren();
        } // SVG or HTML?


        if (output === "svg") {
          /**
           * SVG
           */
          this.element.removeAttr("display"); // Clear the element

          var group = this.element;
          this.resetBBox(); // Init state variables

          var currentHeight = 0;
          var currentFormat = ""; // Process each line

          for (var i = 0; i < lines.length; i++) {
            // Get line
            var line = lines[i]; // Check if line is empty

            if (line == "") {
              // It is, let's just update currentHeight and go to the next one
              // If it's the first line, we'll have to use arbirary line height,
              // since there's nothing to measure. For subsequent lines we can take
              // previous line's height
              var tempElement = this.getSVGLineElement("", 0);
              tempElement.add(this.getSvgElement(".", Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().translateStyleShortcuts(currentFormat)));
              group.add(tempElement);
              var offset = Math.ceil(tempElement.getBBox().height);

              if (offset > 0) {
                currentHeight += offset;
              }

              group.removeElement(tempElement); // Clear cache if necessary

              var lineInfo_1 = this.getLineInfo(i);

              if (lineInfo_1) {
                lineInfo_1.text = "";
                lineInfo_1.element.textContent = "";
              }

              continue;
            } // Chunk up the line and process each chunk


            var chunks = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().chunk(line, null, this.ignoreFormatting);
            var currentLineHeight = 0;
            var firstChunk = true;
            var skipTextChunks = false; // Create line element or grab it from cache

            var lineInfo = this.getLineInfo(i);

            if (lineInfo) {
              // Empty line
              lineInfo.text = "";
              lineInfo.element.textContent = "";
            } else {
              // Init new line info
              lineInfo = {
                "text": "",
                "element": this.getSVGLineElement("", 0),
                "complex": false
              }; // Create the line element
              //lineInfo.element = this.getSVGLineElement("", 0);
              //lineElement = this.getSVGLineElement("", 0);

              group.add(lineInfo.element);
            }

            lineInfo.element.removeAttr("display");
            lineInfo.element.removeChildren(); // memory leak without this

            if (this.textPathElement) {
              lineInfo.element.add(this.textPathElement);
            }
            /*// @todo not needed anymore
            if (this.rtl) {
                chunks.reverse();
            }*/
            // Process each chunk


            for (var x = 0; x < chunks.length; x++) {
              // If there's more than one chunk, means the line is "complex"
              if (x) {
                lineInfo.complex = true;
              } // Get chunk


              var chunk = chunks[x]; // Is this chunk format or text?

              if (chunk.type === "format") {
                // Log current format, so that we can apply it to multiple lines if
                // necessary
                currentFormat = chunk.text;
              } else {
                // It's text block
                // Need to skip?
                // We do this when truncating. We can't just simply go ahead and
                // abandon chunk processing as they might have formatting
                // instructions in them that are relevant for subsequent lines
                if (skipTextChunks) {
                  continue;
                } // Add chunk to the current element
                //lineInfo.element.content += $utils.trim(getTextFormatter().format(currentFormat + chunk.text, output));


                lineInfo.text = chunk.text;
                lineInfo.style = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().translateStyleShortcuts(currentFormat);
                var tspan = this.getSvgElement(lineInfo.text, lineInfo.style);

                if (this.textPathElement) {
                  this.textPathElement.add(tspan);
                } else {
                  lineInfo.element.add(tspan);
                }

                this.getLineBBox(lineInfo);
                lineInfo.bbox.width = Math.ceil(lineInfo.bbox.width); // Updated current line height

                if (currentLineHeight < lineInfo.bbox.height) {
                  currentLineHeight = lineInfo.bbox.height;
                } // Wrapping?


                if ((this.wrap || this.truncate) && lineInfo.bbox.width > maxWidth) {
                  // Set oversized
                  this.isOversized = true; // Take temporary measurements

                  var lineText = lineInfo.element.textContent;
                  var avgCharWidth = lineInfo.bbox.width / lineText.length; // * .9;
                  // Calculate average number of symbols / width

                  var excessChars = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["min"](Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length); // Are we truncating or auto-wrapping text?


                  if (this.truncate) {
                    /**
                     * Processing line truncation
                     * With the addition of each text chunk we measure if current
                     * line does not exceed maxWidth. If it does, we will stop
                     * addition of further chunks as well as try to truncate
                     * current or any number of previous chunks with an added
                     * ellipsis
                     */
                    // Indicator whether we need to add ellipsis to the current
                    // element, even if it fits. This is needed to indicate
                    // whether we have already removed some subsequent chunks in
                    // which case we need to add ellipsis.
                    var addEllipsis = false; // Process each child in the temporary line, until the whole
                    // line fits, preferably with an ellipsis
                    // TODO use iterator instead

                    var node_1 = lineInfo.element.node;

                    if (node_1 && node_1.childNodes) {
                      for (var e = lineInfo.element.node.childNodes.length - 1; e >= 0; e--) {
                        // Get current element
                        var node_2 = lineInfo.element.node.childNodes[e]; // Add ellipsis only if previous chunk was removed in full
                        // and this chunk already fits
                        //if (addEllipsis && (bbox.width <= maxWidth)) {

                        if (addEllipsis && lineInfo.bbox.width <= maxWidth) {
                          // Add ellipsis
                          node_2.textContent += " " + this.ellipsis; // Measure again (we need to make sure ellipsis fits)

                          lineInfo.bbox = lineInfo.element.getBBox();
                          lineInfo.bbox.width = Math.floor(lineInfo.bbox.width); // If it fits, we're done here
                          // If it doesn't we continue rolling

                          if (lineInfo.bbox.width <= maxWidth) {
                            break;
                          }
                        }

                        addEllipsis = false; // Get element text

                        var elementText = node_2.textContent; // Calculate average number of symbols / width

                        lineText = lineInfo.element.textContent;
                        excessChars = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["min"](Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length); // Do this until we fit

                        while (lineInfo.bbox.width > maxWidth && excessChars <= lineText.length && excessChars > 0) {
                          // Calculate max available chars
                          var maxChars = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](lineText.length - excessChars - this.ellipsis.length, 1); // Is there anything left?


                          if (maxChars <= 1) {
                            // Nope, let's jump to the previous item
                            // Set excess characters to zero so that this loop does
                            // not repeat when it over
                            excessChars = 0; // Add ellipsis to previous item
                            // Subsequent iterations will check if the ellipsis fits

                            if (e > 0) {
                              // Indicating to add ellipsis to previous item
                              addEllipsis = true; // Removing this node

                              lineInfo.element.node.removeChild(node_2);
                            }
                          } // Truncate the text


                          elementText = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["truncateWithEllipsis"](elementText, maxChars, this.ellipsis, this.fullWords, this.rtl);

                          if (elementText.length > maxChars && this.fullWords) {
                            // Still too long?
                            // Let's try truncating breaking words anyway
                            elementText = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["truncateWithEllipsis"](elementText, maxChars, this.ellipsis, false, this.rtl);
                          } // Set truncated text


                          node_2.textContent = elementText; // Measure again

                          lineInfo.bbox = lineInfo.element.getBBox();
                          lineInfo.bbox.width = Math.floor(lineInfo.bbox.width); // Increase excess characters count, just in case it still
                          // doesn't fit and we have to go at it again

                          excessChars = Math.ceil(excessChars * 1.1);
                        } // Do not process further chunks


                        skipTextChunks = true;
                      }
                    }
                  } else {
                    /**
                     * Processign auto-wrap
                     * In this case we're going to be adding text chunks until
                     * they don't fit into current line. Once that happens we will
                     * inject the rest of the chunks to the next line
                     */
                    // Get last node added and measure it
                    var node_3 = lineInfo.element.node;

                    if (node_3) {
                      var lastNode = lineInfo.element.node.lastChild; // Init split lines

                      var splitLines = void 0;

                      while (lineInfo.bbox.width > maxWidth && excessChars <= lineText.length && excessChars > 0) {
                        // Calculate max available chars
                        var maxChars = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](chunk.text.length - excessChars, 1); // Don't split the words mid-word if it's not the first chunk
                        // in the line


                        if (firstChunk) {
                          // Split mid-word if necessary
                          splitLines = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["splitTextByCharCount"](chunk.text, maxChars, true, this.rtl);
                        } else {
                          // Don't split mid-word
                          splitLines = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["splitTextByCharCount"](chunk.text, maxChars, true, this.rtl); // Check if the first word is too long

                          if (splitLines[0].length > maxChars || maxChars === 1) {
                            // Yes - move the whole chunk to the next line
                            // Remove the element we just added
                            lineInfo.element.node.removeChild(lastNode); // Break out of the while on next cycle

                            excessChars = 0;
                          }
                        } // Use the first line to update last item


                        if (excessChars > 0) {
                          lastNode.textContent = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().cleanUp(_utils_Utils__WEBPACK_IMPORTED_MODULE_7__["trim"](splitLines.shift()));
                        } // Measure again, just in case


                        lineInfo.bbox = lineInfo.element.getBBox();
                        lineInfo.bbox.width = Math.floor(lineInfo.bbox.width); // Increase excess characters count, just in case it still
                        // doesn't fit and we have to go at it again

                        excessChars = Math.ceil(excessChars * 1.1);
                      } // Construct the rest of the line


                      if (splitLines.length > 0) {
                        var restOfLine = ""; // Add leftovers from splitting the current chunk

                        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](splitLines)) {
                          if (this.rtl) {
                            restOfLine += splitLines.join("") + currentFormat;
                          } else {
                            restOfLine += currentFormat + splitLines.join("").replace(/([\[\]]{1})/g, "$1$1");
                          }
                        } // Add the rest of the chunks


                        for (var c = x + 1; c < chunks.length; c++) {
                          if (chunks[c].type == "value") {
                            // We're escaping single square brackets that were
                            // cleaned up by chunk() back to double square brackets
                            // so that they are not being treated as format on
                            // next pass.
                            restOfLine += chunks[c].text.replace(/([\[\]]{1})/g, "$1$1");
                          } else {
                            restOfLine += chunks[c].text;
                          }
                        } // Inject the rest of the lines as chunks for subsequent


                        lines.splice(i + 1, 0, restOfLine);
                      } // Skip processing the rest of the chunks


                      skipTextChunks = true;
                    }
                  }
                } // Let's update the text's bbox with the line's one


                if (this.bbox.width < lineInfo.bbox.width) {
                  this.bbox.width = lineInfo.bbox.width;
                } // commented to avoid bug (seen on sankey link) where text is incorrectly aligned
                //if (this.bbox.x > lineInfo.bbox.x) {
                //this.bbox.x = lineInfo.bbox.x;
                //}


                this.bbox.height = currentHeight + currentLineHeight; // Position current line

                if (!this.textPathElement) {
                  lineInfo.element.attr({
                    "x": "0",
                    "y": currentHeight + currentLineHeight,
                    "dy": _utils_Math__WEBPACK_IMPORTED_MODULE_6__["round"](this.baseLineRatio * currentLineHeight, 3).toString()
                  });
                } else {
                  lineInfo.element.attr({
                    "dy": -this.paddingBottom.toString()
                  });
                }

                firstChunk = false;
              }
            } // Trim the last item


            var node = lineInfo.element.node;

            if (node) {
              var lastNode = node.lastChild;

              if (lastNode) {
                lastNode.textContent = this.rtl ? _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["ltrim"](lastNode.textContent) : _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["rtrim"](lastNode.textContent);
              }
            } // Increment collective height


            currentHeight += currentLineHeight; // Save line cache

            this.addLineInfo(lineInfo, i);
          } // Check if maybe we need to hide the whole label if it doesn't fit


          this.maybeHideOversized();
          this.measureFailed = false;

          if (this.bbox.width == 0 || this.bbox.height == 0) {
            this.measureFailed = true;
          } // Updated measured dims


          this._measuredWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight));
          this._measuredHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom)); // Align the lines

          this.alignSVGText();
          this.bbox.width = this._measuredWidth;
          this.bbox.height = this._measuredHeight;

          if (oldH != this._measuredHeight || oldW != this._measuredWidth) {
            this.dispatch("transformed");
          }

          this.hideUnused(lines.length);
        } else {
          /**
           * HTML
           */
          this.element.removeAttr("display");
          this.resetBBox(); // Clear the element

          var group = this.element;
          group.removeChildren(); // Create a ForeignObject to use as HTML container

          var fo = this.paper.foreignObject();
          group.add(fo); // Set widths on foreignObject so that autosizing measurements work
          // This will bet reset to actual content width/height

          if (this.maxWidth) {
            fo.attr({
              width: this.maxWidth
            });
          }

          if (this.maxHeight) {
            fo.attr({
              height: this.maxHeight
            });
          } // Create line element
          //let lineElement: HTMLElement = this.getHTMLLineElement(getTextFormatter().format(this.html, output));


          var lineElement = this.getHTMLLineElement(text);
          fo.node.appendChild(lineElement); // Temporarily set to inline-block so we can measure real width and height

          lineElement.style.display = "inline-block";
          var clientWidth = lineElement.clientWidth;
          var clientHeight = lineElement.clientHeight;
          lineElement.style.display = "block";
          this._bbox = {
            x: 0,
            y: 0,
            width: clientWidth,
            height: clientHeight
          }; // Set exact dimensions of foreignObject so it is sized exactly as
          // the content within

          fo.attr({
            width: clientWidth,
            height: clientHeight
          }); // Check if maybe we need to hide the whole label if it doesn't fit

          this.maybeHideOversized(); // Set measurements and update bbox

          this._measuredWidth = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);
          this._measuredHeight = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["max"](this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);
          this.bbox.width = this._measuredWidth;
          this.bbox.height = this._measuredHeight; // Don't let labels bleed out of the alotted area

          if (this.truncate) {
            lineElement.style.overflow = "hidden";
          }

          if (clientWidth > maxWidth || clientHeight > maxHeight) {
            this.isOversized = true;
          }
        } // Set applicable styles


        this.setStyles();
        this.updateCenter();
        this.updateBackground();

        if (display == "none") {
          this.group.attr({
            display: "none"
          });
        }

        if (this.pathElement) {
          this.paper.appendDef(this.pathElement);
        }
      };
      /**
       * Hides element if it does not fit into available space
       */


      Label.prototype.maybeHideOversized = function () {
        if (this.hideOversized) {
          if (this.availableWidth < this.bbox.width || this.availableHeight < this.bbox.height) {
            this.element.attr({
              display: "none"
            });
            this.isOversized = true;
          } else {
            this.element.removeAttr("display");
            this.isOversized = false;
          }
        }
      };
      /**
       * Aligns the lines horizontally ant vertically, based on properties.
       *
       * @ignore Exclude from docs
       */


      Label.prototype.alignSVGText = function () {
        // Get Group
        var group = this.element;
        var children = group.node.children || group.node.childNodes; // Is there anything to align?

        if (!children || children && children.length == 0) {
          return;
        }

        var width = this._measuredWidth;
        var height = this._measuredHeight; // TODO maybe these aren't needed ?

        _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["used"](this.pixelPaddingLeft);

        _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["used"](this.pixelPaddingRight);

        _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["used"](this.pixelPaddingTop);

        _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["used"](this.pixelPaddingBottom); // Process each line
        //$iter.each(group.children.backwards().iterator(), (element) => {


        for (var i = children.length - 1; i >= 0; i--) {
          // Align horizontally
          // Since we are using `text-anchor` for horizontal alignment, all we need
          // to do here is move the `x` position
          var node = children[i];
          node.setAttribute("text-anchor", this.textAlign);

          if (this.textPathElement) {
            node.removeAttribute("x");
            node.removeAttribute("y");
          } else {
            switch (this.textAlign) {
              case "middle":
                node.setAttribute("x", (width / 2).toString() + "px");
                break;

              case "end":
                if (this.rtl) {} else {
                  node.setAttribute("x", width.toString());
                }

                break;

              default:
                if (this.rtl) {
                  node.setAttribute("x", width.toString());
                } else {
                  node.removeAttribute("text-anchor");
                }

                break;
            }

            var y = _utils_Type__WEBPACK_IMPORTED_MODULE_8__["toNumber"](node.getAttribute("y"));

            switch (this.textValign) {
              case "middle":
                node.setAttribute("y", ((y || 0) + (height - this.bbox.height) / 2).toString());
                break;

              case "bottom":
                node.setAttribute("y", ((y || 0) + height - this.bbox.height).toString());
                break;

              default:
                node.setAttribute("y", (y || 0).toString());
                break;
            }
          }
        }
      };
      /**
       * Produces an SVG line element with formatted text.
       *
       * @ignore Exclude from docs
       * @param text    Text to wrap into line
       * @param y       Current line vertical position
       * @return A DOM element
       * @todo Implement HTML support
       */


      Label.prototype.getSVGLineElement = function (text, y) {
        // Create a <text> node and set text
        var element = this.paper.addGroup("text");
        element.textContent = text; // Set parameters

        element.attr({
          "x": "0" //"alignment-baseline": "hanging",
          //"baseline-shift": "-20%",
          //"text-anchor": "center"

        }); // Set `y` position

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](y)) {
          element.attr({
            "y": y.toString()
          });
        } // Don't let labels blled out of the alotted area


        if (this.truncate || this.wrap) {
          element.attr({
            "overflow": "hidden"
          });
        } // Add RTL?


        if (this.rtl) {
          element.attr({
            "direction": "rtl"
          });
        }

        return element;
      };
      /**
       * Resets cached BBox.
       *
       * @ignore Exclude from docs
       */


      Label.prototype.resetBBox = function () {
        this._bbox = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      };
      /**
       * Creates and returns an HTML line element (`<div>`).
       *
       * @ignore Exclude from docs
       * @param text  Text to add
       * @return `<div>` element reference
       */


      Label.prototype.getHTMLLineElement = function (text) {
        // Create the <div> element
        var div = document.createElement("div");
        div.innerHTML = text; // Set text alignment

        switch (this.textAlign) {
          case "middle":
            div.style.textAlign = "center";
            break;

          case "end":
            div.style.textAlign = "right";
            break;
        } // Disable or enable wrapping


        if (this.wrap) {
          div.style.wordWrap = "break-word";
        } else {
          div.style.whiteSpace = "nowrap";
        } // Don't let labels bleed out of the alotted area
        // Moved to `draw()` because setting "hidden" kills all measuring

        /*if (this.truncate) {
            div.style.overflow = "hidden";
        }*/
        // Set RTL-related styles


        if (this.rtl) {
          div.style.direction = "rtl"; //div.style.unicodeBidi = "bidi-override";
        } // Translate some of the SVG styles into CSS


        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this.fill)) {
          div.style.color = this.fill.toString();
        }

        return div;
      };
      /**
       * Applies specific styles to text to make it not selectable, unless it is
       * explicitly set as `selectable`.
       *
       * @ignore Exclude from docs
       * @todo Set styles via AMElement
       */


      Label.prototype.setStyles = function () {
        var group = this.element;

        if (!this.selectable || this.draggable || this.resizable || this.swipeable) {
          group.addStyle({
            "webkitUserSelect": "none",
            "msUserSelect": "none"
          });
        } else if (this.selectable) {
          group.removeStyle("webkitUserSelect");
          group.removeStyle("msUserSelect");
        }
      };
      /**
       * Hides unused lines
       */


      Label.prototype.hideUnused = function (index) {
        this.initLineCache();
        var lines = this.getCache("lineInfo");

        if (lines.length >= index) {
          for (var i = index; i < lines.length; i++) {
            var line = lines[i];

            if (line && line.element) {
              line.element.attr({
                "display": "none"
              });
            }
          }
        }
      };

      Object.defineProperty(Label.prototype, "text", {
        /**
         * @return SVG text
         */
        get: function get() {
          return this.getPropertyValue("text");
        },

        /**
         * An SVG text.
         *
         * Please note that setting `html` will override this setting if browser
         * supports `foreignObject` in SGV, such as most modern browsers excluding
         * IEs.
         *
         * @param value  SVG Text
         */
        set: function set(value) {
          //this.setPropertyValue("html", undefined);
          this.setPropertyValue("text", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "path", {
        /**
         * @return Path
         */
        get: function get() {
          return this.getPropertyValue("path");
        },

        /**
         * An SVG path string to position text along. If set, the text will follow
         * the curvature of the path.
         *
         * Location along the path can be set using `locationOnPath`.
         *
         * IMPORTANT: Only SVG text can be put on path. If you are using HTML text
         * this setting will be ignored.
         *
         * @since 4.1.2
         * @param  value  Path
         */
        set: function set(value) {
          if (this.setPropertyValue("path", value, true)) {
            if (this.pathElement) {
              this.pathElement.dispose();
            }

            if (this.textPathElement) {
              this.textPathElement.dispose();
            }

            this.pathElement = this.paper.add("path");
            this.pathElement.attr({
              "d": value
            });
            this.pathElement.attr({
              "id": "text-path-" + this.uid
            });

            this._disposers.push(this.pathElement);

            this.textPathElement = this.paper.addGroup("textPath");
            this.textPathElement.attrNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["XLINK"], "xlink:href", "#text-path-" + this.uid); // TODO remove after https://bugzilla.mozilla.org/show_bug.cgi?id=455986 is fixed

            this.textPathElement.attr({
              "path": value
            });

            this._disposers.push(this.textPathElement);

            this.hardInvalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "locationOnPath", {
        /**
         * @return Relatvie location on path
         */
        get: function get() {
          return this.getPropertyValue("locationOnPath");
        },

        /**
         * Relative label location on `path`. Value range is from 0 (beginning)
         * to 1 (end).
         *
         * Works only if you set `path` setting to an SVG path.
         *
         * @since 4.1.2
         * @default 0
         * @param  value  Relatvie location on path
         */
        set: function set(value) {
          this.setPropertyValue("locationOnPath", value);

          if (this.textPathElement) {
            this.textPathElement.attr({
              "startOffset": value * 100 + "%"
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "baseLineRatio", {
        /**
         * @return Base line ratio
         */
        get: function get() {
          return this.getPropertyValue("baseLineRatio");
        },

        /**
         * A ratio to calculate text baseline. Ralative distance from the bottom of
         * the label.
         *
         * @since 4.4.2
         * @default -0.27
         * @param  value  Base line ratio
         */
        set: function set(value) {
          this.setPropertyValue("baseLineRatio", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "wrap", {
        /**
         * @return Auto-wrap enabled or not
         */
        get: function get() {
          return this.getPropertyValue("wrap");
        },

        /**
         * Enables or disables autowrapping of text.
         *
         * @param value  Auto-wrapping enabled
         */
        set: function set(value) {
          this.resetBBox();
          this.setPropertyValue("wrap", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "truncate", {
        /**
         * @return Truncate text?
         */
        get: function get() {
          return this.getPropertyValue("truncate");
        },

        /**
         * Indicates if text lines need to be truncated if they do not fit, using
         * configurable `ellipsis` string.
         *
         * `truncate` overrides `wrap` if both are set to `true`.
         *
         * NOTE: For HTML text, this setting **won't** trigger a parser and actual
         * line truncation with ellipsis. It will just hide everything that goes
         * outside the label.
         *
         * @param value  trincate text?
         */
        set: function set(value) {
          this.resetBBox();
          this.setPropertyValue("truncate", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "fullWords", {
        /**
         * @return Truncate on full words?
         */
        get: function get() {
          return this.getPropertyValue("fullWords");
        },

        /**
         * If `truncate` is enabled, should Label try to break only on full words
         * (`true`), or whenever needed, including middle of the word. (`false`)
         *
         * @default true
         * @param value  Truncate on full words?
         */
        set: function set(value) {
          this.setPropertyValue("fullWords", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "ellipsis", {
        /**
         * @return Ellipsis string
         */
        get: function get() {
          return this.getPropertyValue("ellipsis");
        },

        /**
         * Ellipsis character to use if `truncate` is enabled.
         *
         * @param value Ellipsis string
         * @default "..."
         */
        set: function set(value) {
          this.setPropertyValue("ellipsis", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "selectable", {
        /**
         * @return Text selectable?
         */
        get: function get() {
          return this.getPropertyValue("selectable");
        },

        /**
         * Forces the text to be selectable. This setting will be ignored if the
         * object has some kind of interaction attached to it, such as it is
         * `draggable`, `swipeable`, `resizable`.
         *
         * @param value  Text selectable?
         * @default false
         */
        set: function set(value) {
          this.setPropertyValue("selectable", value, true);
          this.setStyles();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "textAlign", {
        /**
         * @return Alignment
         */
        get: function get() {
          return this.getPropertyValue("textAlign");
        },

        /**
         * Horizontal text alignment.
         *
         * Available choices:
         * * "start"
         * * "middle"
         * * "end"
         *
         * @param value  Alignment
         */
        set: function set(value) {
          this.setPropertyValue("textAlign", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "textValign", {
        /**
         * @ignore Exclude from docs (not used)
         * @return Alignment
         * @deprecated
         */
        get: function get() {
          return this.getPropertyValue("textValign");
        },

        /**
         * Vertical text alignment.
         *
         * @ignore Exclude from docs (not used)
         * @param value  Alignment
         * @deprecated
         */
        set: function set(value) {
          this.setPropertyValue("textValign", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "html", {
        /**
         * @return HTML content
         */
        get: function get() {
          return this.getPropertyValue("html");
        },

        /**
         * Raw HTML to be used as text.
         *
         * NOTE: HTML text is subject to browser support. It relies on browsers
         * supporting SVG `foreignObject` nodes. Some browsers (read IEs) do not
         * support it. On those browsers, the text will fall back to basic SVG text,
         * striping out all HTML markup and styling that goes with it.
         *
         * For more information about `foreignObject` and its browser compatibility
         * refer to [this page](https://developer.mozilla.org/en/docs/Web/SVG/Element/foreignObject#Browser_compatibility).
         *
         * @param value HTML text
         */
        set: function set(value) {
          this.setPropertyValue("html", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "hideOversized", {
        /**
         * @return Hide if text does not fit?
         */
        get: function get() {
          return this.getPropertyValue("hideOversized");
        },

        /**
         * Indicates whether the whole text should be hidden if it does not fit into
         * its allotted space.
         *
         * @param value  Hide if text does not fit?
         */
        set: function set(value) {
          this.setPropertyValue("hideOversized", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "ignoreFormatting", {
        /**
         * @return Ignore formatting?
         */
        get: function get() {
          return this.getPropertyValue("ignoreFormatting");
        },

        /**
         * If set to `true` square-bracket formatting blocks will be treated as
         * regular text.
         *
         * @default false
         * @param value  Ignore formatting?
         */
        set: function set(value) {
          this.setPropertyValue("ignoreFormatting", value, true);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Override `mesaureElement` so it does not get measure again, because
       * internal `_bbox` is being updated by measuring routines in Text itself.
       */

      Label.prototype.measureElement = function () {};
      /**
       * Returns information about a line element.
       *
       * @ignore Exclude from docs
       * @param index  Line index
       * @return Line info object
       */


      Label.prototype.getLineInfo = function (index) {
        this.initLineCache();
        var lines = this.getCache("lineInfo");
        return lines.length > index ? lines[index] : undefined;
      };
      /**
       * Adds a line to line info cache.
       *
       * @ignore Exclude from docs
       * @param line     Line info object
       * @param index    Insert at specified index
       */


      Label.prototype.addLineInfo = function (line, index) {
        this.initLineCache();
        this.getCache("lineInfo")[index] = line;
      };
      /**
       * Checks if line cache is initialized and initializes it.
       */


      Label.prototype.initLineCache = function () {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this.getCache("lineInfo"))) {
          this.setCache("lineInfo", [], 0);
        }
      };
      /**
       * Sets a [[DataItem]] to use for populating dynamic sections of the text.
       *
       * Check the description for [[Text]] class, for data binding.
       *
       * @param dataItem Data item
       */


      Label.prototype.setDataItem = function (dataItem) {
        if (this._sourceDataItemEvents) {
          this._sourceDataItemEvents.dispose();
        }

        if (dataItem) {
          this._sourceDataItemEvents = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([dataItem.events.on("valuechanged", this.invalidate, this, false), dataItem.events.on("workingvaluechanged", this.invalidate, this, false), dataItem.events.on("calculatedvaluechanged", this.invalidate, this, false), dataItem.events.on("propertychanged", this.invalidate, this, false)]);
        }

        _super.prototype.setDataItem.call(this, dataItem);
      };

      Object.defineProperty(Label.prototype, "availableWidth", {
        /**
         * Returns available horizontal space.
         *
         * @ignore Exclude from docs
         * @return Available width (px)
         */
        get: function get() {
          return _utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this.maxWidth) ? this.maxWidth : this.pixelWidth;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Label.prototype, "availableHeight", {
        /**
         * Returns available vertical space.
         *
         * @return Available height (px)
         */
        get: function get() {
          return _utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this.maxHeight) ? this.maxHeight : this.pixelHeight;
        },
        enumerable: true,
        configurable: true
      }); // temp, replacing textFormatter method

      Label.prototype.getSvgElement = function (text, style) {
        var element = this.paper.add("tspan");
        element.textContent = text;

        if (style) {
          element.node.setAttribute("style", style);
        }

        return element;
      };
      /**
       * Invalidates the whole element, including layout AND all its child
       * elements.
       */


      Label.prototype.deepInvalidate = function () {
        _super.prototype.deepInvalidate.call(this);

        this.hardInvalidate();
      };

      Object.defineProperty(Label.prototype, "readerTitle", {
        /**
         * @return Title
         */
        get: function get() {
          var title = this.getPropertyValue("readerTitle");

          if (!title) {
            title = this.populateString(_utils_Utils__WEBPACK_IMPORTED_MODULE_7__["plainText"](_utils_Utils__WEBPACK_IMPORTED_MODULE_7__["isNotEmpty"](this.html) ? this.html : this.text));
          }

          return title;
        },

        /**
         * Screen reader title of the element.
         *
         * @param value Title
         */
        set: function set(value) {
          value = _utils_Type__WEBPACK_IMPORTED_MODULE_8__["toText"](value);

          if (this.setPropertyValue("readerTitle", value)) {
            this.applyAccessibility();
          }
        },
        enumerable: true,
        configurable: true
      });
      return Label;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Label"] = Label;
    /**
     * Add default responsive rules
     */

    /**
     * Hide labels added directly to chart, like titles if chart is short.
     */

    _utils_Responsive__WEBPACK_IMPORTED_MODULE_10__["defaultRules"].push({
      relevant: _utils_Responsive__WEBPACK_IMPORTED_MODULE_10__["ResponsiveBreakpoints"].heightXS,
      state: function state(target, stateId) {
        if (target instanceof Label && target.parent && target.parent.isBaseSprite) {
          var state = target.states.create(stateId);
          state.properties.disabled = true;
          return state;
        }

        return null;
      }
    }); //# sourceMappingURL=Label.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js ***!
    \**************************************************************************/

  /*! exports provided: Line */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsLineJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Line", function () {
      return Line;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../rendering/fills/LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Line drawing functionality.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a line.
     *
     * @see {@link ILineEvents} for a list of available events
     * @see {@link ILineAdapters} for a list of available Adapters
     */


    var Line =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Line, _super);
      /**
       * Constructor
       */

      function Line() {
        var _this = _super.call(this) || this;

        _this.className = "Line";
        _this.element = _this.paper.add("line");
        _this.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_2__["color"])(); //"none";

        _this.x1 = 0;
        _this.y1 = 0;

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the line.
       *
       * @ignore Exclude from docs
       */


      Line.prototype.draw = function () {
        _super.prototype.draw.call(this);

        if (this.x1 == this.x2 || this.y1 == this.y2) {
          this.pixelPerfect = true;
        } else {
          this.pixelPerfect = false;
        }

        this.x1 = this.x1;
        this.x2 = this.x2;
        this.y1 = this.y1;
        this.y2 = this.y2;
      };

      Object.defineProperty(Line.prototype, "x1", {
        /**
         * @return X
         */
        get: function get() {
          return this.getPropertyValue("x1");
        },

        /**
         * X coordinate of first end.
         *
         * @param value X
         */
        set: function set(value) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](value)) {
            value = 0;
          }

          var delta = 0;

          if (this.pixelPerfect && this.stroke instanceof _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_3__["LinearGradient"]) {
            delta = 0.00001;
          }

          this.setPropertyValue("x1", value, true);
          this.element.attr({
            "x1": value + delta
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Line.prototype, "x2", {
        /**
         * @return X
         */
        get: function get() {
          var value = this.getPropertyValue("x2");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](value)) {
            value = this.pixelWidth;
          }

          return value;
        },

        /**
         * X coordinate of second end.
         *
         * @param value X
         */
        set: function set(value) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](value)) {
            value = 0;
          }

          this.setPropertyValue("x2", value, true);
          this.element.attr({
            "x2": value
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Line.prototype, "y1", {
        /**
         * @return Y
         */
        get: function get() {
          return this.getPropertyValue("y1");
        },

        /**
         * Y coordinate of first end.
         *
         * @param value Y
         */
        set: function set(value) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](value)) {
            value = 0;
          }

          var delta = 0;

          if (this.pixelPerfect && this.stroke instanceof _rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_3__["LinearGradient"]) {
            delta = 0.00001;
          }

          this.setPropertyValue("y1", value, true);
          this.element.attr({
            "y1": value + delta
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Line.prototype, "y2", {
        /**
         * @return Y
         */
        get: function get() {
          var value = this.getPropertyValue("y2");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](value)) {
            value = this.pixelHeight;
          }

          return value;
        },

        /**
         * Y coordinate of second end.
         *
         * @param value Y
         */
        set: function set(value) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](value)) {
            value = 0;
          }

          this.setPropertyValue("y2", value, true);
          this.element.attr({
            "y2": value
          });
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts relative position along the line (0-1) into pixel coordinates.
       *
       * @param position  Position (0-1)
       * @return Coordinates
       */

      Line.prototype.positionToPoint = function (position) {
        var point1 = {
          x: this.x1,
          y: this.y1
        };
        var point2 = {
          x: this.x2,
          y: this.y2
        };

        var point = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["getMidPoint"](point1, point2, position);

        var angle = _utils_Math__WEBPACK_IMPORTED_MODULE_6__["getAngle"](point1, point2);

        return {
          x: point.x,
          y: point.y,
          angle: angle
        };
      };

      return Line;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["Line"] = Line; //# sourceMappingURL=Line.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Modal.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Modal.js ***!
    \***************************************************************************/

  /*! exports provided: Modal */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsModalJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Modal", function () {
      return Modal;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Popup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Popup */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Popup.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /**
     * Modal class is used to display information over chart area.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Shows an HTML modal which covers window or a chart area.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/popups-and-modals/} For examples and docs on Popups and Modals.
     */


    var Modal =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Modal, _super);
      /**
       * Constructor
       */

      function Modal() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         */


        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](_this);
        _this.className = "Modal";
        _this.showCurtain = true;
        _this.draggable = false;
        return _this;
      }

      return Modal;
    }(_Popup__WEBPACK_IMPORTED_MODULE_1__["Popup"]); //# sourceMappingURL=Modal.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/PlayButton.js":
  /*!********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/PlayButton.js ***!
    \********************************************************************************/

  /*! exports provided: PlayButton */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPlayButtonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PlayButton", function () {
      return PlayButton;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony import */


    var _RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./RoundedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _Triangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./Triangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js");
    /* harmony import */


    var _core_utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../core/utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Play button functionality.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a zoom out button.
     *
     * @see {@link IPlayButtonEvents} for a list of available events
     * @see {@link IPlayButtonAdapters} for a list of available Adapters
     */


    var PlayButton =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PlayButton, _super);
      /**
       * Constructor
       */

      function PlayButton() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "PlayButton";

        _this.padding(12, 12, 12, 12);

        _this.showSystemTooltip = true;
        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__["InterfaceColorSet"]();
        var background = _this.background;
        background.cornerRadius(25, 25, 25, 25);
        background.fill = interfaceColors.getFor("primaryButton");
        background.stroke = interfaceColors.getFor("primaryButtonStroke");
        background.strokeOpacity = 0;
        background.states.getKey("hover").properties.fill = interfaceColors.getFor("primaryButtonHover");
        background.states.getKey("down").properties.fill = interfaceColors.getFor("primaryButtonActive"); // Create a play icon

        var playIcon = new _Triangle__WEBPACK_IMPORTED_MODULE_5__["Triangle"]();
        playIcon.direction = "right";
        playIcon.width = 9;
        playIcon.height = 11;
        playIcon.marginLeft = 1;
        playIcon.marginRight = 1;
        playIcon.horizontalCenter = "middle";
        playIcon.verticalCenter = "middle";
        playIcon.stroke = interfaceColors.getFor("primaryButtonText");
        playIcon.fill = playIcon.stroke;
        _this.icon = playIcon; // Create a play icon

        var stopIcon = new _RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__["RoundedRectangle"]();
        stopIcon.width = 11;
        stopIcon.height = 11;
        stopIcon.horizontalCenter = "middle";
        stopIcon.verticalCenter = "middle";
        stopIcon.cornerRadius(0, 0, 0, 0);
        stopIcon.stroke = interfaceColors.getFor("primaryButtonText");
        stopIcon.fill = playIcon.stroke;
        _this.togglable = true;

        var activeState = _this.states.create("active");

        activeState.transitionDuration = 0;
        activeState.properties.icon = stopIcon;
        _this.defaultState.transitionDuration = 0; // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * Sets defaults that instantiate some objects that rely on parent, so they
       * cannot be set in constructor.
       */


      PlayButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);

        if (!_core_utils_Type__WEBPACK_IMPORTED_MODULE_6__["hasValue"](this.readerTitle)) {
          this.readerTitle = this.language.translate("Play");
        }
      };

      return PlayButton;
    }(_Button__WEBPACK_IMPORTED_MODULE_1__["Button"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["PlayButton"] = PlayButton; //# sourceMappingURL=PlayButton.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedRectangle.js":
  /*!**************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedRectangle.js ***!
    \**************************************************************************************/

  /*! exports provided: PointedRectangle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPointedRectangleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PointedRectangle", function () {
      return PointedRectangle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _PointedShape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./PointedShape */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedShape.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Pointed rectangle module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a rectangle with a pointer.
     *
     * @see {@link IPointedRectangleEvents} for a list of available events
     * @see {@link IPointedRectangleAdapters} for a list of available Adapters
     */


    var PointedRectangle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PointedRectangle, _super);
      /**
       * Constructor
       */

      function PointedRectangle() {
        var _this = _super.call(this) || this;

        _this.className = "PointedRectangle";
        _this.element = _this.paper.add("path");
        _this.cornerRadius = 6;

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      PointedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var cr = this.cornerRadius;
        var w = this.innerWidth;
        var h = this.innerHeight;

        if (w > 0 && h > 0) {
          var x = this.pointerX;
          var y = this.pointerY;
          var bwh = this.pointerBaseWidth / 2;

          var maxcr = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["min"](w / 2, h / 2);

          var crtl = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](cr, 0, maxcr);

          var crtr = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](cr, 0, maxcr);

          var crbr = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](cr, 0, maxcr);

          var crbl = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](cr, 0, maxcr); // corner coordinates
          // top left


          var xtl = 0;
          var ytl = 0; // top right

          var xtr = w;
          var ytr = 0; // bottom right

          var xbr = w;
          var ybr = h; // bottom left

          var xbl = 0;
          var ybl = h;
          var lineT = void 0;
          var lineR = void 0;
          var lineB = void 0;
          var lineL = void 0; // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
          // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)

          var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
          var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl); // top

          if (d1 > 0 && d2 > 0) {
            var stemX = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](x, crtl + bwh, w - bwh - crtr);

            y = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](y, -Infinity, 0);
            lineT = "M" + crtl + ",0 L" + (stemX - bwh) + ",0 L" + x + "," + y + " L" + (stemX + bwh) + ",0 L" + (w - crtr) + ",0";
          } else {
            lineT = "M" + crtl + ",0 L" + (w - crtr) + ",0";
          } // bottom


          if (d1 < 0 && d2 < 0) {
            var stemX = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](x, crbl + bwh, w - bwh - crbr);

            y = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](y, h, Infinity);
            lineB = " L" + (w - crbr) + "," + h + " L" + (stemX + bwh) + "," + h + " L" + x + "," + y + " L" + (stemX - bwh) + "," + h + " L" + crbl + "," + h;
          } else {
            lineB = " L" + crbl + "," + h;
          } // left


          if (d1 < 0 && d2 > 0) {
            var stemY = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](y, crtl + bwh, h - crbl - bwh);

            x = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](x, -Infinity, 0);
            lineL = " L0," + (h - crbl) + " L0," + (stemY + bwh) + " L" + x + "," + y + " L0," + (stemY - bwh) + " L0," + crtl;
          } else {
            lineL = " L0," + crtl;
          } // right


          if (d1 > 0 && d2 < 0) {
            var stemY = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](y, crtr + bwh, h - bwh - crbr);

            x = _utils_Math__WEBPACK_IMPORTED_MODULE_2__["fitToRange"](x, w, Infinity);
            lineR = " L" + w + "," + crtr + " L" + w + "," + (stemY - bwh) + " L" + x + "," + y + " L" + w + "," + (stemY + bwh) + " L" + w + "," + (h - crbr);
          } else {
            lineR = " L" + w + "," + (h - crbr);
          }

          var arcTR = " a" + crtr + "," + crtr + " 0 0 1 " + crtr + "," + crtr;
          var arcBR = " a" + crbr + "," + crbr + " 0 0 1 -" + crbr + "," + crbr;
          var arcBL = " a" + crbl + "," + crbl + " 0 0 1 -" + crbl + ",-" + crbl;
          var arcTL = " a" + crtl + "," + crtl + " 0 0 1 " + crtl + ",-" + crtl;
          this.path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL;
        }
      };

      Object.defineProperty(PointedRectangle.prototype, "cornerRadius", {
        /**
         * @return Corner radius (px)
         */
        get: function get() {
          return this.getPropertyValue("cornerRadius");
        },

        /**
         * Radius of rectangle's border in pixels.
         *
         * @default 0
         * @param value  Corner radius (px)
         */
        set: function set(value) {
          this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
      });
      return PointedRectangle;
    }(_PointedShape__WEBPACK_IMPORTED_MODULE_1__["PointedShape"]); //# sourceMappingURL=PointedRectangle.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedShape.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedShape.js ***!
    \**********************************************************************************/

  /*! exports provided: PointedShape */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPointedShapeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PointedShape", function () {
      return PointedShape;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Pointed shape module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a shape with a pointer.
     *
     * @see {@link IPointedShapeEvents} for a list of available events
     * @see {@link IPointedShapeAdapters} for a list of available Adapters
     */


    var PointedShape =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PointedShape, _super);
      /**
       * Constructor
       */

      function PointedShape() {
        var _this = _super.call(this) || this;

        _this.className = "PointedShape";
        _this.pointerBaseWidth = 15;
        _this.pointerLength = 10;
        _this.pointerY = 0;
        _this.pointerX = 0;

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      PointedShape.prototype.draw = function () {
        _super.prototype.draw.call(this);

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_2__["isNumber"](this.pointerX)) {
          this.pointerX = this.pixelWidth / 2;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_2__["isNumber"](this.pointerY)) {
          this.pointerY = this.pixelHeight + 10;
        }
      };

      Object.defineProperty(PointedShape.prototype, "pointerBaseWidth", {
        /**
         * @return Width (px)
         */
        get: function get() {
          return this.getPropertyValue("pointerBaseWidth");
        },

        /**
         * A width of the pinter's (stem's) thick end (base) in pixels.
         *
         * @default 15
         * @param value  Width (px)
         */
        set: function set(value) {
          this.setPropertyValue("pointerBaseWidth", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PointedShape.prototype, "pointerLength", {
        /**
         * @return Length (px)
         */
        get: function get() {
          return this.getPropertyValue("pointerLength");
        },

        /**
         * A length of the pinter (stem) in pixels.
         *
         * @default 10
         * @param value  Length (px)
         */
        set: function set(value) {
          this.setPropertyValue("pointerLength", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PointedShape.prototype, "pointerX", {
        /**
         * @return X
         */
        get: function get() {
          return this.getPropertyValue("pointerX");
        },

        /**
         * X coordinate the shape is pointing to.
         *
         * @param value  X
         */
        set: function set(value) {
          this.setPropertyValue("pointerX", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PointedShape.prototype, "pointerY", {
        /**
         * @return Y
         */
        get: function get() {
          return this.getPropertyValue("pointerY");
        },

        /**
         * Y coordinate the shape is pointing to.
         *
         * @param value  Y
         */
        set: function set(value) {
          this.setPropertyValue("pointerY", value, true);
        },
        enumerable: true,
        configurable: true
      });
      return PointedShape;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]); //# sourceMappingURL=PointedShape.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js ***!
    \*****************************************************************************/

  /*! exports provided: Polyarc */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPolyarcJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Polyarc", function () {
      return Polyarc;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Polyline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Polyline */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../core/utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _core_rendering_Path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Module for a multi-part arched line.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a multi-part arched line.
     *
     * @see {@link IPolyarcEvents} for a list of available events
     * @see {@link IPolyarcAdapters} for a list of available Adapters
     */


    var Polyarc =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Polyarc, _super);
      /**
       * Constructor
       */

      function Polyarc() {
        var _this = _super.call(this) || this;

        _this.className = "Polyarc";
        _this.controlPointDistance = 0.5;
        _this.controlPointPosition = 0.5;

        _this.applyTheme();

        return _this;
      }
      /**
       * Creats and adds an SVG path for the arc.
       *
       * @ignore Exclude from docs
       */


      Polyarc.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;

        if (segments && segments.length > 0) {
          var path = "";
          this._realSegments = [];

          for (var i = 0, len = segments.length; i < len; i++) {
            var points = segments[i];
            var realPoints = [];

            this._realSegments.push(realPoints);

            if (points.length > 0) {
              path += _core_rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](points[0]);

              for (var p = 1; p < points.length; p++) {
                var pointA = points[p - 1];
                var pointB = points[p];

                var distanceAB = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getDistance"](pointB, pointA);

                var cpDistance = distanceAB * this.controlPointDistance;
                var controlPointPosition = this.controlPointPosition;
                var angle = -_core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getAngle"](pointA, pointB);

                var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](angle);

                var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](angle);

                var controlPoint1 = {
                  x: cpx,
                  y: cpy
                };

                var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](angle);

                var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](angle);

                var controlPoint2 = {
                  x: cpx2,
                  y: cpy2
                };
                path += _core_rendering_Path__WEBPACK_IMPORTED_MODULE_4__["cubicCurveTo"](pointB, controlPoint1, controlPoint2); // we add a lot of points in order to get the position/angle later

                var stepCount = Math.ceil(distanceAB);
                var prevPoint = pointA;

                if (stepCount > 0) {
                  for (var i_1 = 0; i_1 <= stepCount; i_1++) {
                    var point = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getPointOnCubicCurve"](pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);

                    realPoints.push(point);
                    this._distance += _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getDistance"](prevPoint, point);
                    prevPoint = point;
                  }
                } else {
                  realPoints.push(pointA);
                }
              }
            }
          }

          this.path = path;
        }
      };

      Object.defineProperty(Polyarc.prototype, "controlPointPosition", {
        /**
         * @return Position (0-1)
         */
        get: function get() {
          return this.getPropertyValue("controlPointPosition");
        },

        /**
         * Relative position along the line the control point is. (0-1)
         *
         * @default 0.5
         * @param value  Position (0-1)
         */
        set: function set(value) {
          this.setPropertyValue("controlPointPosition", value);
          this.makePath();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Polyarc.prototype, "controlPointDistance", {
        /**
         * @return Distance (0-1)
         */
        get: function get() {
          return this.getPropertyValue("controlPointDistance");
        },

        /**
         * Relative distance of the control point. (0-1)
         *
         * Default is half the length of the line. (0.5)
         *
         * @default 0.5
         * @param value  Distance (0-1)
         */
        set: function set(value) {
          this.setPropertyValue("controlPointDistance", value);
          this.makePath();
        },
        enumerable: true,
        configurable: true
      });
      return Polyarc;
    }(_Polyline__WEBPACK_IMPORTED_MODULE_1__["Polyline"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Polyarc"] = Polyarc; //# sourceMappingURL=Polyarc.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polygon.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Polygon.js ***!
    \*****************************************************************************/

  /*! exports provided: Polygon */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPolygonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Polygon", function () {
      return Polygon;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Morpher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Morpher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Polygon module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a polygon.
     *
     * @see {@link IPolygonEvents} for a list of available events
     * @see {@link IPolygonAdapters} for a list of available Adapters
     */


    var Polygon =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Polygon, _super);
      /**
       * Constructor
       */

      function Polygon() {
        var _this = _super.call(this) || this;

        _this.className = "Polygon";
        _this.element = _this.paper.add("path");
        _this.shapeRendering = "auto";
        _this._currentPoints = [];

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(Polygon.prototype, "points", {
        /**
         * @return Polygon points
         */
        get: function get() {
          var points = this.getPropertyValue("points");
          var path = this.path;

          if (path && (!points || points.length == 0)) {
            var valueStr = path.slice(1, path.length - 1);
            var segments = valueStr.split("ZM");

            for (var s = 0; s < segments.length; s++) {
              var segment = segments[s];

              if (segment.length > 0) {
                var areaHole = segment.split("M");
                var areaArr = areaHole[0];
                var holeArr = areaHole[1];

                if (areaArr && areaArr.length > 0) {
                  var pointsArr = areaArr.split("L");

                  if (pointsArr.length > 0) {
                    var area = [];
                    var areaAndHole = [area];
                    points.push(areaAndHole);

                    for (var p = 0; p < pointsArr.length; p++) {
                      var coords = pointsArr[p].split(",");
                      area.push({
                        x: +coords[0],
                        y: +coords[1]
                      });
                    }

                    if (holeArr && holeArr.length > 0) {
                      var pointsArr_1 = holeArr.split("L");

                      if (pointsArr_1.length > 0) {
                        var hole = [];
                        areaAndHole.push(hole);

                        for (var p = pointsArr_1.length - 1; p >= 0; p--) {
                          var coords = pointsArr_1[p].split(",");
                          hole.push({
                            x: +coords[0],
                            y: +coords[1]
                          });
                        }
                      }
                    }
                  }
                }
              }
            }

            this.setPropertyValue("points", points);
            this._currentPoints = points;
          }

          return points;
        },

        /**
         * An array of X/Y coordinates for each elbow of the polygon.
         *
         * @todo Example
         * @param points  Polygon points
         */
        set: function set(points) {
          this.setPropertyValue("points", points, true);
          this._currentPoints = points;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Polygon.prototype, "currentPoints", {
        /**
         * @return Polygon points
         */
        get: function get() {
          if ((!this._currentPoints || this._currentPoints.length == 0) && this.path) {
            this._currentPoints = this.points;
          }

          return this._currentPoints;
        },

        /**
         * Current points. Used when morphing the element, so that original `points`
         * are not overwritten.
         *
         * @param points  Polygon points
         */
        set: function set(points) {
          if (this._currentPoints != points) {
            this._currentPoints = points;
            this.draw();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */

      Polygon.prototype.draw = function () {
        var path = "";
        var points = this._currentPoints;
        var left;
        var right;
        var top;
        var bottom;

        if (points.length > 0) {
          // separate areas
          for (var i = 0, len = points.length; i < len; i++) {
            // surface
            var surface = points[i][0];
            var hole = points[i][1];

            if (surface && surface.length > 0) {
              var point = surface[0];
              path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](point);

              for (var s = 0; s < surface.length; s++) {
                point = surface[s];
                path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](point);

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](right) || right < point.x) {
                  right = point.x;
                }

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](left) || left > point.x) {
                  left = point.x;
                }

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](top) || top > point.y) {
                  top = point.y;
                }

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](bottom) || bottom < point.y) {
                  bottom = point.y;
                }
              }
            } // hole


            if (hole && hole.length > 0) {
              var point = hole[0];
              path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](point);

              for (var h = 0, hlen = hole.length; h < hlen; h++) {
                point = hole[h];
                path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](point);
              }
            }
          }

          if (path) {
            path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["closePath"]();
          }

          this.bbox.x = left;
          this.bbox.y = top;
          this.bbox.width = right - left;
          this.bbox.height = bottom - top;

          _super.prototype.setPath.call(this, path);
        }
      };
      /**
       * @ignore
       */


      Polygon.prototype.setPath = function (value) {
        if (_super.prototype.setPath.call(this, value)) {
          this.points = [];
          this._bbox = this.group.getBBox();
          return true;
        }

        return false;
      };
      /**
       * Measures element
       */


      Polygon.prototype.measureElement = function () {// Overriding to avoid extra measurement.
      };

      Object.defineProperty(Polygon.prototype, "centerPoint", {
        /**
         * A calculated center point for the shape.
         *
         * @readonly
         * @return Center
         */
        get: function get() {
          return {
            x: this.bbox.x + this.bbox.width / 2,
            y: this.bbox.y + this.bbox.height / 2
          };
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Polygon.prototype, "morpher", {
        /**
         * A [[Morpher]] instance that is used to morph polygon into some other
         * shape.
         *
         * @readonly
         * @return Morpher instance
         */
        get: function get() {
          if (!this._morpher) {
            this._morpher = new _utils_Morpher__WEBPACK_IMPORTED_MODULE_2__["Morpher"](this);

            this._disposers.push(this._morpher);
          }

          return this._morpher;
        },
        enumerable: true,
        configurable: true
      });
      return Polygon;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["Polygon"] = Polygon; //# sourceMappingURL=Polygon.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js ***!
    \******************************************************************************/

  /*! exports provided: Polyline */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPolylineJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Polyline", function () {
      return Polyline;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Polyline module
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a polyline.
     *
     * @see {@link IPolylineEvents} for a list of available events
     * @see {@link IPolylineAdapters} for a list of available Adapters
     */


    var Polyline =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Polyline, _super);
      /**
       * Constructor
       */

      function Polyline() {
        var _this = _super.call(this) || this;
        /**
         * [_distance description]
         *
         * @todo Description
         */


        _this._distance = 0;
        _this.className = "Polyline";
        _this.element = _this.paper.add("path");
        _this.shapeRendering = "auto";
        _this.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_2__["color"])();
        _this.strokeOpacity = 1;

        _this.applyTheme();

        return _this;
      }
      /**
       * Creats and adds an SVG path for the arc.
       *
       * @ignore Exclude from docs
       */


      Polyline.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;

        if (segments && segments.length > 0) {
          var path = "";

          for (var i = 0, len = segments.length; i < len; i++) {
            var points = segments[i];

            if (points.length > 0) {
              path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](points[0]);

              for (var p = 1; p < points.length; p++) {
                var point = points[p];
                path += _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["lineTo"](point);
                this._distance += _utils_Math__WEBPACK_IMPORTED_MODULE_5__["getDistance"](points[p - 1], point);
              }
            }
          }

          this.path = path;
        }

        this._realSegments = segments;
      };

      Object.defineProperty(Polyline.prototype, "segments", {
        /**
         * @return Segments
         */
        get: function get() {
          return this.getPropertyValue("segments");
        },

        /**
         * A list of segment coordinates for the multi-part line.
         *
         * @todo Example
         * @param segments  Segments
         */
        set: function set(segments) {
          this.setPropertyValue("segments", segments);
          this.makePath();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Polyline.prototype, "distance", {
        /**
         * [distance description]
         *
         * @todo Description
         * @return [description]
         */
        get: function get() {
          return this._distance;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts relative position along the line (0-1) into pixel coordinates.
       *
       * @param position  Position (0-1)
       * @return Coordinates
       */

      Polyline.prototype.positionToPoint = function (position) {
        var deltaAngle = 0;

        if (position < 0) {
          position = Math.abs(position);
          deltaAngle = 180;
        }

        var segments = this._realSegments;

        if (segments) {
          var totalDistance = this.distance;
          var currentDistance = 0;
          var distanceAB = void 0;
          var positionA = 0;
          var positionB = 0;
          var pointA = void 0;
          var pointB = void 0;

          for (var s = 0; s < segments.length; s++) {
            var points = segments[s];

            if (points.length > 1) {
              for (var p = 1; p < points.length; p++) {
                pointA = points[p - 1];
                pointB = points[p];
                positionA = currentDistance / totalDistance;
                distanceAB = _utils_Math__WEBPACK_IMPORTED_MODULE_5__["getDistance"](pointA, pointB);
                currentDistance += distanceAB;
                positionB = currentDistance / totalDistance;

                if (positionA <= position && positionB > position) {
                  s = segments.length;
                  break;
                }
              }
            } else if (points.length == 1) {
              pointA = points[0];
              pointB = points[0];
              positionA = 0;
              positionB = 1;
            }
          }

          if (pointA && pointB) {
            var positionAB = (position - positionA) / (positionB - positionA);

            var midPoint = _utils_Math__WEBPACK_IMPORTED_MODULE_5__["getMidPoint"](pointA, pointB, positionAB);

            return {
              x: midPoint.x,
              y: midPoint.y,
              angle: deltaAngle + _utils_Math__WEBPACK_IMPORTED_MODULE_5__["getAngle"](pointA, pointB)
            };
          }
        }

        return {
          x: 0,
          y: 0,
          angle: 0
        };
      };

      Object.defineProperty(Polyline.prototype, "realSegments", {
        /**
         * @ignore
         */
        get: function get() {
          return this._realSegments;
        },
        enumerable: true,
        configurable: true
      });
      return Polyline;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["Polyline"] = Polyline; //# sourceMappingURL=Polyline.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js":
  /*!********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js ***!
    \********************************************************************************/

  /*! exports provided: Polyspline */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPolysplineJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Polyspline", function () {
      return Polyspline;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Polyline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Polyline */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../core/utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _core_utils_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _core_rendering_Path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../core/rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Polyspline (smoothed line) module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a polysline. (smoothed multi-sigment line)
     *
     * @see {@link IPolysplineEvents} for a list of available events
     * @see {@link IPolysplineAdapters} for a list of available Adapters
     */


    var Polyspline =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Polyspline, _super);
      /**
       * Constructor
       */

      function Polyspline() {
        var _this = _super.call(this) || this;

        _this.className = "Polyspline";
        _this.tensionX = 0.5;
        _this.tensionY = 0.5;

        _this.applyTheme();

        return _this;
      }
      /**
       * Creats and adds an SVG path for the arc.
       *
       * @ignore Exclude from docs
       */


      Polyspline.prototype.makePath = function () {
        this._distance = 0;
        var segments = this.segments;
        var tensionX = this.tensionX;
        var tensionY = this.tensionY;
        this.allPoints = [];

        if (segments && segments.length > 0) {
          var path = "";
          this._realSegments = [];

          for (var i = 0, len = segments.length; i < len; i++) {
            var points = segments[i];
            var realPoints = [];

            this._realSegments.push(realPoints);

            if (points.length > 0) {
              var first = points[0];
              var last = points[points.length - 1];
              var closed_1 = false;

              if (_core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](first.x, 3) == _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](last.x) && _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](first.y) == _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](last.y)) {
                closed_1 = true;
              }

              path += _core_rendering_Path__WEBPACK_IMPORTED_MODULE_5__["moveTo"](points[0]);

              for (var p = 0; p < points.length - 1; p++) {
                var p0 = points[p - 1];
                var p1 = points[p];
                var p2 = points[p + 1];
                var p3 = points[p + 2];

                if (p === 0) {
                  p0 = points[p];
                } else if (p == points.length - 2) {
                  p3 = points[p + 1];
                }

                if (!p3) {
                  p3 = p2;
                }

                if (p === 0) {
                  if (closed_1) {
                    p0 = points[points.length - 2];
                  } else {
                    p0 = points[i];
                  }
                } else if (p == points.length - 2) {
                  if (closed_1) {
                    p3 = points[1];
                  } else {
                    p3 = points[p + 1];
                  }
                }

                var controlPointA = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getCubicControlPointA"](p0, p1, p2, p3, tensionX, tensionY);

                var controlPointB = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getCubicControlPointB"](p0, p1, p2, p3, tensionX, tensionY);

                path += _core_rendering_Path__WEBPACK_IMPORTED_MODULE_5__["cubicCurveTo"](p2, controlPointA, controlPointB); // now split to small segments so that we could have positionToPoint later

                var stepCount = Math.ceil(_core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getCubicCurveDistance"](p1, p2, controlPointA, controlPointB, 20)) * 1.2;
                var prevPoint = p1;

                if (stepCount > 0) {
                  // not good for curved charts
                  //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };
                  //realPoints.push(this.allPoints[0]);
                  for (var s = 0; s <= stepCount; s++) {
                    var point = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getPointOnCubicCurve"](p1, p2, controlPointA, controlPointB, s / stepCount);

                    if (point.x == prevPoint.x && point.y == prevPoint.y) {
                      continue;
                    }

                    realPoints.push(point);

                    var angle = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](_core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getAngle"](prevPoint, point), 5); //this.allPoints.push({ x: point.x, y: point.y, angle: angle });


                    this._distance += _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getDistance"](prevPoint, point);
                    this.allPoints[Math.floor(this._distance)] = {
                      x: point.x,
                      y: point.y,
                      angle: angle
                    };
                    prevPoint = point;
                  }
                } else {
                  realPoints.push(p0);
                }
              }
            }

            var allPoints = this.allPoints;

            if (allPoints.length > 1) {
              for (var i_1 = 0; i_1 < allPoints.length; i_1++) {
                if (!allPoints[i_1]) {
                  if (i_1 > 1) {
                    allPoints[i_1] = allPoints[i_1 - 1];
                  } else {
                    for (var k = 1; k < allPoints.length; k++) {
                      if (allPoints[k]) {
                        allPoints[i_1] = allPoints[k];
                        break;
                      }
                    }
                  }
                }
              }
            }
          }

          this.path = path;
        }
      };
      /**
       * Returns an index of the point that is closest to specified coordinates.
       *
       * @param   point  Reference point
       * @return         Index
       */


      Polyspline.prototype.getClosestPointIndex = function (point) {
        var points = this.allPoints;
        var index;
        var closest = Infinity;

        if (points.length > 1) {
          for (var p = 1; p < points.length; p++) {
            var distance = _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getDistance"](point, points[p]);

            if (distance < closest) {
              index = p;
              closest = distance;
            }
          }
        }

        return index;
      };

      Object.defineProperty(Polyspline.prototype, "tensionX", {
        /**
         * @return Tension
         */
        get: function get() {
          return this.getPropertyValue("tensionX");
        },

        /**
         * Horizontal tension for the spline.
         *
         * Used by the line smoothing algorithm.
         *
         * @default 0.5
         * @param value  Tension
         */
        set: function set(value) {
          this.setPropertyValue("tensionX", value);
          this.makePath();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Polyspline.prototype, "tensionY", {
        /**
         * @return Tension
         */
        get: function get() {
          return this.getPropertyValue("tensionY");
        },

        /**
         * Vertical tension for the spline.
         *
         * Used by the line smoothing algorithm.
         *
         * @default 0.5
         * @param value  Tensions
         */
        set: function set(value) {
          this.setPropertyValue("tensionY", value, true);
          this.makePath();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts relative position along the line (0-1) into pixel coordinates.
       *
       * @param position  Position (0-1)
       * @return Coordinates
       */

      Polyspline.prototype.positionToPoint = function (position, extend) {
        var deltaAngle = 0;
        var allPoints = this.allPoints;
        var len = allPoints.length;

        if (!_core_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](position)) {
          position = 0;
        }

        if (len > 1) {
          if (extend && len > 3) {
            if (position < 0) {
              if (position < -0.01) {
                position = -0.01;
              }

              var f0 = allPoints[0];
              var f1 = allPoints[1];
              var x = f0.x - (f0.x - f1.x) * len * position;
              var y = f0.y - (f0.y - f1.y) * len * position;
              return {
                x: x,
                y: y,
                angle: _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getAngle"](f0, f1)
              };
            } else if (position > 1) {
              if (position > 1.01) {
                position = 1.01;
              }

              var f0 = allPoints[allPoints.length - 2];
              var f1 = allPoints[allPoints.length - 3];
              var x = f0.x + (f0.x - f1.x) * len * (position - 1);
              var y = f0.y + (f0.y - f1.y) * len * (position - 1);
              return {
                x: x,
                y: y,
                angle: _core_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getAngle"](f0, {
                  x: x,
                  y: y
                })
              };
            } else if (position == 1) {
              var point_1 = allPoints[allPoints.length - 1];
              return {
                x: point_1.x,
                y: point_1.y,
                angle: point_1.angle
              };
            }
          } else {
            if (position < 0) {
              position = Math.abs(position);
              deltaAngle = 180;
            }

            if (position >= 1) {
              position = 0.9999999999999;
            }
          }

          var point = allPoints[Math.floor(position * len)];
          return {
            x: point.x,
            y: point.y,
            angle: point.angle + deltaAngle
          };
        } else if (len == 1) {
          var point = allPoints[0];
          return {
            x: point.x,
            y: point.y,
            angle: point.angle
          };
        } else {
          return {
            x: 0,
            y: 0,
            angle: 0
          };
        }
      };

      return Polyspline;
    }(_Polyline__WEBPACK_IMPORTED_MODULE_1__["Polyline"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Polyspline"] = Polyspline; //# sourceMappingURL=Polyspline.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Popup.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Popup.js ***!
    \***************************************************************************/

  /*! exports provided: Popup */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPopupJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Popup", function () {
      return Popup;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _PopupCSS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./PopupCSS */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/PopupCSS.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../interaction/Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _utils_Keyboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Keyboard */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /**
     * Popup class is used to display information over chart area.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Shows an HTML popup which covers window or a chart area.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/popups-and-modals/} For examples and docs on Popups and Modals.
     * @todo Positioning over whole window
     */


    var Popup =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Popup, _super);
      /**
       * Constructor
       */

      function Popup() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         */


        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](_this);
        /**
         * Holds references to various HTML elements, Popup consists of.
         */

        _this._elements = {};
        /**
         * Holdes Interaction objects for various Popup's elements.
         */

        _this._IOs = {};
        /**
         * Contents of popup window.
         */

        _this._content = "";
        /**
         * Title of the popup window.
         */

        _this._title = "";
        /**
         * Prefix to apply to class names for popup elements.
         */

        _this._classPrefix = "ampopup";
        /**
         * If set to `true` [[Popup]] will use default styles.
         */

        _this._defaultStyles = true;
        /**
         * If set to `true` [[Popup]] will dim out all chart content behind it by
         * showing a semi-transparent fill. (curtain)
         */

        _this._showCurtain = false;
        /**
         * Indicates whether popup can be dragged.
         */

        _this._draggable = true;
        /**
         * Horizontal position of the content window.
         */

        _this._align = "center";
        /**
         * Vertical position of the content window.
         */

        _this._verticalAlign = "middle";
        /**
         * Shift in position of the element. (used for dragging)
         */

        _this._shift = {
          x: 0,
          y: 0
        };
        /**
         * Temporary shift in position of the element. (used for dragging)
         */

        _this._tempShift = {
          x: 0,
          y: 0
        };
        /**
         * A title for screen readers. It is very highly recommended to set that title
         * so that people using screen reader tools can get an immediate summary of
         * the information in the popup.
         */

        _this._readerTitle = "";
        /**
         * Is popup closable?
         */

        _this._closable = true;
        /**
         * Was CSS already loaded?
         */

        _this._cssLoaded = false;
        /**
         * If set to other than "none" will try to re-adjust the position of the
         * popop to fit within chart container or browser window.
         *
         * @ignore Feature not yet implemented
         * @todo Implement
         */

        _this._fitTo = "window";
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         *
         * @ignore Exclude from docs
         */

        _this.isTemplate = false;
        /**
         * Indicates if the element was already sized and should not be measured for
         * sized again, saving some precious resources.
         */

        _this._sized = false;
        _this.className = "Popup";
        return _this;
      }
      /**
       * Shows popup window.
       */


      Popup.prototype.open = function () {
        if (this.container) {
          if (this._elements.wrapper) {
            this.container.appendChild(this._elements.wrapper);
          }

          if (this._elements.curtain) {
            this.container.appendChild(this._elements.curtain);
            this.showCurtain = this.showCurtain;
          }

          this.positionElement();
          this.dispatchImmediately("opened");
        }
      };
      /**
       * Hides popup window.
       */


      Popup.prototype.close = function () {
        if (this._elements.wrapper) {
          if (this._elements.wrapper.parentElement) {
            this._elements.wrapper.parentElement.removeChild(this._elements.wrapper);
          }
        }

        if (this._elements.curtain) {
          if (this._elements.curtain.parentElement) {
            this._elements.curtain.parentElement.removeChild(this._elements.curtain);
          }
        }

        this.dispatchImmediately("closed");
        this.releasePointers();
      };
      /**
       * Destroy (dispose) popup.
       */


      Popup.prototype.dispose = function () {
        this.close();

        _super.prototype.dispose.call(this);
      };
      /**
       * Positions content element in the center of popup based on its actual size.
       *
       * @ignore Exclude from docs
       */


      Popup.prototype.positionElement = function (forceResize) {
        var _this = this;

        if (forceResize === void 0) {
          forceResize = true;
        }

        if (!this._elements.wrapper) {
          return;
        }

        setTimeout(function () {
          if (!_this._elements.wrapper) {
            return;
          }

          if (forceResize || !_this._sized) {
            _this._elements.wrapper.style.opacity = "0.01";
            _this._elements.wrapper.style.left = "0";
            _this._elements.wrapper.style.top = "0";
            _this._elements.wrapper.style.margin = "0 0 0 0"; // Size the element, but only for the first time

            if (!_this._elements.wrapper.style.width) {
              var bbox = _this._elements.wrapper.getBoundingClientRect();

              _this._elements.wrapper.style.width = bbox.width + "px";
              _this._elements.wrapper.style.height = bbox.height + "px";
            }

            _this._sized = true;
          }

          setTimeout(function () {
            if (!_this._elements.wrapper) {
              return;
            }

            var bbox;

            if ((forceResize || !_this._sized) && _this._bbox) {
              bbox = _this._bbox;
            } else {
              bbox = _this._elements.wrapper.getBoundingClientRect();
              _this._elements.wrapper.style.opacity = "";
            } // Set horizontal positioning


            switch (_this.align) {
              case "left":
                _this._elements.wrapper.style.left = "0";
                _this._elements.wrapper.style.right = "auto";
                _this._elements.wrapper.style.marginLeft = _this.toStyle(_this._shift.x + _this._tempShift.x);
                break;

              case "center":
                _this._elements.wrapper.style.left = "50%";
                _this._elements.wrapper.style.right = "auto";
                _this._elements.wrapper.style.marginLeft = _this.toStyle(Math.round(-bbox.width / 2) + (_this._shift.x + _this._tempShift.x));
                break;

              case "right":
                _this._elements.wrapper.style.left = "auto";
                _this._elements.wrapper.style.right = "0";
                _this._elements.wrapper.style.marginLeft = _this.toStyle(_this._shift.x + _this._tempShift.x);
                break;

              default:
                _this._elements.wrapper.style.left = _this.toStyle(_this.left) || "auto";
                _this._elements.wrapper.style.right = _this.toStyle(_this.right) || "auto";
                _this._elements.wrapper.style.marginLeft = _this.toStyle(_this._shift.x + _this._tempShift.x);
                break;
            } // Set vertical positioning


            switch (_this.verticalAlign) {
              case "top":
                _this._elements.wrapper.style.top = "0";
                _this._elements.wrapper.style.bottom = "auto";
                _this._elements.wrapper.style.marginTop = _this.toStyle(_this._shift.y + _this._tempShift.y);
                break;

              case "middle":
                _this._elements.wrapper.style.top = "50%";
                _this._elements.wrapper.style.bottom = "auto";
                _this._elements.wrapper.style.marginTop = _this.toStyle(Math.round(-bbox.height / 2) + (_this._shift.y + _this._tempShift.y));
                break;

              case "bottom":
                _this._elements.wrapper.style.top = "auto";
                _this._elements.wrapper.style.bottom = "0";
                _this._elements.wrapper.style.marginTop = _this.toStyle(_this._shift.y + _this._tempShift.y);
                break;

              default:
                _this._elements.wrapper.style.top = _this.toStyle(_this.top) || "auto";
                _this._elements.wrapper.style.bottom = _this.toStyle(_this.bottom) || "auto";
                _this._elements.wrapper.style.marginTop = _this.toStyle(_this._shift.y + _this._tempShift.y);
                break;
            }
          }, 1);
        }, 1);
      };

      Popup.prototype.setupDragging = function () {
        var _this = this;

        if (this.draggable) {
          if (!this._IOs.header.events.has("drag")) {
            this._IOs.header.events.on("drag", function (ev) {
              _this._tempShift.x = ev.shift.x;
              _this._tempShift.y = ev.shift.y;

              _this.positionElement(false);
            });
          }

          if (!this._IOs.header.events.has("dragstop")) {
            this._IOs.header.events.on("dragstop", function (ev) {
              _this._shift.x += _this._tempShift.x;
              _this._shift.y += _this._tempShift.y;
              _this._tempShift.x = 0;
              _this._tempShift.y = 0;

              _this.positionElement(false);
            });
          }
        } else {
          if (this._IOs.header) {
            Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().unprepElement(this._IOs.header);

            if (this._IOs.header.events.has("drag")) {
              this._IOs.header.events.off("drag");
            }

            if (this._IOs.header.events.has("dragstop")) {
              this._IOs.header.events.off("dragstop");
            }
          }
        }
      };

      Popup.prototype.toStyle = function (value) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](value)) {
          return null;
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["isNumber"](value)) {
          return "" + value + "px";
        } else {
          return value.toString();
        }
      };

      Object.defineProperty(Popup.prototype, "classPrefix", {
        /**
         * A prefix that is applied to class names of various popup elements.
         *
         * @return Class name prefix
         */
        get: function get() {
          return this.adapter.apply("classPrefix", this._classPrefix);
        },

        /**
         * @param value Class name prefix
         */
        set: function set(value) {
          this._classPrefix = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "classPrefixRaw", {
        /**
         * Returns raw prefix (without adapters applied).
         *
         * @ignore Exclude from docs
         * @return Class name prefix
         */
        get: function get() {
          return this._classPrefix;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "content", {
        /**
         * @return Popup content
         */
        get: function get() {
          return this.adapter.apply("content", this._content);
        },

        /**
         * Popup content.
         *
         * Popup content can be any valid HTML, including CSS.
         *
         * @param value Popup content
         */
        set: function set(value) {
          if (this._content != value) {
            this._content = value;

            if (!this._elements.content) {
              this.createContentElement();
            }

            this._elements.content.innerHTML = value;
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });

      Popup.prototype.getClassNames = function () {
        return this.adapter.apply("classNames", {
          wrapperClass: this.classPrefix + "",
          headerClass: this.classPrefix + "-header",
          titleClass: this.classPrefix + "-title",
          contentClass: this.classPrefix + "-content",
          insideClass: this.classPrefix + "-inside",
          curtainClass: this.classPrefix + "-curtain",
          closeClass: this.classPrefix + "-close"
        });
      };
      /**
       * Creates content element.
       */


      Popup.prototype.createContentElement = function () {
        // Check if it's created already
        if (this._elements.wrapper) {
          return;
        } // Get class names for popup elements


        var classNames = this.getClassNames(); // Create content element

        var wrapper = document.createElement("div");
        wrapper.className = classNames.contentClass;
        wrapper.style.opacity = "0.01"; // Create close button

        var close = document.createElement("a");
        close.className = classNames.closeClass; // header title

        var header = document.createElement("div");
        header.className = classNames.headerClass; // Content title

        var title = document.createElement("div");
        title.innerHTML = this.title;
        title.className = classNames.titleClass;

        if (!this.title) {
          title.style.display = "none";
        } // Content div


        var content = document.createElement("div");
        content.className = classNames.insideClass;
        content.innerHTML = this.content; // Set up events for content

        this._IOs.wrapper = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().getInteraction(wrapper);
        this._IOs.header = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().getInteraction(header);

        this._disposers.push(this._IOs.wrapper); // Set hover/out events


        this._IOs.wrapper.events.on("over", this.disablePointers, this);

        this._IOs.wrapper.events.on("out", this.releasePointers, this); // Create an InteractionObject for close


        this._IOs.close = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().getInteraction(close);

        this._disposers.push(this._IOs.close); // Hide close for now


        close.style.visibility = "hidden"; // Add accessible stuff

        wrapper.setAttribute("role", "dialog"); // Add to wrapper

        header.appendChild(close);
        header.appendChild(title);
        wrapper.appendChild(header);
        wrapper.appendChild(content);
        this.container.appendChild(wrapper); // Save for later access

        this._elements.wrapper = wrapper;
        this._elements.header = header;
        this._elements.content = content;
        this._elements.title = title;
        this._elements.close = close; // Load CSS

        if (this.defaultStyles) {
          this.loadDefaultCSS();
        } // Create curtain as well


        this.createCurtainElement(); // Apply events

        this.applyEvents();
        this.applyReaderSettings(); // Draggable?

        this.setupDragging();
      };

      Object.defineProperty(Popup.prototype, "title", {
        /**
         * @return Popup title
         */
        get: function get() {
          return this.adapter.apply("title", this._title);
        },

        /**
         * Popup title.
         *
         * Popup title can be any valid HTML, including CSS.
         *
         * @param value  Popup title
         */
        set: function set(value) {
          if (this._title != value) {
            this._title = value;

            if (!this._elements.content) {
              this.createContentElement();
            }

            this._elements.title.innerHTML = value;
            this.positionElement();
            this.applyReaderSettings();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "readerTitle", {
        /**
         * @return Popup content
         */
        get: function get() {
          return this.adapter.apply("readerTitle", this._readerTitle != "" ? this._readerTitle : this.title);
        },

        /**
         * A title for screen readers. It is very highly recommended to set that title
         * so that people using screen reader tools can get an immediate summary of
         * the information in the popup.
         *
         * @param value  Reader title
         */
        set: function set(value) {
          if (this._readerTitle != value) {
            this._readerTitle = value;
            this.applyReaderSettings();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "closable", {
        /**
         * @return Closable?
         */
        get: function get() {
          return this.adapter.apply("closable", this._closable);
        },

        /**
         * Is popup closable?
         *
         * If it is, it can be closed in a number of ways, e.g. by hitting ESC key,
         * clicking curtain, or clicking the close button.
         *
         * If it is not closable, the only way to close it is via `close()` call.
         *
         * @param value Closable?
         */
        set: function set(value) {
          if (value !== this._closable) {
            this._closable = value;
            this.applyEvents();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "fitTo", {
        /**
         * @ignore
         * @todo Implement
         * @return Fit option
         */
        get: function get() {
          return this.adapter.apply("fitTo", this._fitTo);
        },

        /**
         * If set to other than "none" will try to re-adjust the position of the
         * popop to fit within chart container or browser window.
         *
         * @ignore
         * @todo Implement
         * @default "window"
         * @param value  Fit option
         */
        set: function set(value) {
          if (value != this._fitTo) {
            this._fitTo = value;
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "defaultStyles", {
        /**
         * @return Use default CSS?
         */
        get: function get() {
          return this.adapter.apply("defaultStyles", this._defaultStyles);
        },

        /**
         * Should popup use default CSS?
         *
         * If default CSS is disabled, an external CSS should handle the look of the
         * popup, since it will look quite out of place otherwise.
         *
         * @default true
         * @param Use default CSS?
         */
        set: function set(value) {
          if (this._defaultStyles != value) {
            this._defaultStyles = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "showCurtain", {
        /**
         * @return Show curtain?
         */
        get: function get() {
          return this.adapter.apply("showCurtain", this._showCurtain);
        },

        /**
         * Should popup use dim out all content behind it?
         *
         * @default false
         * @param Show curtain?
         */
        set: function set(value) {
          if (this._showCurtain != value) {
            this._showCurtain = value;

            if (this._elements.curtain) {
              this._elements.curtain.style.display = value ? "block" : "none";
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates curtain element.
       */

      Popup.prototype.createCurtainElement = function () {
        // Get class names for popup elements
        var classNames = this.getClassNames(); // Create the curtain

        var curtain = document.createElement("div");
        curtain.className = classNames.curtainClass; // Append curtain to wrapper

        this.container.appendChild(curtain); // Create an InteractionObject for curtain because we might need to
        // set interactions on it

        this._IOs.curtain = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().getInteraction(curtain); // Add Curtain IO to disposers

        this._disposers.push(this._IOs.curtain); // Set events to disable underlying interactivity


        this._IOs.curtain.events.on("over", this.disablePointers, this);

        this._IOs.curtain.events.on("out", this.releasePointers, this); // Hide it?


        curtain.style.display = this.showCurtain ? "block" : "none"; // Save for later

        this._elements.curtain = curtain;
      };

      Object.defineProperty(Popup.prototype, "draggable", {
        /**
         * @return Show curtain?
         */
        get: function get() {
          return this.adapter.apply("draggable", this._draggable);
        },

        /**
         * Can the popup be dragged with a pointer?
         *
         * @default false
         * @param Show curtain?
         */
        set: function set(value) {
          if (this._draggable != value) {
            this._draggable = value;
            this.setupDragging();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "align", {
        /**
         * @return Horizontal position
         */
        get: function get() {
          return this.adapter.apply("align", this._align);
        },

        /**
         * Horizontal positioning of the content window.
         *
         * Available options: "left", "center" (default), "right", and "none".
         *
         * @default "center"
         * @param Horizontal position
         */
        set: function set(value) {
          if (this._align != value) {
            this._align = value;
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "verticalAlign", {
        /**
         * @return Vertical position
         */
        get: function get() {
          return this.adapter.apply("verticalAlign", this._verticalAlign);
        },

        /**
         * Vertical positioning of the content window.
         *
         * Available options: "top", "middle" (default), "bottom", and "none".
         *
         * @default "middle"
         * @param Vertical position
         */
        set: function set(value) {
          if (this._verticalAlign != value) {
            this._verticalAlign = value;
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "left", {
        /**
         * @return Left
         */
        get: function get() {
          return this.adapter.apply("left", this._left);
        },

        /**
         * "left" coordinate of a non-aligned (`align = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `align` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param Left
         */
        set: function set(value) {
          if (this.left != value) {
            this._left = value;
            this._align = "none";
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "right", {
        /**
         * @return Right
         */
        get: function get() {
          return this.adapter.apply("right", this._right);
        },

        /**
         * "right" coordinate of a non-aligned (`align = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `align` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param Right
         */
        set: function set(value) {
          if (this.right != value) {
            this._right = value;
            this._align = "none";
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "top", {
        /**
         * @return Top
         */
        get: function get() {
          return this.adapter.apply("top", this._top);
        },

        /**
         * "top" coordinate of a non-aligned (`verticalAlign = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `verticalAlign` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param Top
         */
        set: function set(value) {
          if (this.top != value) {
            this._top = value;
            this._verticalAlign = "none";
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "bottom", {
        /**
         * @return Bottom
         */
        get: function get() {
          return this.adapter.apply("bottom", this._bottom);
        },

        /**
         * "bottom" coordinate of a non-aligned (`verticalAlign = "none"`) popup.
         *
         * Can be either absolute pixel value, or relative (`Percent`).
         *
         * Setting this property will automatically set `verticalAlign` to "none".
         *
         * NOTE: The position is relative to the chart container.
         *
         * @param Bottom
         */
        set: function set(value) {
          if (this.bottom != value) {
            this._bottom = value;
            this._verticalAlign = "none";
            this.positionElement();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Popup.prototype, "elements", {
        /**
         * Returns an object with references to various elements of the Popup.
         *
         * * `wrapper`
         * * `title`
         * * `content`
         * * `close`
         * * `curtain`
         */
        get: function get() {
          return this._elements;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Loads popup CSS.
       *
       * @ignore Exclude from docs
       */

      Popup.prototype.loadDefaultCSS = function () {
        if (!this._cssLoaded) {
          this._disposers.push(Object(_PopupCSS__WEBPACK_IMPORTED_MODULE_1__["default"])(this.classPrefix));

          _utils_Object__WEBPACK_IMPORTED_MODULE_8__["each"](this._elements, function (key, el) {
            el.style.display = "";
          });

          this._cssLoaded = true;
        }
      };
      /**
       * If popup is closable, this method adds various events to popup elements.
       */


      Popup.prototype.applyEvents = function () {
        var _this = this;

        if (this._IOs.close) {
          if (this.closable) {
            this._IOs.close.element.style.visibility = "visible";
            var disposers = [Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().body.events.on("keyup", function (ev) {
              if (_utils_Keyboard__WEBPACK_IMPORTED_MODULE_5__["keyboard"].isKey(ev.event, "esc") && _this.closable) {
                _this.close();
              }
            }), this._IOs.close.events.on("hit", function (ev) {
              _this.close();
            })];
            disposers.push(this._IOs.curtain.events.on("hit", function (ev) {
              if (_this.showCurtain && _this.closable) {
                _this.close();
              }
            }));

            this._disposers.push(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_6__["MultiDisposer"](disposers));
          } else {
            this._IOs.close.element.style.visibility = "hidden";
          }
        }
      };
      /**
       * Disables interactivity on parent chart.
       */


      Popup.prototype.disablePointers = function () {
        if (this.sprite) {
          this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;
          this.sprite.interactionsEnabled = false;
        }
      };
      /**
       * Releases temporarily disabled pointers on parent chart.
       */


      Popup.prototype.releasePointers = function () {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](this._spriteInteractionsEnabled)) {
          this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;
          this._spriteInteractionsEnabled = undefined;
        }
      };
      /**
       * Sets screen reader related settings.
       */


      Popup.prototype.applyReaderSettings = function () {
        this.elements.wrapper.setAttribute("aria-label", this.readerTitle);
      };
      /**
       * Copies all properties and related data from different element.
       *
       * @param object Source element
       */


      Popup.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.container = source.container;
        this.sprite = source.sprite;
        this.classPrefix = source.classPrefixRaw;
        this.content = source.content;
        this.title = source.title;
        this.readerTitle = source.readerTitle;
        this.defaultStyles = source.defaultStyles;
        this.showCurtain = source.showCurtain;
        this.align = source.align;
        this.verticalAlign = source.verticalAlign;
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.adapter.copyFrom(source.adapter);
      };

      return Popup;
    }(_Base__WEBPACK_IMPORTED_MODULE_3__["BaseObjectEvents"]); //# sourceMappingURL=Popup.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/PopupCSS.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/PopupCSS.js ***!
    \******************************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPopupCSSJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");

    var rules = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_1__["Dictionary"]();
    /**
     * Default CSS for Popup.
     *
     * @ignore Exclude from docs
     * @param prefix  Prefix for CSS classes
     * @return Disposer for the CSS definition
     */

    /* harmony default export */

    __webpack_exports__["default"] = function (prefix) {
      if (!prefix) {
        prefix = "ampopup";
      }

      var cs = new _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__["InterfaceColorSet"]();
      var fg = cs.getFor("text");
      var bg = cs.getFor("background");
      bg.alpha = 0.8;
      var abg = cs.getFor("alternativeBackground");
      abg.alpha = 0.05;
      var counter = rules.insertKeyIfEmpty(prefix, function () {
        var disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_2__["MultiDisposer"]([new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix, {
          //"width": "100%",
          //"height": "100%",
          "overflow": "visible",
          "position": "absolute",
          "top": "0",
          "left": "0",
          "z-index": "2000"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix + "-curtain", {
          "width": "100%",
          "height": "100%",
          "position": "absolute",
          "top": "0",
          "left": "0",
          "z-index": "2001",
          "background-color": bg.hex,
          "opacity": "0.5"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix + "-header", {
          "display": "block",
          "width": "100%",
          "min-height": "1.8em",
          "background": abg.rgba
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix + "-title", {
          "font-weight": "bold",
          "font-size": "110%",
          "padding": "0.5em 1.2em 0.5em 1em"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix + "-content", {
          /*"width": "100%",
          "height": "100%",*/
          // "padding": "2em 1em 1em 1em",
          "background": bg.hex,
          "background-color": bg.rgba,
          "color": fg.hex,
          "display": "inline-block",
          "position": "absolute",
          "top": "0",
          "left": "0",
          "max-width": "90%",
          "max-height": "90%",
          "overflow": "auto",
          "z-index": "2002"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix + "-inside", {
          "padding": "1em"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + prefix + "-close", {
          "display": "block",
          "position": "absolute",
          "top": "0.3em",
          "right": "0.3em",
          "background-color": "rgb(100, 100, 100)",
          "background": "rgba(100, 100, 100, 0.1) url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=) no-repeat center",
          "background-size": "80%",
          "width": "1.2em",
          "height": "1.2em",
          "cursor": "pointer"
        })]);
        return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_2__["CounterDisposer"](function () {
          rules.removeKey(prefix);
          disposer.dispose();
        });
      });
      return counter.increment();
    }; //# sourceMappingURL=PopupCSS.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Preloader.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Preloader.js ***!
    \*******************************************************************************/

  /*! exports provided: Preloader */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsPreloaderJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Preloader", function () {
      return Preloader;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _Slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Slice */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js");
    /* harmony import */


    var _Label__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Label */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_Percent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../core/utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /**
     * Preloader module.
     *
     * Preloader is a progress indicator.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * A class used to draw and display progress indicator.
     *
     * @see {@link IPreloaderEvents} for a list of available events
     * @see {@link IPreloaderAdapters} for a list of available Adapters
     */


    var Preloader =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Preloader, _super);
      /**
       * Constructor
       */

      function Preloader() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "Preloader"; // Set dimensions

        _this.width = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_6__["percent"])(100);
        _this.height = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_6__["percent"])(100);
        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_2__["InterfaceColorSet"](); // Create main container

        var sliceContainer = _this.createChild(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);

        sliceContainer.shouldClone = false; // Add background (100%) slice

        var backgroundSlice = sliceContainer.createChild(_Slice__WEBPACK_IMPORTED_MODULE_3__["Slice"]);
        backgroundSlice.shouldClone = false;
        backgroundSlice.radius = 53;
        backgroundSlice.arc = 360;
        backgroundSlice.fill = interfaceColors.getFor("fill");
        backgroundSlice.fillOpacity = 0.8;
        backgroundSlice.innerRadius = 42;
        backgroundSlice.isMeasured = false;
        _this.backgroundSlice = backgroundSlice; // Add progress slice

        var progressSlice = sliceContainer.createChild(_Slice__WEBPACK_IMPORTED_MODULE_3__["Slice"]);
        progressSlice.shouldClone = false;
        progressSlice.radius = 50;
        progressSlice.innerRadius = 45;
        progressSlice.fill = interfaceColors.getFor("alternativeBackground");
        progressSlice.fillOpacity = 0.2;
        progressSlice.isMeasured = false;
        _this.progressSlice = progressSlice; // Add text label element

        var label = sliceContainer.createChild(_Label__WEBPACK_IMPORTED_MODULE_4__["Label"]);
        label.shouldClone = false;
        label.horizontalCenter = "middle";
        label.verticalCenter = "middle";
        label.isMeasured = false;
        label.fill = interfaceColors.getFor("text");
        label.align = "center";
        label.valign = "middle";
        label.fillOpacity = 0.4;
        _this.label = label; // Set defaults

        _this.background.opacity = 1;
        _this.background.fill = interfaceColors.getFor("background");
        _this.contentAlign = "center";
        _this.contentValign = "middle";
        _this.delay = 300; // Create hidden state

        var hiddenState = _this.states.create("hidden");

        hiddenState.properties.opacity = 0; // Hide by default

        _this.visible = false;

        _this.hide(0);

        _this.__disabled = true; // Make it disposable
        // @todo Maybe it's enough to just dispose `sliceContainer`?

        _this._disposers.push(_this.backgroundSlice);

        _this._disposers.push(_this.progressSlice);

        _this._disposers.push(_this.label);

        _this._disposers.push(sliceContainer);

        return _this;
      }

      Object.defineProperty(Preloader.prototype, "progress", {
        /**
         * @return Progress (0-1)
         */
        get: function get() {
          return this.getPropertyValue("progress");
        },

        /**
         * Current preload progress. (0-1)
         *
         * * 0 - 0%
         * * 0.5 - 50%
         * * 1 - 100%
         *
         * Setting this to a value less than 1, will automatically reveal the
         * preloader, while setting it to 1 (100%) will hide it.
         *
         * @param value Progress (0-1)
         */
        set: function set(value) {
          var _this = this;

          this.__disabled = false;
          this.validateLayout(); // show not in center without this

          this.setPropertyValue("progress", value);
          /*if (!this.visible && value == 1) {
              return;
          }*/

          this.progressSlice.arc = 360 * value;

          if (this.label) {
            this.label.text = Math.round(value * 100) + "%";
          }

          if (value >= 1) {
            // Cancel the timeout
            if (this._started) {
              this._started = undefined;
            } // TODO remove closure ?


            _Registry__WEBPACK_IMPORTED_MODULE_5__["registry"].events.once("enterframe", function () {
              var animation = _this.hide();

              if (animation && !animation.isFinished()) {
                animation.events.once("animationended", function () {
                  _this.__disabled = true;
                });
              } else {
                _this.__disabled = true;
              }
            });

            this.interactionsEnabled = false;
            this.setPropertyValue("progress", 0);
          } else if (value > 0) {
            if (this.delay) {
              if (!this._started) {
                this._started = new Date().getTime();
              } else if (this._started + this.delay <= new Date().getTime()) {
                this.__disabled = false;
                this.show();
                this.interactionsEnabled = true;
              }
            } else {
              this.__disabled = false;
              this.show();
              this.interactionsEnabled = true;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Preloader.prototype, "delay", {
        /**
         * @return Delay (ms)
         */
        get: function get() {
          return this.getPropertyValue("delay");
        },

        /**
         * Delay display of preloader by X milliseconds.
         *
         * When loading starts (`progress` is set to <1) and finishes (`progress` is
         * set to 1) before `delay` ms, the loader is never shown.
         *
         * This is used to avoid brief flashing of the preload for very quick loads.
         *
         * @default 1000
         * @param value  Delay (ms)
         */
        set: function set(value) {
          this.setPropertyValue("delay", value);
        },
        enumerable: true,
        configurable: true
      });
      return Preloader;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_5__["registry"].registeredClasses["Preloader"] = Preloader; //# sourceMappingURL=Preloader.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Rectangle.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Rectangle.js ***!
    \*******************************************************************************/

  /*! exports provided: Rectangle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsRectangleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Rectangle", function () {
      return Rectangle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Functionality for drawing rectangles.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Used to draw a rectangle.
     *
     * @see {@link IRectangleEvents} for a list of available events
     * @see {@link IRectangleAdapters} for a list of available Adapters
     */


    var Rectangle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Rectangle, _super);
      /**
       * Constructor
       * * Creates a `<rect>` element
       * * Creates default state
       */

      function Rectangle() {
        var _this = _super.call(this) || this;

        _this.className = "Rectangle";
        _this.element = _this.paper.add("rect"); //this.pixelPerfect = false;

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Rectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var precision = this._positionPrecision;

        if (this.pixelPerfect) {
          precision = 0;
        }

        var w = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](this.innerWidth, precision);

        var h = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["round"](this.innerHeight, precision);

        this.element.attr({
          "width": w,
          "height": h
        });
      };
      /**
       * Measures the element.
       *
       * @ignore Exclude from docs
       */


      Rectangle.prototype.measureElement = function () {};

      Object.defineProperty(Rectangle.prototype, "bbox", {
        /**
         * Returns bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         */
        get: function get() {
          if (this.definedBBox) {
            return this.definedBBox;
          }

          if (this.isMeasured) {
            return {
              x: 0,
              y: 0,
              width: this.innerWidth,
              height: this.innerHeight
            };
          } else {
            return {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            };
          }
        },
        enumerable: true,
        configurable: true
      });
      return Rectangle;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Rectangle"] = Rectangle; //# sourceMappingURL=Rectangle.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/ResizeButton.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/ResizeButton.js ***!
    \**********************************************************************************/

  /*! exports provided: ResizeButton */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsResizeButtonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ResizeButton", function () {
      return ResizeButton;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Resize button module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a draggable resize/grip button.
     *
     * @see {@link IResizeButtonEvents} for a list of available events
     * @see {@link IResizeButtonAdapters} for a list of available Adapters
     */


    var ResizeButton =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ResizeButton, _super);
      /**
       * Constructor
       */

      function ResizeButton() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "ResizeButton"; // Set defaults

        _this.orientation = "horizontal";
        _this.layout = "absolute";
        _this.horizontalCenter = "middle";
        _this.verticalCenter = "middle";
        _this.draggable = true;

        _this.padding(8, 8, 8, 8);

        _this.background.cornerRadius(20, 20, 20, 20); // Create an icon


        var icon = new _Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]();
        icon.element = _this.paper.add("path");

        var path = _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["moveTo"]({
          x: -2,
          y: -6
        });

        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["lineTo"]({
          x: -2,
          y: 6
        });
        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["moveTo"]({
          x: 2,
          y: -6
        });
        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["lineTo"]({
          x: 2,
          y: 6
        });
        icon.path = path;
        icon.pixelPerfect = true;
        icon.padding(0, 4, 0, 4);
        icon.stroke = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__["InterfaceColorSet"]().getFor("alternativeText");
        icon.strokeOpacity = 0.7; //icon.align = "center";
        //icon.valign = "middle";

        _this.icon = icon;

        _this.label.dispose();

        _this.label = undefined; // Apply theme

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(ResizeButton.prototype, "orientation", {
        /**
         * Use for setting of direction (orientation) of the resize button.
         *
         * Available options: "horizontal", "vertical".
         *
         * @param value Orientation
         */
        set: function set(value) {
          var icon = this.icon;

          if (icon) {
            if (value == "horizontal") {
              icon.rotation = 0;
            } else {
              icon.rotation = -90;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      return ResizeButton;
    }(_Button__WEBPACK_IMPORTED_MODULE_1__["Button"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["ResizeButton"] = ResizeButton; //# sourceMappingURL=ResizeButton.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js":
  /*!**************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js ***!
    \**************************************************************************************/

  /*! exports provided: RoundedRectangle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsRoundedRectangleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RoundedRectangle", function () {
      return RoundedRectangle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /**
     * Rounded rectangle module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a rectangle with rounded corners.
     *
     * @see {@link IRoundedRectangleEvents} for a list of available events
     * @see {@link IRoundedRectangleAdapters} for a list of available Adapters
     */


    var RoundedRectangle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RoundedRectangle, _super);
      /**
       * Constructor
       */

      function RoundedRectangle() {
        var _this = _super.call(this) || this;

        _this.className = "RoundedRectangle";
        _this.element = _this.paper.add("path");

        _this.cornerRadius(3, 3, 3, 3);

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      RoundedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var w = this.innerWidth;
        var h = this.innerHeight;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](w) && _utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](h)) {
          var minSide = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["min"](w, h) / 2;

          var cornerRadiusTopLeft = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["relativeToValue"](this.cornerRadiusTopLeft, minSide);

          var cornerRadiusTopRight = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["relativeToValue"](this.cornerRadiusTopRight, minSide);

          var cornerRadiusBottomRight = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["relativeToValue"](this.cornerRadiusBottomRight, minSide);

          var cornerRadiusBottomLeft = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["relativeToValue"](this.cornerRadiusBottomLeft, minSide);

          var maxcr = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["min"](Math.abs(w / 2), Math.abs(h / 2));

          var crtl = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["fitToRange"](cornerRadiusTopLeft, 0, maxcr);

          var crtr = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["fitToRange"](cornerRadiusTopRight, 0, maxcr);

          var crbr = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["fitToRange"](cornerRadiusBottomRight, 0, maxcr);

          var crbl = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["fitToRange"](cornerRadiusBottomLeft, 0, maxcr);

          var lineT = "M" + crtl + ",0 L" + (w - crtr) + ",0";
          var lineB = " L" + crbl + "," + h;
          var lineL = " L0," + crtl;
          var lineR = " L" + w + "," + (h - crbr);
          var arcTR = " a" + crtr + "," + crtr + " 0 0 1 " + crtr + "," + crtr;
          var arcBR = " a" + crbr + "," + crbr + " 0 0 1 -" + crbr + "," + crbr;
          var arcBL = " a" + crbl + "," + crbl + " 0 0 1 -" + crbl + ",-" + crbl;
          var arcTL = " a" + crtl + "," + crtl + " 0 0 1 " + crtl + ",-" + crtl;
          var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + " Z";
          this.path = path;
        }
      };
      /**
       * Sets radius for all four corners at ones.
       *
       * All numbers are in pixels.
       *
       * @param tl  Top-left corner
       * @param tr  Top-right corner
       * @param bl  Bottom-left corner
       * @param br  Bottom-right corner
       */


      RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {
        this.cornerRadiusTopLeft = tl;
        this.cornerRadiusTopRight = tr;
        this.cornerRadiusBottomLeft = bl;
        this.cornerRadiusBottomRight = br;
      };

      Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusTopLeft", {
        /**
         * @return Radius (px or Percent)
         */
        get: function get() {
          return this.getPropertyValue("cornerRadiusTopLeft");
        },

        /**
         * Radius of the top-left corner in pixels.
         *
         * @default 3
         * @param value  Radius (px or Percent)
         */
        set: function set(value) {
          this.setPercentProperty("cornerRadiusTopLeft", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusTopRight", {
        /**
         * @return Radius (px or Percent)
         */
        get: function get() {
          return this.getPropertyValue("cornerRadiusTopRight");
        },

        /**
         * Radius of the top-right corner in pixels.
         *
         * @default 3
         * @param value  Radius (px or Percent)
         */
        set: function set(value) {
          this.setPercentProperty("cornerRadiusTopRight", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusBottomRight", {
        /**
         * @return Radius (px or Percent)
         */
        get: function get() {
          return this.getPropertyValue("cornerRadiusBottomRight");
        },

        /**
         * Radius of the bottom-right corner in pixels.
         *
         * @default 3
         * @param value  Radius (px or Percent)
         */
        set: function set(value) {
          this.setPercentProperty("cornerRadiusBottomRight", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RoundedRectangle.prototype, "cornerRadiusBottomLeft", {
        /**
         * @return Radius (px or Percent)
         */
        get: function get() {
          return this.getPropertyValue("cornerRadiusBottomLeft");
        },

        /**
         * Radius of the bottom-left corner in pixels.
         *
         * @default 3
         * @param value  Radius (px or Percent)
         */
        set: function set(value) {
          this.setPercentProperty("cornerRadiusBottomLeft", value, true);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Measures the element.
       *
       * @ignore Exclude from docs
       */

      RoundedRectangle.prototype.measureElement = function () {};

      Object.defineProperty(RoundedRectangle.prototype, "bbox", {
        /**
         * Returns bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         */
        get: function get() {
          if (this.definedBBox) {
            return this.definedBBox;
          }

          if (this.isMeasured) {
            return {
              x: 0,
              y: 0,
              width: this.innerWidth,
              height: this.innerHeight
            };
          } else {
            return {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            };
          }
        },
        enumerable: true,
        configurable: true
      });
      return RoundedRectangle;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["RoundedRectangle"] = RoundedRectangle; //# sourceMappingURL=RoundedRectangle.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js ***!
    \*******************************************************************************/

  /*! exports provided: Scrollbar */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsScrollbarJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Scrollbar", function () {
      return Scrollbar;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _elements_ResizeButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../elements/ResizeButton */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/ResizeButton.js");
    /* harmony import */


    var _elements_Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../elements/Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony import */


    var _interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../interaction/Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../interaction/Mouse */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js");
    /* harmony import */


    var _elements_RoundedRectangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../elements/RoundedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Keyboard__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Keyboard */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /**
     * Provides functionality used to build scrollbars.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Scrollbar is a generic control allowing to select a range of values or pan
     * the selection.
     *
     * @see {@link IScrollbarEvents} for a list of available events
     * @see {@link IScrollbarAdapters} for a list of available Adapters
     */

    var Scrollbar =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Scrollbar, _super);
      /**
       * Construtor
       */

      function Scrollbar() {
        var _this = _super.call(this) || this;
        /**
         * Previously selected lower (start) value.
         */


        _this._previousStart = 0;
        /**
         * Previously selected upper (end) value.
         */

        _this._previousEnd = 1;
        /**
         * A value of previously selected lower value, used for doubleclick function.
         */

        _this._prevStart = 0;
        /**
         * A value of previously selected upper value, used for doubleclick function.
         */

        _this._prevEnd = 1;
        /**
         * Indicates if the Scrollbar is currently "busy" (animating and or
         * performing zoom by user interaction).
         */

        _this._isBusy = false;
        /**
         * [_skipRangeEvents description]
         *
         * @todo Description
         */

        _this._skipRangeEvents = false;
        /**
         * Update the selection when dragging the grips.
         *
         * If set to `false` selection will be updated only when the grip is
         * released.
         *
         * @default true
         */

        _this.updateWhileMoving = true;
        _this.className = "Scrollbar";
        _this.minHeight = 12;
        _this.minWidth = 12;
        _this.animationDuration = 0;
        _this.animationEasing = _utils_Ease__WEBPACK_IMPORTED_MODULE_12__["cubicOut"];

        _this.margin(10, 10, 10, 10);

        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_9__["InterfaceColorSet"](); // background is also container as it might contain graphs, grid, etc

        var background = _this.background;
        background.cornerRadius(10, 10, 10, 10);
        background.fill = interfaceColors.getFor("fill");
        background.fillOpacity = 0.5; // Make system tooltips appear by default

        _this.showSystemTooltip = true;
        _this.startGrip = new _elements_ResizeButton__WEBPACK_IMPORTED_MODULE_2__["ResizeButton"]();
        _this.endGrip = new _elements_ResizeButton__WEBPACK_IMPORTED_MODULE_2__["ResizeButton"](); // Default orientation...
        // ... is set in `applyInternalDefaults()` because it accesses `language`
        // and should only be started to access when parent is set
        // Set events

        _this.events.on("transformed", _this.updateThumb, _this, false); // Initial positions


        _this.start = 0;
        _this.end = 1; // Set roles

        _this.role = "scrollbar";
        _this.thumb.role = "slider";
        _this.thumb.readerLive = "polite";
        _this.startGrip.role = "slider";
        _this.endGrip.role = "slider"; // otherwise range changed wont' be registered

        _this.events.once("inited", function () {
          _this._previousStart = undefined;

          _this.dispatchRangeChange();
        }, undefined, false);

        _this.hideGrips = false;
        _this.orientation = "horizontal"; // Min/max values for accessibility

        _this.setSVGAttribute({
          "aria-valuemin": "0"
        });

        _this.setSVGAttribute({
          "aria-valuemax": "100"
        });

        _this.applyTheme();

        return _this;
      }
      /**
       * Sets defaults that instantiate some objects that rely on parent, so they
       * cannot be set in constructor.
       */


      Scrollbar.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this); // Set screen reader tetxt accordingly


        if (this.orientation === "horizontal") {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Use TAB to select grip buttons or left and right arrows to change selection");
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.thumb.readerDescription)) {
            this.thumb.readerDescription = this.language.translate("Use left and right arrows to move selection");
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.startGrip.readerDescription)) {
            this.startGrip.readerDescription = this.language.translate("Use left and right arrows to move left selection");
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.endGrip.readerDescription)) {
            this.endGrip.readerDescription = this.language.translate("Use left and right arrows to move right selection");
          }

          this.readerOrientation = "horizontal";
        } else {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.readerTitle)) {
            this.readerTitle = this.language.translate("Use TAB select grip buttons or up and down arrows to change selection");
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.thumb.readerDescription)) {
            this.thumb.readerDescription = this.language.translate("Use up and down arrows to move selection");
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.startGrip.readerDescription)) {
            this.startGrip.readerDescription = this.language.translate("Use up and down arrows to move upper selection");
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.endGrip.readerDescription)) {
            this.endGrip.readerDescription = this.language.translate("Use up and down arrows to move lower selection");
          }

          this.readerOrientation = "vertical";
        }

        this.readerControls = this.baseSprite.uidAttr();
      };
      /**
       * Validates the layout of the scrollbar's elements.
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.validateLayout = function () {
        this.updateSize();

        _super.prototype.validateLayout.call(this); // when size changes, need to update extremes


        this.updateExtremes();
      };
      /**
       * Update background for the scrollbar.
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.processBackground = function () {
        _super.prototype.processBackground.call(this);

        var background = this.background;
        background.clickable = true;
        background.events.on("hit", this.handleBgHit, this, undefined);
      };
      /**
       * Zooms to the particular place when clicked/tapped on the scrollbar
       * background.
       *
       * @ignore Exclude from docs
       * @param event  Event
       */


      Scrollbar.prototype.handleBgHit = function (event) {
        this.makeBusy();
        var point = event.spritePoint;
        point = _utils_Utils__WEBPACK_IMPORTED_MODULE_14__["spritePointToSprite"](point, this.background, this);
        var thumb = this.thumb;

        if (this.orientation == "horizontal") {
          var thumbX = point.x - thumb.pixelWidth / 2;
          thumbX = _utils_Math__WEBPACK_IMPORTED_MODULE_11__["fitToRange"](thumbX, 0, this.innerWidth - thumb.pixelWidth);
          this._thumbAnimation = thumb.animate({
            property: "x",
            to: thumbX
          }, this.animationDuration, this.animationEasing);
        } else {
          var thumbY = point.y - thumb.pixelHeight / 2;
          thumbY = _utils_Math__WEBPACK_IMPORTED_MODULE_11__["fitToRange"](thumbY, 0, this.innerHeight - thumb.pixelHeight);
          this._thumbAnimation = thumb.animate({
            property: "y",
            to: thumbY
          }, this.animationDuration, this.animationEasing);
        }

        if (this.animationDuration > 0) {
          this._thumbAnimation.events.on("animationended", this.makeUnbusy, this, false);
        } else {
          this._thumb.validate();

          this.makeUnbusy();
        }
      };
      /**
       * Set scrollbar as busy. (currently zooming)
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.makeBusy = function () {
        this._isBusy = true;
        this._skipRangeEvents = false;

        if (this._unbusyTimeout) {
          this.removeDispose(this._unbusyTimeout);
        }

        this._unbusyTimeout = undefined;
        this.stopAnimations();
      };
      /**
       * Stops all animations, currently playing for the scrollbar.
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.stopAnimations = function () {
        if (this._thumbAnimation) {
          this._thumbAnimation.stop(true);
        }

        if (this._zoomAnimation) {
          this._zoomAnimation.stop(true);
        }
      };
      /**
       * Cancels "busy" status of the Scrollbar.
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.makeUnbusy = function () {
        /**
         * We cannot make Scrollbar not busy right after release, because then axes
         * will take over controll and Scrollbar will start to animate.
         * Theorethically, it's not right to set timeout by `animationDuration`,
         * however we can not know all the durations of elements we scroll, so we
         * assume that animation duration will be the same as
         * `interpolationDuration` or `rangeChange` duration.
         */
        this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);
      };
      /**
       * [makeUnbusyReal description]
       *
       * @todo Description
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.makeUnbusyReal = function () {
        this._usingGrip = undefined;
        this._isBusy = false;

        if (!this.updateWhileMoving) {
          this.dispatchRangeChange();
        }
      };
      /**
       * Disptatches rangechanged event if it really changed
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.dispatchRangeChange = function () {
        if (this._previousEnd != this.end || this._previousStart != this.start) {
          this._previousStart = this.start;
          this._previousEnd = this.end;
          this.dispatch("rangechanged");
        }
      };
      /**
       * Updates the "thumb" element. A draggable element between the grips.
       */


      Scrollbar.prototype.updateThumb = function () {
        if (!this.parent) {
          return;
        }

        var thumb = this.thumb;
        var start = this.start;
        var end = this.end;
        var startGrip = this.startGrip;
        var endGrip = this.endGrip;

        if (this.orientation == "horizontal") {
          var innerWidth_1 = this.innerWidth;
          thumb.width = innerWidth_1 * (end - start);
          thumb.maxX = innerWidth_1 - thumb.pixelWidth;
          thumb.x = start * innerWidth_1;
          startGrip.moveTo({
            x: thumb.pixelX,
            y: 0
          }, undefined, undefined, true); // overrides dragging

          endGrip.moveTo({
            x: thumb.pixelX + thumb.pixelWidth,
            y: 0
          }, undefined, undefined, true);
          startGrip.readerTitle = this.language.translate("From %1", undefined, this.adapter.apply("positionValue", {
            value: Math.round(start * 100) + "%",
            position: start
          }).value);
          startGrip.readerValueNow = "" + Math.round(start * 100);
          startGrip.readerValueText = startGrip.readerTitle;
          endGrip.readerTitle = this.language.translate("To %1", undefined, this.adapter.apply("positionValue", {
            value: Math.round(end * 100) + "%",
            position: end
          }).value);
          endGrip.readerValueNow = "" + Math.round(end * 100);
          endGrip.readerValueText = endGrip.readerTitle;
        } else {
          var innerHeight_1 = this.innerHeight;
          thumb.height = innerHeight_1 * (end - start);
          thumb.maxY = innerHeight_1 - thumb.pixelHeight;
          thumb.y = (1 - end) * innerHeight_1;
          startGrip.moveTo({
            x: 0,
            y: thumb.pixelY + thumb.pixelHeight
          }, undefined, undefined, true);
          endGrip.moveTo({
            x: 0,
            y: thumb.pixelY
          }, undefined, undefined, true);
          startGrip.readerTitle = this.language.translate("To %1", undefined, this.adapter.apply("positionValue", {
            value: Math.round((1 - start) * 100) + "%",
            position: 1 - start
          }).value);
          startGrip.readerValueNow = "" + Math.round(start * 100);
          startGrip.readerValueText = startGrip.readerTitle;
          endGrip.readerTitle = this.language.translate("From %1", undefined, this.adapter.apply("positionValue", {
            value: Math.round((1 - end) * 100) + "%",
            position: 1 - end
          }).value);
          endGrip.readerValueNow = "" + Math.round(end * 100);
          endGrip.readerValueText = endGrip.readerTitle;
        } // Add accessibility


        thumb.readerTitle = this.language.translate("From %1 to %2", undefined, this.adapter.apply("positionValue", {
          value: Math.round(start * 100) + "%",
          position: start
        }).value, this.adapter.apply("positionValue", {
          value: Math.round(end * 100) + "%",
          position: end
        }).value);
        thumb.readerValueNow = "" + Math.round(start * 100);
        thumb.readerValueText = thumb.readerTitle;
        this.readerValueNow = "" + Math.round(start * 100);
        this.readerValueText = thumb.readerTitle;

        if (!this._skipRangeEvents && this.updateWhileMoving) {
          this.dispatchRangeChange();
        }
      };
      /**
       * Updates extremes of the scrollbar.
       */


      Scrollbar.prototype.updateExtremes = function () {
        var orientation = this.orientation;
        var minX = 0;
        var minY = 0;
        var maxX = 0;
        var maxY = 0;

        if (orientation == "horizontal") {
          maxX = this.innerWidth;
          minY = maxY = this.innerHeight / 2;
        } else {
          maxY = this.innerHeight;
          minX = maxX = this.innerWidth / 2;
        }

        var startGrip = this.startGrip;
        startGrip.minX = minX;
        startGrip.maxX = maxX;
        startGrip.minY = minY;
        startGrip.maxY = maxY;
        var endGrip = this.endGrip;
        endGrip.minX = minX;
        endGrip.maxX = maxX;
        endGrip.minY = minY;
        endGrip.maxY = maxY;
        var thumb = this.thumb;
        thumb.minX = minX;
        thumb.maxX = maxX;
        thumb.minY = minY;
        thumb.maxY = maxY;
      };
      /**
       * Updates size of the scrollbar.
       */


      Scrollbar.prototype.updateSize = function () {
        var orientation = this.orientation;
        var startGrip = this.startGrip;

        if (startGrip) {
          startGrip.orientation = orientation;
        }

        if (this.endGrip) {
          this.endGrip.orientation = orientation;
        }

        var thumb = this.thumb;

        if (thumb) {
          if (orientation == "horizontal") {
            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isNumber"](this._pixelWidth)) {
              if (!(this.width instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_10__["Percent"])) {
                this.width = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_10__["percent"])(100);
              }
            } // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent
            // however without this height might be equal to 100% if previous orientation was set to horizontal
            // so this is ok solution, in case user really wants to have scrollbar height set in percent,
            // he should do this after orientation.


            if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.percentHeight)) {
              this.height = this.minHeight;
            }

            thumb.height = this.innerHeight;
            thumb.verticalCenter = "middle";
            thumb.horizontalCenter = "left";
          } else {
            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_13__["isNumber"](this._pixelHeight)) {
              if (!(this.height instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_10__["Percent"])) {
                this.height = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_10__["percent"])(100);
              }
            } // same as above with percentHeight


            if (_utils_Type__WEBPACK_IMPORTED_MODULE_13__["hasValue"](this.percentWidth)) {
              this.width = this.minWidth;
            }

            thumb.width = this.innerWidth;
            thumb.verticalCenter = "top";
            thumb.horizontalCenter = "middle";
          }
        }
      };

      Object.defineProperty(Scrollbar.prototype, "isBusy", {
        /**
         * Indicates if the Scrollbar is currently "busy" (animating and or
         * performing zoom by user interaction).
         * @return boolean
         */
        get: function get() {
          return this._isBusy;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "start", {
        /**
         * @return Position (0-1)
         */
        get: function get() {
          return Math.min(this.getPosition(this._start), this.getPosition(this._end));
        },

        /**
         * ==========================================================================
         * POSITIONS
         * ==========================================================================
         * @hidden
         */

        /**
         * Relative position (0-1) of the start grip.
         *
         * @param position  Position (0-1)
         */
        set: function set(position) {
          if (!this._isBusy) {
            this.__start = position;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "__start", {
        /**
         * @return [description]
         */
        get: function get() {
          return this._start;
        },

        /**
         * [__start description]
         *
         * @todo Description
         * @param position [description]
         */
        set: function set(position) {
          this._start = this.getPosition(position);
          this.updateThumb();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "end", {
        /**
         * @return Position (0-1)
         */
        get: function get() {
          return Math.max(this.getPosition(this._start), this.getPosition(this._end));
        },

        /**
         * Relative position (0-1) of the end grip.
         *
         * @param position  Position (0-1)
         */
        set: function set(position) {
          if (!this._isBusy) {
            this.__end = position;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "__end", {
        /**
         * @return [description]
         */
        get: function get() {
          return this._end;
        },

        /**
         * [__end description]
         *
         * @todo Description
         * @param position [description]
         */
        set: function set(position) {
          this._end = this.getPosition(position);
          this.updateThumb();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "range", {
        /**
         * Current selection range.
         *
         * @readonly
         * @return Range
         */
        get: function get() {
          return {
            start: this.start,
            end: this.end,
            priority: this._usingGrip
          };
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Disables range change events.
       *
       * @ignore Exclude from docs
       */

      Scrollbar.prototype.skipRangeEvents = function () {
        if (!this._isBusy) {
          this._skipRangeEvents = true;
        }
      };
      /**
       * [fixRange description]
       *
       * @todo Description
       * @ignore Exclude from docs
       * @param range  Range
       */


      Scrollbar.prototype.fixRange = function (range) {
        if (range.start != _utils_Math__WEBPACK_IMPORTED_MODULE_11__["round"](this._start, 2) || range.end != _utils_Math__WEBPACK_IMPORTED_MODULE_11__["round"](this._end, 2)) {
          this._start = range.start;
          this._end = range.end;
          this._skipRangeEvents = true;
          this.updateThumb();
          this._skipRangeEvents = false;
          this.thumb.validate();
          this.thumb.background.validate();
        }
      };
      /**
       * [getPosition description]
       *
       * @todo Description
       * @param position  [description]
       * @return [description]
       */


      Scrollbar.prototype.getPosition = function (position) {
        return _utils_Math__WEBPACK_IMPORTED_MODULE_11__["fitToRange"](_utils_Math__WEBPACK_IMPORTED_MODULE_11__["round"](position, 4), 0, 1);
      };

      Object.defineProperty(Scrollbar.prototype, "orientation", {
        /**
         * @return Orientation
         */
        get: function get() {
          return this.getPropertyValue("orientation");
        },

        /**
         * ==========================================================================
         * MISC
         * ==========================================================================
         * @hidden
         */

        /**
         * Orientation of the scrollbar.
         *
         * Available options: "horizontal" (default) and "vertical".
         *
         * @default "horizontal"
         * @param value  Orientation
         */
        set: function set(value) {
          if (this.setPropertyValue("orientation", value)) {
            // Set mouse cursors and screen reader tetxt accordingly
            if (value === "horizontal") {
              // Mouse styles
              this.startGrip.cursorOverStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__["MouseCursorStyle"].horizontalResize;
              this.endGrip.cursorOverStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__["MouseCursorStyle"].horizontalResize; // Reader text

              /*this.readerTitle = this.language.translate("Use TAB to select grip buttons or left and right arrows to change selection");
              this.thumb.readerDescription = this.language.translate("Use left and right arrows to move selection");
              this.startGrip.readerDescription = this.language.translate("Use left and right arrows to move left selection");
              this.endGrip.readerDescription = this.language.translate("Use left and right arrows to move right selection");*/
            } else {
              // Mouse styles
              this.startGrip.cursorOverStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__["MouseCursorStyle"].verticalResize;
              this.endGrip.cursorOverStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__["MouseCursorStyle"].verticalResize; // Reader text

              /*this.readerTitle = this.language.translate("Use TAB select grip buttons or up and down arrows to change selection");
              this.thumb.readerDescription = this.language.translate("Use up and down arrows to move selection");
              this.startGrip.readerDescription = this.language.translate("Use up and down arrows to move upper selection");
              this.endGrip.readerDescription = this.language.translate("Use up and down arrows to move lower selection");*/
            }

            this.updateByOrientation();
            this.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @ignore
       */

      Scrollbar.prototype.updateByOrientation = function () {};

      Object.defineProperty(Scrollbar.prototype, "startGrip", {
        /**
         * @return Grip element
         */
        get: function get() {
          return this._startGrip;
        },

        /**
         * ==========================================================================
         * GRIPS
         * ==========================================================================
         * @hidden
         */

        /**
         * Start grip element. (button)
         *
         * @param button  Grip element
         */
        set: function set(button) {
          if (this._startGrip) {
            this.removeDispose(this._startGrip);
          }

          this._startGrip = button;
          this.processGrip(button);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "endGrip", {
        /**
         * @return Grip element
         */
        get: function get() {
          return this._endGrip;
        },

        /**
         * End grip element. (button)
         *
         * @param button  Grip element
         */
        set: function set(button) {
          if (this._endGrip) {
            this.removeDispose(this._endGrip);
          }

          this._endGrip = button;
          this.processGrip(button);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Decorates the grip button with properties and events.
       *
       * @ignore Exclude from docs
       * @param button Grip button
       */

      Scrollbar.prototype.processGrip = function (button) {
        button.parent = this;
        button.isMeasured = false;
        button.focusable = true;
        button.shouldClone = false; // Set button defaults
        //button.showSystemTooltip = true; // setting this here is not right because we break inheritance

        button.zIndex = 100;
        button.events.on("drag", this.handleGripDrag, this, false);
        button.events.on("dragstop", this.makeUnbusy, this, false);
        button.events.on("down", this.makeBusy, this, false);

        this._disposers.push(button);
      };
      /**
       * Updates positions of related elements after grip element is dragged.
       *
       * @ignore Exclude from docs
       * @param event  Event
       */


      Scrollbar.prototype.handleGripDrag = function (event) {
        this.makeBusy();

        if (event.target === this._startGrip) {
          this._usingGrip = "start";
        } else {
          this._usingGrip = "end";
        }

        if (this.orientation == "horizontal") {
          this._start = this.startGrip.pixelX / this.innerWidth;
          this._end = this.endGrip.pixelX / this.innerWidth;
        } else {
          this._start = 1 - this.startGrip.pixelY / this.innerHeight;
          this._end = 1 - this.endGrip.pixelY / this.innerHeight;
        }

        this.updateThumb();
      };

      Object.defineProperty(Scrollbar.prototype, "thumb", {
        /**
         * @return Thumb element
         */
        get: function get() {
          if (!this._thumb) {
            // Create scrollbar controls (setters will handle adding disposers)
            var thumb = new _elements_Button__WEBPACK_IMPORTED_MODULE_3__["Button"]();
            thumb.background.cornerRadius(10, 10, 10, 10);
            thumb.padding(0, 0, 0, 0);
            this.thumb = thumb;
          }

          return this._thumb;
        },

        /**
         * A "thumb" element.
         *
         * It's a draggable square space between the grips, that can be used to
         * pan the selection.
         *
         * @param thumb  Thumb element
         */
        set: function set(thumb) {
          var _this = this;

          if (thumb) {
            if (this._thumb) {
              this.removeDispose(this._thumb);
            }

            this._thumb = thumb;
            thumb.parent = this;
            thumb.isMeasured = false;
            thumb.inert = true;
            thumb.draggable = true;
            thumb.clickable = true;
            thumb.hoverable = true;
            thumb.focusable = true;
            thumb.shouldClone = false;
            thumb.zIndex = 0; // TODO remove closures ?
            // Add events
            // Add cursor styles to thumb

            thumb.cursorOverStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__["MouseCursorStyle"].grab;
            thumb.cursorDownStyle = _interaction_Mouse__WEBPACK_IMPORTED_MODULE_5__["MouseCursorStyle"].grabbing;
            thumb.events.on("dragstart", this.makeBusy, this, false);
            thumb.events.on("dragstop", this.makeUnbusy, this, false);
            thumb.events.on("positionchanged", this.handleThumbPosition, this, false);
            thumb.events.on("sizechanged", this.handleThumbPosition, this, false);
            thumb.events.on("doublehit", this.handleDoubleClick, this, false); // Add event for space and ENTER to toggle full zoom out and back
            // (same as doubleclick)

            this._disposers.push(Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().body.events.on("keyup", function (ev) {
              if (_utils_Keyboard__WEBPACK_IMPORTED_MODULE_8__["keyboard"].isKey(ev.event, ["space", "enter"]) && _this.thumb.isFocused) {
                ev.event.preventDefault();

                _this.handleDoubleClick();
              }
            }));

            this._disposers.push(this._thumb);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Zooms-in and out the selection on double-click of the thumb.
       *
       * @ignore Exclude from docs
       */

      Scrollbar.prototype.handleDoubleClick = function () {
        this.makeBusy();
        var newStart = 0;
        var newEnd = 1;

        if (this.start != 0 || this.end != 1) {
          this._prevStart = this.start;
          this._prevEnd = this.end;
        } else {
          newStart = this._prevStart;
          newEnd = this._prevEnd;
        }

        var zoomAnimation = this.animate([{
          property: "__start",
          to: newStart
        }, {
          property: "__end",
          to: newEnd
        }], this.animationDuration, this.animationEasing);

        if (zoomAnimation && !zoomAnimation.isFinished()) {
          zoomAnimation.events.on("animationended", this.makeUnbusy, this, false);
          this._zoomAnimation = zoomAnimation;
        } else {
          this.makeUnbusy();
        }
      };
      /**
       * Updates positions of other elements when thumb is moved.
       *
       * @ignore Exclude from docs
       */


      Scrollbar.prototype.handleThumbPosition = function () {
        var thumb = this.thumb;

        if (this.orientation == "horizontal") {
          var innerWidth_2 = this.innerWidth;
          var w = thumb.innerWidth;
          var x = thumb.pixelX;
          this._start = x / innerWidth_2;
          this._end = (x + w) / innerWidth_2;
          this.updateThumb();
        } else {
          var innerHeight_2 = this.innerHeight;
          var h = thumb.innerHeight;
          var y = thumb.pixelY;
          this._start = 1 - (y + h) / innerHeight_2;
          this._end = 1 - y / innerHeight_2;
          this.updateThumb();
        }
      };
      /**
       * Creates a background element for the scrollbar.
       *
       * @ignore Exclude from docs
       * @return Background
       */


      Scrollbar.prototype.createBackground = function () {
        return new _elements_RoundedRectangle__WEBPACK_IMPORTED_MODULE_6__["RoundedRectangle"]();
      };

      Object.defineProperty(Scrollbar.prototype, "hideGrips", {
        /**
         * @return Show only on hover?
         */
        get: function get() {
          return this._hideGrips;
        },

        /**
         * Use this property to set whether grips should be always visible (`false`),
         * or they should just appear on scrollbar hover (`true`).
         *
         * @param value  Show only on hover?
         */
        set: function set(value) {
          var _this = this;

          this._hideGrips = value;

          if (this._overDisposer) {
            this.removeDispose(this._overDisposer);
          }

          if (this._outDisposer) {
            this.removeDispose(this._outDisposer);
          }

          if (value) {
            this._overDisposer = this.events.on("over", function () {
              _this.startGrip.show();

              _this.endGrip.show();
            }, undefined, false);
            this._outDisposer = this.events.on("out", function () {
              _this.startGrip.hide();

              _this.endGrip.hide();
            }, undefined, false);
            this.startGrip.hide();
            this.endGrip.hide();
          } else {
            this.startGrip.show();
            this.endGrip.show();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "animationDuration", {
        /**
         * @return Orientation
         */
        get: function get() {
          return this.getPropertyValue("animationDuration");
        },

        /**
         * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)
         * @default 0
         * @param value number
         */
        set: function set(value) {
          this.setPropertyValue("animationDuration", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Scrollbar.prototype, "animationEasing", {
        /**
         * @return {Function}
         */
        get: function get() {
          return this.getPropertyValue("animationEasing");
        },

        /**
         * Animation easing function.
         * @todo: review description and default
         * @default $ease.cubicOut
         * @param value (value: number) => number
         */
        set: function set(value) {
          this.setPropertyValue("animationEasing", value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Adds easing functions to "function" fields.
       *
       * @param field  Field name
       * @return Assign as function?
       */

      Scrollbar.prototype.asFunction = function (field) {
        return field == "animationEasing" || _super.prototype.asIs.call(this, field);
      };

      return Scrollbar;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_7__["registry"].registeredClasses["Scrollbar"] = Scrollbar; //# sourceMappingURL=Scrollbar.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js ***!
    \***************************************************************************/

  /*! exports provided: Slice */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsSliceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Slice", function () {
      return Slice;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../rendering/fills/RadialGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js");
    /**
     * Slice module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.
     *
     * @see {@link ISliceEvents} for a list of available events
     * @see {@link ISliceAdapters} for a list of available Adapters
     */


    var Slice =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Slice, _super);
      /**
       * Constructor
       */

      function Slice() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "Slice"; // Set defaults

        _this.setPropertyValue("cornerRadius", 0);

        _this.setPropertyValue("startAngle", 0);

        _this.setPercentProperty("innerRadius", 0);

        _this.setPercentProperty("radius", 0);

        _this.setPropertyValue("arc", 0);

        _this.setPropertyValue("shiftRadius", 0);

        _this.strokeOpacity = 1;

        _this.setPropertyValue("layout", "none"); // Create a slice wedge element


        _this.slice = _this.createChild(_Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]);
        _this.slice.isMeasured = false;

        _this._disposers.push(_this.slice); //this.element.attr({ "stroke-linejoin": "round" });
        //this.element.attr({ "stroke-linecap": "round" });
        // Apply theme


        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Slice.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var radiusY = this.radiusY;

        if (this.radius > 0 && radiusY == 0) {
          radiusY = 0.01;
        }

        this.slice.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["arc"](this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);
        this.slice.invalidate();
        this.shiftRadius = this.shiftRadius;

        if (this.realFill instanceof _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_9__["RadialGradient"]) {
          this.updateGradient(this.realFill);
        }

        if (this.realStroke instanceof _rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_9__["RadialGradient"]) {
          this.updateGradient(this.realStroke);
        }
      };

      Slice.prototype.updateGradient = function (gradient) {
        gradient.element.attr({
          "gradientUnits": "userSpaceOnUse"
        });
        gradient.element.attr({
          "r": this.radius
        });
        gradient.cx = 0;
        gradient.cy = 0;
        gradient.element.attr({
          radius: this.radius
        });
      };

      Object.defineProperty(Slice.prototype, "bbox", {
        /**
         * Returns bounding box (square) for this element.
         *
         * @ignore Exclude from docs
         */
        get: function get() {
          if (this.definedBBox) {
            return this.definedBBox;
          }

          if (this.isMeasured) {
            var innerRect = _utils_Math__WEBPACK_IMPORTED_MODULE_4__["getArcRect"](this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);

            var outerRect = _utils_Math__WEBPACK_IMPORTED_MODULE_4__["getArcRect"](this.startAngle, this.startAngle + this.arc, this.radius);

            return _utils_Math__WEBPACK_IMPORTED_MODULE_4__["getCommonRectangle"]([innerRect, outerRect]);
          } else {
            return {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            };
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "startAngle", {
        /**
         * @return Angle (0-360)
         */
        get: function get() {
          return this.getPropertyValue("startAngle");
        },

        /**
         * The angle at which left edge of the slice is drawn. (0-360)
         *
         * 0 is to the right of the center.
         *
         * @param value  Angle (0-360)
         */
        set: function set(value) {
          this.setPropertyValue("startAngle", _utils_Math__WEBPACK_IMPORTED_MODULE_4__["normalizeAngle"](value), true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "arc", {
        /**
         * @return [description]
         */
        get: function get() {
          return this.getPropertyValue("arc");
        },

        /**
         * [arc description]
         *
         * @todo Description
         * @param value [description]
         */
        set: function set(value) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](value)) {
            value = 0;
          }

          this.setPropertyValue("arc", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "radius", {
        /**
         * @return Radius (px)
         */
        get: function get() {
          var radius = this.getPropertyValue("radius");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](radius)) {
            radius = 0;
          }

          return radius;
        },

        /**
         * Radius of the slice in pixels.
         *
         * @param value  Radius (px)
         */
        set: function set(value) {
          this.setPropertyValue("radius", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "radiusY", {
        /**
         * @return Vertical radius (0-1)
         */
        get: function get() {
          var value = this.getPropertyValue("radiusY");

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](value)) {
            value = this.radius;
          }

          return value;
        },

        /**
         * Vertical radius for creating skewed slices.
         *
         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half
         * the `radius`.
         *
         * @param value Vertical radius (0-1)
         */
        set: function set(value) {
          this.setPropertyValue("radiusY", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "innerRadius", {
        /**
         * @return Radius (px or %)
         */
        get: function get() {
          return this.getPropertyValue("innerRadius");
        },

        /**
         * Inner radius of the slice for creating cut out (donut) slices.
         *
         * @default 0
         * @param value  Radius (px or %)
         */
        set: function set(value) {
          this.setPercentProperty("innerRadius", value, true, false, 10, false);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "pixelInnerRadius", {
        /**
         * @return Radius px
         */
        get: function get() {
          return _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["relativeToValue"](this.innerRadius, this.radius);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "cornerRadius", {
        /**
         * @return Radius (px)
         */
        get: function get() {
          return this.getPropertyValue("cornerRadius");
        },

        /**
         * Radius of slice's outer corners in pixels.
         *
         * @default 0
         * @param value  Radius (px)
         */
        set: function set(value) {
          this.setPropertyValue("cornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "innerCornerRadius", {
        /**
         * @return Radius (px)
         */
        get: function get() {
          return this.getPropertyValue("innerCornerRadius");
        },

        /**
         * Radius of slice's inner corners in pixels.
         *
         * @default 0
         * @param value  Radius (px)
         */
        set: function set(value) {
          this.setPropertyValue("innerCornerRadius", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "shiftRadius", {
        /**
         * @return Radius shift
         */
        get: function get() {
          return this.getPropertyValue("shiftRadius");
        },

        /**
         * Indicates how far (relatively to center) a slice should be moved.
         *
         * The value is relative to the radius of the slice. Meaning 0 no shift,
         * 1 - slice shifted outside by whole of its radius.
         *
         * @param  value  Radius shift
         */
        set: function set(value) {
          this.setPropertyValue("shiftRadius", value);
          this.dx = value * this.radius * this.ix;
          this.dy = value * this.radiusY * this.iy;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "ix", {
        /**
         * [ix description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return [description]
         */
        get: function get() {
          return _utils_Math__WEBPACK_IMPORTED_MODULE_4__["cos"](this.middleAngle);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "iy", {
        /**
         * [iy description]
         *
         * @ignore Exclude from docs
         * @todo Description
         * @return [description]
         */
        get: function get() {
          if (this.radius > 0) {
            return _utils_Math__WEBPACK_IMPORTED_MODULE_4__["sin"](this.middleAngle);
          } else {
            return _utils_Math__WEBPACK_IMPORTED_MODULE_4__["sin"](this.middleAngle);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slice.prototype, "middleAngle", {
        /**
         * An angle of the slice's middle.
         *
         * @ignore Exclude from docs
         * @return Angle
         */
        get: function get() {
          return this.startAngle + this.arc / 2;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * X coordinate for the slice tooltip.
       *
       * @return X
       */

      Slice.prototype.getTooltipX = function () {
        var value = this.getPropertyValue("tooltipX");

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](value)) {
          return value;
        }

        var p = 0.5;

        if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_8__["Percent"]) {
          p = value.value;
        }

        var innerRadius = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["relativeToValue"](this.innerRadius, this.radius);

        return this.ix * (innerRadius + (this.radius - innerRadius) * p);
      };
      /**
       * Y coordinate for the slice tooltip.
       *
       * @return Y
       */


      Slice.prototype.getTooltipY = function () {
        var value = this.getPropertyValue("tooltipY");

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](value)) {
          return value;
        }

        var p = 0.5;

        if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_8__["Percent"]) {
          p = value.value;
        }

        var innerRadius = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["relativeToValue"](this.innerRadius, this.radius);

        return this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;
      };

      return Slice;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["Slice"] = Slice; //# sourceMappingURL=Slice.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Slider.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Slider.js ***!
    \****************************************************************************/

  /*! exports provided: Slider */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsSliderJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Slider", function () {
      return Slider;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _core_elements_Scrollbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../core/elements/Scrollbar */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Slider is a scrollbar with just one selection grip.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a slider - a version of scrollbar with just one grip.
     *
     * @see {@link ISliderEvents} for a list of available events
     * @see {@link ISliderAdapters} for a list of available Adapters
     */


    var Slider =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Slider, _super);
      /**
       * Constructor
       */

      function Slider() {
        var _this = _super.call(this) || this;

        _this.className = "Slider";
        _this.thumb.opacity = 0;
        _this.thumb.interactionsEnabled = false;
        _this.endGrip.opacity = 0;
        _this.endGrip.interactionsEnabled = false;

        _this.startGrip.events.on("drag", function () {
          _this.endGrip.x = _this.startGrip.x;
          _this.endGrip.y = _this.startGrip.y;
        });

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(Slider.prototype, "__end", {
        /**
         * @return [description]
         */
        get: function get() {
          return this._start;
        },
        set: function set(value) {},
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slider.prototype, "end", {
        /**
         * @return [description]
         */
        get: function get() {
          return this._start;
        },

        /**
         * Relative position (0-1) of the end grip.
         *
         * @param position  Position (0-1)
         */
        set: function set(position) {},
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Slider.prototype, "start", {
        /**
         * @return Position (0-1)
         */
        get: function get() {
          return this._start;
        },

        /**
         * Relative position (0-1) of the start grip.
         *
         * @param position  Position (0-1)
         */
        set: function set(position) {
          if (!this._isBusy) {
            this.__start = position;
          }
        },
        enumerable: true,
        configurable: true
      });
      return Slider;
    }(_core_elements_Scrollbar__WEBPACK_IMPORTED_MODULE_1__["Scrollbar"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Slider"] = Slider; //# sourceMappingURL=Slider.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/SwitchButton.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/SwitchButton.js ***!
    \**********************************************************************************/

  /*! exports provided: SwitchButton */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsSwitchButtonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SwitchButton", function () {
      return SwitchButton;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Label__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Label */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js");
    /* harmony import */


    var _elements_Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../elements/Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _core_elements_Circle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../core/elements/Circle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js");
    /* harmony import */


    var _core_utils_Percent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../core/utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Functionality for drawing simple SwitchButtons.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * SwitchButton class is capable of drawing a simple rectangular SwitchButton with
     * optionally rounded corners and an icon in it.
     *
     * @see {@link ISwitchButtonEvents} for a list of available events
     * @see {@link ISwitchButtonAdapters} for a list of available Adapters
     */


    var SwitchButton =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SwitchButton, _super);
      /**
       * Constructor
       */

      function SwitchButton() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "SwitchButton";
        _this.tooltipY = 0; // Set defaults

        _this.layout = "horizontal";
        _this.contentAlign = "center";
        _this.contentValign = "middle";

        _this.padding(8, 16, 8, 16);

        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__["InterfaceColorSet"](); // Create the label element

        var leftLabel = new _Label__WEBPACK_IMPORTED_MODULE_2__["Label"]();
        leftLabel.fillOpacity = 0.3;
        var llas = leftLabel.states.create("active");
        llas.properties.fillOpacity = 1;
        leftLabel.isActive = true;
        _this.leftLabel = leftLabel;
        var button = new _elements_Button__WEBPACK_IMPORTED_MODULE_3__["Button"]();
        var circle = new _core_elements_Circle__WEBPACK_IMPORTED_MODULE_5__["Circle"]();
        button.contentValign = "none";
        button.padding(0, 0, 0, 0);
        circle.radius = 10;
        button.icon = circle;
        button.icon.valign = "middle";
        button.label = undefined;
        var p100 = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_6__["percent"])(100);
        button.background.cornerRadius(p100, p100, p100, p100);
        button.width = circle.radius * 3.5;
        button.height = circle.radius * 2.1;
        button.marginLeft = 8;
        button.marginRight = 8;
        button.togglable = true;
        circle.dx = -circle.radius * 0.7;
        circle.fill = interfaceColors.getFor("primaryButton");
        var hs = circle.states.create("hover");
        hs.properties.fill = interfaceColors.getFor("primaryButtonHover");
        var as = circle.states.create("active");
        as.properties.fill = interfaceColors.getFor("primaryButtonActive");
        as.properties.dx = circle.radius * 0.7;
        _this.switchButton = button;

        _this.events.on("toggled", function () {
          _this.leftLabel.isActive = !_this.isActive;
          _this.rightLabel.isActive = _this.isActive;
        }); // Create the label element


        var rightLabel = new _Label__WEBPACK_IMPORTED_MODULE_2__["Label"]();
        rightLabel.fillOpacity = 0.3;
        var rlas = rightLabel.states.create("active");
        rlas.properties.fillOpacity = 1;
        _this.rightLabel = rightLabel; // Set up accessibility
        // A Button should be always focusable

        _this.role = "button";
        _this.focusable = true; // Apply theme

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(SwitchButton.prototype, "leftLabel", {
        /**
         * @return Left label element
         */
        get: function get() {
          return this._leftLabel;
        },

        /**
         * [[Label]] element to be used for left text.
         *
         * @param left label element
         */
        set: function set(label) {
          if (this._leftLabel) {
            this.removeDispose(this._leftLabel);
          }

          this._leftLabel = label;

          if (label) {
            label.parent = this;
            label.interactionsEnabled = false;
            label.shouldClone = false;

            this._disposers.push(this._leftLabel);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SwitchButton.prototype, "rightLabel", {
        /**
         * @return Rigth label element
         */
        get: function get() {
          return this._rightLabel;
        },

        /**
         * [[Label]] element to be used for left text.
         *
         * @param rigth label element
         */
        set: function set(label) {
          if (this._rightLabel) {
            this.removeDispose(this._rightLabel);
          }

          this._rightLabel = label;

          if (label) {
            label.parent = this;
            label.interactionsEnabled = false;
            label.shouldClone = false;

            this._disposers.push(this._rightLabel);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SwitchButton.prototype, "switch", {
        /**
         * @return Left label element
         */
        get: function get() {
          return this._switchButton;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SwitchButton.prototype, "switchButton", {
        /**
         * [[Label]] element to be used for left text.
         *
         * @param rigth label element
         */
        set: function set(button) {
          if (this._switchButton) {
            this.removeDispose(this._switchButton);
          }

          this._switchButton = button;

          if (button) {
            button.parent = this;
            button.shouldClone = false;

            this._disposers.push(this._switchButton);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies properties and other attributes.
       *
       * @param source  Source
       */

      SwitchButton.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        if (source.leftLabel) {
          this.leftLabel.copyFrom(source.leftLabel);
        }

        if (source.rightLabel) {
          this.rightLabel.copyFrom(source.rightLabel);
        }

        if (source.switchButton) {
          this.switchButton.copyFrom(source.switchButton);
        }
      };

      return SwitchButton;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_7__["registry"].registeredClasses["SwitchButton"] = SwitchButton; //# sourceMappingURL=SwitchButton.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/TextLink.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/TextLink.js ***!
    \******************************************************************************/

  /*! exports provided: TextLink */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsTextLinkJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TextLink", function () {
      return TextLink;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _core_elements_Label__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../core/elements/Label */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js");
    /* harmony import */


    var _core_interaction_Mouse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../core/interaction/Mouse */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * A module that defines Text element used to indicate links.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a text element with a link.
     *
     * @see {@link ITextLinkEvents} for a list of available events
     * @see {@link ITextLinkAdapters} for a list of available Adapters
     */


    var TextLink =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TextLink, _super);
      /**
       * Constructor
       */

      function TextLink() {
        var _this = _super.call(this) || this;

        _this.className = "TextLink";
        _this.selectable = true;
        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__["InterfaceColorSet"]();
        _this.fill = interfaceColors.getFor("primaryButton").brighten(0.3);

        var hoverState = _this.states.create("hover");

        hoverState.properties.fill = interfaceColors.getFor("primaryButtonHover").brighten(0.3);

        var downState = _this.states.create("down");

        downState.properties.fill = interfaceColors.getFor("primaryButtonDown").brighten(0.3);
        _this.cursorOverStyle = _core_interaction_Mouse__WEBPACK_IMPORTED_MODULE_2__["MouseCursorStyle"].pointer;

        _this.applyTheme();

        return _this;
      }

      return TextLink;
    }(_core_elements_Label__WEBPACK_IMPORTED_MODULE_1__["Label"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["TextLink"] = TextLink; //# sourceMappingURL=TextLink.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js ***!
    \*****************************************************************************/

  /*! exports provided: Tooltip */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsTooltipJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Tooltip", function () {
      return Tooltip;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _core_Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../core/Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _PointedRectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./PointedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedRectangle.js");
    /* harmony import */


    var _elements_Label__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../elements/Label */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _rendering_filters_DropShadowFilter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../rendering/filters/DropShadowFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DropShadowFilter.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /**
     * Provides functionality used to creating and showing tooltips (balloons).
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Tooltip displays text and/or multimedia information in a balloon over chart
     * area.
     * @see {@link ITooltipEvents} for a list of available events
     * @see {@link ITooltipAdapters} for a list of available Adapters
     */


    var Tooltip =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Tooltip, _super);
      /**
       * Constructor
       */

      function Tooltip() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Holds numeric boundary values. Calculated from the `boundingContainer`.
         * @ignore
         */


        _this._boundingRect = {
          x: -40000,
          y: -40000,
          width: 80000,
          height: 80000
        };
        /**
         * Coordinates tooltip's pointer (stem) should point to.
         */

        _this._pointTo = {
          x: 0,
          y: 0
        };
        /**
         * If set to `true` the pointer/stem of the Tooltip will not go outside
         * Tooltip's width or height depending on pointer's orientation.
         *
         * @default false
         */

        _this.fitPointerToBounds = false;
        /**
         * If `tooltipOrientation` is vertical, it can be drawn below or above point
         * We need to know this when solving overlapping.
         */

        _this._verticalOrientation = "up";
        _this.className = "Tooltip";
        _this.isMeasured = false;
        _this.getFillFromObject = true;

        _this.margin(5, 5, 5, 5);

        _this.defaultState.transitionDuration = 1;
        _this.hiddenState.transitionDuration = 1; // Create chrome/background

        var background = _this.background;
        background.interactionsEnabled = false;
        background.fillOpacity = 0.9;
        background.strokeWidth = 1;
        background.strokeOpacity = 1;
        background.stroke = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_6__["color"])("#ffffff");
        background.cornerRadius = 3;
        background.pointerLength = 6;
        background.pointerBaseWidth = 10;
        var dropShadow = new _rendering_filters_DropShadowFilter__WEBPACK_IMPORTED_MODULE_7__["DropShadowFilter"]();
        dropShadow.dy = 1;
        dropShadow.dx = 1;
        dropShadow.opacity = 0.5;
        background.filters.push(dropShadow);
        _this.autoTextColor = true; // Create text element

        var label = _this.createChild(_elements_Label__WEBPACK_IMPORTED_MODULE_4__["Label"]);

        label.shouldClone = false;
        _this.label = label;
        label.padding(7, 12, 4, 12);
        label.interactionsEnabled = false;
        label.horizontalCenter = "middle";
        label.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_6__["color"])("#ffffff");

        _this._disposers.push(label);

        _this.label.events.on("sizechanged", _this.drawBackground, _this);

        _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved
        // Set defaults

        _this.pointerOrientation = "vertical";
        _this.animationDuration = 0;
        _this.animationEasing = _utils_Ease__WEBPACK_IMPORTED_MODULE_9__["cubicOut"];

        _this.setPropertyValue("showInViewport", false); // Set accessibility options


        _this.role = "tooltip";
        _this.visible = false;
        _this.opacity = 0;
        _this.x = 0;
        _this.y = 0;

        _this.events.on("visibilitychanged", _this.handleVisibility, _this); // Apply theme


        _this.applyTheme();

        return _this;
      }

      Tooltip.prototype.handleVisibility = function () {
        if (this.visible) {
          this.label.invalidate();
        }
      };

      Object.defineProperty(Tooltip.prototype, "getStrokeFromObject", {
        /**
         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.
         *
         * @return {boolean}
         * @default false
         */
        get: function get() {
          return this.getPropertyValue("getStrokeFromObject");
        },

        /**
         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.
         *
         * @param value boolean
         */
        set: function set(value) {
          this.setPropertyValue("getStrokeFromObject", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "autoTextColor", {
        /**
         * @return {boolean}
         */
        get: function get() {
          return this.getPropertyValue("autoTextColor");
        },

        /**
         * Specifies if text color should be chosen automatically for a better
         * readability.
         *
         * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.
         *
         * If inheriting of `fill` color from object tooltip is displayed for is
         * disabled, this feature will not work. If you are explicitly setting a
         * color for tooltip background, you may set a color for its label as well
         * using `tooltip.label.fill` property.
         *
         *
         * @param value boolean
         */
        set: function set(value) {
          this.setPropertyValue("autoTextColor", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "keepTargetHover", {
        /**
         * @return Keep target hovered?
         */
        get: function get() {
          return this.getPropertyValue("keepTargetHover");
        },

        /**
         * If this tooltip is displayed on hover on some other object, keep that
         * element hovered if hovering on the tooltip.
         *
         * @default false
         * @since 4.1.13
         * @param  value  Keep target hovered?
         */
        set: function set(value) {
          var _this = this;

          if (this.setPropertyValue("keepTargetHover", value, true)) {
            if (value) {
              this.hoverable = true;
              this.background.interactionsEnabled = true;

              this._disposers.push(this.events.on("over", function (ev) {
                if (_this.targetSprite && _this.targetSprite.hoverable) {
                  _this.targetSprite.isHover = true;
                }
              }));

              this._disposers.push(this.events.on("out", function (ev) {
                if (_this.targetSprite && _this.targetSprite.hoverable) {
                  //this.hideTooltip();
                  //this.targetSprite.handleOut();
                  _this.targetSprite.isHover = false;
                }
              }));
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "showInViewport", {
        /**
         * @return Force showing tooltip?
         */
        get: function get() {
          return this.getPropertyValue("showInViewport");
        },

        /**
         * Normally, a tooltip will hide itself if it is pointing to a coordinate
         * that is outside viewport.
         *
         * Setting this setting to `true` will override that and make tooltip
         * appear next to the viewport edge closest to the target point.
         *
         * @default false
         * @since 4.5.7
         * @param  value  Force showing tooltip?
         */
        set: function set(value) {
          this.setPropertyValue("showInViewport", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "getFillFromObject", {
        /**
         * Specifies if tooltip background should get fill color from the sprite it is pointing to.
         *
         * @return {boolean}
         * @default true
         */
        get: function get() {
          return this.getPropertyValue("getFillFromObject");
        },

        /**
         * @param value boolean
         */
        set: function set(value) {
          this.setPropertyValue("getFillFromObject", value, true);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates and returns a background element.
       *
       * @ignore Exclude from docs
       * @return Background
       */

      Tooltip.prototype.createBackground = function () {
        return new _PointedRectangle__WEBPACK_IMPORTED_MODULE_3__["PointedRectangle"]();
      };

      Object.defineProperty(Tooltip.prototype, "pointerOrientation", {
        /**
         * @return Orientation
         */
        get: function get() {
          return this.getPropertyValue("pointerOrientation");
        },

        /**
         * Pointer orientation: `"horizontal"`, `"vertical"`, `"up"`, `"down"`,
         * `"right"`, or `"left"`.
         *
         * Options`"horizontal"` or `"vertical"` are location-aware, meaning they
         * will change position of the Tooltip based on the target point's position
         * in relation to chart center.
         *
         * Options `"up"`, `"down"`, `"right"`, `"left"` are static and will point
         * in the specified direction regardless of the position, even if that means
         * going out of chart/screen bounds.
         *
         * IMPORTANT: in some situations, like having multiple tooltips stacked for
         * multiple series, the `"up"` and `"down"` values might be ignored in order
         * to make tooltip overlap algorithm work.
         *
         * @default "vertical"
         * @param  value  Orientation
         */
        set: function set(value) {
          this.setPropertyValue("pointerOrientation", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "animationDuration", {
        /**
         * @return Orientation
         */
        get: function get() {
          return this.getPropertyValue("animationDuration");
        },

        /**
         * Duration in milliseconds for the animation to take place when the tooltip
         * is moving from one place to another.
         *
         * @default 0
         * @param value  number
         */
        set: function set(value) {
          this.setPropertyValue("animationDuration", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "animationEasing", {
        /**
         * @return {Function}
         */
        get: function get() {
          return this.getPropertyValue("animationEasing");
        },

        /**
         * Tooltip animation (moving from one place to another) easing function.
         *
         * @default $ease.cubicOut
         * @param value (value: number) => number
         */
        set: function set(value) {
          this.setPropertyValue("animationEasing", value);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "html", {
        /**
         * @return HTML content
         */
        get: function get() {
          return this.label.html;
        },

        /**
         * HTML content for the Tooltip.
         *
         * Provided value will be used as is, without applying any further
         * formatting to it.
         *
         * @param value  HTML content
         */
        set: function set(value) {
          if (this.label.html != value) {
            this.label.html = value;
            this.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "text", {
        /**
         * @return SVG text
         */
        get: function get() {
          return this.label.text;
        },

        /**
         * SVG text content for the Tooltip.
         *
         * Text can have a number of formatting options supported by
         * [[TextFormatter]].
         *
         * @param value  SVG text
         */
        set: function set(value) {
          if (this.label.text != value) {
            this.label.text = value;
            this.invalidate();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates the Tooltip.
       *
       * @ignore Exclude from docs
       */

      Tooltip.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var label = this.label;

        if (label.invalid) {
          label.validate();
        }

        var x = this._pointTo.x;
        var y = this._pointTo.y;
        var boundingRect = this._boundingRect;
        var textW = label.measuredWidth;
        var textH = label.measuredHeight;
        var pointerLength = this.background.pointerLength;
        var textX;
        var textY; // try to handle if text is wider than br

        if (textW > boundingRect.width) {
          // TODO maybe this isn't needed ?
          _utils_Utils__WEBPACK_IMPORTED_MODULE_10__["spritePointToDocument"]({
            x: boundingRect.x,
            y: boundingRect.y
          }, this.parent);

          var p1 = _utils_Utils__WEBPACK_IMPORTED_MODULE_10__["spritePointToDocument"]({
            x: boundingRect.x + boundingRect.width,
            y: boundingRect.y + boundingRect.height
          }, this.parent);

          var documentWidth = document.body.offsetWidth; // TODO maybe this isn't needed ?

          _utils_Utils__WEBPACK_IMPORTED_MODULE_10__["used"](document.body.offsetHeight);

          if (p1.x > documentWidth / 2) {
            boundingRect.x = boundingRect.width - textW;
          } else {
            boundingRect.width = boundingRect.x + textW;
          }
        }

        var pointerOrientation = this.pointerOrientation; // horizontal

        if (pointerOrientation == "horizontal" || pointerOrientation == "left" || pointerOrientation == "right") {
          textY = -textH / 2;

          if (pointerOrientation == "horizontal") {
            if (x > boundingRect.x + boundingRect.width / 2) {
              textX = -textW / 2 - pointerLength;
            } else {
              textX = textW / 2 + pointerLength;
            }
          } else if (pointerOrientation == "left") {
            textX = textW / 2 + pointerLength;
          } else {
            textX = -textW / 2 - pointerLength;
          }
        } // vertical pointer
        else {
            textX = _utils_Math__WEBPACK_IMPORTED_MODULE_8__["fitToRange"](0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);

            if (pointerOrientation == "vertical") {
              if (y > boundingRect.y + textH + pointerLength) {
                textY = -textH - pointerLength;
                this._verticalOrientation = "up";
              } else {
                textY = pointerLength;
                this._verticalOrientation = "down";
              }
            } else if (pointerOrientation == "down") {
              textY = -textH - pointerLength;
              this._verticalOrientation = "up";
            } else {
              textY = pointerLength;
              this._verticalOrientation = "down";
            }
          }

        textY = _utils_Math__WEBPACK_IMPORTED_MODULE_8__["fitToRange"](textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);
        label.x = textX;
        label.y = textY;
        this.drawBackground();
      };
      /**
       * Overrides functionality from the superclass.
       *
       * @ignore Exclude from docs
       */


      Tooltip.prototype.updateBackground = function () {
        this.group.addToBack(this.background.group);
      };
      /**
       * Draws Tooltip background (chrome, background and pointer/stem).
       *
       * @ignore Exclude from docs
       */


      Tooltip.prototype.drawBackground = function () {
        var label = this.label;
        var background = this.background;
        var textWidth = label.measuredWidth;
        var textHeight = label.measuredHeight;
        var boundingRect = this._boundingRect;
        var bgWidth = textWidth;
        var bgX = label.pixelX - textWidth / 2;
        var bgHeight = textHeight;
        var bgY = label.pixelY;
        var x = this._pointTo.x;
        var y = this._pointTo.y;
        var boundX1 = boundingRect.x - x;
        var boundX2 = boundX1 + boundingRect.width;
        var boundY1 = boundingRect.y - y;
        var boundY2 = boundY1 + boundingRect.height;
        background.x = bgX;
        background.y = bgY;
        background.width = bgWidth;
        background.height = bgHeight;

        if (this.fitPointerToBounds) {
          background.pointerX = _utils_Math__WEBPACK_IMPORTED_MODULE_8__["fitToRange"](-background.x, boundX1 - background.x, boundX2 - background.x);
          background.pointerY = _utils_Math__WEBPACK_IMPORTED_MODULE_8__["fitToRange"](-background.y, boundY1 - background.y, boundY2 - background.y);
        } else {
          background.pointerX = -background.x;
          background.pointerY = -background.y;
        }

        background.validate();
      };
      /**
       * Set nes tooltip's anchor point and moves whole tooltip.
       *
       * @param x  X coordinate
       * @param y  Y coordinate
       */


      Tooltip.prototype.pointTo = function (point, instantly) {
        var _this = this;

        if (this._pointTo.x != point.x || this._pointTo.y != point.y) {
          this._pointTo = point;
          this.invalidate();

          if (this._pointToDisposer) {
            this._pointToDisposer.dispose();
          }

          this._pointToDisposer = _core_Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].events.once("exitframe", function () {
            // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already
            if (!_this.visible || instantly) {
              _this.moveTo(_this._pointTo);

              if (_this._animation) {
                _this._animation.kill();
              }
            } else {
              // helps to avoid flicker on top/left corner
              if (_this.pixelX == 0 && _this.pixelY == 0) {
                _this.moveTo(_this._pointTo);
              } else {
                if (_this._animation) {
                  _this._animation.kill();
                }

                _this._animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_5__["Animation"](_this, [{
                  property: "x",
                  to: point.x,
                  from: _this.pixelX
                }, {
                  property: "y",
                  to: point.y,
                  from: _this.pixelY
                }], _this.animationDuration, _this.animationEasing).start();
              }
            }
          });
          this.addDisposer(this._pointToDisposer);
        }
      };
      /**
       * Sets numeric boundaries Tooltip needs to obey (so it does not go outside
       * specific area).
       *
       * @ignore Exclude from docs
       * @param rectangle Boundary rectangle
       */


      Tooltip.prototype.setBounds = function (rectangle) {
        var oldRect = this._boundingRect;

        if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {
          this._boundingRect = rectangle;
          this.invalidate();
        }
      };

      Object.defineProperty(Tooltip.prototype, "boundingContainer", {
        /**
         * Sets a [[Container]] instance to be used when calculating numeric
         * boundaries for the Tooltip.
         *
         * @ignore Exclude from docs
         * @param container  Boundary container
         */
        set: function set(container) {
          this._boundingContainer = container; // TODO remove closures ?

          container.events.on("sizechanged", this.updateBounds, this);
          container.events.on("positionchanged", this.updateBounds, this);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Updates numeric boundaries for the Tooltip, based on the
       * `boundingCountrainer`.
       */

      Tooltip.prototype.updateBounds = function () {
        var boundingContainer = this._boundingContainer; // to global

        var rect = _utils_Utils__WEBPACK_IMPORTED_MODULE_10__["spriteRectToSvg"]({
          x: boundingContainer.pixelX,
          y: boundingContainer.pixelY,
          width: boundingContainer.maxWidth,
          height: boundingContainer.maxHeight
        }, boundingContainer);

        this.setBounds(rect);
      };

      Object.defineProperty(Tooltip.prototype, "verticalOrientation", {
        /**
         * If tooltipOrientation is vertical, it can be drawn below or above point.
         * We need to know this when solving overlapping.
         *
         * @ignore Exclude from docs
         * @return "up" | "down"
         */
        get: function get() {
          return this._verticalOrientation;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Tooltip.prototype, "tooltip", {
        /**
         * To avoid stackoverflow
         * @ignore
         */
        get: function get() {
          return undefined;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies properties and other attributes.
       *
       * @param source  Source
       */

      Tooltip.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.label.copyFrom(source.label);

        if (source._boundingRect) {
          this._boundingRect = source._boundingRect;
        }
      };
      /**
       * Adds easing functions to "function" fields.
       *
       * @param field  Field name
       * @return Assign as function?
       */


      Tooltip.prototype.asFunction = function (field) {
        return field == "animationEasing" || _super.prototype.asIs.call(this, field);
      };

      return Tooltip;
    }(_Container__WEBPACK_IMPORTED_MODULE_1__["Container"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _core_Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Tooltip"] = Tooltip; //# sourceMappingURL=Tooltip.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Trapezoid.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Trapezoid.js ***!
    \*******************************************************************************/

  /*! exports provided: Trapezoid */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsTrapezoidJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Trapezoid", function () {
      return Trapezoid;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _core_utils_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../core/utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Functionality for drawing a trapezoid.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Used to draw a Trapezoid.
     *
     * @see {@link ITrapezoidEvents} for a list of available events
     * @see {@link ITrapezoidAdapters} for a list of available Adapters
     */


    var Trapezoid =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Trapezoid, _super);
      /**
       * Constructor
       */

      function Trapezoid() {
        var _this = _super.call(this) || this;

        _this.className = "Trapezoid";
        _this.element = _this.paper.add("path");
        _this.topSide = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_2__["percent"])(100);
        _this.bottomSide = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_2__["percent"])(100);
        _this.leftSide = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_2__["percent"])(100);
        _this.rightSide = Object(_core_utils_Percent__WEBPACK_IMPORTED_MODULE_2__["percent"])(100);
        _this.isMeasured = false; // todo: add measureElement

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Trapezoid.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var w = this.pixelWidth;
        var h = this.pixelHeight;

        var ts = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["relativeToValue"](this.topSide, w);

        var bs = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["relativeToValue"](this.bottomSide, w);

        var ls = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["relativeToValue"](this.leftSide, h);

        var rs = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["relativeToValue"](this.rightSide, h); // 1----2
        // |    |
        // 4----3


        var x0 = (w - ts) / 2;
        var y0 = (h - ls) / 2;
        var x1 = w - (w - ts) / 2;
        var y1 = (h - rs) / 2;
        var x2 = w - (w - bs) / 2;
        var y2 = h - (h - rs) / 2;
        var x3 = (w - bs) / 2;
        var y3 = h - (h - ls) / 2;
        var mt = "";
        var mr = "";
        var mb = "";
        var ml = "";

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](this.horizontalNeck)) {
          var hn = this.horizontalNeck.value;
          mt = _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
            x: w * hn,
            y: Math.max(y0, y1)
          });
          mb = _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
            x: w * hn,
            y: Math.min(y2, y3)
          });
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](this.verticalNeck)) {
          var vn = this.verticalNeck.value;
          mr = _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
            x: Math.min(x1, x2),
            y: h * vn
          });
          ml = _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
            x: Math.max(x0, x3),
            y: h * vn
          });
        }

        var path = _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["moveTo"]({
          x: x0,
          y: y0
        }) + mt + _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
          x: x1,
          y: y1
        }) + mr + _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
          x: x2,
          y: y2
        }) + mb + _rendering_Path__WEBPACK_IMPORTED_MODULE_6__["lineTo"]({
          x: x3,
          y: y3
        }) + ml;
        this.path = path;
      };

      Object.defineProperty(Trapezoid.prototype, "topSide", {
        /**
         * @return Width
         */
        get: function get() {
          return this.getPropertyValue("topSide");
        },

        /**
         * Wdith of the top side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param value  Width
         */
        set: function set(value) {
          this.setPercentProperty("topSide", value, true, false, 10, false);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Trapezoid.prototype, "bottomSide", {
        /**
         * @return Width
         */
        get: function get() {
          return this.getPropertyValue("bottomSide");
        },

        /**
         * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param value  Width
         */
        set: function set(value) {
          this.setPercentProperty("bottomSide", value, true, false, 10, false);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Trapezoid.prototype, "leftSide", {
        /**
         * @return Height
         */
        get: function get() {
          return this.getPropertyValue("leftSide");
        },

        /**
         * Height of the left side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param value  Height
         */
        set: function set(value) {
          this.setPercentProperty("leftSide", value, true, false, 10, false);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Trapezoid.prototype, "rightSide", {
        /**
         * @return Height
         */
        get: function get() {
          return this.getPropertyValue("rightSide");
        },

        /**
         * Height of the right side. Absolute (px) or relative ([[Percent]]).
         *
         * @default Percent(100)
         * @param value  Height
         */
        set: function set(value) {
          this.setPercentProperty("rightSide", value, true, false, 10, false);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Trapezoid.prototype, "horizontalNeck", {
        /**
         * @return Horizontal neck position
         */
        get: function get() {
          return this.getPropertyValue("horizontalNeck");
        },

        /**
         * A relative vertical position of the "neck". If the top and bottom sides
         * are of different width, and `horizontalNeck` is set, a choke point
         * will be created at that position, creating a funnel shape.
         *
         * @param value  Horizontal neck position
         */
        set: function set(value) {
          this.setPropertyValue("horizontalNeck", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Trapezoid.prototype, "verticalNeck", {
        /**
         * @return Vertical neck position
         */
        get: function get() {
          return this.getPropertyValue("verticalNeck");
        },

        /**
         * A relative horizontal position of the "neck". If the left and right sides
         * are of different height, and `verticalNeck` is set, a choke point
         * will be created at that position, creating a funnel shape.
         *
         * @param value  Vertical neck position
         */
        set: function set(value) {
          this.setPropertyValue("verticalNeck", value, true);
        },
        enumerable: true,
        configurable: true
      });
      return Trapezoid;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["Trapezoid"] = Trapezoid; //# sourceMappingURL=Trapezoid.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js ***!
    \******************************************************************************/

  /*! exports provided: Triangle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsTriangleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Triangle", function () {
      return Triangle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Functionality for drawing triangles.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Used to draw a triangle.
     *
     * @see {@link ITriangleEvents} for a list of available events
     * @see {@link ITriangleAdapters} for a list of available Adapters
     */


    var Triangle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Triangle, _super);
      /**
       * Constructor
       */

      function Triangle() {
        var _this = _super.call(this) || this;

        _this.className = "Triangle";
        _this.element = _this.paper.add("path");
        _this.direction = "top";

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the element.
       *
       * @ignore Exclude from docs
       */


      Triangle.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var w = this.pixelWidth;
        var h = this.pixelHeight;
        var path;

        switch (this.direction) {
          case "right":
            path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
              x: 0,
              y: 0
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: w,
              y: h / 2
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: 0,
              y: h
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["closePath"]();
            break;

          case "left":
            path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
              x: w,
              y: 0
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: 0,
              y: h / 2
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: w,
              y: h
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["closePath"]();
            break;

          case "bottom":
            path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
              x: 0,
              y: 0
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: w,
              y: 0
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: w / 2,
              y: h
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["closePath"]();
            break;

          case "top":
            path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
              x: w / 2,
              y: 0
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: w,
              y: h
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
              x: 0,
              y: h
            }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["closePath"]();
            break;
        }

        this.path = path;
      };

      Object.defineProperty(Triangle.prototype, "direction", {
        /**
         * Returns direction of a triangle
         *
         * @return value
         */
        get: function get() {
          return this.getPropertyValue("direction");
        },

        /**
         * Sets direction of a triangle
         *
         * @param value
         */
        set: function set(value) {
          this.setPropertyValue("direction", value, true);
        },
        enumerable: true,
        configurable: true
      });
      return Triangle;
    }(_Sprite__WEBPACK_IMPORTED_MODULE_1__["Sprite"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["Triangle"] = Triangle; //# sourceMappingURL=Triangle.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js":
  /*!*********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js ***!
    \*********************************************************************************/

  /*! exports provided: WavedCircle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsWavedCircleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "WavedCircle", function () {
      return WavedCircle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Circle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Circle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _core_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../core/rendering/Smoothing */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js");
    /**
     * Functionality for drawing waved circles.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a waved circle.
     *
     * @see {@link IWavedCircleEvents} for a list of available events
     * @see {@link IWavedCircleAdapters} for a list of available Adapters
     */


    var WavedCircle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(WavedCircle, _super);
      /**
       * Constructor
       */

      function WavedCircle() {
        var _this = _super.call(this) || this;

        _this.className = "WavedCircle";
        _this.element = _this.paper.add("path");
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.fill = undefined;
        _this.fillOpacity = 0;
        _this.tension = 0.8;

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the waved line.
       *
       * @ignore Exclude from docs
       */


      WavedCircle.prototype.draw = function () {
        var path = "";
        var radius = this.pixelRadius;

        if (radius > 0) {
          var points = this.getPoints(radius);
          path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"](points[0]) + new _core_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_6__["Tension"](this.tension, this.tension).smooth(points);
        }

        var innerRadius = this.pixelInnerRadius;

        if (innerRadius > 0) {
          var points = this.getPoints(innerRadius);
          points.reverse();
          path += _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"](points[0]) + new _core_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_6__["Tension"](this.tension, this.tension).smooth(points);
        }

        this.path = path;
      };
      /**
       * Returns points that circle consists of.
       *
       * @param radius  Radius (px)
       * @return Points
       */


      WavedCircle.prototype.getPoints = function (radius) {
        var circleLength = radius * Math.PI * 2;
        var halfWaveHeight = this.waveHeight / 2;
        var waveLength = circleLength / Math.round(circleLength / this.waveLength);
        var halfWaveLength = waveLength / 2;
        var points = [];
        var count = circleLength / waveLength;

        for (var i = 0; i <= count; i++) {
          var angle1 = i * waveLength / circleLength * 360;
          var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;
          points.push({
            x: (radius - halfWaveHeight) * _utils_Math__WEBPACK_IMPORTED_MODULE_4__["cos"](angle1),
            y: (radius - halfWaveHeight) * _utils_Math__WEBPACK_IMPORTED_MODULE_4__["sin"](angle1)
          });
          points.push({
            x: (radius + halfWaveHeight) * _utils_Math__WEBPACK_IMPORTED_MODULE_4__["cos"](angle2),
            y: (radius + halfWaveHeight) * _utils_Math__WEBPACK_IMPORTED_MODULE_4__["sin"](angle2)
          });
        }

        points.pop();
        return points;
      };

      Object.defineProperty(WavedCircle.prototype, "innerRadius", {
        /**
         * @return Inner radius
         */
        get: function get() {
          return this.getPropertyValue("innerRadius");
        },

        /**
         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).
         *
         * @param value  Inner radius
         */
        set: function set(value) {
          this.setPercentProperty("innerRadius", value, true, false, 10, false);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedCircle.prototype, "pixelInnerRadius", {
        /**
         * Calculated inner radius of the circle in pixels.
         *
         * @readonly
         * @return Inner radius (px)
         */
        get: function get() {
          return _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["relativeToValue"](this.innerRadius, _utils_Math__WEBPACK_IMPORTED_MODULE_4__["min"](this.innerWidth / 2, this.innerHeight / 2));
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedCircle.prototype, "waveLength", {
        /**
         * @return Wave length (px)
         */
        get: function get() {
          return this.getPropertyValue("waveLength");
        },

        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param value  Wave length (px)
         */
        set: function set(value) {
          this.setPropertyValue("waveLength", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedCircle.prototype, "waveHeight", {
        /**
         * @return Wave height (px)
         */
        get: function get() {
          return this.getPropertyValue("waveHeight");
        },

        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param value  Wave height (px)
         */
        set: function set(value) {
          this.setPropertyValue("waveHeight", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedCircle.prototype, "tension", {
        /**
         * @return Tension
         */
        get: function get() {
          return this.getPropertyValue("tension");
        },

        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param value  Tension
         */
        set: function set(value) {
          this.setPropertyValue("tension", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      return WavedCircle;
    }(_Circle__WEBPACK_IMPORTED_MODULE_1__["Circle"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["WavedCircle"] = WavedCircle; //# sourceMappingURL=WavedCircle.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedLine.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedLine.js ***!
    \*******************************************************************************/

  /*! exports provided: WavedLine */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsWavedLineJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "WavedLine", function () {
      return WavedLine;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Line */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _rendering_Smoothing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../rendering/Smoothing */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Functionality for drawing waved lines.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a waved line.
     *
     * @see {@link IWavedLineEvents} for a list of available events
     * @see {@link IWavedLineAdapters} for a list of available Adapters
     */


    var WavedLine =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(WavedLine, _super);
      /**
       * Constructor
       */

      function WavedLine() {
        var _this = _super.call(this) || this;

        _this.className = "WavedLine";
        _this.element = _this.paper.add("path");
        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.tension = 0.8;
        _this.pixelPerfect = false;
        _this.fill = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_2__["color"])();

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the waved line.
       *
       * @ignore Exclude from docs
       */


      WavedLine.prototype.draw = function () {
        //super.draw();
        var p1 = {
          x: this.x1,
          y: this.y1
        };
        var p2 = {
          x: this.x2,
          y: this.y2
        };
        this.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_4__["moveTo"](p1) + Object(_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_3__["wavedLine"])(p1, p2, this.waveLength, this.waveHeight, this.tension, true);
      };

      Object.defineProperty(WavedLine.prototype, "waveLength", {
        /**
         * @return Wave length (px)
         */
        get: function get() {
          return this.getPropertyValue("waveLength");
        },

        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param value  Wave length (px)
         */
        set: function set(value) {
          this.setPropertyValue("waveLength", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedLine.prototype, "waveHeight", {
        /**
         * @return Wave height (px)
         */
        get: function get() {
          return this.getPropertyValue("waveHeight");
        },

        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param value  Wave height (px)
         */
        set: function set(value) {
          this.setPropertyValue("waveHeight", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedLine.prototype, "tension", {
        /**
         * @return Tension
         */
        get: function get() {
          return this.getPropertyValue("tension");
        },

        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param value  Tension
         */
        set: function set(value) {
          this.setPropertyValue("tension", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      return WavedLine;
    }(_Line__WEBPACK_IMPORTED_MODULE_1__["Line"]); //# sourceMappingURL=WavedLine.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedRectangle.js":
  /*!************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedRectangle.js ***!
    \************************************************************************************/

  /*! exports provided: WavedRectangle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsWavedRectangleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "WavedRectangle", function () {
      return WavedRectangle;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Rectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Rectangle.js");
    /* harmony import */


    var _rendering_Smoothing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../rendering/Smoothing */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * Functionality for drawing rectangles with waved edges.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Draws a rectangle with waved edges.
     *
     * @see {@link IWavedRectangleEvents} for a list of available events
     * @see {@link IWavedRectangleAdapters} for a list of available Adapters
     */


    var WavedRectangle =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(WavedRectangle, _super);
      /**
       * Constructor
       */

      function WavedRectangle() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "WavedRectangle"; // Add path element

        _this.element = _this.paper.add("path"); // Set defaults

        _this.waveLength = 16;
        _this.waveHeight = 4;
        _this.tension = 0.8;

        _this.setPropertyValue("wavedLeft", true);

        _this.setPropertyValue("wavedRight", true);

        _this.setPropertyValue("wavedTop", true);

        _this.setPropertyValue("wavedBottom", true); // Apply theme


        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the waved rectangle.
       *
       * @ignore Exclude from docs
       */


      WavedRectangle.prototype.draw = function () {
        _super.prototype.draw.call(this);

        var w = this.pixelWidth;
        var h = this.pixelHeight;

        if (w > 0 && h > 0) {
          var p1 = {
            x: 0,
            y: 0
          };
          var p2 = {
            x: w,
            y: 0
          };
          var p3 = {
            x: w,
            y: h
          };
          var p4 = {
            x: 0,
            y: h
          };
          var waveLengthH = Math.min(w, this.waveLength);
          var waveHeightH = Math.min(h, this.waveHeight);
          var waveLengthV = Math.min(h, this.waveLength);
          var waveHeightV = Math.min(w, this.waveHeight);
          var td = "";
          var rd = "";
          var bd = "";
          var ld = "";

          if (this.wavedTop) {
            td = Object(_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_2__["wavedLine"])(p1, p2, waveLengthH, waveHeightH, this.tension, true);
          }

          if (this.wavedRight) {
            rd = Object(_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_2__["wavedLine"])(p2, p3, waveLengthV, waveHeightV, this.tension, true);
          }

          if (this.wavedBottom) {
            bd = Object(_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_2__["wavedLine"])(p3, p4, waveLengthH, waveHeightH, this.tension, true);
          }

          if (this.wavedLeft) {
            ld = Object(_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_2__["wavedLine"])(p4, p1, waveLengthV, waveHeightV, this.tension, true);
          }

          this.path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"](p1) + td + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"](p2) + rd + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"](p3) + bd + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"](p4) + ld + "z";
        }
      };

      Object.defineProperty(WavedRectangle.prototype, "waveLength", {
        /**
         * @return Wave length (px)
         */
        get: function get() {
          return this.getPropertyValue("waveLength");
        },

        /**
         * Wave length in pixels.
         *
         * @default 16
         * @param value  Wave length (px)
         */
        set: function set(value) {
          this.setPropertyValue("waveLength", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedRectangle.prototype, "waveHeight", {
        /**
         * @return Wave height (px)
         */
        get: function get() {
          return this.getPropertyValue("waveHeight");
        },

        /**
         * Wave height in pixels.
         *
         * @default 4
         * @param value  Wave height (px)
         */
        set: function set(value) {
          this.setPropertyValue("waveHeight", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets which side should be waved or not. If particular side is set to
       * `false`, a straight line will be drawn on that side.
       *
       * @param top     Top waved?
       * @param right   Right side waved?
       * @param bottom  Bottom Waved?
       * @param left    Left side waved?
       */

      WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {
        this.wavedTop = top;
        this.wavedRight = right;
        this.wavedBottom = bottom;
        this.wavedLeft = left;
      };

      Object.defineProperty(WavedRectangle.prototype, "tension", {
        /**
         * @return Tension
         */
        get: function get() {
          return this.getPropertyValue("tension");
        },

        /**
         * Tension of the wave.
         *
         * @default 0.8
         * @param value  Tension
         */
        set: function set(value) {
          this.setPropertyValue("tension", value);
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedRectangle.prototype, "wavedRight", {
        /**
         * @return Wave right side?
         */
        get: function get() {
          return this.getPropertyValue("wavedRight");
        },

        /**
         * Specifies if right side should be waved.
         *
         * @default true
         * @param value Waved?
         */
        set: function set(value) {
          this.setPropertyValue("wavedRight", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedRectangle.prototype, "wavedLeft", {
        /**
         * @return Wave left side?
         */
        get: function get() {
          return this.getPropertyValue("wavedLeft");
        },

        /**
         * Specifies if left side should be waved.
         *
         * @default true
         * @param value Waved?
         */
        set: function set(value) {
          this.setPropertyValue("wavedLeft", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedRectangle.prototype, "wavedTop", {
        /**
         * @return Wave top side?
         */
        get: function get() {
          return this.getPropertyValue("wavedTop");
        },

        /**
         * Specifies if top side should be waved.
         *
         * @default true
         * @param value Waved?
         */
        set: function set(value) {
          this.setPropertyValue("wavedTop", value, true);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(WavedRectangle.prototype, "wavedBottom", {
        /**
         * @return Wave bottom side?
         */
        get: function get() {
          return this.getPropertyValue("wavedBottom");
        },

        /**
         * Specifies if bottom side should be waved.
         *
         * @default true
         * @param value Waved?
         */
        set: function set(value) {
          this.setPropertyValue("wavedBottom", value, true);
        },
        enumerable: true,
        configurable: true
      });
      return WavedRectangle;
    }(_Rectangle__WEBPACK_IMPORTED_MODULE_1__["Rectangle"]); //# sourceMappingURL=WavedRectangle.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/elements/ZoomOutButton.js":
  /*!***********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/elements/ZoomOutButton.js ***!
    \***********************************************************************************/

  /*! exports provided: ZoomOutButton */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreElementsZoomOutButtonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ZoomOutButton", function () {
      return ZoomOutButton;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _core_utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../core/utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Zoom out button functionality.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a zoom out button.
     *
     * @see {@link IZoomOutButtonEvents} for a list of available events
     * @see {@link IZoomOutButtonAdapters} for a list of available Adapters
     */


    var ZoomOutButton =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ZoomOutButton, _super);
      /**
       * Constructor
       */

      function ZoomOutButton() {
        var _this = // Init
        _super.call(this) || this;

        _this.className = "ZoomOutButton";

        _this.padding(9, 9, 9, 9); //this.dx = - 5;
        //this.dy = 5;


        _this.showSystemTooltip = true;
        var interfaceColors = new _core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_4__["InterfaceColorSet"]();
        var background = _this.background;
        background.cornerRadius(20, 20, 20, 20);
        background.fill = interfaceColors.getFor("primaryButton");
        background.stroke = interfaceColors.getFor("primaryButtonStroke");
        background.strokeOpacity = 0;
        background.states.getKey("hover").properties.fill = interfaceColors.getFor("primaryButtonHover");
        background.states.getKey("down").properties.fill = interfaceColors.getFor("primaryButtonActive"); // Create an icon

        var icon = new _Sprite__WEBPACK_IMPORTED_MODULE_2__["Sprite"]();
        icon.element = _this.paper.add("path");

        var path = _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["moveTo"]({
          x: 0,
          y: 0
        });

        path += _rendering_Path__WEBPACK_IMPORTED_MODULE_5__["lineTo"]({
          x: 11,
          y: 0
        });
        icon.path = path;
        icon.pixelPerfect = true;
        icon.padding(8, 3, 8, 3);
        icon.stroke = interfaceColors.getFor("primaryButtonText");
        _this.icon = icon; // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * Sets defaults that instantiate some objects that rely on parent, so they
       * cannot be set in constructor.
       */


      ZoomOutButton.prototype.applyInternalDefaults = function () {
        _super.prototype.applyInternalDefaults.call(this);

        if (!_core_utils_Type__WEBPACK_IMPORTED_MODULE_6__["hasValue"](this.readerTitle)) {
          this.readerTitle = this.language.translate("Zoom Out");
        }
      };

      return ZoomOutButton;
    }(_Button__WEBPACK_IMPORTED_MODULE_1__["Button"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["ZoomOutButton"] = ZoomOutButton; //# sourceMappingURL=ZoomOutButton.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/export/Export.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/export/Export.js ***!
    \**************************************************************************/

  /*! exports provided: Export */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreExportExportJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Export", function () {
      return Export;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _ExportMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./ExportMenu */
    "./node_modules/@amcharts/amcharts4/.internal/core/export/ExportMenu.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _Sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony import */


    var _elements_Modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../elements/Modal */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Modal.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../formatters/DateFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js");
    /* harmony import */


    var _formatters_DurationFormatter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../formatters/DurationFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js");
    /* harmony import */


    var _formatters_NumberFormatter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../formatters/NumberFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _utils_Validatable__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ../utils/Validatable */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Validatable.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ../Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ../utils/Browser */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Browser.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Net__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ../utils/Net */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Export module.
     *
     * Parts of Export functionality rely on the following third party libraries:
     *
     * [canvg.js](https://github.com/canvg/canvg)
     * Copyright (c) Gabe Lerner
     * Licensed under [MIT](https://github.com/canvg/canvg/blob/master/LICENSE)
     *
     * [pdfmake](http://pdfmake.org/)
     * Copyright (c) 2014 bpampuch
     * Licensed under [MIT](https://github.com/bpampuch/pdfmake/blob/master/LICENSE)
     *
     * [SheetJS Community Edition](https://github.com/sheetjs/js-xlsx)
     * Licensed under [Apache License 2.0](https://github.com/SheetJS/js-xlsx/blob/master/LICENSE)
     *
     * [JSZip](http://stuartk.com/jszip)
     * Copyright (c) Stuart Knightley
     * Dual licenced under the [MIT license or GPLv3](https://raw.githubusercontent.com/Stuk/jszip/master/LICENSE.markdown).
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */
    // This is used to cache the pdfmake loading


    var pdfmakePromise;
    /**
     * Loads pdfmake dynamic module
     *
     * This is an asynchronous function. Check the description of `getImage()`
     * for description and example usage.
     *
     * @ignore Exclude from docs
     * @return Instance of pdfmake
     * @async
     */

    function _pdfmake() {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var a, pdfmake, vfs_fonts, global;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , Promise.all([__webpack_require__.e(
              /*! import() | pdfmake */
              "pdfmake").then(__webpack_require__.t.bind(null,
              /*! pdfmake/build/pdfmake.js */
              "./node_modules/pdfmake/build/pdfmake.js", 7)), __webpack_require__.e(
              /*! import() | pdfmake */
              "pdfmake").then(__webpack_require__.bind(null,
              /*! ../../pdfmake/vfs_fonts */
              "./node_modules/@amcharts/amcharts4/.internal/pdfmake/vfs_fonts.js"))])];

            case 1:
              a = _a.sent();
              pdfmake = a[0];
              vfs_fonts = a[1];
              global = window;
              global.pdfMake = global.pdfMake || {};
              global.pdfMake.vfs = vfs_fonts.default;
              pdfmake.vfs = vfs_fonts.default;
              return [2
              /*return*/
              , pdfmake];
          }
        });
      });
    } // TODO better parsing


    var fontFamilySrcRegexp = /src: ([^;]+);/; // TODO better checks

    function supportsBlobUri() {
      return window.navigator.msSaveOrOpenBlob != null;
    } // TODO move into utils or something ?


    function blobToDataUri(blob) {
      return new Promise(function (resolve, reject) {
        // TODO handle abort ?
        var f = new FileReader();

        f.onload = function (e) {
          resolve(f.result);
        };

        f.onerror = function (e) {
          reject(e);
        };

        f.readAsDataURL(blob);
      });
    }

    function getCssRules(s) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var sheet, e_1;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              sheet = s.sheet;
              _a.label = 1;

            case 1:
              _a.trys.push([1, 2,, 4]);

              return [2
              /*return*/
              , sheet.cssRules];

            case 2:
              e_1 = _a.sent();
              return [4
              /*yield*/
              , new Promise(function (success, error) {
                s.addEventListener("load", function () {
                  success(sheet.cssRules);
                }, true);
                s.addEventListener("error", function (e) {
                  error(e);
                }, true);
                setTimeout(function () {
                  error(new Error("Timeout while waiting for <style> to load"));
                }, 10000);
              })];

            case 3:
              // Needed because of https://bugzilla.mozilla.org/show_bug.cgi?id=625013
              return [2
              /*return*/
              , _a.sent()];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      });
    } // This loads a stylesheet by URL and then calls the function with it
    // TODO this should be moved into utils or something


    function loadStylesheet(doc, url, f) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var response, e_2, s, rules;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              return [4
              /*yield*/
              , _utils_Net__WEBPACK_IMPORTED_MODULE_18__["load"](url)];

            case 1:
              response = _a.sent();
              return [3
              /*break*/
              , 3];

            case 2:
              e_2 = _a.sent();
              console.error("Failed to load stylesheet", url, e_2);
              return [2
              /*return*/
              ];

            case 3:
              s = doc.createElement("style");
              s.textContent = response.response;
              doc.head.appendChild(s);
              _a.label = 4;

            case 4:
              _a.trys.push([4,, 7, 8]);

              return [4
              /*yield*/
              , getCssRules(s)];

            case 5:
              rules = _a.sent();
              return [4
              /*yield*/
              , eachStylesheet(doc, url, rules, f)];

            case 6:
              _a.sent();

              return [3
              /*break*/
              , 8];

            case 7:
              doc.head.removeChild(s);
              return [7
              /*endfinally*/
              ];

            case 8:
              return [2
              /*return*/
              ];
          }
        });
      });
    } // This calls a function for each CSSRule inside of a CSSStyleSheet.
    // If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.
    // TODO this should be moved into utils or something


    function eachStylesheet(doc, topUrl, rules, f) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var promises, length, i, rule, url;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              promises = [];
              length = rules.length;

              for (i = 0; i < length; i++) {
                rule = rules[i];

                if (rule.type === CSSRule.IMPORT_RULE) {
                  url = rule.href;

                  if (url) {
                    url = _utils_Utils__WEBPACK_IMPORTED_MODULE_20__["joinUrl"](topUrl, url);
                    promises.push(loadStylesheet(doc, url, f));
                  }
                } else {
                  f(topUrl, rule);
                }
              }

              if (!promises.length) return [3
              /*break*/
              , 2];
              return [4
              /*yield*/
              , Promise.all(promises)];

            case 1:
              _a.sent();

              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    } // This calls a function for each CSSRule for all of the stylesheets in the page.
    // If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.
    // TODO this should be moved into utils or something


    function eachStylesheets(f) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var iframe, doc_1;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              iframe = document.createElement("iframe"); // This causes it to use the same origin policy as the parent page

              iframe.src = "about:blank"; // This tries to make it more accessible for screen readers

              iframe.setAttribute("title", "");
              document.head.appendChild(iframe);
              _a.label = 1;

            case 1:
              _a.trys.push([1,, 3, 4]);

              doc_1 = iframe.contentDocument; // TODO use $dom.getRoot instead of document ?

              return [4
              /*yield*/
              , Promise.all(_utils_Array__WEBPACK_IMPORTED_MODULE_21__["map"](document.styleSheets, function (sheet) {
                var url = sheet.href;

                if (url == null) {
                  return eachStylesheet(doc_1, location.href, sheet.cssRules, f);
                } else {
                  url = _utils_Utils__WEBPACK_IMPORTED_MODULE_20__["joinUrl"](location.href, url);
                  return loadStylesheet(doc_1, url, f);
                }
              }))];

            case 2:
              // TODO use $dom.getRoot instead of document ?
              _a.sent();

              return [3
              /*break*/
              , 4];

            case 3:
              document.head.removeChild(iframe);
              return [7
              /*endfinally*/
              ];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      });
    }
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * [[Export]] allows downloading of current snapshot of the chart as an
     * image, PDF, or its data in various formats.
     *
     * The export functionality is enabled by default in charts and is accessible
     * via API or optional export menu.
     *
     * To enable menu, simply access export's `menu` property. E.g.:
     *
     * ```TypeScript
     * chart.exporting.menu = new am4core.ExportMenu();
     * ```
     * ```JavaScript
     * chart.exporting.menu = new am4core.ExportMenu();
     * ```
     * ```JSON
     * {
     *   // ...
     *   "exporting": {
     *     "menu": {}
     *   }
     * }
     * ```
     *
     * To export via API, use `export()` method:
     *
     * ```TypeScript
     * chart.exporting.export(type, [options]);
     * ```
     * ```JavaScript
     * chart.exporting.export(type, [options]);
     * ```
     *
     * E.g.:
     *
     * ```TypeScript
     * chart.exporting.export("png");
     * ```
     * ```JavaScript
     * chart.exporting.export("png");
     * ```
     *
     * @todo Better loading indicator?
     * @todo Implement multiplier option
     * @todo Handling of hanged exports
     * @important
     */


    var Export =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Export, _super);
      /**
       * Constructor
       */

      function Export(container) {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         */


        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](_this);
        /**
         * Holds options for each format.
         *
         * @ignore Exclude from docs
         */

        _this._formatOptions = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_6__["Dictionary"]();
        /**
         * Extra [[Sprite]] elements to include in exports.
         */

        _this._extraSprites = [];
        /**
         * A list of [[Sprite]] elements that need to be valid before export
         * commences.
         */

        _this._validateSprites = [];
        /**
         * Holds an array of data field names. If set, exported data fields will try
         * to maintain this order.
         *
         * If not set (default), the export will try to maintain the same order as
         * in source data, or as in `dataFields` (if set).
         *
         * @since 4.9.7
         */

        _this.dataFieldsOrder = [];
        /**
         * Indicates whether data fields were generated dynamically (`true`) or
         * if they were pre-set by the user (`false`).
         */

        _this._dynamicDataFields = true;
        /**
         * Holds a list of objects that were temporarily removed from the DOM while
         * exporting. Those most probably are tainted images, or foreign objects that
         * would otherwise prevent SVG to be converted to canvas.
         *
         * @ignore Exclude from docs
         */

        _this._removedObjects = new _utils_List__WEBPACK_IMPORTED_MODULE_5__["List"]();
        /**
         * Holds references to the objects that were temporarily hidden when export
         * started, so that we can reveal them back when export ends.
         */

        _this._hiddenObjects = [];
        /**
         * Indicates if non-exportable objects are now hidden;
         */

        _this._objectsAlreadyHidden = false;
        /**
         * Exported files will be prefixed with whatever it is set here.
         *
         * @ignore Exclude from docs
         */

        _this._filePrefix = "amCharts";
        /**
         * If you are using web fonts (such as Google Fonts), your chart might be
         * using them as well.
         *
         * Normally, exporting to image will require to download these fonts so the
         * are carried over to exported image.
         *
         * This setting can be used to disable or enable this functionality.
         *
         * @default true
         */

        _this.useWebFonts = true;
        /**
         * Many modern displays have use more actual pixels per displayed pixel. This
         * results in sharper images on screen. Unfortunately, when exported to a
         * bitmap image of the sam width/height size it will lose those extra pixels,
         * resulting in somewhat blurry image.
         *
         * This is why we are going to export images larger than they are, so that we
         * don't lose any details.
         *
         * If you'd rather export images without change in size, set this to `false`.
         *
         * @default true
         */

        _this.useRetina = true;
        /**
         * By default Export will try to use built-in method for transforming chart
         * into an image for download, then fallback to external library (canvg) for
         * conversion if failed.
         *
         * Setting this to `false` will force use of external library for all export
         * operations.
         *
         * It might be useful to turn off simplified export if you are using strict
         * content security policies, that disallow images with blobs as their
         * source.
         *
         * @default true
         * @since 4.2.5
         */

        _this.useSimplifiedExport = true;
        /**
         * If export operation takes longer than milliseconds in this second, we will
         * show a modal saying export operation took longer than expected.
         */

        _this.timeoutDelay = 2000;
        _this._exportRunning = false;
        _this._container = container;
        _this.className = "Export"; // Set default options

        _this._formatOptions.setKey("png", {});

        _this._formatOptions.setKey("jpg", {
          quality: 0.8
        });

        _this._formatOptions.setKey("gif", {});

        _this._formatOptions.setKey("svg", {});

        _this._formatOptions.setKey("pdf", {
          fontSize: 14,
          imageFormat: "png",
          addURL: true,
          addColumnNames: true
        });

        _this._formatOptions.setKey("json", {
          indent: 2,
          useLocale: true
        });

        _this._formatOptions.setKey("csv", {
          addColumnNames: true,
          emptyAs: ""
        });

        _this._formatOptions.setKey("xlsx", {
          addColumnNames: true,
          useLocale: true,
          emptyAs: ""
        });

        _this._formatOptions.setKey("html", {
          addColumnNames: true,
          emptyAs: ""
        });

        _this._formatOptions.setKey("pdfdata", {
          fontSize: 14,
          imageFormat: "png",
          addURL: true,
          addColumnNames: true,
          emptyAs: ""
        });

        _this._formatOptions.setKey("print", {
          delay: 500,
          printMethod: "iframe"
        }); // Add options adapter


        _this.adapter.add("options", function (arg) {
          var formatOptions = _this._formatOptions.getKey(arg.type);

          if (arg.options) {
            arg.options = _utils_Object__WEBPACK_IMPORTED_MODULE_17__["merge"](formatOptions, arg.options);
          } else {
            arg.options = formatOptions;
          }

          return arg;
        });

        _this.applyTheme();

        _this.dispatchImmediately("inited");

        return _this;
      }

      Object.defineProperty(Export.prototype, "menu", {
        /**
         * @return ExportMenu instance
         */
        get: function get() {
          return this._menu;
        },

        /**
         * An instance of [[ExportMenu]].
         *
         * To add an export menu to a chart, set this to a new instance of
         * [[ExportMenu]].
         *
         * ```TypeScript
         * chart.exporting.menu = new am4core.ExportMenu();
         * ```
         * ```JavaScript
         * chart.exporting.menu = new am4core.ExportMenu();
         * ```
         * ```JSON
         * {
         *   // ...
         *   "exporting": {
         *     "menu": {}
         *   }
         * }
         * ```
         *
         * @param menu  ExportMenu instance
         */
        set: function set(menu) {
          var _this = this;

          if (this._menu) {
            this.removeDispose(this._menu);
          }

          this._menu = menu; // Set container and language

          this._menu.container = this.container;
          this._menu.language = this._language; // Add adapter to check for browser support

          this._menu.adapter.add("branch", function (arg) {
            arg.branch.unsupported = !_this.typeSupported(arg.branch.type);
            return arg;
          }); // Add click events


          this._menu.events.on("hit", function (ev) {
            _this.export(ev.branch.type, ev.branch.options);

            _this.menu.close();
          });

          this._menu.events.on("enter", function (ev) {
            _this.export(ev.branch.type, ev.branch.options);

            _this.menu.close();
          });

          this._menu.events.on("over", function (ev) {
            _this._disablePointers();
          });

          this._menu.events.on("out", function (ev) {
            setTimeout(function () {
              _this._releasePointers();
            }, 10);
          }); // Dispatch event


          this.dispatchImmediately("menucreated"); // Prefix with Sprite's class name

          this._menu.adapter.add("classPrefix", function (obj) {
            obj.classPrefix = _Options__WEBPACK_IMPORTED_MODULE_14__["options"].classNamePrefix + obj.classPrefix;
            return obj;
          }); // Add menu to disposers so that it's destroyed when Export is disposed


          this._disposers.push(this._menu);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if this specific menu item type is supported by current system.
       *
       * @param type  Menu item type
       * @return `false` if not supported
       */

      Export.prototype.typeSupported = function (type) {
        var supported = true;
        var options = this.getFormatOptions(type);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options) && options.disabled) {
          supported = false;
        } else if (type === "pdf") {//supported = this.downloadSupport();
        } else if (type === "xlsx") {
          //supported = (this.downloadSupport() && this._hasData()) ? true : false;
          supported = this._hasData() ? true : false;
        } else if (type == "print" && !window.print) {
          supported = false;
        } else if (["json", "csv", "html", "pdfdata"].indexOf(type) !== -1 && !this._hasData()) {
          supported = false;
        }

        return this.adapter.apply("supported", {
          supported: supported,
          type: type
        }).supported;
      };
      /**
       * Checks if data is available.
       *
       * @return Has data?
       */


      Export.prototype._hasData = function () {
        return this.data && this.data.length;
      };
      /**
       * Get function to handle export for particular format.
       *
       * @ignore Exclude from docs
       */


      Export.prototype._getFunction = function (type) {
        switch (type) {
          case "png":
          case "gif":
          case "jpg":
            return this.getImage;

          case "svg":
            return this.getSVG;

          case "pdf":
          case "pdfdata":
            return this.getPDF;

          case "xlsx":
            return this.getExcel;

          case "csv":
            return this.getCSV;

          case "json":
            return this.getJSON;

          case "html":
            return this.getHTML;

          case "print":
            return this.getPrint;

          default:
            return this.unsupported;
        }
      };
      /**
       * Initiates export procedure.
       *
       * @param type     Export type
       * @param options  Options
       * @return `true` if export was successful
       * @async
       */


      Export.prototype.export = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var event_1, func, data, event_2, event_3;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                // Check if it's a custom item, and do nothing or execute custom callback
                if (type == "custom") {
                  this.handleCustom(options);
                  return [2
                  /*return*/
                  , true];
                } // Set export running flag


                this._exportRunning = true; // Dispatch event

                if (this.events.isEnabled("exportstarted")) {
                  event_1 = {
                    "type": "exportstarted",
                    "target": this,
                    "format": type,
                    "options": options
                  };
                  this.events.dispatchImmediately("exportstarted", event_1);
                } // Schedule a preloader


                this.showPreloader(); // Schedule a timeout

                if (this.timeoutDelay) {
                  this.hideTimeout();
                  this._timeoutTimeout = this.setTimeout(function () {
                    // Dispatch event
                    if (_this.events.isEnabled("exporttimedout")) {
                      var event_4 = {
                        "type": "exporttimedout",
                        "target": _this,
                        "format": type,
                        "options": options
                      };

                      _this.events.dispatchImmediately("exporttimedout", event_4);
                    } // Show modal


                    _this.showTimeout();
                  }, this.timeoutDelay);
                } // Hide items that should not be exported


                this.hideNonExportableSprites();
                func = this._getFunction(type); // Give chance for plugins to override both function and options

                options = this.adapter.apply("options", {
                  options: options,
                  type: type
                }).options;
                func = this.adapter.apply("exportFunction", {
                  func: func,
                  type: type,
                  options: options
                }).func;
                return [4
                /*yield*/
                , func.call(this, type, options)];

              case 1:
                data = _a.sent(); // Release pointers

                this._exportRunning = false;

                this._releasePointers(); // Restore temporarily hidden elements


                this.restoreNonExportableSprites();

                if (data) {
                  // Dispatch event
                  if (this.events.isEnabled("exportfinished")) {
                    event_2 = {
                      "type": "exportfinished",
                      "target": this,
                      "format": type,
                      "options": options
                    };
                    this.events.dispatchImmediately("exportfinished", event_2);
                  } // Hide preloader and timeout modals


                  this.hidePreloader();
                  this.hideTimeout();

                  if (this.menu) {
                    this.menu.close();
                  } // Download or print


                  if (type === "print") {
                    return [2
                    /*return*/
                    , this.print(data, options, this.adapter.apply("title", {
                      title: this.title,
                      options: options
                    }).title)];
                  } else {
                    if (type == "pdfdata") {
                      return [2
                      /*return*/
                      , this.download(data, this.filePrefix + ".pdf")];
                    }

                    return [2
                    /*return*/
                    , this.download(data, this.filePrefix + "." + type)];
                  }
                } else {
                  // Throw exception?
                  // @todo
                  // Dispatch event
                  if (this.events.isEnabled("error")) {
                    event_3 = {
                      "type": "error",
                      "target": this,
                      "format": type,
                      "options": options
                    };
                    this.events.dispatchImmediately("error", event_3);
                  }

                  return [2
                  /*return*/
                  , false];
                }

                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * A function that should handle unsupported export types.
       *
       * @ignore Exclude from docs
       * @param type     Export type
       * @param options  Options
       * @return Promise
       * @async
       */


      Export.prototype.unsupported = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            // TODO should this return `undefined`?
            return [2
            /*return*/
            , ""];
          });
        });
      };
      /**
       * Handles click on a "custom" menu item.
       *
       * Basically, if it has "callback" enabled, it will be called. Nothing else.
       *
       * @ignore Exclude from docs
       * @param options  Options
       */


      Export.prototype.handleCustom = function (options) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options) && _utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options.callback)) {
          options.callback.call(options.callbackTarget || this, options);
        }
      };
      /**
       * Requests a Print of the chart.
       *
       * @param type     Export type
       * @param options  Options
       * @return Promise
       * @async
       */


      Export.prototype.getPrint = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            return [2
            /*return*/
            , this.getImage("png", options)];
          });
        });
      };
      /**
       * A function that returns data: URI encoded @font-family, so that way it can be embedded into SVG.
       *
       * @ignore Exclude from docs
       * @return String which can be embedded directly into a <style> element.
       * @async
       */


      Export.prototype.getFontFamilies = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var DOMURL, blobs, promises, a;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                DOMURL = this.getDOMURL();
                blobs = [];
                promises = [];
                return [4
                /*yield*/
                , eachStylesheets(function (topUrl, rule) {
                  if (rule.type === CSSRule.FONT_FACE_RULE) {
                    var cssText_1 = rule.cssText; // TODO this is necessary because Edge doesn't let you access the src using getPropertyValue

                    var src = fontFamilySrcRegexp.exec(cssText_1);

                    if (src !== null) {
                      // TODO make this faster (don't create Promises for non-url stuff)
                      var urls = src[1].split(/ *, */).map(function (url) {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                          var a, after, fullUrl, response, url_1, e_3;
                          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                            switch (_a.label) {
                              case 0:
                                a = /^url\(["']?([^"'\)]+)["']?\)([^,]*)$/.exec(url);
                                if (!(a === null)) return [3
                                /*break*/
                                , 1];
                                return [2
                                /*return*/
                                , url];

                              case 1:
                                after = a[2];
                                fullUrl = _utils_Utils__WEBPACK_IMPORTED_MODULE_20__["joinUrl"](topUrl, a[1]);
                                _a.label = 2;

                              case 2:
                                _a.trys.push([2, 7,, 8]);

                                return [4
                                /*yield*/
                                , _utils_Net__WEBPACK_IMPORTED_MODULE_18__["load"](fullUrl, undefined, {
                                  responseType: "blob"
                                })];

                              case 3:
                                response = _a.sent();
                                if (!supportsBlobUri()) return [3
                                /*break*/
                                , 4];
                                url_1 = DOMURL.createObjectURL(response.blob);
                                blobs.push(url_1);
                                return [3
                                /*break*/
                                , 6];

                              case 4:
                                return [4
                                /*yield*/
                                , blobToDataUri(response.blob)];

                              case 5:
                                url_1 = _a.sent();
                                _a.label = 6;

                              case 6:
                                // TODO should it should escape the URI ?
                                return [2
                                /*return*/
                                , "url(\"" + url_1 + "\")" + after];

                              case 7:
                                e_3 = _a.sent();
                                console.error("Failed to load font", fullUrl, e_3);
                                return [2
                                /*return*/
                                , null];

                              case 8:
                                return [2
                                /*return*/
                                ];
                            }
                          });
                        });
                      });
                      promises.push(Promise.all(urls).then(function (a) {
                        a = a.filter(function (x) {
                          return x != null;
                        });

                        if (a.length === 0) {
                          return "";
                        } else {
                          return cssText_1.replace(fontFamilySrcRegexp, "src: " + a.join(", ") + ";");
                        }
                      }));
                    }
                  }
                })];

              case 1:
                _a.sent();

                return [4
                /*yield*/
                , Promise.all(promises)];

              case 2:
                a = _a.sent();
                return [2
                /*return*/
                , {
                  blobs: blobs,
                  cssText: a.filter(function (x) {
                    return !!x;
                  }).join("\n")
                }];
            }
          });
        });
      };
      /**
       * Produces image output from the element.
       *
       * Converts to a `Canvas` first, then produces an image to download.
       *
       * This is an asynchronous function. Rather than returning a result, it
       * returns a Promise.
       *
       * You can use `await` notion from other async functions, or `then()`
       * anywhere else.
       *
       * ```TypeScript
       * let img;
       *
       * // Async
       * img = await chart.exporting.getImage( "png" );
       *
       * // Sync
       * chart.exporting.getImage( "png" ).then( ( data ) => {
       *   img = data;
       * } );
       * ```
       * ```JavaScript
       * var img;
       * chart.exporting.getImage( "png" ).then( ( data ) => {
       *   img = data;
       * } );
       * ```
       *
       * @param  type           Image format
       * @param  options        Options
       * @param  includeExtras  Should extra sprites be included if set?
       * @return Promise
       */


      Export.prototype.getImage = function (type, options, includeExtras) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var prehidden, canvas, uri, e_4, data, data;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                prehidden = this._objectsAlreadyHidden;

                if (!prehidden) {
                  this.hideNonExportableSprites();
                }

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options)) {
                  options = this.getFormatOptions(type);
                } // Wait for required elements to be ready before proceeding


                return [4
                /*yield*/
                , this.awaitValidSprites()];

              case 1:
                // Wait for required elements to be ready before proceeding
                _a.sent();

                return [4
                /*yield*/
                , this.simplifiedImageExport()];

              case 2:
                if (!_a.sent()) return [3
                /*break*/
                , 10];
                _a.label = 3;

              case 3:
                _a.trys.push([3, 7,, 9]);

                return [4
                /*yield*/
                , this.getCanvas(options)];

              case 4:
                canvas = _a.sent();
                if (!(includeExtras !== false)) return [3
                /*break*/
                , 6];
                return [4
                /*yield*/
                , this.addExtras(canvas, options)];

              case 5:
                canvas = _a.sent();
                _a.label = 6;

              case 6:
                uri = canvas.toDataURL(this.getContentType(type), options.quality); // Get rid of the canvas

                this.disposeCanvas(canvas);

                if (!prehidden) {
                  this.restoreNonExportableSprites();
                }

                return [2
                /*return*/
                , uri];

              case 7:
                e_4 = _a.sent();
                console.error(e_4.message + "\n" + e_4.stack);
                console.warn("Simple export failed, falling back to advanced export");
                return [4
                /*yield*/
                , this.getImageAdvanced(type, options, includeExtras)];

              case 8:
                data = _a.sent();

                if (!prehidden) {
                  this.restoreNonExportableSprites();
                }

                return [2
                /*return*/
                , data];

              case 9:
                return [3
                /*break*/
                , 12];

              case 10:
                return [4
                /*yield*/
                , this.getImageAdvanced(type, options, includeExtras)];

              case 11:
                data = _a.sent();

                if (!prehidden) {
                  this.restoreNonExportableSprites();
                }

                return [2
                /*return*/
                , data];

              case 12:
                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * Adds extra elements to the canvas.
       *
       * @param  canvas   Original canvas
       * @param  options  Options
       */


      Export.prototype.addExtras = function (canvas, options, advanced) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var middleLeft_1, middleTop_1, middleWidth_1, middleHeight_1, extraRight_1, extraBottom_1, extras, newCanvas, ctx_1, background, left_1, top_1, right_1, bottom_1;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this.extraSprites.length) return [3
                /*break*/
                , 2];
                middleLeft_1 = 0;
                middleTop_1 = 0;
                middleWidth_1 = canvas.width;
                middleHeight_1 = canvas.height;
                extraRight_1 = 0;
                extraBottom_1 = 0;
                return [4
                /*yield*/
                , Promise.all(_utils_Array__WEBPACK_IMPORTED_MODULE_21__["map"](this.extraSprites, function (extraSprite) {
                  return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                    var extra, extraCanvas, extraWidth, extraHeight;
                    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                      switch (_a.label) {
                        case 0:
                          if (extraSprite instanceof _Sprite__WEBPACK_IMPORTED_MODULE_3__["Sprite"]) {
                            extra = {
                              sprite: extraSprite,
                              position: "bottom"
                            };
                          } else {
                            extra = extraSprite;
                          } // Set defaults


                          extra.position = extra.position || "bottom";
                          extra.marginTop = extra.marginTop || 0;
                          extra.marginRight = extra.marginRight || 0;
                          extra.marginBottom = extra.marginBottom || 0;
                          extra.marginLeft = extra.marginLeft || 0;
                          if (!advanced) return [3
                          /*break*/
                          , 2];
                          return [4
                          /*yield*/
                          , extra.sprite.exporting.getCanvasAdvanced(options)];

                        case 1:
                          extraCanvas = _a.sent();
                          return [3
                          /*break*/
                          , 4];

                        case 2:
                          return [4
                          /*yield*/
                          , extra.sprite.exporting.getCanvas(options)];

                        case 3:
                          extraCanvas = _a.sent();
                          _a.label = 4;

                        case 4:
                          extraWidth = extraCanvas.width + extra.marginLeft + extra.marginRight;
                          extraHeight = extraCanvas.height + extra.marginTop + extra.marginBottom;

                          if (extra.position == "top") {
                            middleWidth_1 = extra.crop ? middleHeight_1 : _utils_Math__WEBPACK_IMPORTED_MODULE_22__["max"](middleWidth_1, extraWidth);
                            middleTop_1 += extraHeight;
                          } else if (extra.position == "right") {
                            middleHeight_1 = extra.crop ? middleHeight_1 : _utils_Math__WEBPACK_IMPORTED_MODULE_22__["max"](middleHeight_1, extraHeight);
                            extraRight_1 += extraWidth;
                          } else if (extra.position == "left") {
                            middleHeight_1 = extra.crop ? middleHeight_1 : _utils_Math__WEBPACK_IMPORTED_MODULE_22__["max"](middleHeight_1, extraHeight);
                            middleLeft_1 += extraWidth;
                          } else if (extra.position === "bottom") {
                            middleWidth_1 = extra.crop ? middleHeight_1 : _utils_Math__WEBPACK_IMPORTED_MODULE_22__["max"](middleWidth_1, extraWidth);
                            extraBottom_1 += extraHeight;
                          }

                          return [2
                          /*return*/
                          , {
                            canvas: extraCanvas,
                            position: extra.position,
                            left: extra.marginLeft,
                            top: extra.marginTop,
                            width: extraWidth,
                            height: extraHeight
                          }];
                      }
                    });
                  });
                }))];

              case 1:
                extras = _a.sent();
                newCanvas = this.getDisposableCanvas();
                newCanvas.width = middleLeft_1 + middleWidth_1 + extraRight_1;
                newCanvas.height = middleTop_1 + middleHeight_1 + extraBottom_1;
                ctx_1 = newCanvas.getContext("2d");
                background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);

                if (background) {
                  ctx_1.fillStyle = background.toString();
                  ctx_1.fillRect(0, 0, newCanvas.width, newCanvas.height);
                }

                left_1 = middleLeft_1;
                top_1 = middleTop_1;
                right_1 = left_1 + middleWidth_1;
                bottom_1 = top_1 + middleHeight_1; // Radiates outwards from center

                _utils_Array__WEBPACK_IMPORTED_MODULE_21__["each"](extras, function (extra) {
                  if (extra.position == "top") {
                    top_1 -= extra.height;
                    ctx_1.drawImage(extra.canvas, middleLeft_1 + extra.left, top_1 + extra.top);
                  } else if (extra.position == "right") {
                    ctx_1.drawImage(extra.canvas, right_1 + extra.left, middleTop_1 + extra.top);
                    right_1 += extra.width;
                  } else if (extra.position == "left") {
                    left_1 -= extra.width;
                    ctx_1.drawImage(extra.canvas, left_1 + extra.left, middleTop_1 + extra.top);
                  } else if (extra.position === "bottom") {
                    ctx_1.drawImage(extra.canvas, middleLeft_1 + extra.left, bottom_1 + extra.top);
                    bottom_1 += extra.height;
                  }

                  _this.disposeCanvas(extra.canvas);
                });

                ctx_1.drawImage(canvas, middleLeft_1, middleTop_1);
                return [2
                /*return*/
                , newCanvas];

              case 2:
                return [2
                /*return*/
                , canvas];
            }
          });
        });
      };
      /**
       * Returns canvas representation of the [[Sprite]].
       *
       * @param   options  Options
       * @return           Canvas
       */


      Export.prototype.getCanvas = function (options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var background, DOMURL, url, blobs, canvas, width, height, font, fontSize, pixelRatio, ctx, promises, a, data, svg, img;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                // Options are set?
                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options)) {
                  options = {};
                }

                background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);
                DOMURL = this.getDOMURL();
                url = null;
                blobs = null;
                _a.label = 1;

              case 1:
                _a.trys.push([1,, 4, 5]);

                width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["findFont"](this.sprite.dom), fontSize = _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["findFontSize"](this.sprite.dom); // Create canvas and its 2D context

                canvas = this.getDisposableCanvas();
                pixelRatio = this.getPixelRatio(options);
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
                canvas.width = width * pixelRatio;
                canvas.height = height * pixelRatio;
                ctx = canvas.getContext("2d");

                if (pixelRatio != 1) {
                  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
                } // Add background if necessary


                if (background) {
                  ctx.fillStyle = background.toString();
                  ctx.fillRect(0, 0, width, height);
                }

                promises = [];

                if (this.useWebFonts) {
                  // TODO what if one of the other things errors before it's been able to set `blobs` ?
                  promises.push(this.getFontFamilies().then(function (fonts) {
                    blobs = fonts.blobs;
                    return fonts.cssText;
                  }));
                }

                promises.push(this.imagesToDataURI(this.sprite.dom, options));
                promises.push(this.prepForeignObjects(this.sprite.dom, options));
                return [4
                /*yield*/
                , Promise.all(promises)];

              case 2:
                a = _a.sent();
                data = this.normalizeSVG("<style>" + a[0] + "</style>" + this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                svg = new Blob([data], {
                  type: "image/svg+xml"
                });
                url = DOMURL.createObjectURL(svg);
                return [4
                /*yield*/
                , this.loadNewImage(url, width, height, "anonymous")];

              case 3:
                img = _a.sent(); // Draw image on canvas

                ctx.drawImage(img, 0, 0);
                return [3
                /*break*/
                , 5];

              case 4:
                if (url !== null) {
                  DOMURL.revokeObjectURL(url);
                }

                if (blobs !== null) {
                  _utils_Array__WEBPACK_IMPORTED_MODULE_21__["each"](blobs, function (url) {
                    DOMURL.revokeObjectURL(url);
                  });
                } // Restore replaced tainted images in DOM


                this.restoreRemovedObjects();
                return [7
                /*endfinally*/
                ];

              case 5:
                return [2
                /*return*/
                , canvas];
            }
          });
        });
      };
      /**
       * Returns canvas representation of the [[Sprite]] using canvg.
       *
       * @param   options  Options
       * @return           Canvas
       */


      Export.prototype.getCanvasAdvanced = function (options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var background, canvg, width, height, font, fontSize, data, canvas, pixelRatio, config;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                // Options are set?
                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options)) {
                  options = {};
                } // Convert external images to data uris


                return [4
                /*yield*/
                , this.imagesToDataURI(this.sprite.dom, options)];

              case 1:
                // Convert external images to data uris
                _a.sent();

                background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);
                return [4
                /*yield*/
                , this.canvg];

              case 2:
                canvg = _a.sent();
                width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["findFont"](this.sprite.dom), fontSize = _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["findFontSize"](this.sprite.dom);
                data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize, background);
                canvas = this.getDisposableCanvas();
                pixelRatio = this.getPixelRatio(options);
                canvas.style.width = width * pixelRatio + 'px';
                canvas.style.height = height * pixelRatio + 'px';
                canvas.width = width * pixelRatio;
                canvas.height = height * pixelRatio;
                config = {
                  //ignoreDimensions: true,
                  useCORS: true
                };

                if (pixelRatio != 1) {
                  config.ignoreDimensions = true;
                  config.scaleWidth = width * pixelRatio;
                  config.scaleHeight = height * pixelRatio;
                }

                canvg(canvas, data, config);
                return [2
                /*return*/
                , canvas];
            }
          });
        });
      };
      /**
       * Tries to dynamically load [canvg.js](https://github.com/canvg/canvg) and
       * export an image using its functions.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param type     Image format
       * @param options  Options
       * @return Data uri
       */


      Export.prototype.getImageAdvanced = function (type, options, includeExtras) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var prehidden, canvas, uri;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                prehidden = this._objectsAlreadyHidden;

                if (!prehidden) {
                  this.hideNonExportableSprites();
                }

                if (!_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](options)) {
                  options = this.getFormatOptions(type);
                }

                return [4
                /*yield*/
                , this.getCanvasAdvanced(options)];

              case 1:
                canvas = _a.sent();
                if (!(includeExtras !== false)) return [3
                /*break*/
                , 3];
                return [4
                /*yield*/
                , this.addExtras(canvas, options, true)];

              case 2:
                canvas = _a.sent();
                _a.label = 3;

              case 3:
                uri = canvas.toDataURL(this.getContentType(type), options.quality); // Get rid of the canvas

                this.disposeCanvas(canvas);

                if (!prehidden) {
                  this.restoreNonExportableSprites();
                }

                return [2
                /*return*/
                , uri];
            }
          });
        });
      };
      /**
       * Creates a `<canvas>` element and returns it.
       *
       * @return Canvas element
       */


      Export.prototype.getDisposableCanvas = function () {
        var canvas = document.createElement("canvas");
        canvas.style.position = "fixed";
        canvas.style.top = "-10000px";
        document.body.appendChild(canvas);
        return canvas;
      };
      /**
       * Removes canvas.
       *
       * @param canvas  Canvas element
       */


      Export.prototype.disposeCanvas = function (canvas) {
        document.body.removeChild(canvas);
      };
      /**
       * Returns pixel ratio for retina displays.
       *
       * @return Pixel ratio
       */


      Export.prototype.getPixelRatio = function (options) {
        var scale = options && options.scale ? options.scale : 1;
        return (this.useRetina ? _utils_Utils__WEBPACK_IMPORTED_MODULE_20__["getPixelRatio"]() : 1) * scale;
      };
      /**
       * Converts all `<image>` tags in SVG to use data uris instead of external
       * URLs
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @param el       SVG node
       * @param options  Options
       * @return Promise
       */


      Export.prototype.imagesToDataURI = function (el, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var images, promises, count, i, image, href;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                images = el.querySelectorAll("image");
                if (!images.length) return [3
                /*break*/
                , 2];
                promises = []; // There are images, process each of them

                for (count = images.length, i = 0; i < count; i++) {
                  image = images[i];
                  href = image.getAttributeNS(Export.XLINK, "href"); // no href?

                  if (!href) {
                    continue;
                  }

                  if (href.indexOf("data:image") !== -1) {// Ignore image if it's already in Data URI format
                  } else {
                    // SVG or bitmap image?
                    if (href.indexOf(".svg") !== -1) {
                      promises.push(this.svgToDataURI(image, options));
                    } else {
                      promises.push(this.imageToDataURI(image, options));
                    }
                  }
                }

                return [4
                /*yield*/
                , Promise.all(promises)];

              case 1:
                _a.sent();

                return [2
                /*return*/
                ];

              case 2:
                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * `foreignObject` elements cannot be exported. This function hides them
       * temprarily. In the future it might try to convert them to SVG to make them
       * exportable.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @param el       SVG node
       * @param options  Options
       * @return Promise
       */


      Export.prototype.prepForeignObjects = function (el, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var objects, count, i;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            objects = el.querySelectorAll("foreignObject");

            if (objects.length) {
              // There are foreign objects, process each of them
              for (count = objects.length, i = 0; i < count; i++) {
                this.temporarilyRemoveObject(objects[i]);
              }
            }

            return [2
            /*return*/
            ];
          });
        });
      };
      /**
       * Converts an SVG `<image>` to use its data uri for `href` instead of
       * external file.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @param el       SVG element
       * @param options  Options
       */


      Export.prototype.imageToDataURI = function (el, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var img, canvas, uri, e_5;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 2,, 3]);

                return [4
                /*yield*/
                , this.loadNewImage(el.getAttributeNS(Export.XLINK, "href"), null, null, "anonymous")];

              case 1:
                // Create image
                img = _a.sent();
                canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height; // Draw new image on it via `toDataURL`

                canvas.getContext("2d").drawImage(img, 0, 0); // Replace image `href` with data uri
                // If we got to this point it means image has loaded, however we might
                // still get an error with `toDataURL()`

                try {
                  uri = canvas.toDataURL();
                  el.setAttribute("href", uri);
                  return [2
                  /*return*/
                  , uri];
                } catch (e) {
                  // Give up and temporarily remove the element href temporarily
                  if (options.keepTainted !== false) {
                    /*this._removedObjects.push({
                        "element": el,
                        "originalHref": el.getAttributeNS(Export.XLINK, "href")
                    });
                    el.setAttributeNS(Export.XLINK, "href", "");*/
                    this.temporarilyRemoveObject(el);
                  }

                  return [2
                  /*return*/
                  , undefined];
                }

                return [3
                /*break*/
                , 3];

              case 2:
                e_5 = _a.sent(); // Give up and temporarily remove the element's href

                if (!options || options.keepTainted !== false) {
                  /*this._removedObjects.push({
                      "element": el,
                      "originalHref": el.getAttributeNS(Export.XLINK, "href")
                  });
                  el.setAttributeNS(Export.XLINK, "href", "");*/
                  this.temporarilyRemoveObject(el);
                }

                return [2
                /*return*/
                , undefined];

              case 3:
                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * Converts `<image>` with external SVG source to data uri. Loads external SVG
       * file, then converts it to data uri and replaces the `xlink:href` parameter.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @param el        An SVG element
       * @param options   Options
       */


      Export.prototype.svgToDataURI = function (el, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var href, data, charset, uri, e_6;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                href = el.getAttributeNS(Export.XLINK, "href");
                _a.label = 1;

              case 1:
                _a.trys.push([1, 3,, 4]);

                return [4
                /*yield*/
                , _utils_Net__WEBPACK_IMPORTED_MODULE_18__["load"](href)];

              case 2:
                data = _a.sent();
                charset = this.adapter.apply("charset", {
                  charset: "base64",
                  type: "svg",
                  options: options
                }).charset;
                uri = this.adapter.apply("svgToDataURI", {
                  data: "data:" + this.getContentType("svg") + ";" + charset + "," + btoa(data.response),
                  options: options
                }).data;
                el.setAttributeNS(Export.XLINK, "href", uri);
                return [2
                /*return*/
                , uri];

              case 3:
                e_6 = _a.sent(); // Disable temporarily

                if (!options || options.keepTainted !== false) {
                  /*this._removedObjects.push({
                      "element": el,
                      "originalHref": href
                  });
                  el.setAttributeNS(Export.XLINK, "href", "");*/
                  this.temporarilyRemoveObject(el);
                }

                return [2
                /*return*/
                , undefined];

              case 4:
                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * Temporarily removes element from DOM, and replaces it with a dummy
       * placeholder, as well as stores it for later restoration.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @param el Node
       */


      Export.prototype.temporarilyRemoveObject = function (el, placeholder) {
        // Get parent
        var parent = el.parentElement || el.parentNode; // Create a placeholder group element if it has not been passed in

        if (!placeholder) {
          placeholder = this.sprite.paper.add("g").node;
        }

        parent.insertBefore(placeholder, el); // Check if we have a textContents we can replace with
        // @todo Perhaps we should explore alternatives to creating text nodes
        // i.e. creating a text version of the HTML-based Text, just for export
        // purposes. Converting HTML into SVG is very complicated

        if (el.textContent) {}
        /*let text = this.sprite.paper.add("text").node;
        text.textContent = el.textContent;
        placeholder.appendChild(text);
          // Copy properties from the removing element to the placeholder
        $dom.copyAttributes(el, placeholder);*/
        // Remove the old element


        parent.removeChild(el); // Log removed item

        this._removedObjects.push({
          "element": el,
          "placeholder": placeholder
        });
      };
      /**
       * Restores all (possibly tainted or unsupported) objects that were
       * temporarily removed when exporting.
       *
       * @ignore Exclude from docs
       */


      Export.prototype.restoreRemovedObjects = function () {
        var obj;

        while (true) {
          obj = this._removedObjects.pop();

          if (!obj) {
            break;
          } //obj.element.setAttribute("href", obj.originalHref);


          var parent_1 = obj.placeholder.parentElement || obj.placeholder.parentNode;
          parent_1.insertBefore(obj.element, obj.placeholder); //parent.removeChild(obj.placeholder);
        }
      };
      /**
       * Checkes if simplified export can be used using `createObjectURL` and SVG
       * document does not contain any external images.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @return `true` if simplified export can be used
       */


      Export.prototype.simplifiedImageExport = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var cache, canvas, ctx, DOMURL, svg, url, img, e_7, e_8;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (this.useSimplifiedExport === false) {
                  return [2
                  /*return*/
                  , false];
                }

                cache = _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].getCache("simplifiedImageExport");

                if (cache === false || cache === true) {
                  return [2
                  /*return*/
                  , cache];
                }

                _a.label = 1;

              case 1:
                _a.trys.push([1, 6,, 7]);

                canvas = document.createElement("canvas");
                canvas.width = 1;
                canvas.height = 1;
                ctx = canvas.getContext("2d");
                DOMURL = this.getDOMURL();
                svg = new Blob([this.normalizeSVG("<g></g>", {}, 1, 1)], {
                  type: "image/svg+xml"
                });
                url = DOMURL.createObjectURL(svg);
                img = void 0;
                _a.label = 2;

              case 2:
                _a.trys.push([2, 4,, 5]);

                return [4
                /*yield*/
                , this.loadNewImage(url, 1, 1)];

              case 3:
                img = _a.sent();
                return [3
                /*break*/
                , 5];

              case 4:
                e_7 = _a.sent();
                return [2
                /*return*/
                , false];

              case 5:
                ctx.drawImage(img, 0, 0);
                DOMURL.revokeObjectURL(url);

                try {
                  //let uri = canvas.toDataURL("image/png");
                  _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].setCache("simplifiedImageExport", true);

                  return [2
                  /*return*/
                  , true];
                } catch (e) {
                  _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].setCache("simplifiedImageExport", false);

                  return [2
                  /*return*/
                  , false];
                }

                return [3
                /*break*/
                , 7];

              case 6:
                e_8 = _a.sent();

                _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].setCache("simplifiedImageExport", false);

                return [2
                /*return*/
                , false];

              case 7:
                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * Returns a new `<image>` element.
       *
       * @ignore Exclude from docs
       * @param url          URL of the image
       * @param width        Width (px)
       * @param height       Height (px)
       * @param crossOrigin  Cross-Origin setting
       * @return Promise
       */


      Export.prototype.loadNewImage = function (url, width, height, crossOrigin) {
        return new Promise(function (success, error) {
          // New image
          var image;

          if (width && height) {
            image = new Image(width, height);
          } else {
            image = new Image();
          } // Set crossorigin


          if (crossOrigin) {
            image.setAttribute("crossOrigin", crossOrigin);
          } // Report success on load


          image.onload = function () {
            success(image);
          };

          function onerror() {
            // Error occurred. Just in case it's the crossOrigin issue, let's try
            // stripping off this attribute and trying again
            if (crossOrigin) {
              // Retain old uri
              var currentHref = image.src; // Set up another `onerror` to handle situations where image is not
              // loadable at all (i.e. protected by CORS)

              image.onerror = function () {
                // Nope, no luck
                error(new Error("Loading image \"" + url + "\" failed"));
              }; // remove the `crossOrigin` attribute


              image.removeAttribute("crossorigin"); // retry

              image.src = "";
              image.src = currentHref;
            } else {
              error(new Error("Loading image \"" + url + "\" failed"));
            }
          } // Set image error handlers


          image.onabort = onerror;
          image.onerror = onerror; // Trigger load

          image.src = url;
        });
      };
      /**
       * Returns current DOM URL.
       *
       * @ignore Exclude from docs
       * @return URL
       */


      Export.prototype.getDOMURL = function () {
        return self.URL || self.webkitURL || self;
      };
      /**
       * Returns an SVG representation of the chart.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       */


      Export.prototype.getSVG = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var prehidden, width, height, font, fontSize, svg, charset, uri;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                prehidden = this._objectsAlreadyHidden;

                if (!prehidden) {
                  this.hideNonExportableSprites();
                } // Wait for required elements to be ready before proceeding


                return [4
                /*yield*/
                , this.awaitValidSprites()];

              case 1:
                // Wait for required elements to be ready before proceeding
                _a.sent();

                width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["findFont"](this.sprite.dom), fontSize = _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["findFontSize"](this.sprite.dom);
                svg = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);
                charset = this.adapter.apply("charset", {
                  charset: "charset=utf-8",
                  type: "svg",
                  options: options
                }).charset;
                uri = this.adapter.apply("getSVG", {
                  data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(svg),
                  options: options
                }).data;

                if (!prehidden) {
                  this.restoreNonExportableSprites();
                }

                return [2
                /*return*/
                , uri];
            }
          });
        });
      };
      /**
       * Checks if SVG is fully formatted. Encloses in `<svg>...</svg>` if
       * necessary.
       *
       * @ignore Exclude from docs
       * @param svg       Input SVG
       * @param options   Options
       * @param width     Width of the SVG viewport
       * @param height    Height of the SVG viewport
       * @param font      Font family to use as a base
       * @param fontSize  Font size to use as a base
       * @return Output SVG
       * @todo Add style params to existing <svg>
       */


      Export.prototype.normalizeSVG = function (svg, options, width, height, font, fontSize, background) {
        // Construct width/height params
        var dimParams = "";

        if (width) {
          dimParams += "width=\"" + width + "px\" ";
        }

        if (height) {
          dimParams += "height=\"" + height + "px\" ";
        } // Apply font settings


        var styleParams = "";

        if (font) {
          styleParams += "font-family: " + font.replace(/"/g, "") + ";";
        }

        if (fontSize) {
          styleParams += "font-size: " + fontSize + ";";
        } // Add missing <svg> enclosure


        if (!svg.match(/<svg/)) {
          svg = "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg " + dimParams + " style=\"" + styleParams + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">" + svg + "</svg>";
        } else {
          if (dimParams !== "") {
            // Clear current params
            svg = svg.replace(/(<svg[^>]*)width="[^"]*"/, "$1");
            svg = svg.replace(/(<svg[^>]*)height="[^"]*"/, "$1"); // Add new params

            svg = svg.replace(/(<svg)/, "$1" + dimParams);
          }
          /*if (styleParams !== "") {
              // Clear current params
              svg = svg.replace(/(<svg[^>]*)stylewidth="[^"]*"/, "$1");
              svg = svg.replace(/(<svg[^>]*)height="[^"]*"/, "$1");
                // Add new params
              svg = svg.replace(/(<svg)/, "$1" + dimParams);
          }*/

        }

        if (background) {
          svg = svg.replace(/(<svg[^>]*>)/, "$1<rect width=\"100%\" height=\"100%\" fill=\"" + background.rgba + "\"/>"); //svg = svg.replace(/<\/svg>/, "<rect width=\"100%\" height=\"100%\" fill=\"" + background.rgba + "\"/></svg>");
        }

        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_16__["isInternetExplorer"]()) {
          // IE can't handle exporting <feColorMatrix> for some reason
          svg = svg.replace(/<feColorMatrix [^\/>]*\/>/gi, "");
        } // Remove base uri-related stuff


        var reg = new RegExp("url\\(" + _utils_Utils__WEBPACK_IMPORTED_MODULE_20__["escapeForRgex"](_utils_Utils__WEBPACK_IMPORTED_MODULE_20__["getBaseURI"]()), "g");
        svg = svg.replace(reg, "url(#");
        svg = this.adapter.apply("normalizeSVG", {
          data: svg,
          options: options
        }).data;
        return svg;
      };
      /**
       * Serializes an element and returns its contents.
       *
       * @ignore Exclude from docs
       * @param element  An element to serialize
       * @return A serialized XML
       */


      Export.prototype.serializeElement = function (element) {
        return new XMLSerializer().serializeToString(element);
      };
      /**
       * Returns a PDF containing chart image.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       * @async
       * @todo Account for header when calculating vertical fit
       */


      Export.prototype.getPDF = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var image, pdfmake, defaultMargins, doc, title, _a, _b, _c;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
            switch (_d.label) {
              case 0:
                return [4
                /*yield*/
                , this.getImage(options.imageFormat || "png", options)];

              case 1:
                image = _d.sent();
                return [4
                /*yield*/
                , this.pdfmake];

              case 2:
                pdfmake = _d.sent();
                defaultMargins = [30, 30, 30, 30];
                doc = {
                  pageSize: options.pageSize || "A4",
                  pageOrientation: options.pageOrientation || "portrait",
                  pageMargins: options.pageMargins || defaultMargins,
                  //header: <any>[],
                  content: []
                };
                title = this.adapter.apply("title", {
                  title: this.title,
                  options: options
                }).title;

                if (title) {
                  doc.content.push({
                    text: title,
                    fontSize: options.fontSize,
                    bold: true,
                    margin: [0, 0, 0, 15]
                  });
                } // Add page URL?


                if (options.addURL) {
                  doc.content.push({
                    text: this.language.translate("Saved from") + ": " + document.location.href,
                    fontSize: options.fontSize,
                    margin: [0, 0, 0, 15]
                  });
                } // Add image


                if (type != "pdfdata") {
                  doc.content.push({
                    image: image,
                    fit: this.getPageSizeFit(doc.pageSize, doc.pageMargins)
                  });
                }

                if (!(type == "pdfdata" || options.addData)) return [3
                /*break*/
                , 4];
                _b = (_a = doc.content).push;
                _c = {};
                return [4
                /*yield*/
                , this.getPDFData("pdf", options)];

              case 3:
                _b.apply(_a, [(_c.table = _d.sent(), _c)]);

                _d.label = 4;

              case 4:
                // Apply adapters
                doc = this.adapter.apply("pdfmakeDocument", {
                  doc: doc,
                  options: options
                }).doc;
                return [4
                /*yield*/
                , new Promise(function (success, error) {
                  pdfmake.createPdf(doc).getDataUrl(function (uri) {
                    success(uri);
                  });
                })];

              case 5:
                // Create PDF
                return [2
                /*return*/
                , _d.sent()];
            }
          });
        });
      };
      /**
       * Returns chart's data formatted suitable for PDF export (pdfmake).
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @since 4.7.0
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       * @async
       */


      Export.prototype.getPDFData = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var content, dataFields, data, dataFieldsOrder_1, len, i;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            content = {
              "body": []
            };
            dataFields = this.adapter.apply("formatDataFields", {
              dataFields: this.dataFields,
              format: "pdf"
            }).dataFields;
            data = this.data; // Vertical or horizontal (default) layout

            if (options.pivot) {
              dataFieldsOrder_1 = this.adapter.apply("dataFieldsOrder", {
                dataFieldsOrder: this.dataFieldsOrder,
                format: "pdfdata"
              }).dataFieldsOrder;

              _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, val) {
                var dataRow = [];

                if (options.addColumnNames) {
                  dataRow.push(val);
                }

                for (var len = data.length, i = 0; i < len; i++) {
                  var dataValue = data[i][key];
                  dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));
                }

                content.body.push(_this.getPDFDataRow(dataRow, options, undefined, true));
              }, function (a, b) {
                //console.log(a, b)
                var ai = dataFieldsOrder_1.indexOf(a);
                var bi = dataFieldsOrder_1.indexOf(b);

                if (ai > bi) {
                  return 1;
                } else if (ai < bi) {
                  return -1;
                }

                return 0;
              });
            } else {
              // Add column names?
              if (options.addColumnNames) {
                content.body.push(this.getPDFDataRow(dataFields, options, undefined, true));
                content.headerRows = 1;
              }

              for (len = data.length, i = 0; i < len; i++) {
                content.body.push(this.getPDFDataRow(data[i], options, dataFields));
              }
            }

            return [2
            /*return*/
            , this.adapter.apply("pdfmakeTable", {
              table: content,
              options: options
            }).table];
          });
        });
      };
      /**
       * Formats a row of data for use in PDF data table (pdfmake).
       *
       * @ignore Exclude from docs
       * @since 4.7.0
       * @param  row         An object holding data for the row
       * @param  options     Options
       * @param  dataFields  Data fields
       * @param  asIs        Do not try to convert to dates
       * @return Formated Data line
       */


      Export.prototype.getPDFDataRow = function (row, options, dataFields, asIs) {
        var _this = this;

        if (asIs === void 0) {
          asIs = false;
        } // Init


        var items = []; // Data fields

        if (!dataFields) {
          dataFields = row;
        } // Data fields order


        var dataFieldsOrder = this.adapter.apply("dataFieldsOrder", {
          dataFieldsOrder: this.dataFieldsOrder,
          format: "pdfdata"
        }).dataFieldsOrder; // Process each row item

        _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, name) {
          // Get value
          var value = _this.convertEmptyValue(key, row[key], options); // Convert dates


          var item = asIs ? value : _this.convertToSpecialFormat(key, value, options);
          item = "" + item; // Add to item

          items.push(item);
        }, function (a, b) {
          //console.log(a, b)
          var ai = dataFieldsOrder.indexOf(a);
          var bi = dataFieldsOrder.indexOf(b);

          if (ai > bi) {
            return 1;
          } else if (ai < bi) {
            return -1;
          }

          return 0;
        });

        return items;
      };
      /**
       * Returns fit dimensions for available page sizes.
       *
       * @ignore Exclude from docs
       * @param pageSize Page size
       * @return `[width, height]` in pixels
       */


      Export.prototype.getPageSizeFit = function (pageSize, margins) {
        // Check margins
        var newMargins = [0, 0, 0, 0];

        if (typeof margins == "number") {
          newMargins = [margins, margins, margins, margins];
        } else if (margins.length == 2) {
          newMargins = [margins[0], margins[1], margins[0], margins[1]];
        } else if (margins.length == 4) {
          newMargins = margins;
        } // Define available page sizes


        var sizes = {
          "4A0": [4767.87, 6740.79],
          "2A0": [3370.39, 4767.87],
          A0: [2383.94, 3370.39],
          A1: [1683.78, 2383.94],
          A2: [1190.55, 1683.78],
          A3: [841.89, 1190.55],
          A4: [595.28, 841.89],
          A5: [419.53, 595.28],
          A6: [297.64, 419.53],
          A7: [209.76, 297.64],
          A8: [147.40, 209.76],
          A9: [104.88, 147.40],
          A10: [73.70, 104.88],
          B0: [2834.65, 4008.19],
          B1: [2004.09, 2834.65],
          B2: [1417.32, 2004.09],
          B3: [1000.63, 1417.32],
          B4: [708.66, 1000.63],
          B5: [498.90, 708.66],
          B6: [354.33, 498.90],
          B7: [249.45, 354.33],
          B8: [175.75, 249.45],
          B9: [124.72, 175.75],
          B10: [87.87, 124.72],
          C0: [2599.37, 3676.54],
          C1: [1836.85, 2599.37],
          C2: [1298.27, 1836.85],
          C3: [918.43, 1298.27],
          C4: [649.13, 918.43],
          C5: [459.21, 649.13],
          C6: [323.15, 459.21],
          C7: [229.61, 323.15],
          C8: [161.57, 229.61],
          C9: [113.39, 161.57],
          C10: [79.37, 113.39],
          RA0: [2437.80, 3458.27],
          RA1: [1729.13, 2437.80],
          RA2: [1218.90, 1729.13],
          RA3: [864.57, 1218.90],
          RA4: [609.45, 864.57],
          SRA0: [2551.18, 3628.35],
          SRA1: [1814.17, 2551.18],
          SRA2: [1275.59, 1814.17],
          SRA3: [907.09, 1275.59],
          SRA4: [637.80, 907.09],
          EXECUTIVE: [521.86, 756.00],
          FOLIO: [612.00, 936.00],
          LEGAL: [612.00, 1008.00],
          LETTER: [612.00, 792.00],
          TABLOID: [792.00, 1224.00]
        }; // Calculate size

        var fitSize = sizes[pageSize];
        fitSize[0] -= newMargins[0] + newMargins[2];
        fitSize[1] -= newMargins[1] + newMargins[3];
        return fitSize;
      };
      /**
       * Returns an Excel file of chart's data.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       * @async
       * @todo Handle dates
       * @todo Support for multi-sheet
       */


      Export.prototype.getExcel = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var XLSX, wbOptions, sheetName, wb, data, dataFields, dataFieldsOrder_2, len, i, uri;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4
                /*yield*/
                , this.xlsx];

              case 1:
                XLSX = _a.sent();
                wbOptions = this.adapter.apply("xlsxWorkbookOptions", {
                  options: {
                    bookType: "xlsx",
                    bookSST: false,
                    type: "base64"
                  }
                }).options;
                sheetName = this.normalizeExcelSheetName(this.adapter.apply("xlsxSheetName", {
                  name: this.title || this.language.translate("Data")
                }).name);
                wb = {
                  SheetNames: [sheetName],
                  Sheets: {}
                };
                data = [];
                dataFields = this.adapter.apply("formatDataFields", {
                  dataFields: this.dataFields,
                  format: "xslx"
                }).dataFields; // Vertical or horizontal (default) layout

                if (options.pivot) {
                  dataFieldsOrder_2 = this.adapter.apply("dataFieldsOrder", {
                    dataFieldsOrder: this.dataFieldsOrder,
                    format: "xlsx"
                  }).dataFieldsOrder;

                  _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, val) {
                    var dataRow = [];

                    if (options.addColumnNames) {
                      dataRow.push(val);
                    }

                    for (var len = _this.data.length, i = 0; i < len; i++) {
                      var dataValue = _this.data[i][key];
                      dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));
                    }

                    data.push(_this.getExcelRow(dataRow, options, undefined, true));
                  }, function (a, b) {
                    //console.log(a, b)
                    var ai = dataFieldsOrder_2.indexOf(a);
                    var bi = dataFieldsOrder_2.indexOf(b);

                    if (ai > bi) {
                      return 1;
                    } else if (ai < bi) {
                      return -1;
                    }

                    return 0;
                  });
                } else {
                  // Add column names?
                  if (options.addColumnNames) {
                    data.push(this.getExcelRow(dataFields, options, undefined, true));
                  } // Add lines


                  for (len = this.data.length, i = 0; i < len; i++) {
                    data.push(this.getExcelRow(this.data[i], options, dataFields));
                  }
                } // Create sheet and add data


                wb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(data);
                uri = this.adapter.apply("getExcel", {
                  data: "data:" + this.getContentType(type) + ";base64," + XLSX.write(wb, wbOptions),
                  options: options
                }).data;
                return [2
                /*return*/
                , uri];
            }
          });
        });
      };
      /**
       * This is needed to work around Excel limitations.
       *
       * @param name  Source name
       * @return Normalized name
       */


      Export.prototype.normalizeExcelSheetName = function (name) {
        name = name.replace(/([:\\\/?*\[\]]+)/g, " ");
        return _utils_Utils__WEBPACK_IMPORTED_MODULE_20__["truncateWithEllipsis"](name, 31, "...", true);
      };
      /**
       * Rertuns an array of values to be used as Excel row.
       *
       * @ignore Exclude from docs
       * @param  row         Row data
       * @param  options     Options
       * @param  dataFields  Data fields
       * @param  asIs        Do not try to convert to dates
       * @return Array of values
       */


      Export.prototype.getExcelRow = function (row, options, dataFields, asIs) {
        var _this = this;

        if (asIs === void 0) {
          asIs = false;
        } // Init


        var items = []; // Data fields

        if (!dataFields) {
          dataFields = row;
        } // Data fields order


        var dataFieldsOrder = this.adapter.apply("dataFieldsOrder", {
          dataFieldsOrder: this.dataFieldsOrder,
          format: "xlsx"
        }).dataFieldsOrder; // Process each row item

        _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, name) {
          // Get value
          var value = _this.convertEmptyValue(key, row[key], options); // Convert dates


          var item = asIs ? value : _this.convertToSpecialFormat(key, value, options, true);
          items.push(item);
        }, function (a, b) {
          //console.log(a, b)
          var ai = dataFieldsOrder.indexOf(a);
          var bi = dataFieldsOrder.indexOf(b);

          if (ai > bi) {
            return 1;
          } else if (ai < bi) {
            return -1;
          }

          return 0;
        });

        return items;
      };
      /**
       * Returns chart's data formatted as CSV.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       * @async
       */


      Export.prototype.getCSV = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var csv, dataFields, br, data, dataFieldsOrder_3, len, i, row, charset, uri;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            csv = "";
            dataFields = this.adapter.apply("formatDataFields", {
              dataFields: this.dataFields,
              format: "csv"
            }).dataFields;
            br = "";
            data = this.data; // Vertical or horizontal (default) layout

            if (options.pivot) {
              dataFieldsOrder_3 = this.adapter.apply("dataFieldsOrder", {
                dataFieldsOrder: this.dataFieldsOrder,
                format: "csv"
              }).dataFieldsOrder;

              _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, val) {
                var dataRow = [];

                if (options.addColumnNames) {
                  dataRow.push(val);
                }

                for (var len = data.length, i = 0; i < len; i++) {
                  var dataValue = data[i][key];
                  dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));
                }

                csv += br + _this.getCSVRow(dataRow, options, undefined, true);
                br = "\n";
              }, function (a, b) {
                var ai = dataFieldsOrder_3.indexOf(a);
                var bi = dataFieldsOrder_3.indexOf(b);

                if (ai > bi) {
                  return -1;
                } else if (ai < bi) {
                  return 1;
                }

                return 0;
              });
            } else {
              for (len = data.length, i = 0; i < len; i++) {
                row = this.getCSVRow(data[i], options, dataFields);

                if (options.reverse) {
                  csv = row + br + csv;
                } else {
                  csv += br + row;
                }

                br = "\n";
              } // Add column names?


              if (options.addColumnNames) {
                csv = this.getCSVRow(dataFields, options, undefined, true) + br + csv;
              }
            }

            charset = this.adapter.apply("charset", {
              charset: "charset=utf-8",
              type: type,
              options: options
            }).charset;
            uri = this.adapter.apply("getCSV", {
              data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(csv),
              options: options
            }).data;
            return [2
            /*return*/
            , uri];
          });
        });
      };
      /**
       * Formats a row of CSV data.
       *
       * @ignore Exclude from docs
       * @param  row         An object holding data for the row
       * @param  options     Options
       * @param  dataFields  Data fields
       * @param  asIs        Do not try to convert to dates
       * @return Formated CSV line
       */


      Export.prototype.getCSVRow = function (row, options, dataFields, asIs) {
        var _this = this;

        if (asIs === void 0) {
          asIs = false;
        } // Init


        var separator = options.separator || ",";
        var items = []; // Data fields

        if (!dataFields) {
          dataFields = row;
        } // Data fields order


        var dataFieldsOrder = this.adapter.apply("dataFieldsOrder", {
          dataFieldsOrder: this.dataFieldsOrder,
          format: "csv"
        }).dataFieldsOrder; // Process each row item

        _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, name) {
          // Get value
          var value = _this.convertEmptyValue(key, row[key], options); // Check if we need to skip
          // This is no longer required because we are iterating via dataFields anyway

          /*if ($type.hasValue(this.dataFields) && !$type.hasValue(this.dataFields[key])) {
              return;
          }*/
          // Convert dates


          var item = asIs ? value : _this.convertToSpecialFormat(key, value, options); // Cast and escape doublequotes

          item = "" + item;
          item = item.replace(/"/g, '""'); // Enclose into double quotes

          if (options.forceQuotes || item.search(new RegExp("\"|\n|" + separator, "g")) >= 0) {
            item = "\"" + item + "\"";
          } // Add to item


          items.push(item);
        }, function (a, b) {
          //console.log(a, b)
          var ai = dataFieldsOrder.indexOf(a);
          var bi = dataFieldsOrder.indexOf(b);

          if (ai > bi) {
            return 1;
          } else if (ai < bi) {
            return -1;
          }

          return 0;
        });

        return items.join(separator);
      };
      /**
       * Returns chart's data formatted as HTML table.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @since 4.7.0
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       * @async
       */


      Export.prototype.getHTML = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var html, dataFields, data, dataFieldsOrder_4, len, i, charset, uri;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            html = "<table>";

            if (options.tableClass) {
              html = "<table class=\"" + options.tableClass + "\">";
            }

            dataFields = this.adapter.apply("formatDataFields", {
              dataFields: this.dataFields,
              format: "html"
            }).dataFields;
            data = this.data; // Vertical or horizontal (default) layout

            if (options.pivot) {
              dataFieldsOrder_4 = this.adapter.apply("dataFieldsOrder", {
                dataFieldsOrder: this.dataFieldsOrder,
                format: "html"
              }).dataFieldsOrder;

              _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, val) {
                var dataRow = [];

                if (options.addColumnNames) {
                  dataRow.push(val);
                }

                for (var len = data.length, i = 0; i < len; i++) {
                  var dataValue = data[i][key];
                  dataRow.push(_this.convertToSpecialFormat(key, dataValue, options, true));
                }

                html += "\n" + _this.getHTMLRow(dataRow, options, undefined, true);
              }, function (a, b) {
                var ai = dataFieldsOrder_4.indexOf(a);
                var bi = dataFieldsOrder_4.indexOf(b);

                if (ai > bi) {
                  return -1;
                } else if (ai < bi) {
                  return 1;
                }

                return 0;
              });
            } else {
              // Add column names?
              if (options.addColumnNames) {
                html += "\n" + this.getHTMLRow(dataFields, options, undefined, true, true);
              }

              for (len = data.length, i = 0; i < len; i++) {
                html += "\n" + this.getHTMLRow(data[i], options, dataFields);
              }
            }

            html += "</table>";
            charset = this.adapter.apply("charset", {
              charset: "charset=utf-8",
              type: type,
              options: options
            }).charset;
            uri = this.adapter.apply("getHTML", {
              data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(html),
              options: options
            }).data;
            return [2
            /*return*/
            , uri];
          });
        });
      };
      /**
       * Formats a row of HTML data.
       *
       * @since 4.7.0
       * @ignore Exclude from docs
       * @param  row         An object holding data for the row
       * @param  options     Options
       * @param  dataFields  Data fields
       * @param  asIs        Do not try to convert to dates
       * @return Formated HTML row
       */


      Export.prototype.getHTMLRow = function (row, options, dataFields, asIs, headerRow) {
        var _this = this;

        if (asIs === void 0) {
          asIs = false;
        }

        if (headerRow === void 0) {
          headerRow = false;
        } // Init output


        var html = "\t<tr>";

        if (options.rowClass) {
          html = "\t<tr class=\"" + options.rowClass + "\">";
        } // Data fields


        if (!dataFields) {
          dataFields = row;
        } // Data fields order


        var dataFieldsOrder = this.adapter.apply("dataFieldsOrder", {
          dataFieldsOrder: this.dataFieldsOrder,
          format: "html"
        }).dataFieldsOrder; // th or dh?

        var tag = headerRow ? "th" : "td"; // Process each row item

        var first = true;

        _utils_Object__WEBPACK_IMPORTED_MODULE_17__["eachOrdered"](dataFields, function (key, name) {
          // Get value
          var value = _this.convertEmptyValue(key, row[key], options); // Convert dates


          var item = asIs ? value : _this.convertToSpecialFormat(key, value, options); // Escape HTML entities

          item = "" + item;
          item = item.replace(/[\u00A0-\u9999<>\&]/gim, function (i) {
            return "&#" + i.charCodeAt(0) + ";";
          }); // Which tag to use

          var useTag = tag;

          if (options.pivot && first) {
            useTag = "th";
          } // Add cell


          if (options.cellClass) {
            html += "\n\t\t<" + useTag + " class=\"" + options.cellClass + "\">" + item + "</" + useTag + ">";
          } else {
            html += "\n\t\t<" + useTag + ">" + item + "</" + useTag + ">";
          }

          first = false;
        }, function (a, b) {
          var ai = dataFieldsOrder.indexOf(a);
          var bi = dataFieldsOrder.indexOf(b);

          if (ai > bi) {
            return 1;
          } else if (ai < bi) {
            return -1;
          }

          return 0;
        });

        html += "\n\t</tr>";
        return html;
      };
      /**
       * Returns chart's data in JSON format.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param type     Type of the export
       * @param options  Options
       * @return Promise
       * @async
       */


      Export.prototype.getJSON = function (type, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var data, dataFields, sourceData, _loop_1, len, i, json, charset, uri;

          var _this = this;

          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            dataFields = this.adapter.apply("formatDataFields", {
              dataFields: this.dataFields,
              format: "csv"
            }).dataFields;

            if (!this._dynamicDataFields) {
              data = [];
              sourceData = this.data;

              _loop_1 = function _loop_1(len, i) {
                var value = sourceData[i];

                if (typeof value == "object") {
                  var newValue_1 = {};

                  _utils_Object__WEBPACK_IMPORTED_MODULE_17__["each"](value, function (field, item) {
                    if (_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](dataFields[field])) {
                      newValue_1[dataFields[field]] = _this.convertToSpecialFormat(field, item, options);
                    }
                  });

                  data.push(newValue_1);
                }
              };

              for (len = sourceData.length, i = 0; i < len; i++) {
                _loop_1(len, i);
              }
            } else {
              data = this.data;
            }

            json = JSON.stringify(data, function (key, value) {
              if (typeof value == "object") {
                _utils_Object__WEBPACK_IMPORTED_MODULE_17__["each"](value, function (field, item) {
                  value[field] = _this.convertToSpecialFormat(field, item, options);
                });
              }

              return value;
            }, options.indent);
            charset = this.adapter.apply("charset", {
              charset: "charset=utf-8",
              type: type,
              options: options
            }).charset;
            uri = this.adapter.apply("getJSON", {
              data: "data:" + this.getContentType(type) + ";" + charset + "," + encodeURIComponent(json),
              options: options
            }).data;
            return [2
            /*return*/
            , uri];
          });
        });
      };
      /**
       * Converts the value to proper date format.
       *
       * @ignore Exclude from docs
       * @param  field         Field name
       * @param  value         Value
       * @param  options       Options
       * @param  keepOriginal  Will ignore formatting and will keep value as it is in data
       * @return Formatted date value or unmodified value
       */


      Export.prototype.convertToSpecialFormat = function (field, value, options, keepOriginal) {
        // Is this a timestamp or duration?
        if (typeof value == "number") {
          if (this.isDateField(field)) {
            value = new Date(value);
          } else if (this.isDurationField(field)) {
            return this.durationFormatter.format(value, this.durationFormat);
          } else if (this.isNumberField(field) && this.numberFormat) {
            return this.numberFormatter.format(value, this.numberFormat);
          }
        }

        if (value instanceof Date) {
          if (options.useTimestamps) {
            value = value.getTime();
          } else if (options.useLocale) {
            if (!keepOriginal) {
              value = value.toLocaleString();
            }
          } else {
            value = this.dateFormatter.format(value, this.dateFormat);
          }
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_19__["isString"](value) && this.isDateField(field) && this.dateFormat) {
          value = this.dateFormatter.format(this.dateFormatter.parse(value), this.dateFormat);
        }

        return value;
      };
      /**
       * Converts empty value based on `emptyAs` option.
       *
       * @ignore Exclude from docs
       */


      Export.prototype.convertEmptyValue = function (field, value, options) {
        return _utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](value) ? value : options.emptyAs;
      };
      /**
       * Triggers download of the file.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param uri       Data URI with file content
       * @param fileName  File name
       * @return Promise
       * @async
       */


      Export.prototype.download = function (uri, fileName) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var parts, contentType, decoded, blob_1, chars, i, charCode, blob, link_1, parts, contentType, decoded, blob_2, url_2, chars, i, charCode, blob, url_3, link, parts, contentType, iframe, idoc;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            if (this.msBlobDownloadSupport()) {
              parts = uri.split(";");
              contentType = parts.shift().replace(/data:/, "");
              uri = decodeURIComponent(parts.join(";").replace(/^[^,]*,/, "")); // Check if we need to Base64-decode

              if (["image/svg+xml", "application/json", "text/csv"].indexOf(contentType) == -1) {
                try {
                  decoded = atob(uri);
                  uri = decoded;
                } catch (e) {
                  // Error occurred, meaning string was not Base64-encoded. Do nothing.
                  return [2
                  /*return*/
                  , false];
                }
              } else {
                blob_1 = new Blob([uri], {
                  type: contentType
                });
                window.navigator.msSaveBlob(blob_1, fileName);
                return [2
                /*return*/
                , true];
              }

              chars = new Array(uri.length);

              for (i = 0; i < uri.length; ++i) {
                charCode = uri.charCodeAt(i);
                chars[i] = charCode;
              }

              blob = new Blob([new Uint8Array(chars)], {
                type: contentType
              });
              window.navigator.msSaveBlob(blob, fileName);
            } else if (this.blobDownloadSupport()) {
              link_1 = document.createElement("a");
              link_1.download = fileName;
              document.body.appendChild(link_1);
              parts = uri.split(";");
              contentType = parts.shift().replace(/data:/, "");
              uri = decodeURIComponent(parts.join(";").replace(/^[^,]*,/, ""));

              if (["image/svg+xml", "application/json", "text/csv", "text/html"].indexOf(contentType) == -1) {
                try {
                  decoded = atob(uri);
                  uri = decoded;
                } catch (e) {
                  // Error occurred, meaning string was not Base64-encoded. Do nothing.
                  return [2
                  /*return*/
                  , false];
                }
              } else {
                blob_2 = new Blob([uri], {
                  type: contentType
                });
                url_2 = window.URL.createObjectURL(blob_2);
                link_1.href = url_2;
                link_1.download = fileName;
                link_1.click();
                setTimeout(function () {
                  document.body.removeChild(link_1);
                  window.URL.revokeObjectURL(url_2);
                }, 100);
                return [2
                /*return*/
                , true];
              }

              chars = new Array(uri.length);

              for (i = 0; i < uri.length; ++i) {
                charCode = uri.charCodeAt(i);
                chars[i] = charCode;
              }

              blob = new Blob([new Uint8Array(chars)], {
                type: contentType
              });
              url_3 = window.URL.createObjectURL(blob);
              link_1.href = url_3;
              link_1.download = fileName;
              document.body.appendChild(link_1);
              link_1.click();
              document.body.removeChild(link_1);
              setTimeout(function () {
                window.URL.revokeObjectURL(url_3);
              }, 100);
            } else if (this.linkDownloadSupport()) {
              link = document.createElement("a");
              link.download = fileName;
              link.href = uri;
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
            } else if (this.legacyIE()) {
              parts = uri.match(/^data:(.*);[ ]*([^,]*),(.*)$/);

              if (parts.length === 4) {
                // Base64-encoded or text-based stuff?
                if (parts[2] == "base64") {
                  // Base64-encoded - probably an image
                  if (parts[1].match(/^image\//)) {
                    // Yep, an image. Let's create a temporary image placeholder,
                    // so that user can use do Save As.
                    this.showModal("<img src=\"" + uri + "\" style=\"float: left; max-width: 50%; max-height: 80%; margin: 0 1em 0.5em 0; border: 1px solid #eee;\" />" + "<p>" + this.language.translate("To save the image, right-click thumbnail on the left and choose \"Save picture as...\"") + "</p>" + "<p style=\"text-align: center;\"><small>" + this.language.translate("(Press ESC to close this message)") + "</small></p>", this.language.translate("Image Export Complete"));
                  }
                } else {
                  contentType = void 0;

                  if (fileName.match(/\.svg$/)) {
                    contentType = "image/svg+xml";
                  } else {
                    contentType = "text/plain";
                    fileName += ".txt";
                  }

                  iframe = document.createElement("iframe");
                  iframe.width = "1px";
                  iframe.height = "1px";
                  iframe.style.display = "none";
                  document.body.appendChild(iframe);
                  idoc = iframe.contentDocument;
                  idoc.open(contentType, "replace"); // TODO test this with various encodings (e.g. UTF)
                  //idoc.charset = parts[2].replace(/charset=/, "");

                  idoc.write(decodeURIComponent(parts[3]));
                  idoc.close();
                  idoc.execCommand("SaveAs", true, fileName); // Destroy the iframe

                  document.body.removeChild(iframe);
                }
              }
            } else {
              /**
               * Something else - perhaps a mobile.
               * Let's just display it in the same page.
               * (hey we don't like it either)
               */
              window.location.href = uri;
            }

            return [2
            /*return*/
            , true];
          });
        });
      };
      /**
       * Returns `true` if browser has any supported methods to trigger download
       * of a binary file.
       *
       * @return Supports downloads?
       */


      Export.prototype.downloadSupport = function () {
        //return !this.legacyIE();
        return this.linkDownloadSupport() || this.msBlobDownloadSupport();
      };
      /**
       * Checks if the browser supports "download" attribute on links.
       *
       * @ignore Exclude from docs
       * @return Browser supports triggering downloads?
       */


      Export.prototype.linkDownloadSupport = function () {
        // Do we have this cached?
        var cache = _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].getCache("linkDownloadSupport");

        if (cache === false || cache === true) {
          return cache;
        }

        var a = document.createElement("a");
        var res = typeof a.download !== "undefined";

        _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].setCache("linkDownloadSupport", res);

        return res;
      };
      /**
       * Checks if the browser supports download via `msBlob`.
       *
       * @ignore Exclude from docs
       * @return Browser supports triggering downloads?
       */


      Export.prototype.blobDownloadSupport = function () {
        return _utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](window.Blob);
      };
      /**
       * Checks if the browser supports download via `msBlob`.
       *
       * @ignore Exclude from docs
       * @return Browser supports triggering downloads?
       */


      Export.prototype.msBlobDownloadSupport = function () {
        return _utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](window.navigator.msSaveOrOpenBlob);
      };
      /**
       * Checks if this is a legacy version of IE.
       *
       * @ignore Exclude from docs
       * @return IE9 or less?
       */


      Export.prototype.legacyIE = function () {
        // Create a temporary <div> with conditional tags in it an an <i> tag.
        // Count <i>s. If there are some, we have IE9 or late on our hands.
        var div = document.createElement("div");
        div.innerHTML = "<!--[if lt IE 10]><i></i><![endif]-->";
        return div.getElementsByTagName("i").length == 1;
      };
      /**
       * Initiates print of the chart.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @param data     Data URI for the image
       * @param options  Options
       * @param title    Optional title to use (uses window's title by default)
       * @return Promise
       * @async
       */


      Export.prototype.print = function (data, options, title) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            if (options.printMethod == "css") {
              return [2
              /*return*/
              , this.printViaCSS(data, options, title)];
            } else {
              return [2
              /*return*/
              , this.printViaIframe(data, options, title)];
            }

            return [2
            /*return*/
            ];
          });
        });
      };

      Export.prototype.printViaCSS = function (data, options, title) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var scroll, rule, originalTitle, img, isIOS;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            scroll = document.documentElement.scrollTop || document.body.scrollTop;
            rule = new _utils_DOM__WEBPACK_IMPORTED_MODULE_15__["StyleRule"]("body > *", {
              "display": "none",
              "position": "fixed",
              "visibility": "hidden",
              "opacity": "0",
              "clipPath": "polygon(0px 0px,0px 0px,0px 0px,0px 0px);"
            });

            if (title && document && document.title) {
              originalTitle = document.title;
              document.title = title;
            }

            img = new Image();
            img.src = data;
            img.style.maxWidth = "100%";
            img.style.display = "block";
            img.style.position = "relative";
            img.style.visibility = "visible";
            img.style.opacity = "1";
            img.style.clipPath = "none";
            document.body.appendChild(img); // Print

            this.setTimeout(function () {
              window.print();
            }, 50);
            isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

            if (isIOS && options.delay < 1000) {
              options.delay = 1000;
            } else if (options.delay < 100) {
              options.delay = 100;
            } // Delay function that resets back the document the way ot was before


            this.setTimeout(function () {
              // Remove image
              document.body.removeChild(img); // Reset back all elements

              /*for (let len = items.length, i = 0; i < len; i++) {
                  let item = <HTMLElement>items[i];
                  if ($dom.isElement(item)) {
                      item.style.display = states[i];
                  }
              }*/

              rule.dispose(); // Restore title

              if (originalTitle) {
                document.title = document.title;
              } // Scroll back the document the way it was before


              document.documentElement.scrollTop = document.body.scrollTop = scroll;
            }, options.delay || 500);
            return [2
            /*return*/
            , true];
          });
        });
      };

      Export.prototype.printViaIframe = function (data, options, title) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var iframe, img, isIOS;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            iframe = document.createElement("iframe");
            iframe.style.visibility = "hidden";
            document.body.appendChild(iframe); // This is needed for FireFox

            iframe.contentWindow.document.open();
            iframe.contentWindow.document.close();
            img = new Image();
            img.src = data;
            img.style.maxWidth = "100%";

            if (title) {
              iframe.contentWindow.document.title = title;
            }

            iframe.contentWindow.document.body.appendChild(img);

            iframe.load = function () {
              iframe.contentWindow.document.body.appendChild(img);
            }; // Print


            this.setTimeout(function () {
              try {
                if (!iframe.contentWindow.document.execCommand("print", false, null)) {
                  iframe.contentWindow.print();
                }
              } catch (e) {
                iframe.contentWindow.print();
              }
            }, options.delay || 50);
            isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

            if (isIOS && options.delay < 1000) {
              options.delay = 1000;
            } else if (options.delay < 100) {
              options.delay = 100;
            } // Delay function that resets back the document the way ot was before


            this.setTimeout(function () {
              // Remove image
              document.body.removeChild(iframe);
            }, options.delay + 50 || 100);
            return [2
            /*return*/
            , true];
          });
        });
      };
      /**
       * Finds a background color for the element. If element is transparent it goes
       * up the DOM hierarchy to find a parent element that does.
       *
       * @ignore Exclude from docs
       * @param element Element
       * @return Color code
       */


      Export.prototype.findBackgroundColor = function (element) {
        // Check if element has styles set
        var opacity = 1,
            currentColor = Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_15__["getComputedStyle"])(element, "background-color"); // Check opacity

        if (currentColor.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || currentColor == "transparent") {
          opacity = 0;
        }

        if (opacity == 0) {
          var parent_2 = element.parentElement; // || <Element>element.parentNode;
          // Completely transparent. Look for a parent

          if (parent_2) {
            return this.findBackgroundColor(parent_2);
          } else {
            return Object(_utils_Color__WEBPACK_IMPORTED_MODULE_12__["color"])("#fff");
          }
        } else {
          return Object(_utils_Color__WEBPACK_IMPORTED_MODULE_12__["color"])(currentColor, opacity);
        }
      };

      Object.defineProperty(Export.prototype, "container", {
        /**
         * @return Reference
         */
        get: function get() {
          return this.adapter.apply("container", {
            container: this._container
          }).container;
        },

        /**
         * A reference to a container to be used to place [[ExportMenu]] in.
         *
         * @param value Reference
         */
        set: function set(value) {
          this._container = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "sprite", {
        /**
         * @return Sprite
         */
        get: function get() {
          return this.adapter.apply("sprite", {
            sprite: this._sprite
          }).sprite;
        },

        /**
         * A reference to [[Sprite]] to export. Can be any Sprite, including some
         * internal elements.
         *
         * @param value Sprite
         */
        set: function set(value) {
          this._sprite = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "extraSprites", {
        /**
         * @return Sprite
         */
        get: function get() {
          return this.adapter.apply("extraSprites", {
            extraSprites: this._extraSprites
          }).extraSprites;
        },

        /**
         * An array of extra [[Sprite]] elements to include in export.
         *
         * It can be used to export any external elements, or even other charts.
         *
         * E.g.:
         *
         * ```TypeScript
         * chart.exporting.extraSprites.push(chart2);
         * ```
         * ```JavaScript
         * chart.exporting.extraSprites.push(chart2);
         * ```
         *
         * @since 4.2.0
         * @param value Sprite
         */
        set: function set(value) {
          this._extraSprites = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "validateSprites", {
        /**
         * @return Sprite
         */
        get: function get() {
          return this.adapter.apply("validateSprites", {
            validateSprites: this._validateSprites
          }).validateSprites;
        },

        /**
         * An array of [[Sprite]] elements that need to be valid before export
         * commences.
         *
         * If any of those elements is not completely ready when export is triggered,
         * the export will wait until they are (their `validated` event triggers)
         * before going through with the export opertaion.
         *
         * This is useful if you need to modify chart appearance for the export.
         *
         * E.g.:
         *
         * ```TypeScript
         * // Add watermark
         * let watermark = chart.createChild(am4core.Label);
         * watermark.text = "Copyright (C) 2019";
         * watermark.disabled = true;
         *
         * // Add watermark to validated sprites
         * chart.exporting.validateSprites.push(watermark);
         *
         * // Enable watermark on export
         * chart.exporting.events.on("exportstarted", function(ev) {
         *   watermark.disabled = false;
         * });
         *
         * // Disable watermark when export finishes
         * chart.exporting.events.on("exportfinished", function(ev) {
         *   watermark.disabled = true;
         * });
         * ```
         * ```JavaScript
         * // Add watermark
         * var watermark = chart.createChild(am4core.Label);
         * watermark.text = "Copyright (C) 2019";
         * watermark.disabled = true;
         *
         * // Add watermark to validated sprites
         * chart.exporting.validateSprites.push(watermark);
         *
         * // Enable watermark on export
         * chart.exporting.events.on("exportstarted", function(ev) {
         *   watermark.disabled = false;
         * });
         *
         * // Disable watermark when export finishes
         * chart.exporting.events.on("exportfinished", function(ev) {
         *   watermark.disabled = true;
         * });
         * ```
         *
         * @since 4.6.8
         * @param value Sprite
         */
        set: function set(value) {
          this._validateSprites = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "data", {
        /**
         * @return Data
         */
        get: function get() {
          return this.adapter.apply("data", {
            data: this._data
          }).data;
        },

        /**
         * Data to export.
         *
         * @param value Data
         */
        set: function set(value) {
          this._data = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "dataFields", {
        /**
         * @return Field names `{ field: fieldName }`
         */
        get: function get() {
          if (!this._dataFields) {
            this.generateDataFields();
          }

          return this.adapter.apply("dataFields", {
            dataFields: this._dataFields
          }).dataFields;
        },

        /**
         * Data fields in `{ field: fieldName }` format. Those are used for
         * exporting in data formats to name the columns.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/#Changing_order_and_names_of_columns} for examples and details
         * @param value Field names
         */
        set: function set(value) {
          this._dataFields = value;
          this._dynamicDataFields = false;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Called after target chart's data updates.
       *
       * @ignore
       */

      Export.prototype.handleDataUpdated = function () {
        if (this._dynamicDataFields) {
          this._dataFields = undefined;
        }
      };

      Object.defineProperty(Export.prototype, "dateFormatter", {
        /**
         * @return A DateFormatter instance
         */
        get: function get() {
          if (!this._dateFormatter) {
            this._dateFormatter = new _formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_7__["DateFormatter"]();
            this._dateFormatter.language = this.language;
          }

          return this.adapter.apply("dateFormatter", {
            dateFormatter: this._dateFormatter
          }).dateFormatter;
        },

        /**
         * A [[DateFormatter]] to use when formatting dates when exporting data.
         *
         * @param value DateFormatter instance
         */
        set: function set(value) {
          this._dateFormatter = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "dateFormat", {
        /**
         * @return Date format
         */
        get: function get() {
          return this.adapter.apply("dateFormat", {
            dateFormat: this._dateFormat
          }).dateFormat;
        },

        /**
         * A date format to use for exporting dates. Will use [[DateFormatter]]
         * format if not set.
         *
         * @param value Date format
         */
        set: function set(value) {
          this._dateFormat = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "dateFields", {
        /**
         * @return Date field list
         */
        get: function get() {
          if (!this._dateFields) {
            this._dateFields = new _utils_List__WEBPACK_IMPORTED_MODULE_5__["List"]();
          }

          return this.adapter.apply("dateFields", {
            dateFields: this._dateFields
          }).dateFields;
        },

        /**
         * A list of fields that hold date values.
         *
         * @param value Date field list
         */
        set: function set(value) {
          this._dateFields = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "numberFormatter", {
        /**
         * @return A NumberFormatter instance
         */
        get: function get() {
          if (!this._numberFormatter) {
            this._numberFormatter = new _formatters_NumberFormatter__WEBPACK_IMPORTED_MODULE_9__["NumberFormatter"]();
            this._numberFormatter.language = this.language;
          }

          return this.adapter.apply("numberFormatter", {
            numberFormatter: this._numberFormatter
          }).numberFormatter;
        },

        /**
         * A [[NumberFormatter]] to use when formatting dates when exporting data.
         *
         * @since 4.5.15
         * @param value NumberFormatter instance
         */
        set: function set(value) {
          this._numberFormatter = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "numberFormat", {
        /**
         * @return Number format
         */
        get: function get() {
          return this.adapter.apply("numberFormat", {
            numberFormat: this._numberFormat
          }).numberFormat;
        },

        /**
         * A number format to use for exporting dates. Will use [[NumberFormatter]]
         * format if not set.
         *
         * @since 4.5.15
         * @param value Number format
         */
        set: function set(value) {
          this._numberFormat = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "numberFields", {
        /**
         * @return Number field list
         */
        get: function get() {
          if (!this._numberFields) {
            this._numberFields = new _utils_List__WEBPACK_IMPORTED_MODULE_5__["List"]();
          }

          return this.adapter.apply("numberFields", {
            numberFields: this._numberFields
          }).numberFields;
        },

        /**
         * A list of fields that hold number values.
         *
         * @since 4.5.15
         * @param value Number field list
         */
        set: function set(value) {
          this._numberFields = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "durationFormatter", {
        /**
         * @return A DurationFormatter instance
         */
        get: function get() {
          if (!this._durationFormatter) {
            this._durationFormatter = new _formatters_DurationFormatter__WEBPACK_IMPORTED_MODULE_8__["DurationFormatter"]();
            this._durationFormatter.language = this.language;
          }

          return this.adapter.apply("durationFormatter", {
            durationFormatter: this._durationFormatter
          }).durationFormatter;
        },

        /**
         * A [[DurationFormatter]] to use when formatting duration values when
         * exporting data.
         *
         * @param value  DurationFormatter instance
         */
        set: function set(value) {
          this._durationFormatter = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "durationFormat", {
        /**
         * @return Duration format
         */
        get: function get() {
          return this.adapter.apply("durationFormat", {
            durationFormat: this._durationFormat
          }).durationFormat;
        },

        /**
         * A format to use when formatting values from `durationFields`.
         * Will use [[DurationFormatter]] format if not set.
         *
         * @param value Duration format
         */
        set: function set(value) {
          this._durationFormat = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "durationFields", {
        /**
         * @return Duration field list
         */
        get: function get() {
          if (!this._durationFields) {
            this._durationFields = new _utils_List__WEBPACK_IMPORTED_MODULE_5__["List"]();
          }

          return this.adapter.apply("durationFields", {
            durationFields: this._durationFields
          }).durationFields;
        },

        /**
         * A list of fields that hold duration values.
         *
         * @param value Duration field list
         */
        set: function set(value) {
          this._durationFields = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Generates data fields out of the first row of data.
       *
       * @ignore Exclude from docs
       */

      Export.prototype.generateDataFields = function () {
        var _this = this;

        this._dataFields = {};

        if (this.data.length) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_21__["each"](this.data, function (row) {
            _utils_Object__WEBPACK_IMPORTED_MODULE_17__["each"](row, function (key, value) {
              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](_this._dataFields[key])) {
                _this._dataFields[key] = _this.adapter.apply("dataFieldName", {
                  name: key,
                  field: key
                }).name;
              }
            });
          });
        }
      };
      /**
       * Cheks against `dateFields` property to determine if this field holds
       * dates.
       *
       * @ignore Exclude from docs
       * @param field   Field name
       * @param options Options
       * @return `true` if it's a date field
       */


      Export.prototype.isDateField = function (field) {
        return this.adapter.apply("isDateField", {
          isDateField: this.dateFields.contains(field),
          field: field
        }).isDateField;
      };
      /**
       * Cheks against `numberFields` property to determine if this field holds
       * numbers.
       *
       * @ignore Exclude from docs
       * @param field   Field name
       * @param options Options
       * @return `true` if it's a number field
       */


      Export.prototype.isNumberField = function (field) {
        return this.adapter.apply("isNumberField", {
          isNumberField: this.numberFields.contains(field),
          field: field
        }).isNumberField;
      };
      /**
       * Cheks against `durationFields` property to determine if this field holds
       * durations.
       *
       * @ignore Exclude from docs
       * @param field   Field name
       * @param options Options
       * @return `true` if it's a date field
       */


      Export.prototype.isDurationField = function (field) {
        return this.adapter.apply("isDurationField", {
          isDurationField: this.durationFields.contains(field),
          field: field
        }).isDurationField;
      };
      /**
       * Returns proper content type for the export type.
       *
       * @param type  Export format/type
       * @return Proper content type, i.e. "image/jpeg"
       */


      Export.prototype.getContentType = function (type) {
        var contentType = "";

        switch (type) {
          case "png":
          case "gif":
            contentType = "image/" + type;
            break;

          case "jpg":
            contentType = "image/jpeg";
            break;

          case "svg":
            contentType = "image/svg+xml";
            break;

          case "csv":
            contentType = "text/csv";
            break;

          case "json":
            contentType = "application/json";
            break;

          case "html":
            contentType = "text/html";
            break;

          case "pdf":
          case "pdfdata":
            contentType = "application/pdf";
            break;

          case "xlsx":
            contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            break;
        }

        return this.adapter.apply("contentType", {
          contentType: contentType,
          type: type
        }).contentType;
      };

      Object.defineProperty(Export.prototype, "filePrefix", {
        /**
         * @return File prefix
         */
        get: function get() {
          return this.adapter.apply("filePrefix", {
            filePrefix: this._filePrefix
          }).filePrefix;
        },

        /**
         * A file prefix to be used for all exported formats.
         *
         * Export will apply format-related extension to it. E.g. if this is set to
         * "myExport", the file name of the PNG exported image will be "myExport.png".
         *
         * @param value File prefix
         */
        set: function set(value) {
          this._filePrefix = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "backgroundColor", {
        /**
         * @return Background color
         */
        get: function get() {
          return this.adapter.apply("backgroundColor", {
            backgroundColor: this._backgroundColor
          }).backgroundColor;
        },

        /**
         * A background color to be used for exported images. If set, this will
         * override the automatically acquired background color.
         *
         * @param value Color
         */
        set: function set(value) {
          this._backgroundColor = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "title", {
        /**
         * @return Title
         */
        get: function get() {
          return this.adapter.apply("title", {
            title: this._title
          }).title;
        },

        /**
         * A title to be used when printing.
         *
         * @param value Title
         */
        set: function set(value) {
          this._title = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Displays a preloader/exporting indicator.
       *
       * @ignore Exclude from docs
       * @todo Add ability to change text
       */

      Export.prototype.showPreloader = function () {
        var preloader = this.preloader;

        if (preloader) {
          preloader.progress = 0.5;
          preloader.label.text = "...";
        }
      };
      /**
       * Hides preloader/exporting indicator
       *
       * @ignore Exclude from docs
       */


      Export.prototype.hidePreloader = function () {
        var preloader = this.preloader;

        if (preloader) {
          preloader.progress = 1;
        }
      };

      Object.defineProperty(Export.prototype, "preloader", {
        /**
         * Returns a an instance of [[Preloader]] associated with the Sprite being
         * exported.
         *
         * @return Preloader
         */
        get: function get() {
          return this._sprite && this._sprite.parent && this._sprite.parent.preloader ? this._sprite.parent.preloader : undefined;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Displays a modal saying export is taking longer than expected.
       *
       * @ignore Exclude from docs
       */

      Export.prototype.showTimeout = function () {
        this.showModal(this.adapter.apply("timeoutMessage", {
          message: this.language.translate("Export operation took longer than expected. Something might have gone wrong.")
        }).message);
      };
      /**
       * Hides preloader/exporting indicator.
       *
       * @ignore Exclude from docs
       */


      Export.prototype.hideTimeout = function () {
        if (this._timeoutTimeout) {
          this.removeDispose(this._timeoutTimeout);
          this._timeoutTimeout = null;
        }

        this.hideModal();
      };

      Object.defineProperty(Export.prototype, "language", {
        /**
         * @return A [[Language]] instance to be used
         */
        get: function get() {
          if (!this._language) {
            this._language = new _utils_Language__WEBPACK_IMPORTED_MODULE_10__["Language"]();
          }

          return this._language;
        },

        /**
         * A [[Language]] instance to be used for translations.
         *
         * @param value An instance of [[Language]]
         */
        set: function set(value) {
          this._language = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "modal", {
        /**
         * Returns (and creates) [[Modal]].
         *
         * @ignore Exclude from docs
         * @return Modal instance
         */
        get: function get() {
          if (!this._modal) {
            this._modal = new _elements_Modal__WEBPACK_IMPORTED_MODULE_4__["Modal"](); // Prefix with Sprite's class name

            this._modal.adapter.add("classPrefix", function (value) {
              value = _Options__WEBPACK_IMPORTED_MODULE_14__["options"].classNamePrefix + value;
              return value;
            });
          }

          return this._modal;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Shows [[Modal]] with specific text.
       *
       * @ignore Exclude from docs
       * @param text Modal contents
       */

      Export.prototype.showModal = function (text, title) {
        // Hide previous modal and preloader
        this.hideModal();
        this.hidePreloader(); // Create modal

        var modal = this.modal;
        modal.container = this.sprite.svgContainer.SVGContainer;
        modal.content = text;
        modal.readerTitle = title;
        modal.open();
      };
      /**
       * Hides modal window if one's currently open.
       *
       * @ignore Exclude from docs
       */


      Export.prototype.hideModal = function () {
        if (this._modal) {
          this.modal.close();
        }
      };
      /**
       * Loads canvg dynamic module.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @return Instance of canvg
       * @async
       */


      Export.prototype._canvg = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var canvg;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4
                /*yield*/
                , __webpack_require__.e(
                /*! import() | canvg */
                "canvg").then(__webpack_require__.bind(null,
                /*! canvg */
                "./node_modules/canvg/lib/index.es.js"))];

              case 1:
                canvg = _a.sent();

                if (canvg.default != null) {
                  return [2
                  /*return*/
                  , canvg.default];
                } else {
                  return [2
                  /*return*/
                  , canvg];
                }

                return [2
                /*return*/
                ];
            }
          });
        });
      };

      Object.defineProperty(Export.prototype, "canvg", {
        /**
         * Returns canvg instance.
         *
         * @ignore Exclude from docs
         * @return Instance of canvg
         */
        get: function get() {
          return this._canvg();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Export.prototype, "pdfmake", {
        /**
         * Returns pdfmake instance.
         *
         * @ignore Exclude from docs
         * @return Instance of pdfmake
         */
        get: function get() {
          if (pdfmakePromise == null) {
            pdfmakePromise = _pdfmake();
          }

          return pdfmakePromise;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Loads xlsx dynamic module.
       *
       * This is an asynchronous function. Check the description of `getImage()`
       * for description and example usage.
       *
       * @ignore Exclude from docs
       * @return Instance of pdfmake
       * @async
       */

      Export.prototype._xlsx = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4
                /*yield*/
                , __webpack_require__.e(
                /*! import() | xlsx */
                "xlsx").then(__webpack_require__.t.bind(null,
                /*! xlsx */
                "./node_modules/xlsx/xlsx.js", 7))];

              case 1:
                return [2
                /*return*/
                , _a.sent()];
            }
          });
        });
      };

      Object.defineProperty(Export.prototype, "xlsx", {
        /**
         * Returns xlsx instance.
         *
         * @ignore Exclude from docs
         * @return Instance of pdfmake
         */
        get: function get() {
          return this._xlsx();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets options for a format.
       */

      Export.prototype.setFormatOptions = function (type, options) {
        this._formatOptions.setKey(type, options);
      };
      /**
       * Returns current options for a format.
       */


      Export.prototype.getFormatOptions = function (type) {
        return this._formatOptions.getKey(type);
      };

      Object.defineProperty(Export.prototype, "formatOptions", {
        /**
         * A [[Dictionary]] object containing format-specific options.
         *
         * May be used to change specific option for the format:
         *
         * ```TypeScript
         * chart.exporting.formatOptions.getKey("csv").disabled = true;
         * ```
         * ```JavaScript
         * chart.exporting.formatOptions.getKey("csv").disabled = true;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "exporting": {
         *     // ...
         *     "formatOptions": {
         *       "csv": {
         *         "disabled": true
         *       }
         *     }
         *   }
         * }
         * ```
         *
         * @since 4.9.12
         * @return  Options
         */
        get: function get() {
          return this._formatOptions;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Disables interactivity on parent chart.
       */

      Export.prototype._disablePointers = function () {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](this._spriteInteractionsEnabled)) {
          this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;
        }

        this.sprite.interactionsEnabled = false;
      };
      /**
       * Releases temporarily disabled pointers on parent chart.
       */


      Export.prototype._releasePointers = function () {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](this._spriteInteractionsEnabled) && !this._exportRunning) {
          this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;
        }
      };
      /**
       * Hides all elements that should not be included in the exported image.
       */


      Export.prototype.hideNonExportableSprites = function () {
        var _this = this;

        if (this._objectsAlreadyHidden) {
          return;
        }

        var svgContainer = this.sprite.svgContainer;

        if (svgContainer) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_21__["each"](svgContainer.nonExportableSprites, function (item) {
            if (!item.isHidden && !item.isHiding && item.visible) {
              _this._hiddenObjects.push(item);
            }

            item.hide(0);
          });
        }

        this._objectsAlreadyHidden = true;
      };
      /**
       * Respores elements that were hidden before export.
       */


      Export.prototype.restoreNonExportableSprites = function () {
        if (!this._objectsAlreadyHidden) {
          return;
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_21__["each"](this._hiddenObjects, function (item) {
          item.show(0);
        });

        this._hiddenObjects = [];
        this._objectsAlreadyHidden = false;
      };
      /**
       * Checks if there are elements that absolutely need to be validated before
       * export.
       *
       * If there are invalid elements, it will await for them to be validated.
       *
       * @return Promise
       */


      Export.prototype.awaitValidSprites = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
          var promises;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                promises = [];

                if (this.validateSprites.length) {
                  _utils_Array__WEBPACK_IMPORTED_MODULE_21__["each"](this.validateSprites, function (sprite, index) {
                    if (sprite.invalid) {
                      promises.push(new Promise(function (resolve, reject) {
                        sprite.events.once("validated", function (ev) {
                          resolve();
                        });
                      }));
                    }
                  });
                }

                if (!promises.length) return [3
                /*break*/
                , 2];
                return [4
                /*yield*/
                , Promise.all(promises)];

              case 1:
                _a.sent();

                _a.label = 2;

              case 2:
                return [2
                /*return*/
                ];
            }
          });
        });
      };
      /**
       * Processes JSON-based config before it is applied to the object.
       *
       * @ignore Exclude from docs
       * @param config  Config
       */


      Export.prototype.processConfig = function (config) {
        _Registry__WEBPACK_IMPORTED_MODULE_13__["registry"].registeredClasses["ExportMenu"] = _ExportMenu__WEBPACK_IMPORTED_MODULE_1__["ExportMenu"];

        if (config) {
          // Set up menu
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](config.menu) && !_utils_Type__WEBPACK_IMPORTED_MODULE_19__["hasValue"](config.menu.type)) {
            config.menu.type = "ExportMenu";
          }
        }

        _super.prototype.processConfig.call(this, config);
      };
      /**
       * XLINK namespace definition.
       *
       * @ignore Exclude from docs
       */


      Export.XLINK = "http://www.w3.org/1999/xlink";
      return Export;
    }(_utils_Validatable__WEBPACK_IMPORTED_MODULE_11__["Validatable"]); //# sourceMappingURL=Export.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/export/ExportCSS.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/export/ExportCSS.js ***!
    \*****************************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreExportExportCSSJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");

    var rules = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_2__["Dictionary"]();
    /**
     * A dynamically-loadable CSS module for Export menu.
     *
     * @ignore Exclude from docs
     * @param prefix  Prefix to addtach to class names
     * @return A MultiDisposer with style rules
     */

    /* harmony default export */

    __webpack_exports__["default"] = function (prefix) {
      var newPrefix = prefix ? prefix : "amexport";
      var colorSet = new _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_1__["InterfaceColorSet"]();
      var counter = rules.insertKeyIfEmpty(newPrefix, function () {
        var disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["MultiDisposer"]([
        /*new StyleRule(`.${newPrefix}-menu`, {
            "opacity": "0.3",
            "transition": "all 100ms ease-in-out",
        }),
          new StyleRule(`div:hover .${newPrefix}-menu, .${newPrefix}-menu.active`, {
            "opacity": "0.9",
        }),*/
        new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu *", {
          "box-sizing": "border-box"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu-level-0", {
          "position": "absolute",
          "top": "5px",
          "right": "5px"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu-level-0." + newPrefix + "-left", {
          "right": "auto",
          "left": "5px"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu-level-0." + newPrefix + "-right", {
          "right": "5px",
          "left": "auto"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu-level-0." + newPrefix + "-top", {
          "top": "5px",
          "bottom": "auto"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu-level-0." + newPrefix + "-bottom", {
          "top": "auto",
          "bottom": "5px"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item." + newPrefix + "-item-level-0", {
          "opacity": "0.3",
          "width": "30px",
          "min-height": "30px",
          "transition": "all 100ms ease-in-out"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("div:hover ." + newPrefix + "-item." + newPrefix + "-item-level-0, ." + newPrefix + "-item." + newPrefix + "-item-level-0.active", {
          "opacity": "0.9"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item." + newPrefix + "-item-level-0 > a", {
          "padding": "0",
          "text-align": "center",
          "overflow": "hidden"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item." + newPrefix + "-item-level-0:before", {
          "display": "block"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item", {
          "position": "relative",
          "display": "block",
          "opacity": "0",
          "z-index": "1",
          "border-radius": "3px",
          "background-color": colorSet.getFor("secondaryButton").hex,
          "padding": "0",
          "margin": "1px 1px 0 0",
          "color": colorSet.getFor("secondaryButton").alternative.hex,
          "transition": "all 100ms ease-in-out, opacity 0.5s ease 0.5s"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-left ." + newPrefix + "-item", {
          "margin": "1px 0 0 1px"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item:hover, ." + newPrefix + "-item.active", {
          "background": colorSet.getFor("secondaryButtonHover").hex,
          "color": colorSet.getFor("secondaryButtonText").hex
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item > ." + newPrefix + "-menu", {
          "position": "absolute",
          "top": "-1px",
          "right": "0",
          "margin-right": "100%"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-left ." + newPrefix + "-item > ." + newPrefix + "-menu", {
          "left": "0",
          "right": "auto",
          "margin-left": "100%",
          "margin-right": "auto"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-right ." + newPrefix + "-item > ." + newPrefix + "-menu", {
          "left": "auto",
          "right": "0",
          "margin-left": "auto",
          "margin-right": "100%"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-top ." + newPrefix + "-item > ." + newPrefix + "-menu", {
          "top": "-1px",
          "bottom": "auto"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-bottom ." + newPrefix + "-item > ." + newPrefix + "-menu", {
          "top": "auto",
          "bottom": "0"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item > ." + newPrefix + "-menu", {
          "display": "none"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item:hover > ." + newPrefix + "-menu, ." + newPrefix + "-item.active > ." + newPrefix + "-menu", {
          "display": "block"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item:hover > ." + newPrefix + "-menu > ." + newPrefix + "-item, ." + newPrefix + "-item.active > ." + newPrefix + "-menu > ." + newPrefix + "-item", {
          "opacity": "1"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-menu", {
          "display": "block",
          "list-style": "none",
          "margin": "0",
          "padding": "0"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-label", {
          "display": "block",
          "cursor": "default",
          "padding": "0.5em 1em"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-icon", {
          "display": "block",
          "cursor": "default",
          "padding": "0.2em 0.4em",
          "width": "1.2em",
          "height": "1.2em",
          "min-width": "32px",
          "min-height": "32px",
          "margin": "auto auto",
          "border-radius": "3px"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-item-level-0 > ." + newPrefix + "-icon", {
          "padding": "0.1em 0.2em"
        }), new _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["StyleRule"]("." + newPrefix + "-clickable", {
          "cursor": "pointer"
        })]);
        return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["CounterDisposer"](function () {
          rules.removeKey(newPrefix);
          disposer.dispose();
        });
      });
      return counter.increment();
    }; //# sourceMappingURL=ExportCSS.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/export/ExportMenu.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/export/ExportMenu.js ***!
    \******************************************************************************/

  /*! exports provided: ExportMenu */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreExportExportMenuJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ExportMenu", function () {
      return ExportMenu;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _ExportCSS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./ExportCSS */
    "./node_modules/@amcharts/amcharts4/.internal/core/export/ExportCSS.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../interaction/Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _utils_Validatable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Validatable */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Validatable.js");
    /* harmony import */


    var _utils_Keyboard__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Keyboard */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ExportMenu provides functionality for building Export menu
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a menu for Export operations.
     *
     * To add an export menu to a chart, set this to a new instance of
     * [[ExportMenu]].
     *
     * ```TypeScript
     * chart.exporting.menu = new am4core.ExportMenu();
     * ```
     * ```JavaScript
     * chart.exporting.menu = new am4core.ExportMenu();
     * ```
     * ```JSON
     * {
     *   // ...
     *   "exporting": {
     *     "menu": {}
     *   }
     * }
     * ```
     * @important
     */


    var ExportMenu =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ExportMenu, _super);
      /**
       * Constructor
       */

      function ExportMenu() {
        var _this = _super.call(this) || this;
        /**
         * An [[Adapter]].
         */


        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](_this);
        /**
         * How many milliseconds to hold menu/sub-menu open after it loses focus or
         * hover, before auto-closing it.
         *
         * @default 1000
         */

        _this.closeDelay = 1000;
        /**
         * Close the menu automatically when some export operation is triggered.
         *
         * @default true
         * @since 4.2.2
         */

        _this.closeOnClick = true;
        /**
         * An instance of [[Language]].
         */

        _this._language = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_5__["MutableValueDisposer"]();
        /**
         * What HTML tags to use to build menu.
         */

        _this._menuTag = "ul";
        /**
         * Which tag to use to enclose individual menu items.
         */

        _this._itemTag = "li";
        /**
         * Tag to wrap menu item labels in.
         */

        _this._labelTag = "a";
        /**
         * Tag to use for icons
         */

        _this._iconTag = "img";
        /**
         * Prefix for class names applied to menu elements.
         */

        _this._classPrefix = "amexport";
        /**
         * If set to `true` [[ExportMenu]] will load it's own external CSS when
         * instantiated.
         */

        _this._defaultStyles = true;
        /**
         * Horizontal positioning.
         */

        _this._align = "right";
        /**
         * Vertical positioning.
         */

        _this._verticalAlign = "top";
        /**
         * A tabindex to apply to Export Menu.
         */

        _this._tabindex = 0;
        /**
         * Whether next menu close event should be ignored.
         */

        _this._ignoreNextClose = false;
        /**
         * Default menu items.
         */

        _this._items = [{
          "label": "...",
          "menu": [{
            "label": "Image",
            "menu": [{
              "type": "png",
              "label": "PNG"
            }, {
              "type": "jpg",
              "label": "JPG"
            }, {
              "type": "svg",
              "label": "SVG"
            }, {
              "type": "pdf",
              "label": "PDF"
            }]
          }, {
            "label": "Data",
            "menu": [{
              "type": "json",
              "label": "JSON"
            }, {
              "type": "csv",
              "label": "CSV"
            }, {
              "type": "xlsx",
              "label": "XLSX"
            }, {
              "type": "html",
              "label": "HTML"
            }, {
              "type": "pdfdata",
              "label": "PDF"
            }]
          }, {
            "label": "Print",
            "type": "print"
          }]
        }];
        _this.className = "ExportMenu";

        _this._disposers.push(_this._language);

        _this.invalidate();

        _this.applyTheme();

        return _this;
      }
      /**
       * (Re)draws the Export menu.
       *
       * @ignore Exclude from docs
       */


      ExportMenu.prototype.validate = function () {
        this.draw();

        _super.prototype.validate.call(this);
      };
      /**
       * Draws the menu based on current items.
       *
       * Normally, there's no need to call this explicitly. The chart, if it has
       * export menu enabled, will automatically draw the menu.
       */


      ExportMenu.prototype.draw = function () {
        var _this = this; // Create top-level menu item, or clear it


        if (!this._element) {
          this._element = this.createMenuElement(0);
        } else {
          this._element.innerHTML = "";
          this._element.className = this.getMenuItemClass(0);
        } // See if we're loading external CSS
        // Hide it until CSS is loaded


        if (this.defaultStyles) {
          this._element.style.display = "none";
        } // Append to container


        _utils_Type__WEBPACK_IMPORTED_MODULE_12__["getValue"](this._container).appendChild(this._element); // Apply adapter to menu items before processing


        var items = this.adapter.apply("items", {
          items: this._items
        }).items;

        for (var len = items.length, i = 0; i < len; i++) {
          this.drawBranch(this._element, items[i], 0);
        } // Apply adapter to finalized menu element


        this._element = this.adapter.apply("menuElement", {
          menuElement: this._element
        }).menuElement; // Set up global "down" event

        this._disposers.push(Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().body.events.on("down", function (ev) {
          if (!ev.pointer.touch) {
            _this._ignoreNextClose = false;
          }

          _this.close();
        })); // Set up global event on ESC press to close the menu


        this._disposers.push(Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().body.events.on("keyup", function (ev) {
          var key = _utils_Keyboard__WEBPACK_IMPORTED_MODULE_8__["keyboard"].getEventKey(ev.event);

          switch (key) {
            case "esc":
              _this.close();

              break;

            case "up":
            case "down":
            case "left":
            case "right":
              _this.moveSelection(key);

              break;
          }
        }));

        if (this.defaultStyles) {
          this.loadDefaultCSS();
        }
      };
      /**
       * Creates a new branch in export menu. This function is recursive for
       * building multi-level menus.
       *
       * @ignore Exclude from docs
       * @param container Container to put branch elements in
       * @param branch    Menu item
       * @param level     Current nesting level
       */


      ExportMenu.prototype.drawBranch = function (container, branch, level) {
        var _this = this; // Apply adapter


        branch = this.adapter.apply("branch", {
          branch: branch,
          level: level
        }).branch; // Unsupported?
        // ExportMenu does not check or know for specific browser/system
        // capabilities. It must happen in some other code and applied via Adapter.
        // Export itself will check compatibility, but there might be other plugins
        // that influence it or even add any specific export functionality.

        if (branch.unsupported === true) {
          return;
        } // Init ascendants


        if (!branch.ascendants) {
          branch.ascendants = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["List"]();
        } // Get type


        var type = branch.type; // Create an item

        var element = this.createItemElement(level, type); // Create label

        var label; // Create icon

        if (branch.icon) {
          label = this.createIconElement(level, type);
          label.src = branch.icon;

          if (branch.label) {
            label.title = branch.label;
          }
        } else if (branch.svg) {
          label = this.createSvgElement(level, type, branch.svg);

          if (branch.label) {
            label.title = branch.label;
          }
        } else {
          label = this.createLabelElement(level, type);
          label.innerHTML = branch.label ? this.language.translate(branch.label) : "";
        } // Apply reader text to label


        var readerLabel = this.getReaderLabel(branch, label.innerHTML);
        label.setAttribute("aria-label", readerLabel); // Add Label

        element.appendChild(label); // Create interaction object
        // TODO clean this up when it's disposed

        branch.interactions = Object(_interaction_Interaction__WEBPACK_IMPORTED_MODULE_4__["getInteraction"])().getInteraction(label);
        branch.element = element; // Create interaction manager we can set event listeners to

        if (this.typeClickable(type)) {
          //branch.interactions.clickable = true;
          // TODO clean this up when it's disposed
          branch.interactions.events.on("hit", function (ev) {
            if (_this.events.isEnabled("hit")) {
              var event_1 = {
                "type": "hit",
                "event": ev.event,
                "target": _this,
                "branch": branch
              };

              _this.events.dispatchImmediately("hit", event_1);
            }
          }); // TODO clean this up when it's disposed

          branch.interactions.events.on("keyup", function (ev) {
            if (_utils_Keyboard__WEBPACK_IMPORTED_MODULE_8__["keyboard"].isKey(ev.event, "enter")) {
              if (_this.events.isEnabled("enter")) {
                var event_2 = {
                  "type": "enter",
                  "event": ev.event,
                  "target": _this,
                  "branch": branch
                };

                _this.events.dispatchImmediately("enter", event_2);
              }
            }
          });
        }

        {
          var submenu_1 = this.getSubMenu(branch); // Add ENTER event to open sub-menus

          if (submenu_1 != null) {
            // TODO clean this up when it's disposed
            branch.interactions.events.on("keyup", function (ev) {
              if (_utils_Keyboard__WEBPACK_IMPORTED_MODULE_8__["keyboard"].isKey(ev.event, "enter")) {
                // This is item has sub-menu, activate the first child on ENTER
                _this.selectBranch(submenu_1[0]); // Attempt to set focus


                _this.setFocus(submenu_1[0]);
              }
            });
            branch.interactions.events.on("hit", function (ev) {
              _this.selectBranch(branch);
            });
          }
        } // Add events
        // TODO clean this up when it's disposed

        branch.interactions.events.on("over", function (ev) {
          if (ev.pointer.touch) {
            // Cancel pending menu closure
            _this._ignoreNextClose = true;
          }

          _this.selectBranch(branch);

          if (_this.events.isEnabled("over")) {
            var event_3 = {
              "type": "over",
              "event": ev.event,
              "target": _this,
              "branch": branch
            };

            _this.events.dispatchImmediately("over", event_3);
          }
        }); // TODO clean this up when it's disposed

        branch.interactions.events.on("out", function (ev) {
          if (!ev.pointer.touch) {
            _this.delayUnselectBranch(branch);
          }

          if (_this.events.isEnabled("out")) {
            var event_4 = {
              "type": "out",
              "event": ev.event,
              "target": _this,
              "branch": branch
            };

            _this.events.dispatchImmediately("out", event_4);
          }
        }); // TODO clean this up when it's disposed

        branch.interactions.events.on("focus", function (ev) {
          _this.selectBranch(branch);
        }); // TODO clean this up when it's disposed

        branch.interactions.events.on("blur", function (ev) {
          _this.delayUnselectBranch(branch);
        }); // Increment level

        var local_level = level + 1; // Has sub-menu?

        if (branch.menu) {
          var submenu = this.createMenuElement(local_level);

          for (var len = branch.menu.length, i = 0; i < len; i++) {
            var ascendants = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["List"]();
            branch.menu[i].ascendants = ascendants;

            if (branch.ascendants.length) {
              ascendants.copyFrom(branch.ascendants);
            }

            ascendants.push(branch);
            this.drawBranch(submenu, branch.menu[i], local_level);
          } // Sub-menu is empty (all items are not supported)
          // Do not draw this menu item at all


          if (submenu.innerHTML == "") {
            return;
          }

          element.appendChild(submenu);
        } // Should this item be hidden?


        if (branch.hidden) {
          this.hideBranch(branch);
        } // Add id?


        if (branch.id) {
          element.setAttribute("id", branch.id);
        } // Background color?


        if (branch.color) {
          element.style.backgroundColor = branch.color.hex;
        } // Append to container


        container.appendChild(element);
      };
      /**
       * Creates a menu element to hold its elements in. Usually it's an `<ul>`
       * tag.
       *
       * @ignore Exclude from docs
       * @param level  Current nesting level
       * @return HTML element reference
       */


      ExportMenu.prototype.createMenuElement = function (level) {
        var element = document.createElement(this.menuTag);
        element.className = this.getMenuItemClass(level); // Accessibility

        if (level === 0) {
          element.setAttribute("role", "menu");
        }

        return element;
      };
      /**
       * Generates a class name for the menu element based on its nesting level.
       *
       * @ignore Exclude from docs
       * @param level  Current nesting level
       * @return Class name(s)
       */


      ExportMenu.prototype.getMenuItemClass = function (level) {
        var className = this.classPrefix + "-menu " + this.classPrefix + "-menu-level-" + level;

        if (level === 0) {
          className += " " + this.classPrefix + "-menu-root " + this.classPrefix + "-" + this.align + " " + this.classPrefix + "-" + this.verticalAlign;
        }

        return this.adapter.apply("menuClass", {
          className: className,
          level: level
        }).className;
      };
      /**
       * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go
       * into this element.
       *
       * @ignore Exclude from docs
       * @param level  Current nesting level
       * @param type   Type of the menu item
       * @return HTML element reference
       */


      ExportMenu.prototype.createItemElement = function (level, type) {
        var element = document.createElement(this.itemTag);
        var className = this.classPrefix + "-item " + this.classPrefix + "-item-level-" + level + " " + this.classPrefix + "-item-" + (type || "blank");
        element.className = this.adapter.apply("itemClass", {
          className: className,
          level: level,
          type: type
        }).className;
        element.setAttribute("role", "menuitem");
        return element;
      };
      /**
       * Creates a "label" part of the menu item. It could be text or any HTML
       * content.
       *
       * @ignore Exclude from docs
       * @param level  Current nesting level
       * @param type   Type of the menu item
       * @return An HTML Element
       */


      ExportMenu.prototype.createLabelElement = function (level, type) {
        var element = document.createElement(this.labelTag);
        var className = this.classPrefix + "-label " + this.classPrefix + "-label-level-" + level + " " + this.classPrefix + "-item-" + (type || "blank");

        if (this.typeClickable(type)) {
          className += " " + this.classPrefix + "-clickable";
        }

        element.className = this.adapter.apply("labelClass", {
          className: className,
          level: level,
          type: type
        }).className; // Accessible navigation

        element.setAttribute("tabindex", this.tabindex.toString());
        element.setAttribute("role", "menuitem");
        return element;
      };
      /**
       * Creates a "icon" part of the menu item.
       *
       * @ignore Exclude from docs
       * @param level  Current nesting level
       * @param type   Type of the menu item
       * @return An HTML Element
       */


      ExportMenu.prototype.createIconElement = function (level, type) {
        var element = document.createElement(this.iconTag);
        var className = this.classPrefix + "-icon " + this.classPrefix + "-icon-level-" + level + " " + this.classPrefix + "-item-" + (type || "blank");

        if (this.typeClickable(type)) {
          className += " " + this.classPrefix + "-clickable";
        }

        element.className = this.adapter.apply("labelClass", {
          className: className,
          level: level,
          type: type
        }).className; // Accessible navigation

        element.setAttribute("tabindex", this.tabindex.toString());
        element.setAttribute("role", "menuitem");
        return element;
      };
      /**
       * Creates a a custom element out of raw HTML.
       *
       * @ignore Exclude from docs
       * @param level  Current nesting level
       * @param type   Type of the menu item
       * @return An HTML Element
       */


      ExportMenu.prototype.createSvgElement = function (level, type, svg) {
        var parser = new DOMParser();
        var element = parser.parseFromString(svg, "image/svg+xml").documentElement;
        var className = this.classPrefix + "-icon " + this.classPrefix + "-icon-level-" + level + " " + this.classPrefix + "-item-" + (type || "blank");

        if (this.typeClickable(type)) {
          className += " " + this.classPrefix + "-clickable";
        }

        element.setAttribute("class", this.adapter.apply("labelClass", {
          className: className,
          level: level,
          type: type
        }).className); // Accessible navigation

        element.setAttribute("tabindex", this.tabindex.toString());
        element.setAttribute("role", "menuitem");
        return element;
      };
      /**
       * Destroys the menu and all its elements.
       */


      ExportMenu.prototype.dispose = function () {
        if (!this._disposed) {
          _super.prototype.dispose.call(this);

          if (this._element && this._element.parentNode) {
            this._element.parentNode.removeChild(this._element);
          }
        }
      };
      /**
       * Checks whether menu item type is supposed to be clickable.
       *
       * @ignore Exclude from docs
       * @param type  Menu item type
       * @return Is clickable?
       */


      ExportMenu.prototype.typeClickable = function (type) {
        return _utils_Type__WEBPACK_IMPORTED_MODULE_12__["hasValue"](type);
      };
      /**
       * Checks whether menu item has any sub-items.
       *
       * @ignore Exclude from docs
       * @param branch  A menu item
       * @return Has sub-items?
       */


      ExportMenu.prototype.hasSubMenu = function (branch) {
        return branch.menu && branch.menu.length ? true : false;
      };
      /**
       * Returns sub-items (if they exist).
       *
       * @ignore Exclude from docs
       * @param branch  A menu item
       * @return Submenus
       */


      ExportMenu.prototype.getSubMenu = function (branch) {
        if (branch.menu && branch.menu.length) {
          return branch.menu;
        }
      };
      /**
       * Generates and returns an applicable label to be used for screen readers.
       *
       * @ignore Exclude from docs
       * @param item   A menu item instance
       * @param label  Current label
       * @return Reader text
       */


      ExportMenu.prototype.getReaderLabel = function (branch, label) {
        // Strip any HTML from the label
        label = _utils_Utils__WEBPACK_IMPORTED_MODULE_9__["stripTags"](label); // Add textual note if the branch is clickable

        if (this.hasSubMenu(branch)) {
          label += " [" + this.language.translate("Click, tap or press ENTER to open") + "]";
        } else if (branch.type == "print") {
          label = this.language.translate("Click, tap or press ENTER to print.");
        } else if (this.typeClickable(branch.type)) {
          label = this.language.translate("Click, tap or press ENTER to export as %1.", undefined, label);
        }

        return this.adapter.apply("rederLabel", {
          label: label,
          branch: branch
        }).label;
      };

      Object.defineProperty(ExportMenu.prototype, "container", {
        /**
         * @return Container
         */
        get: function get() {
          return this._container;
        },

        /**
         * Getters and setters
         */

        /**
         * An HTML container to place the Menu in.
         *
         * A container must be an HTML element, because menu itself is HTML, and
         * cannot be placed into SVG.
         *
         * @param container Reference to container element
         * @todo Check if menu is already build. If it is, just move it to a new container
         */
        set: function set(container) {
          this._container = container;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "items", {
        /**
         * @return Menu items
         */
        get: function get() {
          return this._items;
        },

        /**
         * A list of menu items. Can be nested.
         *
         * @param items  Menu items
         */
        set: function set(items) {
          this._items = items;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "tag", {
        /**
         * Sets main menu tag to place menu in.
         *
         * This also sets up how menu items are built.
         *
         * If you set this to "ul", menu items will be wrapped into `<li>` tags.
         *
         * If set to "div", menu items will be wrapped in `<div>` tags.
         *
         * @default "ul"
         * @param tag Tag to use for menu
         */
        set: function set(tag) {
          this._menuTag = tag;
          this._itemTag = tag == "ul" ? "li" : "div";
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "menuTag", {
        /**
         * Returns current menu tag.
         *
         * @ignore Exclude from docs
         * @return Menu tag (item that contains sub-items)
         */
        get: function get() {
          return this.adapter.apply("menuTag", {
            tag: this._menuTag
          }).tag;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "itemTag", {
        /**
         * Returns tag to wrap items into.
         *
         * @ignore Exclude from docs
         * @return Item tag
         */
        get: function get() {
          return this.adapter.apply("itemTag", {
            tag: this._itemTag
          }).tag;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "labelTag", {
        /**
         * Returns menu label tag.
         *
         * @ignore Exclude from docs
         * @return Label tag
         */
        get: function get() {
          return this.adapter.apply("labelTag", {
            tag: this._labelTag
          }).tag;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "iconTag", {
        /**
         * Returns icon tag.
         *
         * @ignore Exclude from docs
         * @return Icon tag
         */
        get: function get() {
          return this.adapter.apply("iconTag", {
            tag: this._iconTag
          }).tag;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "align", {
        /**
         * @return Horizontal alignment
         */
        get: function get() {
          return this.adapter.apply("align", {
            align: this._align
          }).align;
        },

        /**
         * A horizontal alignment for the menu placement.
         *
         * @param value Horizontal alignment
         */
        set: function set(value) {
          this._align = value;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "verticalAlign", {
        /**
         * @return Vertical alignment
         */
        get: function get() {
          return this.adapter.apply("verticalAlign", {
            verticalAlign: this._verticalAlign
          }).verticalAlign;
        },

        /**
         * A vertical alignment for the menu placement.
         *
         * @param value Vertical alignment
         */
        set: function set(value) {
          this._verticalAlign = value;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "classPrefix", {
        /**
         * @return Class name prefix
         */
        get: function get() {
          return this.adapter.apply("classPrefix", {
            classPrefix: this._classPrefix
          }).classPrefix;
        },

        /**
         * Class name prefix.
         *
         * @default "amexport"
         * @param value Class name prefix
         */
        set: function set(value) {
          this._classPrefix = value;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "defaultStyles", {
        /**
         * @return Should ExportMenu load its own CSS?
         */
        get: function get() {
          return this.adapter.apply("defaultStyles", {
            defaultStyles: this._defaultStyles
          }).defaultStyles;
        },

        /**
         * Indicates whether [[ExportMenu]] should load external CSS to style itself.
         *
         * If set to `false`, the menu will not be styled, and will rely on some
         * external CSS.
         *
         * @default true
         * @param Should ExportMenu load its own CSS?
         */
        set: function set(value) {
          if (this._defaultStyles != value) {
            this._defaultStyles = value;

            if (value) {
              this.loadDefaultCSS();
            }
          }

          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Loads the default CSS.
       *
       * @ignore Exclude from docs
       */

      ExportMenu.prototype.loadDefaultCSS = function () {
        this._disposers.push(Object(_ExportCSS__WEBPACK_IMPORTED_MODULE_1__["default"])(this.classPrefix));

        if (this._element) {
          this._element.style.display = "";
        }
      };

      Object.defineProperty(ExportMenu.prototype, "tabindex", {
        /**
         * @return Tab index
         */
        get: function get() {
          return this.adapter.apply("tabindex", {
            tabindex: this._tabindex
          }).tabindex;
        },

        /**
         * A tab index for the menu.
         *
         * Tab index will influence the order in which elements on the chart and
         * the whole page are selected when pressing TAB key.
         *
         * @param value Tab index
         */
        set: function set(value) {
          this._tabindex = value;
          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ExportMenu.prototype, "language", {
        /**
         * @return A [[Language]] instance to be used
         */
        get: function get() {
          var _this = this;

          var language = this._language.get();

          if (language == null) {
            language = new _utils_Language__WEBPACK_IMPORTED_MODULE_6__["Language"](); // TODO code duplication with `set language()`

            this._language.set(language, language.events.on("localechanged", function (ev) {
              _this.invalidate();
            }));
          }

          return language;
        },

        /**
         * A [[Language]] instance.
         *
         * @param value An instance of [[Language]]
         */
        set: function set(value) {
          var _this = this;

          this._language.set(value, value.events.on("localechanged", function (ev) {
            _this.invalidate();
          }));

          this.invalidate();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Controlling the menu
       */

      /**
       * Removes all active classes from menu items. Useful on touch devices and
       * keyboard navigation where open menu can be closed instantly by clicking or
       * tapping outside it.
       *
       * @ignore Exclude from docs
       */

      ExportMenu.prototype.close = function () {
        var _this = this;

        if (this._ignoreNextClose) {
          this._ignoreNextClose = false;
          return;
        }

        if (this.closeOnClick) {
          this._element.style.pointerEvents = "none";
          setTimeout(function () {
            _this._element.style.pointerEvents = "auto";
          }, 100);
        }

        if (this._currentSelection) {
          this.setBlur(this._currentSelection);
          this._currentSelection = undefined;
        }

        if (this._element) {
          var items = this._element.getElementsByClassName("active");

          for (var len = items.length, i = len - 1; i >= 0; i--) {
            if (items[i]) {
              _utils_DOM__WEBPACK_IMPORTED_MODULE_11__["removeClass"](items[i], "active");
            }
          }
        }

        this.events.dispatchImmediately("closed", {
          type: "closed",
          target: this
        });
      };
      /**
       * Selects a branch in the menu.
       *
       * Handles closing of currently open branch.
       *
       * @ignore Exclude from docs
       * @param branch Branch to select
       */


      ExportMenu.prototype.selectBranch = function (branch) {
        var _this = this; // Cancel previous closure


        if (branch.closeTimeout) {
          this.removeDispose(branch.closeTimeout);
          branch.closeTimeout = undefined;
        } // Add active class


        _utils_DOM__WEBPACK_IMPORTED_MODULE_11__["addClass"](branch.interactions.element.parentElement, "active"); // Remove current selection


        if (this._currentSelection && this._currentSelection !== branch && this._currentSelection.ascendants) {
          _utils_Iterator__WEBPACK_IMPORTED_MODULE_10__["each"](_utils_Iterator__WEBPACK_IMPORTED_MODULE_10__["concat"](_utils_Iterator__WEBPACK_IMPORTED_MODULE_10__["fromArray"]([this._currentSelection]), this._currentSelection.ascendants.iterator()), function (ascendant) {
            if (!branch.ascendants.contains(ascendant) && branch !== ascendant) {
              _this.unselectBranch(ascendant, true);
            }
          });
        } // Select and/or cancel timeout for current ascendants


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_10__["each"](branch.ascendants.iterator(), function (ascendant) {
          if (ascendant.closeTimeout) {
            _this.removeDispose(ascendant.closeTimeout);

            ascendant.closeTimeout = undefined;
          }

          _utils_DOM__WEBPACK_IMPORTED_MODULE_11__["addClass"](ascendant.interactions.element.parentElement, "active");
        }); // Log current selection


        this._currentSelection = branch; // Invoke event

        if (this.events.isEnabled("branchselected")) {
          var event_5 = {
            type: "branchselected",
            target: this,
            branch: branch
          };
          this.events.dispatchImmediately("branchselected", event_5);
        }
      };
      /**
       * Unselects a branch. Also selects a branch one level up if necessary.
       *
       * @ignore Exclude from docs
       * @param branch Branch to unselect
       * @param simple If `true`, only the branch will be unselected without selecting parent branch
       */


      ExportMenu.prototype.unselectBranch = function (branch, simple) {
        // Remove active class
        _utils_DOM__WEBPACK_IMPORTED_MODULE_11__["removeClass"](branch.interactions.element.parentElement, "active"); // Remove current selection


        if (this._currentSelection == branch) {
          this._currentSelection = undefined;
        } // Invoke event


        if (this.events.isEnabled("branchunselected")) {
          var event_6 = {
            type: "branchunselected",
            target: this,
            branch: branch
          };
          this.events.dispatchImmediately("branchunselected", event_6);
        }
      };
      /**
       * Delay unselection of a branch. This can still be cancelled in some other
       * place if the branch or its children regain focus.
       *
       * @ignore Exclude from docs
       * @param branch Branch to unselect
       * @param simple If `true`, only the branch will be unselected without selecting parent branch
       */


      ExportMenu.prototype.delayUnselectBranch = function (branch, simple) {
        var _this = this; // Schedule branch unselection


        if (branch.closeTimeout) {
          this.removeDispose(branch.closeTimeout);
          branch.closeTimeout = undefined;
        }

        branch.closeTimeout = this.setTimeout(function () {
          _this.unselectBranch(branch, simple);
        }, this.closeDelay); // Schedule unselection of all ascendants
        // In case focus went away from the export menu altogether, this will ensure
        // that all items will be closed.
        // In case we're jumping to other menu item, those delayed unselections will
        // be cancelled by `selectBranch`

        if (simple !== true && branch.ascendants) {
          _utils_Iterator__WEBPACK_IMPORTED_MODULE_10__["each"](branch.ascendants.iterator(), function (ascendant) {
            _this.delayUnselectBranch(ascendant, true);
          });
        }
      };
      /**
       * Navigates the menu based on which direction kayboard key was pressed.
       *
       * @ignore Exclude from docs
       * @param key A key that was pressed
       */


      ExportMenu.prototype.moveSelection = function (key) {
        // Check if there's a current selection
        if (!this._currentSelection) {
          return;
        }

        var newSelection;

        if (key == "up") {
          // Try moving up in current menu list, or to the last item if already
          // at the top
          newSelection = this.getPrevSibling(this._currentSelection);
        } else if (key == "down") {
          // Try moving down in current menu list, or to the top item if already
          // at the bottom
          newSelection = this.getNextSibling(this._currentSelection);
        } else if (key == "left" && this.align == "right" || key == "right" && this.align == "left") {
          var menu = this.getSubMenu(this._currentSelection); // Go one level-deeper

          if (menu != null) {
            newSelection = menu[0];
          }
        } else if (key == "right" && this.align == "right" || key == "left" && this.align == "left") {
          // Go one level-deeper
          newSelection = this.getParentItem(this._currentSelection);
        }

        if (newSelection && newSelection !== this._currentSelection) {
          this.selectBranch(newSelection);
          this.setFocus(newSelection);
          this._currentSelection = newSelection;
        }
      };
      /**
       * Returns all siblings of a menu item, including this same menu item.
       *
       * @ignore Exclude from docs
       * @param branch  Menu item
       * @return List of sibling menu items
       */


      ExportMenu.prototype.getSiblings = function (branch) {
        var parent = this.getParentItem(branch);

        if (parent && parent.menu) {
          return parent.menu;
        } else {
          return [];
        }
      };
      /**
       * Returns menu items parent item.
       *
       * @ignore Exclude from docs
       * @param branch  Menu item
       * @return Parent menu item
       */


      ExportMenu.prototype.getParentItem = function (branch) {
        if (branch.ascendants && branch.ascendants.length) {
          return branch.ascendants.getIndex(branch.ascendants.length - 1);
        } else {
          return undefined;
        }
      };
      /**
       * Returns next sibling in the same menu branch. If there is no next sibling,
       * the first one is returned. If there is just one item, that item is
       * returned. Unsupported menu items are skipped.
       *
       * @ignore Exclude from docs
       * @param branch  Menu item to search siblings for
       * @return Menu item
       */


      ExportMenu.prototype.getNextSibling = function (branch) {
        var siblings = this.getSiblings(branch);

        if (siblings.length > 1) {
          var next = siblings.indexOf(branch) + 1;
          next = siblings.length == next ? 0 : next;
          return siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];
        } else {
          return branch;
        }
      };
      /**
       * Returns previous sibling in the same menu branch. If there is no next
       * sibling, the first one is returned. If there is just one item, that item is
       * returned. Unsupported menu items are skipped.
       *
       * @ignore Exclude from docs
       * @param branch  Menu item to search siblings for
       * @return Menu item
       */


      ExportMenu.prototype.getPrevSibling = function (branch) {
        var siblings = this.getSiblings(branch);

        if (siblings.length > 1) {
          var prev = siblings.indexOf(branch) - 1;
          prev = prev == -1 ? siblings.length - 1 : prev;
          return siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];
        } else {
          return branch;
        }
      };
      /**
       * Attempts to set focus on particular menu element.
       *
       * @ignore Exclude from docs
       * @param branch Menu item
       */


      ExportMenu.prototype.setFocus = function (branch) {
        if (branch.interactions) {
          try {
            branch.interactions.element.focus();
          } catch (e) {// nothing
          }
        }
      };
      /**
       * Attempts to remove focus from the menu element.
       *
       * @ignore Exclude from docs
       * @param branch Menu item
       */


      ExportMenu.prototype.setBlur = function (branch) {
        if (branch.interactions) {
          try {
            branch.interactions.element.blur();
          } catch (e) {// nothing
          }
        }
      };
      /**
       * Hides the whole branch of menu.
       *
       * @param  branch  branch
       */


      ExportMenu.prototype.hideBranch = function (branch) {
        branch.element.style.display = "none";
      };
      /**
       * Show the branch of menu.
       *
       * @param  branch  branch
       */


      ExportMenu.prototype.showBranch = function (branch) {
        branch.element.style.display = "";
      };

      return ExportMenu;
    }(_utils_Validatable__WEBPACK_IMPORTED_MODULE_7__["Validatable"]); //# sourceMappingURL=ExportMenu.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js":
  /*!*************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js ***!
    \*************************************************************************************/

  /*! exports provided: DateFormatter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreFormattersDateFormatterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DateFormatter", function () {
      return DateFormatter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../formatters/TextFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Handles date and time formatting
     */

    /**
     * Handles date and time formatting.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting
     * @todo Better type casting of passed in date?
     * @todo Quarter support?
     * @todo When parsing named months make the search case-insensitive
     * @todo Escape a.m./p.m. properly when used in RegEx
     */


    var DateFormatter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DateFormatter, _super);
      /**
       * Constructor
       */

      function DateFormatter() {
        var _this = _super.call(this) || this;
        /**
         * Date format.
         */


        _this._dateFormat = "yyyy-MM-dd";
        /**
         * Input date format.
         */

        _this._inputDateFormat = "yyyy-MM-dd";
        /**
         * Assume UTC time zone.
         */

        _this._utc = false;
        /**
         * First day of week.
         *
         * 0 - Sunday
         * 1 - Monday
         *
         * Etc.
         */

        _this._firstDayOfWeek = 1;
        /**
         * A list of month names.
         */

        _this._months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        /**
         * A list of short month names.
         *
         * @param {Array<ShortMonthNames>}
         */

        _this._monthsShort = ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        /**
         * A list of weekday names.
         */

        _this._weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        /**
         * A list of short weekday names.
         */

        _this._weekdaysShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         */

        _this._outputFormat = "svg";
        /**
         * Should the first letter of the formatted date be capitalized?
         *
         * @default true
         */

        _this.capitalize = true;
        _this.className = "DateFormatter";

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(DateFormatter.prototype, "language", {
        /**
         * @return Language
         */
        get: function get() {
          return this._language;
        },

        /**
         * A reference to [[Language]] object.
         *
         * @param  value  Language
         */
        set: function set(value) {
          this._language = value;
          this.dateFormat = this._language.translate("_date");
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Formats the date value according to specified format.
       *
       * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting
       * @param source  Date value
       * @param format  Format
       * @return Formatted date string
       */

      DateFormatter.prototype.format = function (source, format) {
        // No language?
        if (!this.language) {
          if (this.sprite) {
            this.language = this.sprite.language;
          } else {
            this.language = new _utils_Language__WEBPACK_IMPORTED_MODULE_1__["Language"]();
          }
        } // No format passed in or it's empty


        if (typeof format === "undefined" || format === "") {
          format = this._dateFormat;
        } // Init return value


        var formatted; // Do casting if required
        // This will take care of timestamps as well as Date objects

        var date;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["isString"](source)) {
          // If it's a string, let's try parsing it using our own functionality
          date = this.parse(source);
        } else {
          date = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["anyToDate"](source);
        } // Is it a built-in format or Intl.DateTimeFormat


        if (format instanceof Object) {
          if (this.intlLocales) {
            return new Intl.DateTimeFormat(this.intlLocales, format).format(date);
          } else {
            return new Intl.DateTimeFormat(undefined, format).format(date);
          }
        } else {
          // Clean format
          format = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["cleanFormat"](format); // get format info (it will also deal with parser caching)

          var info = this.parseFormat(format); // Should we apply custom time zone?

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](this.timezoneOffset)) {
            date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);
          } // Check if it's a valid date


          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["isNumber"](date.getTime())) {
            return this.language.translate("Invalid date");
          } // Apply format


          formatted = this.applyFormat(date, info, this.language); // Capitalize

          if (this.capitalize) {
            formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());
          }
        } // We're done


        return formatted;
      };
      /**
       * Parses format into structured infromation.
       *
       * @param format Format template
       */


      DateFormatter.prototype.parseFormat = function (format) {
        // Check cache
        var cached = this.getCache(format);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](cached)) {
          return cached;
        } // Init format parse info holder


        var info = {
          "template": "",
          "parts": []
        }; // Let TextFormatter split into chunks

        var chunks = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().chunk(format, true);

        for (var i = 0; i < chunks.length; i++) {
          var chunk = chunks[i];

          if (chunk.type === "value") {
            // Just "Date"?
            if (chunk.text.match(/^date$/i) && _utils_Type__WEBPACK_IMPORTED_MODULE_7__["isString"](this._dateFormat)) {
              chunk.text = this._dateFormat;
            } // Find all possible parts


            var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g); // Found?

            if (matches) {
              // Populate template
              for (var x = 0; x < matches.length; x++) {
                info.parts.push(matches[x]);
                chunk.text = chunk.text.replace(matches[x], _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]);
              }
            }
          } // Apply to template


          info.template += chunk.text;
        } // Apply style formatting
        //info.template = getTextFormatter().format(info.template, this.outputFormat);
        // Save cache


        this.setCache(format, info);
        return info;
      };
      /**
       * Applies format to Date.
       *
       * @param date      Date object
       * @param info      Parsed format information
       * @param language  Language
       * @return Formatted date string
       */


      DateFormatter.prototype.applyFormat = function (date, info, language) {
        // Init return value
        var res = info.template; // Get values

        var fullYear,
            month,
            weekday,
            day,
            hours,
            minutes,
            seconds,
            milliseconds,
            offset = date.getTimezoneOffset(),
            timestamp = date.getTime();

        if (this.utc) {
          fullYear = date.getUTCFullYear();
          month = date.getUTCMonth();
          weekday = date.getUTCDay();
          day = date.getUTCDate();
          hours = date.getUTCHours();
          minutes = date.getUTCMinutes();
          seconds = date.getUTCSeconds();
          milliseconds = date.getUTCMilliseconds();
        } else {
          fullYear = date.getFullYear();
          month = date.getMonth();
          weekday = date.getDay();
          day = date.getDate();
          hours = date.getHours();
          minutes = date.getMinutes();
          seconds = date.getSeconds();
          milliseconds = date.getMilliseconds();
        } // Go through each part and format/replace it in template


        for (var i = 0, len = info.parts.length; i < len; i++) {
          var value = "";

          switch (info.parts[i]) {
            case "G":
              value = language.translate(fullYear < 0 ? "_era_bc" : "_era_ad");
              break;

            case "yyyy":
              value = Math.abs(fullYear).toString();

              if (fullYear < 0) {
                value += language.translate("_era_bc");
              }

              break;

            case "yyy":
            case "yy":
            case "y":
              value = Math.abs(fullYear).toString().substr(-info.parts[i].length);

              if (fullYear < 0) {
                value += language.translate("_era_bc");
              }

              break;

            case "YYYY":
            case "YYY":
            case "YY":
            case "Y":
              var week = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getWeek"](date);

              var year = fullYear;

              if (week == 1 && weekday > 1) {
                year--;
              }

              if (info.parts[i] == "YYYY") {
                value = Math.abs(year).toString();
              } else {
                value = Math.abs(year).toString().substr(-info.parts[i].length);
              }

              if (year < 0) {
                value += language.translate("_era_bc");
              }

              break;

            case "u":
              // @todo
              break;

            case "MMMMM":
              value = language.translate(this._months[month]).substr(0, 1);
              break;

            case "MMMM":
              value = language.translate(this._months[month]);
              break;

            case "MMM":
              value = language.translate(this._monthsShort[month]);
              break;

            case "MM":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](month + 1, 2, "0");
              break;

            case "M":
              value = (month + 1).toString();
              break;

            case "ww":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getWeek"](date, this.utc), 2, "0");
              break;

            case "w":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getWeek"](date, this.utc).toString();
              break;

            case "W":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getMonthWeek"](date, this.utc).toString();
              break;

            case "dd":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](day, 2, "0");
              break;

            case "d":
              value = day.toString();
              break;

            case "DD":
            case "DDD":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getYearDay"](date, this.utc).toString(), info.parts[i].length, "0");
              break;

            case "D":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getYearDay"](date, this.utc).toString();
              break;

            case "F":
              // @todo
              break;

            case "g":
              // @todo
              break;

            case "t":
              value = language.translateFunc("_dateOrd").call(this, day);
              break;

            case "E":
              value = (weekday || 7).toString();
              break;

            case "EE":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"]((weekday || 7).toString(), 2, "0");
              break;

            case "EEE":
            case "eee":
              value = language.translate(this._weekdaysShort[weekday]);
              break;

            case "EEEE":
            case "eeee":
              value = language.translate(this._weekdays[weekday]);
              break;

            case "EEEEE":
            case "eeeee":
              value = language.translate(this._weekdays[weekday]).substr(0, 1);
              break;

            case "e":
            case "ee":
              value = (weekday - this.firstDayOfWeek + 1).toString();

              if (info.parts[i] == "ee") {
                value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](value, 2, "0");
              }

              break;

            case "a":
              if (hours >= 12) {
                value = language.translate("PM");
              } else {
                value = language.translate("AM");
              }

              break;

            case "aa":
              if (hours >= 12) {
                value = language.translate("P.M.");
              } else {
                value = language.translate("A.M.");
              }

              break;

            case "aaa":
              if (hours >= 12) {
                value = language.translate("P");
              } else {
                value = language.translate("A");
              }

              break;

            case "h":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["get12Hours"](hours).toString();
              break;

            case "hh":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["get12Hours"](hours), 2, "0");
              break;

            case "H":
              value = hours.toString();
              break;

            case "HH":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](hours, 2, "0");
              break;

            case "K":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["get12Hours"](hours, 0).toString();
              break;

            case "KK":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["get12Hours"](hours, 0), 2, "0");
              break;

            case "k":
              value = (hours + 1).toString();
              break;

            case "kk":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](hours + 1, 2, "0");
              break;

            case "m":
              value = minutes.toString();
              break;

            case "mm":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](minutes, 2, "0");
              break;

            case "s":
              value = seconds.toString();
              break;

            case "ss":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](seconds, 2, "0");
              break;

            case "S":
            case "SS":
            case "SSS":
              value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();
              break;

            case "x":
              value = timestamp.toString();
              break;

            case "n":
            case "nn":
            case "nnn":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](milliseconds, info.parts[i].length, "0");
              break;

            case "z":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getTimeZone"](date, false, false, this.utc);
              break;

            case "zz":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getTimeZone"](date, true, false, this.utc);
              break;

            case "zzz":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getTimeZone"](date, false, true, this.utc);
              break;

            case "zzzz":
              value = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getTimeZone"](date, true, true, this.utc);
              break;

            case "Z":
            case "ZZ":
              var tz = Math.abs(offset) / 60;
              var tzh = Math.floor(tz);
              var tzm = tz * 60 - tzh * 60;

              if (this.utc) {
                tzh = 0;
                tzm = 0;
              }

              if (info.parts[i] == "Z") {
                value = "GMT";
                value += offset > 0 ? "-" : "+";
                value += _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](tzh, 2) + ":" + _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](tzm, 2);
              } else {
                value = offset > 0 ? "-" : "+";
                value += _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](tzh, 2) + _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["padString"](tzm, 2);
              }

              break;

            case "i":
              value = date.toISOString();
              break;

            case "I":
              value = date.toUTCString();
              break;
          }

          res = res.replace(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"], value);
        }

        return res;
      };
      /**
       * Parses any input value into Date object.
       *
       * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing
       * @param source  Source value
       * @param format  Source format
       * @return Date object
       */


      DateFormatter.prototype.parse = function (source, format) {
        // Format set?
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](format)) {
          format = this.inputDateFormat;
        } // Is it already a Date


        if (source instanceof Date) {
          return source;
        } // Is it a numeric timestamp


        if (typeof source === "number") {
          return new Date(source);
        } // No? Let's check if it's string, and try converting to it if nec


        if (typeof source !== "string") {
          source = source.toString();
        } // no language?


        if (!this.language) {
          if (this.sprite) {
            this.language = this.sprite.language;
          } else {
            this.language = new _utils_Language__WEBPACK_IMPORTED_MODULE_1__["Language"]();
          }
        } // Init return value


        var res; // Init RegEx for parsing

        var reg = ""; // Clean format

        format = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["cleanFormat"](format); // Clip format to length of the source string

        format = format.substr(0, source.length); // Parse format

        var info = this.parseFormat(format); // Init parsed items holder

        var parsedIndexes = {
          "year": -1,
          "year3": -1,
          "year2": -1,
          "year1": -1,
          "month": -1,
          "monthShort": -1,
          "monthLong": -1,
          "weekdayShort": -1,
          "weekdayLong": -1,
          "day": -1,
          "yearDay": -1,
          "week": -1,
          "hourBase0": -1,
          "hour12Base0": -1,
          "hourBase1": -1,
          "hour12Base1": -1,
          "minute": -1,
          "second": -1,
          "millisecond": -1,
          "millisecondDigits": -1,
          "am": -1,
          "zone": -1,
          "timestamp": -1,
          "iso": -1
        }; // Init values

        var resValues = {
          "year": 1970,
          "month": 0,
          "day": 1,
          "hour": 0,
          "minute": 0,
          "second": 0,
          "millisecond": 0,
          "timestamp": null,
          "offset": 0,
          "utc": this.utc
        }; // Index adjuster

        var indexAdjust = 0,
            index = 0; // Iterate through all of the parts

        for (var i = 0; i < info.parts.length; i++) {
          // Set current match index
          index = i + indexAdjust + 1;

          switch (info.parts[i]) {
            case "yyyy":
            case "YYYY":
              reg += "([0-9]{4})";
              parsedIndexes.year = index;
              break;

            case "yyy":
            case "YYY":
              reg += "([0-9]{3})";
              parsedIndexes.year3 = index;
              break;

            case "yy":
            case "YY":
              reg += "([0-9]{2})";
              parsedIndexes.year2 = index;
              break;

            case "y":
            case "Y":
              reg += "([0-9]{1})";
              parsedIndexes.year1 = index;
              break;

            case "MMMM":
              reg += "(" + this.getStringList(this._months).join("|") + ")";
              parsedIndexes.monthLong = index;
              break;

            case "MMM":
              reg += "(" + this.getStringList(this._monthsShort).join("|") + ")";
              parsedIndexes.monthShort = index;
              break;

            case "MM":
            case "M":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.month = index;
              break;

            case "ww":
            case "w":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.week = index;
              break;

            case "dd":
            case "d":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.day = index;
              break;

            case "DDD":
            case "DD":
            case "D":
              reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
              parsedIndexes.yearDay = index;
              break;

            case "dddd":
              reg += "(" + this.getStringList(this._weekdays).join("|") + ")";
              parsedIndexes.weekdayLong = index;
              break;

            case "ddd":
              reg += "(" + this.getStringList(this._weekdaysShort).join("|") + ")";
              parsedIndexes.weekdayShort = index;
              break;

            case "aaa":
            case "aa":
            case "a":
              // TODO: fix (escape regex)
              reg += "(" + this.getStringList(["AM", "PM", "A\.M\.", "P\.M\.", "A", "P"]).join("|") + ")";
              parsedIndexes.am = index;
              break;

            case "hh":
            case "h":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.hour12Base1 = index;
              break;

            case "HH":
            case "H":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.hourBase0 = index;
              break;

            case "KK":
            case "K":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.hour12Base0 = index;
              break;

            case "kk":
            case "k":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.hourBase1 = index;
              break;

            case "mm":
            case "m":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.minute = index;
              break;

            case "ss":
            case "s":
              reg += "([0-9]{2}|[0-9]{1})";
              parsedIndexes.second = index;
              break;

            case "SSS":
            case "SS":
            case "S":
              reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
              parsedIndexes.millisecond = index;
              parsedIndexes.millisecondDigits = info.parts[i].length;
              break;

            case "nnn":
            case "nn":
            case "n":
              reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
              parsedIndexes.millisecond = index;
              break;

            case "x":
              reg += "([0-9]{1,})";
              parsedIndexes.timestamp = index;
              break;

            case "Z":
              reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
              parsedIndexes.zone = index;
              break;

            case "ZZ":
              reg += "([\\-+]+[0-9]{2}[0-9]{2})";
              parsedIndexes.zone = index;
              break;

            case "i":
              reg += "([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})\.([0-9]{3})[0-9]*([Zz]?)";
              parsedIndexes.iso = index;
              indexAdjust += 7;
              break;

            case "G":
            case "YYYY":
            case "YYY":
            case "YY":
            case "Y":
            case "MMMMM":
            case "W":
            case "EEEEE":
            case "EEEE":
            case "EEE":
            case "EE":
            case "E":
            case "eeeee":
            case "eeee":
            case "eee":
            case "ee":
            case "e":
            case "zzzz":
            case "zzz":
            case "zz":
            case "z":
            case "t":
              // Ignore
              indexAdjust--;
              break;
          }

          reg += "[^0-9]*";
        } // Try matching


        var regex = new RegExp(reg);
        var matches = source.match(regex);

        if (matches) {
          // Populate the date object
          // Full year
          if (parsedIndexes.year > -1) {
            resValues.year = parseInt(matches[parsedIndexes.year]);
          } // 3-digit year


          if (parsedIndexes.year3 > -1) {
            var val = parseInt(matches[parsedIndexes.year3]);
            val += 1000;
            resValues.year = val;
          } // 2-digit year


          if (parsedIndexes.year2 > -1) {
            var val = parseInt(matches[parsedIndexes.year2]);

            if (val > 50) {
              val += 1000;
            } else {
              val += 2000;
            }

            resValues.year = val;
          } // 1-digit year


          if (parsedIndexes.year1 > -1) {
            var val = parseInt(matches[parsedIndexes.year1]);
            val = Math.floor(new Date().getFullYear() / 10) * 10 + val;
            resValues.year = val;
          } // Full month


          if (parsedIndexes.monthLong > -1) {
            resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);
          } // Short month


          if (parsedIndexes.monthShort > -1) {
            resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
          } // Numeric month


          if (parsedIndexes.month > -1) {
            resValues.month = parseInt(matches[parsedIndexes.month]) - 1;
          } // Weekday
          // @todo
          // Week


          if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {
            // We parse weeks ONLY if day is not explicitly set
            // TODO: this needs work
            // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
            resValues.month = 0;
            resValues.day = _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["getDayFromWeek"](parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);
          } // Day


          if (parsedIndexes.day > -1) {
            resValues.day = parseInt(matches[parsedIndexes.day]);
          } // Year day


          if (parsedIndexes.yearDay > -1) {
            resValues.month = 0;
            resValues.day = parseInt(matches[parsedIndexes.yearDay]);
          } // 24 Hour (0-23)


          if (parsedIndexes.hourBase0 > -1) {
            resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);
          } // 24 Hour (1-24)


          if (parsedIndexes.hourBase1 > -1) {
            resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;
          } // 12 Hour (0-11)


          if (parsedIndexes.hour12Base0 > -1) {
            var val = parseInt(matches[parsedIndexes.hour12Base0]);

            if (val == 11) {
              val = 0;
            }

            if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {
              val += 12;
            }

            resValues.hour = val;
          } // 12 Hour (1-12)


          if (parsedIndexes.hour12Base1 > -1) {
            var val = parseInt(matches[parsedIndexes.hour12Base1]);

            if (val == 12) {
              val = 0;
            }

            if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {
              val += 12;
            }

            resValues.hour = val;
          } // Minute


          if (parsedIndexes.minute > -1) {
            resValues.minute = parseInt(matches[parsedIndexes.minute]);
          } // Second


          if (parsedIndexes.second > -1) {
            resValues.second = parseInt(matches[parsedIndexes.second]);
          } // Millisecond


          if (parsedIndexes.millisecond > -1) {
            var val = parseInt(matches[parsedIndexes.millisecond]);

            if (parsedIndexes.millisecondDigits == 2) {
              val *= 10;
            } else if (parsedIndexes.millisecondDigits == 1) {
              val *= 100;
            }

            resValues.millisecond = val;
          } // Timestamp


          if (parsedIndexes.timestamp > -1) {
            resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);
          } // Adjust time zone


          if (parsedIndexes.zone > -1) {
            var zone = matches[parsedIndexes.zone].replace(/:/, "");

            var match = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["getValue"](zone.match(/([+\-]?)([0-9]{2})([0-9]{2})/));

            var dir = match[1];
            var hour = match[2];
            var minute = match[3];
            var offset = parseInt(hour) * 60 + parseInt(minute); // Adjust offset
            // Making it negative does not seem to make sense, but it's right
            // because of how JavaScript calculates GTM offsets

            if (dir == "+") {
              offset *= -1;
            } // Check the difference in offset


            var originalOffset = new Date().getTimezoneOffset();
            var diff = offset - originalOffset;
            resValues.offset = diff;
          } // ISO


          if (parsedIndexes.iso > -1) {
            if (matches[parsedIndexes.iso + 7] == "Z" || matches[parsedIndexes.iso + 7] == "z") {
              resValues.utc = true;
            }

            resValues.year = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 0]);
            resValues.month = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 1]) - 1;
            resValues.day = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 2]);
            resValues.hour = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 3]);
            resValues.minute = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 4]);
            resValues.second = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 5]);
            resValues.millisecond = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["toNumber"](matches[parsedIndexes.iso + 6]);
          } // Create Date object


          if (resValues.utc) {
            res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));
          } else {
            res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond);
          }
        } else {
          // Didn't match anything
          // Let's try dropping it into Date constructor and hope for the best
          res = new Date(source);
        }

        return res;
      };
      /**
       * Resolves month name (i.e. "December") into a month number (11).
       *
       * @param value  Month name
       * @return Month number
       */


      DateFormatter.prototype.resolveMonth = function (value) {
        // Let's try English first
        var month = this._months.indexOf(value);

        if (month > -1) {
          return month;
        } // Try the translation


        if (this.language && !this.language.isDefault()) {
          month = this.language.translateAll(this._months).indexOf(value);

          if (month > -1) {
            return month;
          }
        }

        return 0;
      };
      /**
       * Resolves short month name (i.e. "Dec") into a month number.
       *
       * @param value  Short month name
       * @return Month number
       */


      DateFormatter.prototype.resolveShortMonth = function (value) {
        // Let's try English first
        var month = this._monthsShort.indexOf(value);

        if (month > -1) {
          return month;
        } // Try the translation


        if (this.language && !this.language.isDefault()) {
          month = this.language.translateAll(this._monthsShort).indexOf(value);

          if (month > -1) {
            return month;
          }
        }

        return 0;
      };
      /**
       * Checks if passed in string represents AM/PM notation in many of its
       * versions.
       *
       * @param value  Source string
       * @return Is it AM/PM?
       */


      DateFormatter.prototype.isAm = function (value) {
        var list = this.getStringList(["AM", "A.M.", "A"]);
        return list.indexOf(value.toUpperCase()) > -1;
      };
      /**
       * Invalidates related [[Sprite]] causing it to redraw.
       */


      DateFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
          this.sprite.invalidate();
        }
      };
      /**
       * Translates list of strings.
       *
       * @param list  Source strings
       * @return Translated strings
       */


      DateFormatter.prototype.getStringList = function (list) {
        var res = [];

        for (var i = 0; i < list.length; i++) {
          res.push(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["escapeForRgex"](list[i])); // translate?

          if (this.language && !this.language.isDefault()) {
            res.push(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["escapeForRgex"](this.language.translate(list[i])));
          }
        }

        return res;
      };

      Object.defineProperty(DateFormatter.prototype, "dateFormat", {
        /**
         * @return Date format
         */
        get: function get() {
          return this._dateFormat;
        },

        /**
         * Date format to use.
         *
         * If format is not supplied in-line in the string, this setting will be
         * used.
         *
         * @default "yyyy-MM-dd"
         * @param value Date format
         */
        set: function set(value) {
          this._dateFormat = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DateFormatter.prototype, "inputDateFormat", {
        /**
         * @return Date format
         */
        get: function get() {
          return this._inputDateFormat;
        },

        /**
         * Date format to use when parsing dates.
         *
         * @default "yyyy-MM-dd"
         * @param value Date format
         */
        set: function set(value) {
          this._inputDateFormat = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DateFormatter.prototype, "intlLocales", {
        /**
         * @return Date format
         */
        get: function get() {
          return this._intlLocales;
        },

        /**
         * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.
         *
         * @param value Locales
         */
        set: function set(value) {
          this._intlLocales = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DateFormatter.prototype, "utc", {
        /**
         * @return Use UTC?
         */
        get: function get() {
          return this._utc;
        },

        /**
         * Should formatter use UTC functions?
         *
         * If UTC is used, all date/time values will be independent on client's
         * time zone.
         *
         * @param value Use UTC?
         */
        set: function set(value) {
          this._utc = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DateFormatter.prototype, "timezoneOffset", {
        /**
         * @return Offset (minutes)
         */
        get: function get() {
          return this._timezoneOffset;
        },

        /**
         * If set, will format date/time in specific time zone.
         *
         * The value is a number of minutes from target time zone to UTC.
         *
         * E.g. `300` will recalculate Dates in "GMT-5" time zone.
         *
         * @param  value  Offset (minutes)
         */
        set: function set(value) {
          if (this._timezoneOffset != value) {
            this._timezoneOffset = value;
            this.invalidateSprite();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DateFormatter.prototype, "firstDayOfWeek", {
        /**
         * @return First day of week
         */
        get: function get() {
          return this._firstDayOfWeek;
        },

        /**
         * First day of the week:
         *
         * * 0 - Sunday
         * * 1 - Monday
         * * 2 - Tuesday
         *
         * Etc.
         *
         * @param value First day of week
         */
        set: function set(value) {
          this._firstDayOfWeek = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DateFormatter.prototype, "outputFormat", {
        /**
         * @ignore Exclude from docs
         * @return Format
         */
        get: function get() {
          return this._outputFormat;
        },

        /**
         * Output format for the formatted date.
         *
         * @ignore Exclude from docs
         * @param value  Format
         */
        set: function set(value) {
          this._outputFormat = value.toLowerCase();
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      return DateFormatter;
    }(_Base__WEBPACK_IMPORTED_MODULE_2__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["DateFormatter"] = DateFormatter; //# sourceMappingURL=DateFormatter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js":
  /*!*****************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js ***!
    \*****************************************************************************************/

  /*! exports provided: DurationFormatter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreFormattersDurationFormatterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DurationFormatter", function () {
      return DurationFormatter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../formatters/TextFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Duration formatting functionality.
     */

    /**
     * DurationFormatter class. Formats numbers as durations.
     *
     * `1000` as `16:40`
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
     */


    var DurationFormatter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DurationFormatter, _super);
      /**
       * Constructor
       */

      function DurationFormatter() {
        var _this = _super.call(this) || this;
        /**
         * A base value for negative numbers. Will treat all numbers below this value
         * as negative numbers.
         */


        _this._negativeBase = 0;
        /**
         * A base unit to consider values are in.
         *
         * @default "s"
         */

        _this._baseUnit = "second";
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         */

        _this._outputFormat = "svg";
        /**
         * How many milliseconds each unit represents.
         */

        _this._unitValues = {
          "millisecond": 1,
          "second": 1000,
          "minute": 60000,
          "hour": 3600000,
          "day": 86400000,
          "week": 604800000,
          "month": 2592000000,
          "year": 31536000000
        };
        /**
         * Collection of aliases for units.
         */

        _this._unitAliases = {
          "Y": "y",
          "D": "d",
          "H": "h",
          "K": "h",
          "k": "h",
          "n": "S"
        };
        _this.className = "DurationFormatter";

        _this.applyTheme();

        return _this;
      }
      /**
       * Formats the number according as duration.
       *
       * For example `1000` (base unit seconds) would be converted to `16:40` as in
       * 16 minutes and 40 seconds.
       *
       * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting
       * @param value   Value to format
       * @param format  Format to apply
       * @param base    Override base unit
       * @return Formatted number
       */


      DurationFormatter.prototype.format = function (value, format, base) {
        // no language?
        if (!this.language) {
          if (this.sprite) {
            this.language = this.sprite.language;
          } else {
            this.language = new _utils_Language__WEBPACK_IMPORTED_MODULE_1__["Language"]();
          }
        } // no base unit?


        var baseUnit = base || this._baseUnit; // no format passed in or empty

        if (typeof format === "undefined" || format === "") {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this.durationFormat)) {
            format = this.durationFormat;
          } else {
            format = this.getFormat(_utils_Type__WEBPACK_IMPORTED_MODULE_8__["toNumber"](value), null, baseUnit);
          }
        } // Clean format


        format = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["cleanFormat"](format); // get format info (it will also deal with parser caching)

        var info = this.parseFormat(format, baseUnit); // cast to number just in case
        // TODO: maybe use better casting

        var source = Number(value); // format and replace the number

        var details;

        if (source > this._negativeBase) {
          details = info.positive;
        } else if (source < this._negativeBase) {
          details = info.negative;
        } else {
          details = info.zero;
        } // Format


        var formatted = this.applyFormat(source, details); // Apply color?

        if (details.color !== "") {
          if (this._outputFormat === "svg") {
            formatted = "<tspan fill='" + details.color + "'>" + formatted + "</tspan>";
          } else if (this._outputFormat === "html") {
            formatted = "<span style='color: " + details.color + ";'>" + formatted + "</span>";
          }
        }

        return formatted;
      };
      /**
       * Parses supplied format into structured object which can be used to format
       * the number.
       *
       * @param format  Format string, i.e. "#,###.00"
       * @param base    Override base unit
       * @return Parsed information
       */


      DurationFormatter.prototype.parseFormat = function (format, base) {
        var _this = this; // Check cache


        var cached = this.getCache(format);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](cached)) {
          return cached;
        } // no base unit?


        var baseUnit = base || this._baseUnit; // Initialize duration parsing info

        var info = {
          "positive": {
            "color": "",
            "template": "",
            "parts": [],
            "source": "",
            "baseUnit": baseUnit,
            "parsed": false,
            "absolute": false
          },
          "negative": {
            "color": "",
            "template": "",
            "parts": [],
            "source": "",
            "baseUnit": baseUnit,
            "parsed": false,
            "absolute": false
          },
          "zero": {
            "color": "",
            "template": "",
            "parts": [],
            "source": "",
            "baseUnit": baseUnit,
            "parsed": false,
            "absolute": false
          }
        }; // Escape double vertical bars (that mean display one vertical bar)

        format = format.replace("||", _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER2"]); // Split it up and deal with different formats

        var parts = format.split("|");
        info.positive.source = parts[0];

        if (typeof parts[2] === "undefined") {
          info.zero = info.positive;
        } else {
          info.zero.source = parts[2];
        }

        if (typeof parts[1] === "undefined") {
          info.negative = info.positive;
        } else {
          info.negative.source = parts[1];
        } // Parse each


        _utils_Object__WEBPACK_IMPORTED_MODULE_6__["each"](info, function (part, item) {
          // Already parsed
          if (item.parsed) {
            return;
          } // Check cached


          if (typeof _this.getCache(item.source) !== "undefined") {
            info[part] = _this.getCache(item.source);
            return;
          } // Begin parsing


          var partFormat = item.source; // Check for [] directives

          var dirs = [];
          dirs = item.source.match(/^\[([^\]]*)\]/);

          if (dirs && dirs.length && dirs[0] !== "") {
            partFormat = item.source.substr(dirs[0].length);
            item.color = dirs[1];
          } // Let TextFormatter split into chunks


          var chunks = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().chunk(partFormat, true);

          for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i]; // replace back double vertical bar

            chunk.text = chunk.text.replace(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER2"], "|");

            if (chunk.type === "value") {
              // Just "Duration"?
              // if (chunk.text.toLowerCase() === "duration") {
              // 	chunk.text = durationFormat;
              // }
              // Check for "a" (absolute) modifier
              if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                item.absolute = true;
                chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
              } // Find all possible parts


              var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);

              if (matches) {
                // Populate template
                for (var x = 0; x < matches.length; x++) {
                  // Is it an alias?
                  if (!_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](matches[x])) {
                    matches[x] = _this._unitAliases[matches[x]];
                  }

                  item.parts.push(matches[x]);
                  chunk.text = chunk.text.replace(matches[x], _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]);
                }
              }
            } // Apply to template


            item.template += chunk.text;
          } // Apply style formatting
          //item.template = getTextFormatter().format(item.template, this.outputFormat);
          // Save cache


          _this.setCache(item.source, item); // Mark this as parsed


          item.parsed = true;
        }); // Save cache (the whole thing)


        this.setCache(format, info);
        return info;
      };
      /**
       * Applies parsed format to a numeric value.
       *
       * @param value    Value
       * @param details  Parsed format as returned by {parseFormat}
       * @return Formatted duration
       */


      DurationFormatter.prototype.applyFormat = function (value, details) {
        // Use absolute values
        var negative = !details.absolute && value < this._negativeBase;
        value = Math.abs(value); // Recalculate to milliseconds

        var tstamp = this.toTimeStamp(value, details.baseUnit); // Init return value

        var res = details.template; // Iterate through duration parts

        for (var i = 0, len = details.parts.length; i < len; i++) {
          // Gather the part
          var part = details.parts[i];
          var unit = this.toTimeUnit(part.substr(0, 1));
          var digits = part.length; // Calculate current unit value

          var ints = Math.floor(tstamp / this._unitValues[unit]);
          res = res.replace(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"], _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["padString"](ints, digits, "0")); // Reduce timestamp

          tstamp -= ints * this._unitValues[unit];
        } // Reapply negative sign


        if (negative) {
          res = "-" + res;
        }

        return res;
      };
      /**
       * Converts numeric value to timestamp in milliseconds.
       *
       * @param value     A source value
       * @param baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
       * @return Value representation as a timestamp in milliseconds
       */


      DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {
        return value * this._unitValues[baseUnit];
      };

      DurationFormatter.prototype.toTimeUnit = function (code) {
        switch (code) {
          case "S":
            return "millisecond";

          case "s":
            return "second";

          case "m":
            return "minute";

          case "h":
            return "hour";

          case "d":
            return "day";

          case "w":
            return "week";

          case "M":
            return "month";

          case "y":
            return "year";
        }

        ;
      };
      /**
       * Invalidates the parent [[Sprite]] object.
       */


      DurationFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
          this.sprite.invalidate();
        }
      };

      Object.defineProperty(DurationFormatter.prototype, "baseUnit", {
        /**
         * @return Base unit
         */
        get: function get() {
          return this._baseUnit;
        },

        /**
         * Base unit the values are in.
         *
         * A base unit will be used to recalculate the numeric value to millisecond
         * timestamps.
         *
         * Available options:
         *
         * * "millisecond"
         * * "second"
         * * "minute"
         * * "hour"
         * * "day"
         * * "week"
         * * "month"
         * * "year"
         *
         * @default "s"
         * @param baseUnit  A base unit
         */
        set: function set(baseUnit) {
          this._baseUnit = baseUnit;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DurationFormatter.prototype, "outputFormat", {
        /**
         * Getter for output format.
         *
         * @ignore Exclude from docs
         * @return Output format
         */
        get: function get() {
          return this._outputFormat;
        },

        /**
         * Setter for output format: "svg" or "html.
         *
         * @ignore Exclude from docs
         * @param value  Output format
         */
        set: function set(outputFormat) {
          this._outputFormat = outputFormat.toLowerCase();
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns appropriate default format for the value.
       *
       * If `maxValue` is sepcified, it will use that value to determine the time
       * unit for the format.
       *
       * For example if your `baseUnit` is `"second"` and you pass in `10`, you
       * will get `"10"`.
       *
       * However, you might want it to be formatted in the context of bigger scale,
       * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all
       * values, including small ones will use format with minutes, e.g.:
       * `00:10`, `00:50`, `12: 30`, etc.
       *
       * @param value     Value to format
       * @param maxValue  Maximum value to be used to determine format
       * @param baseUnit  Base unit of the value
       * @return Format
       */

      DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {
        // Is format override set?
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this.durationFormat)) {
          return this.durationFormat;
        } // Get base unit


        if (!baseUnit) {
          baseUnit = this.baseUnit;
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](maxValue) && value != maxValue) {
          value = Math.abs(value);
          maxValue = Math.abs(maxValue);
          var maxUnit = this.getValueUnit(_utils_Math__WEBPACK_IMPORTED_MODULE_9__["max"](value, maxValue), baseUnit); //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);
          //console.log(maxUnit, diffUnit);

          return this.durationFormats[baseUnit][maxUnit];
        } else {
          var unit = this.getValueUnit(value, baseUnit);
          return this.durationFormats[baseUnit][unit];
        }
      };
      /**
       * Returns value's closest denominator time unit, e.g 100 seconds is
       * `"minute"`, while 59 seconds would still be `second`.
       *
       * @param value     Source duration value
       * @param baseUnit  Base unit
       * @return Denominator
       */


      DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {
        // Get base unit
        if (!baseUnit) {
          baseUnit = this.baseUnit;
        } // Convert to milliseconds


        var currentUnit;
        var ms = this.getMilliseconds(value, baseUnit);

        _utils_Object__WEBPACK_IMPORTED_MODULE_6__["eachContinue"](this._unitValues, function (key, val) {
          if (key == baseUnit || currentUnit) {
            var num = ms / val;

            if (num <= 1) {
              if (!currentUnit) {
                currentUnit = key;
              }

              return false;
            }

            currentUnit = key;
          }

          return true;
        });

        return currentUnit;
      };
      /**
       * Converts value to milliseconds according to `baseUnit`.
       *
       * @param value     Source duration value
       * @param baseUnit  Base unit
       * @return Value in milliseconds
       */


      DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {
        // Get base unit
        if (!baseUnit) {
          baseUnit = this.baseUnit;
        }

        return value * this._unitValues[baseUnit];
      };

      Object.defineProperty(DurationFormatter.prototype, "durationFormat", {
        /**
         * @return Format
         */
        get: function get() {
          return this._durationFormat;
        },

        /**
         * If set, this format will be used instead of the one determined dynamically
         * based on the basedUnit and range of values.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes
         * @param value  Format
         */
        set: function set(value) {
          if (this._durationFormat != value) {
            this._durationFormat = value;
            this.invalidateSprite();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DurationFormatter.prototype, "durationFormats", {
        /**
         * @return Formats
         */
        get: function get() {
          if (!this._durationFormats) {
            this._durationFormats = {
              "millisecond": {
                "millisecond": this.language.translate("_duration_millisecond"),
                "second": this.language.translate("_duration_millisecond_second"),
                "minute": this.language.translate("_duration_millisecond_minute"),
                "hour": this.language.translate("_duration_millisecond_hour"),
                "day": this.language.translate("_duration_millisecond_day"),
                "week": this.language.translate("_duration_millisecond_week"),
                "month": this.language.translate("_duration_millisecond_month"),
                "year": this.language.translate("_duration_millisecond_year")
              },
              "second": {
                "second": this.language.translate("_duration_second"),
                "minute": this.language.translate("_duration_second_minute"),
                "hour": this.language.translate("_duration_second_hour"),
                "day": this.language.translate("_duration_second_day"),
                "week": this.language.translate("_duration_second_week"),
                "month": this.language.translate("_duration_second_month"),
                "year": this.language.translate("_duration_second_year")
              },
              "minute": {
                "minute": this.language.translate("_duration_minute"),
                "hour": this.language.translate("_duration_minute_hour"),
                "day": this.language.translate("_duration_minute_day"),
                "week": this.language.translate("_duration_minute_week"),
                "month": this.language.translate("_duration_minute_month"),
                "year": this.language.translate("_duration_minute_year")
              },
              "hour": {
                "hour": this.language.translate("_duration_hour"),
                "day": this.language.translate("_duration_hour_day"),
                "week": this.language.translate("_duration_hour_week"),
                "month": this.language.translate("_duration_hour_month"),
                "year": this.language.translate("_duration_hour_year")
              },
              "day": {
                "day": this.language.translate("_duration_day"),
                "week": this.language.translate("_duration_day_week"),
                "month": this.language.translate("_duration_day_month"),
                "year": this.language.translate("_duration_day_year")
              },
              "week": {
                "week": this.language.translate("_duration_week"),
                "month": this.language.translate("_duration_week_month"),
                "year": this.language.translate("_duration_week_year")
              },
              "month": {
                "month": this.language.translate("_duration_month"),
                "year": this.language.translate("_duration_month_year")
              },
              "year": {
                "year": this.language.translate("_duration_year")
              }
            };
          }

          return this._durationFormats;
        },

        /**
         * Duration formats for various combination of base units.
         *
         * @param value  Formats
         */
        set: function set(value) {
          this._durationFormats = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      return DurationFormatter;
    }(_Base__WEBPACK_IMPORTED_MODULE_2__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["DurationFormatter"] = DurationFormatter; //# sourceMappingURL=DurationFormatter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js":
  /*!***************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js ***!
    \***************************************************************************************/

  /*! exports provided: NumberFormatter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreFormattersNumberFormatterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NumberFormatter", function () {
      return NumberFormatter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _utils_Language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../formatters/TextFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * Number formatting-related functionality.
     */

    /**
     * NumberFormatter class. Formats numbers according to specified formats.
     *
     * @todo Apply translations to suffixes/prefixes
     */


    var NumberFormatter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(NumberFormatter, _super);
      /**
       * Constructor
       */

      function NumberFormatter() {
        var _this = _super.call(this) || this;
        /**
         * A base value for negative numbers. Will treat all numbers below this value
         * as negative numbers.
         */


        _this._negativeBase = 0;
        /**
         * Holds number format.
         *
         * @default #,###.#####
         */

        _this._numberFormat = "#,###.#####";
        /**
         * Output format to produce. If the format calls for applying color to the
         * formatted value, this setting will determine what markup to use: SVG or
         * HTML.
         *
         * Available options: svg, html.
         *
         * @default "svg"
         */

        _this._outputFormat = "svg";
        /**
         * Any number smaller than this will be considered "small" number, which will
         * trigger special formatting if "a" format modifier is used.
         */

        _this._smallNumberThreshold = 1.00;
        _this.className = "NumberFormatter";

        _this.applyTheme();

        return _this;
      }

      NumberFormatter.prototype.dispose = function () {
        _super.prototype.dispose.call(this);

        if (this.language) {
          this.language.dispose();
        }
      };

      Object.defineProperty(NumberFormatter.prototype, "language", {
        /**
         * @return Language
         */
        get: function get() {
          if (!this._language) {
            if (this.sprite) {
              this._language = this.sprite.language;
            } else {
              this._language = new _utils_Language__WEBPACK_IMPORTED_MODULE_1__["Language"]();
            }
          }

          return this._language;
        },

        /**
         * A reference to [[Language]] instance.
         *
         * Formatter will use language to translate various items, like number
         * suffixes, etc.
         *
         * @param value  Language
         */
        set: function set(value) {
          this._language = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Formats the number according to specific format.
       *
       * @param value   Value to format
       * @param format  Format to apply
       * @return Formatted number
       */

      NumberFormatter.prototype.format = function (value, format) {
        // no format passed in or "Number"
        if (typeof format === "undefined" || _utils_Type__WEBPACK_IMPORTED_MODULE_8__["isString"](format) && format.toLowerCase() === "number") {
          format = this._numberFormat;
        } // Init return value


        var formatted; // Cast to number just in case
        // TODO: maybe use better casting

        var source = Number(value); // Is it a built-in format or Intl.NumberFormatOptions

        if (format instanceof Object) {
          if (this.intlLocales) {
            return new Intl.NumberFormat(this.intlLocales, format).format(source);
          } else {
            return new Intl.NumberFormat(undefined, format).format(source);
          }
        } else {
          // Clean format
          format = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["cleanFormat"](format); // Get format info (it will also deal with parser caching)

          var info = this.parseFormat(format, this.language); // format and replace the number

          var details = void 0;

          if (source > this._negativeBase) {
            details = info.positive;
          } else if (source < this._negativeBase) {
            details = info.negative;
          } else {
            details = info.zero;
          } // Format


          formatted = details.template.split(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]).join(this.applyFormat(source, details));
        }

        return formatted;
      };
      /**
       * Parses supplied format into structured object which can be used to format
       * the number.
       *
       * @param format Format string, i.e. "#,###.00"
       * @param language Language
       */


      NumberFormatter.prototype.parseFormat = function (format, language) {
        var _this = this; // Check cache


        var cached = this.getCache(format);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](cached)) {
          return cached;
        } // init format parse info holder


        var info = {
          "positive": {
            "thousands": {
              "active": -1,
              "passive": -1,
              "interval": -1,
              "separator": language.translateEmpty("_thousandSeparator")
            },
            "decimals": {
              "active": -1,
              "passive": -1,
              "separator": language.translateEmpty("_decimalSeparator")
            },
            "template": "",
            "source": "",
            "parsed": false
          },
          "negative": {
            "thousands": {
              "active": -1,
              "passive": -1,
              "interval": -1,
              "separator": language.translateEmpty("_thousandSeparator")
            },
            "decimals": {
              "active": -1,
              "passive": -1,
              "separator": language.translateEmpty("_decimalSeparator")
            },
            "template": "",
            "source": "",
            "parsed": false
          },
          "zero": {
            "thousands": {
              "active": -1,
              "passive": -1,
              "interval": -1,
              "separator": language.translateEmpty("_thousandSeparator")
            },
            "decimals": {
              "active": -1,
              "passive": -1,
              "separator": language.translateEmpty("_decimalSeparator")
            },
            "template": "",
            "source": "",
            "parsed": false
          }
        }; // Escape double vertical bars (that mean display one vertical bar)

        format = format.replace("||", _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER2"]); // Split it up and deal with different formats

        var parts = format.split("|");
        info.positive.source = parts[0];

        if (typeof parts[2] === "undefined") {
          info.zero = info.positive;
        } else {
          info.zero.source = parts[2];
        }

        if (typeof parts[1] === "undefined") {
          info.negative = info.positive;
        } else {
          info.negative.source = parts[1];
        } // Parse each


        _utils_Object__WEBPACK_IMPORTED_MODULE_6__["each"](info, function (part, item) {
          // Already parsed
          if (item.parsed) {
            return;
          } // Check cached


          if (typeof _this.getCache(item.source) !== "undefined") {
            info[part] = _this.getCache(item.source);
            return;
          } // Begin parsing


          var partFormat = item.source; // Just "Number"?

          if (partFormat.toLowerCase() === "number") {
            partFormat = _utils_Type__WEBPACK_IMPORTED_MODULE_8__["isString"](_this._numberFormat) ? _this._numberFormat : "#,###.#####";
          } // Let TextFormatter split into chunks


          var chunks = Object(_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_3__["getTextFormatter"])().chunk(partFormat, true);

          for (var i = 0; i < chunks.length; i++) {
            var chunk = chunks[i]; // replace back double vertical bar

            chunk.text = chunk.text.replace(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER2"], "|");

            if (chunk.type === "value") {
              // Parse format
              // Look for codes
              var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);

              if (matches) {
                if (matches === null || matches[0] === "") {
                  // no codes here - assume string
                  // nothing to do here
                  item.template += chunk.text;
                } else {
                  // look for the format modifiers at the end
                  var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);

                  if (mods) {
                    item.mod = mods[0].toLowerCase();
                    item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;
                  } // break the format up


                  var a = matches[0].split("."); // Deal with thousands

                  if (a[0] === "") {// No directives for thousands
                    // Leave default settings (no formatting)
                  } else {
                    // Counts
                    item.thousands.active = (a[0].match(/0/g) || []).length;
                    item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active; // Separator interval

                    var b = a[0].split(",");

                    if (b.length === 1) {// No thousands separators
                      // Do nothing
                    } else {
                      // Use length fo the last chunk as thousands length
                      item.thousands.interval = _utils_Type__WEBPACK_IMPORTED_MODULE_8__["getValue"](b.pop()).length;

                      if (item.thousands.interval === 0) {
                        item.thousands.interval = -1;
                      }
                    }
                  } // Deal with decimals


                  if (typeof a[1] === "undefined") {// No directives for decimals
                    // Leave at defaults (no formatting)
                  } else {
                    // Counts
                    item.decimals.active = (a[1].match(/0/g) || []).length;
                    item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                  } // Add special code to template


                  item.template += chunk.text.split(matches[0]).join(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]);
                }
              }
            } else {
              // Quoted string - take it as it is
              item.template += chunk.text;
            }
          } // Apply style formatting
          //item.template = getTextFormatter().format(item.template, this.outputFormat);
          // Save cache


          _this.setCache(item.source, item); // Mark this as parsed


          item.parsed = true;
        }); // Save cache (the whole thing)


        this.setCache(format, info);
        return info;
      };
      /**
       * Applies parsed format to a numeric value.
       *
       * @param value    Value
       * @param details  Parsed format as returned by parseFormat()
       * @return Formatted number
       */


      NumberFormatter.prototype.applyFormat = function (value, details) {
        // Use absolute values
        var negative = value < 0;
        value = Math.abs(value); // Recalculate according to modifier

        var prefix = "",
            suffix = "";
        var mods = details.mod ? details.mod.split("") : [];

        if (mods.indexOf("b") !== -1) {
          var a_1 = this.applyPrefix(value, this.bytePrefixes, mods.indexOf("!") !== -1);
          value = a_1[0];
          prefix = a_1[1];
          suffix = a_1[2];

          if (details.modSpacing) {
            suffix = " " + suffix;
          }
        } else if (mods.indexOf("a") !== -1) {
          var a_2 = this.applyPrefix(value, value < this.smallNumberThreshold ? this.smallNumberPrefixes : this.bigNumberPrefixes, mods.indexOf("!") !== -1);
          value = a_2[0];
          prefix = a_2[1];
          suffix = a_2[2];

          if (details.modSpacing) {
            suffix = " " + suffix;
          }
        } else if (mods.indexOf("%") !== -1) {
          var ol = _utils_Math__WEBPACK_IMPORTED_MODULE_9__["min"](value.toString().length + 2, 21);

          value *= 100;
          value = parseFloat(value.toPrecision(ol));
          suffix = "%";
        } else if (mods.indexOf("‰") !== -1) {
          var ol = _utils_Math__WEBPACK_IMPORTED_MODULE_9__["min"](value.toString().length + 3, 21);

          value *= 1000;
          value = parseFloat(value.toPrecision(ol));
          suffix = "‰";
        } // Round to passive


        if (mods.indexOf("e") !== -1) {
          // convert the value to exponential
          var exp = void 0;

          if (details.decimals.passive >= 0) {
            exp = value.toExponential(details.decimals.passive).split("e");
          } else {
            exp = value.toExponential().split("e");
          }

          value = Number(exp[0]);
          suffix = "e" + exp[1];

          if (details.modSpacing) {
            suffix = " " + suffix;
          }
        } else if (details.decimals.passive === 0) {
          value = Math.round(value);
        } else if (details.decimals.passive > 0) {
          var d = Math.pow(10, details.decimals.passive);
          value = Math.round(value * d) / d;
        } // Init return value


        var res = ""; // Calc integer and decimal parts

        var a = _utils_Utils__WEBPACK_IMPORTED_MODULE_7__["numberToString"](value).split("."); // Format integers


        var ints = a[0]; // Pad integers to active length

        if (ints.length < details.thousands.active) {
          ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
        } // Insert thousands separators


        if (details.thousands.interval > 0) {
          var ip = [];
          var intsr = ints.split("").reverse().join("");

          for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {
            var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");

            if (c !== "") {
              ip.unshift(c);
            }
          }

          ints = ip.join(details.thousands.separator);
        } // Add integers


        res += ints; // Add decimals

        if (a.length === 1) {
          a.push("");
        }

        var decs = a[1]; // Fill zeros?

        if (decs.length < details.decimals.active) {
          decs += Array(details.decimals.active - decs.length + 1).join("0");
        }

        if (decs !== "") {
          res += details.decimals.separator + decs;
        } // Can't have empty return value


        if (res === "") {
          res = "0";
        } // Add minus sign back


        if (value !== 0 && negative && mods.indexOf("s") === -1) {
          res = "-" + res;
        } // Add suffixes/prefixes


        if (prefix) {
          res = prefix + res;
        }

        if (suffix) {
          res += suffix;
        }

        return res;
      };
      /**
       * Chooses appropriate prefix and suffix based on the passed in rules.
       *
       * @param  value     Value
       * @param  prefixes  Prefix array
       * @param  force     Force application of a first prefix (@sice 4.5.4)
       * @return Result
       */


      NumberFormatter.prototype.applyPrefix = function (value, prefixes, force) {
        if (force === void 0) {
          force = false;
        }

        var newvalue = value;
        var prefix = "";
        var suffix = "";
        var applied = false;
        var k = 1;

        for (var i = 0, len = prefixes.length; i < len; i++) {
          if (prefixes[i].number <= value) {
            if (prefixes[i].number === 0) {
              newvalue = 0;
            } else {
              newvalue = value / prefixes[i].number;
              k = prefixes[i].number;
            }

            prefix = prefixes[i].prefix;
            suffix = prefixes[i].suffix;
            applied = true;
          }
        }

        if (!applied && force && prefixes.length && value != 0) {
          // Prefix was not applied. Use the first prefix.
          newvalue = value / prefixes[0].number;
          prefix = prefixes[0].prefix;
          suffix = prefixes[0].suffix;
          applied = true;
        }

        if (applied) {
          newvalue = parseFloat(newvalue.toPrecision(_utils_Math__WEBPACK_IMPORTED_MODULE_9__["min"](k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, "").length, 21)));
        }

        return [newvalue, prefix, suffix];
      };
      /**
       * Invalidates the parent [[Sprite]] object.
       */


      NumberFormatter.prototype.invalidateSprite = function () {
        if (this.sprite) {
          this.sprite.invalidate();
        }
      };

      Object.defineProperty(NumberFormatter.prototype, "numberFormat", {
        /**
         * @return A format to use for number formatting
         */
        get: function get() {
          return this._numberFormat;
        },

        /**
         * Number format.
         *
         * @default "#,###.#####"
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param format  A format to use for number formatting
         */
        set: function set(format) {
          this._numberFormat = format;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "intlLocales", {
        /**
         * @return Date format
         */
        get: function get() {
          return this._intlLocales;
        },

        /**
         * Locales if you are using date formats in `Intl.NumberFormatOptions` syntax.
         *
         * @see (@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) about using Intl for number formatting
         * @param value Locales
         */
        set: function set(value) {
          this._intlLocales = value;
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "negativeBase", {
        /**
         * @return A format to use for number formatting
         */
        get: function get() {
          return this._negativeBase;
        },

        /**
         * Negative base for negative numbers.
         *
         * @default 0
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param format  A format to use for number formatting
         */
        set: function set(value) {
          this._negativeBase = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "bigNumberPrefixes", {
        /**
         * @return Prefixes for big numbers
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this._bigNumberPrefixes)) {
            this._bigNumberPrefixes = [{
              "number": 1e+3,
              "suffix": this.language.translate("_big_number_suffix_3")
            }, {
              "number": 1e+6,
              "suffix": this.language.translate("_big_number_suffix_6")
            }, {
              "number": 1e+9,
              "suffix": this.language.translate("_big_number_suffix_9")
            }, {
              "number": 1e+12,
              "suffix": this.language.translate("_big_number_suffix_12")
            }, {
              "number": 1e+15,
              "suffix": this.language.translate("_big_number_suffix_15")
            }, {
              "number": 1e+18,
              "suffix": this.language.translate("_big_number_suffix_18")
            }, {
              "number": 1e+21,
              "suffix": this.language.translate("_big_number_suffix_21")
            }, {
              "number": 1e+24,
              "suffix": this.language.translate("_big_number_suffix_24")
            }];
          }

          return this._bigNumberPrefixes;
        },

        /**
         * Prefixes for big numbers.
         *
         * It's an array of objects of number/prefix pairs.
         *
         * ```JSON
         * [
         *   { "number": 1e+3, "suffix": "K" },
         *   { "number": 1e+6, "suffix": "M" },
         *   { "number": 1e+9, "suffix": "G" },
         *   { "number": 1e+12, "suffix": "T" },
         *   { "number": 1e+15, "suffix": "P" },
         *   { "number": 1e+18, "suffix": "E" },
         *   { "number": 1e+21, "suffix": "Z" },
         *   { "number": 1e+24, "suffix": "Y" }
         * ]
         * ```
         *
         * If the number is bigger than the `number` ir will be converted to the
         * appropriate bigger number with prefix.
         *
         * E.g. as per above `1500` will be converted to `1.5K`.
         *
         * Please note that for this transformation to be enabled, you need to
         * enable it specific modifier in your format setting.
         *
         * The modifier for big/small number modification is "a":
         *
         * ```Text
         * {myfield.formatNumber("#,###.00a")}
         * ```
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param prefixes  Prefixes for big numbers
         */
        set: function set(prefixes) {
          this._bigNumberPrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "smallNumberPrefixes", {
        /**
         * @return Prefixes for small numbers
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this._smallNumberPrefixes)) {
            this._smallNumberPrefixes = [{
              "number": 1e-24,
              "suffix": this.language.translate("_small_number_suffix_24")
            }, {
              "number": 1e-21,
              "suffix": this.language.translate("_small_number_suffix_21")
            }, {
              "number": 1e-18,
              "suffix": this.language.translate("_small_number_suffix_18")
            }, {
              "number": 1e-15,
              "suffix": this.language.translate("_small_number_suffix_15")
            }, {
              "number": 1e-12,
              "suffix": this.language.translate("_small_number_suffix_12")
            }, {
              "number": 1e-9,
              "suffix": this.language.translate("_small_number_suffix_9")
            }, {
              "number": 1e-6,
              "suffix": this.language.translate("_small_number_suffix_6")
            }, {
              "number": 1e-3,
              "suffix": this.language.translate("_small_number_suffix_3")
            }];
          }

          return this._smallNumberPrefixes;
        },

        /**
         * Prefixes for big numbers.
         *
         * It's an array of objects of number/prefix pairs.
         *
         * ```JSON
         * [
         *   { "number": 1e-24, "suffix": "y" },
         *   { "number": 1e-21, "suffix": "z" },
         *   { "number": 1e-18, "suffix": "a" },
         *   { "number": 1e-15, "suffix": "f" },
         *   { "number": 1e-12, "suffix": "p" },
         *   { "number": 1e-9, "suffix": "n" },
         *   { "number": 1e-6, "suffix": "μ" },
         *   { "number": 1e-3, "suffix": "m" }
         * ]
         * ```
         *
         * If the number is smaller than the `number` ir will be converted to the
         * appropriate smaller number with prefix.
         *
         * E.g. as per above `0.0015` will be converted to `1.5m`.
         *
         * Please note that for this transformation to be enabled, you need to
         * enable it specific modifier in your format setting.
         *
         * The modifier for big/small number modification is "a":
         *
         * ```Text
         * {myfield.formatNumber("#,###.00a")}
         * ```
         *
         * IMPORTANT: The order of the suffixes is important. The list must start
         * from the smallest number and work towards bigger ones.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param prefixes  Prefixes for small numbers
         */
        set: function set(prefixes) {
          this._smallNumberPrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "smallNumberThreshold", {
        /**
         * @return Small number threshold
         */
        get: function get() {
          return this._smallNumberThreshold;
        },

        /**
         * Any number smaller than this will be considered "small" number, which will
         * trigger special formatting if "a" format modifier is used.
         *
         * @since 4.6.8
         * @param  value  Small number threshold
         */
        set: function set(value) {
          this._smallNumberThreshold = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "bytePrefixes", {
        /**
         * @return Prefixes for byte-size formatting
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_8__["hasValue"](this._bytePrefixes)) {
            this._bytePrefixes = [{
              "number": 1,
              suffix: this.language.translate("_byte_suffix_B")
            }, {
              "number": 1024,
              suffix: this.language.translate("_byte_suffix_KB")
            }, {
              "number": 1048576,
              suffix: this.language.translate("_byte_suffix_MB")
            }, {
              "number": 1073741824,
              suffix: this.language.translate("_byte_suffix_GB")
            }, {
              "number": 1099511627776,
              suffix: this.language.translate("_byte_suffix_TB")
            }, {
              "number": 1125899906842624,
              suffix: this.language.translate("_byte_suffix_PB")
            }];
          }

          return this._bytePrefixes;
        },

        /**
         * Basically the same as `bigNumberPrefixes`, except base for calculation
         * is not thousand but byte (1024).
         *
         * The modifier is "b".
         *
         *  ```Text
         * {myfield.formatNumber("#,###.00b")}
         * ```
         *
         * The above `2048` will change to `2K`.
         *
         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting
         * @param prefixes  Prefixes for byte-size formatting
         */
        set: function set(prefixes) {
          this._bytePrefixes = prefixes;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(NumberFormatter.prototype, "outputFormat", {
        /**
         * @ignore Exclude from docs
         * @return Output format
         */
        get: function get() {
          return this._outputFormat;
        },

        /**
         * Ooutput format: "svg" or "html".
         *
         * @ignore Exclude from docs
         * @param value  Output format
         */
        set: function set(outputFormat) {
          this._outputFormat = outputFormat.toLowerCase();
          this.invalidateSprite();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Replaces brackets with temporary placeholders.
       *
       * @ignore Exclude from docs
       * @param text  Input text
       * @return Escaped text
       */

      NumberFormatter.prototype.escape = function (text) {
        return text.replace("||", _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER2"]);
      };
      /**
       * Replaces placeholders back to brackets.
       *
       * @ignore Exclude from docs
       * @param text  Escaped text
       * @return Unescaped text
       */


      NumberFormatter.prototype.unescape = function (text) {
        return text.replace(_utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER2"], "|");
      };

      return NumberFormatter;
    }(_Base__WEBPACK_IMPORTED_MODULE_2__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["NumberFormatter"] = NumberFormatter; //# sourceMappingURL=NumberFormatter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js":
  /*!*************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js ***!
    \*************************************************************************************/

  /*! exports provided: TextFormatter, getTextFormatter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreFormattersTextFormatterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TextFormatter", function () {
      return TextFormatter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getTextFormatter", function () {
      return getTextFormatter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _rendering_AMElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../rendering/AMElement */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Handles formatting of pseudo-markup in text.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Handles formatting of pseudo-markdown in text.
     *
     * @todo Encode < > in output
     * @todo Add more adapters
     * @important
     */


    var TextFormatter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TextFormatter, _super);
      /**
       * Constructor
       */

      function TextFormatter() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         */


        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_3__["Adapter"](_this);
        _this.className = "TextFormatter";

        _this.applyTheme();

        return _this;
      }

      TextFormatter.prototype.debug = function () {};
      /**
       * Formats the text according to specifications passed in.
       *
       * @param text    Text to format
       * @param output  Output format (svg, html)
       * @return Formatted text
       */


      TextFormatter.prototype.format = function (text, output) {
        // Apply default
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["hasValue"](output)) {
          output = "svg";
        } // Init return value


        var formatted = ""; // Replace double (escaped) square spaces with remporary codes

        text = this.escape(text); // Divvy up the string by style tags

        var styles = text.match(/\[([^\]]*?)\]/gm);

        if (!styles) {
          // Nothing to do here - no formatting elements
          return this.wrap(text, "", output);
        } // Get pure text - no style tags


        var texts = text.split(/\[[^\[\]]*\]/); // Go through each of the texts and wrap it in style tags

        for (var i = 0, len = texts.length; i < len; i++) {
          // Get text bit
          var t = texts[i]; // Check if string is empty

          if (t === "") {
            continue;
          } // Run through an adapter


          t = this.adapter.apply("chunk", t); // Get related style

          var s = "";

          if (i > 0) {
            s = styles[i - 1].replace('[', '').replace(']', '');
          } // Wrap text in tag


          formatted += this.wrap(t, s, output);
        } // Replace placeholders back


        formatted = this.unescape(formatted); // Return result

        return this.cleanUp(formatted);
      };
      /**
       * Replaces brackets with temporary placeholders.
       *
       * @ignore Exclude from docs
       * @param text  Input text
       * @return Escaped text
       */


      TextFormatter.prototype.escape = function (text) {
        return text.replace(/\[\[/g, _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("1")).replace(/([^\/]{1})\]\]/g, "$1" + _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("2")).replace(/\]\]/g, _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("2")).replace(/\{\{/g, _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("3")).replace(/\}\}/g, _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("4")).replace(/\'\'/g, _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("5"));
      };
      /**
       * Replaces placeholders back to brackets.
       *
       * @ignore Exclude from docs
       * @param text  Escaped text
       * @return Unescaped text
       */


      TextFormatter.prototype.unescape = function (text) {
        return text.replace(new RegExp(_Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("1"), "g"), "[[").replace(new RegExp(_Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("2"), "g"), "]]").replace(new RegExp(_Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("3"), "g"), "{{").replace(new RegExp(_Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("4"), "g"), "}}").replace(new RegExp(_Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getPlaceholder("5"), "g"), "'");
      };
      /**
       * Cleans up the text text for leftover double square brackets.
       *
       * @ignore Exclude from docs
       * @param text  Input text
       * @return Cleaned up text
       */


      TextFormatter.prototype.cleanUp = function (text) {
        return text.replace(/\[\[/g, "[").replace(/\]\]/g, "]").replace(/\{\{/g, "{").replace(/\}\}/g, "}").replace(/\'\'/g, "'");
      };
      /**
       * Wraps text into corresponding tags.
       *
       * @ignore Exclude from docs
       * @param text   Text to wrap
       * @param style  Styles
       * @param output  Format to output in (svg, html)
       * @return Formatted string
       */


      TextFormatter.prototype.wrap = function (text, style, output) {
        if (style === "" || style === "/") {
          //return text;
          style = "";
        }

        switch (output) {
          case "html":
            return this.wrapHtml(text, this.translateStyleShortcuts(style));

          default:
            return this.wrapSvg(text, this.translateStyleShortcuts(style));
        }
      };
      /**
       * Wraps text in styled SVG tag.
       *
       * @ignore Exclude from docs
       * @param text   Text to wrap
       * @param style  Style property
       * @return Formatted tag
       */


      TextFormatter.prototype.wrapSvg = function (text, style) {
        if (style === "") {
          return "<tspan>" + text + "</tspan>";
        } else {
          return "<tspan style='" + style + "'>" + text + "</tspan>";
        }
      };
      /**
       * Returns an SVG `<tspan>` element.
       *
       * @ignore Exclude from docs
       * @param text   Text
       * @param style  Style
       * @return Element
       */


      TextFormatter.prototype.getSvgElement = function (text, style) {
        var element = new _rendering_AMElement__WEBPACK_IMPORTED_MODULE_2__["AMElement"]("tspan");
        element.textContent = text;

        if (style) {
          element.node.setAttribute("style", style);
        }

        return element;
      };
      /**
       * Wraps text in HTML <span> tag.
       *
       * @ignore Exclude from docs
       * @param text   Text to wrap
       * @param style  Style property
       * @return Formatted tag
       * @todo Translate SVG styles into HTML ones
       */


      TextFormatter.prototype.wrapHtml = function (text, style) {
        if (style === "") {
          return "<span>" + text + "</span>";
        } else {
          return "<span style='" + this.styleSvgToHtml(style) + "'>" + text + "</span>";
        }
      };
      /**
       * Returns an HTML `<span>` element.
       *
       * @ignore Exclude from docs
       * @param text   Text/HTML
       * @param style  Style definition
       * @return HTML element
       */


      TextFormatter.prototype.getHtmlElement = function (text, style) {
        var element = document.createElement("span");
        element.innerHTML = text;

        if (style) {
          element.setAttribute("style", style);
        }

        return element;
      };
      /**
       * Trabslates SVG CSS into HTML CSS.
       *
       * @ignore Exclude from docs
       * @param style  SVG CSS
       * @return HTML CSS
       * @todo Implement actual translation
       */


      TextFormatter.prototype.styleSvgToHtml = function (style) {
        style = style.replace(/fill:/, "color:");
        return style;
      };
      /**
       * Translates style shortcuts into full styles, i.e.:
       * "bold" => "font-weight: bold"
       * "#f00" => "fill: #f00"
       *
       * @ignore Exclude from docs
       * @param style  Untranslated style
       * @return Translated style
       * @todo Implement actual translation
       */


      TextFormatter.prototype.translateStyleShortcuts = function (style) {
        if (style == "" || style == "[ ]") {
          return "";
        }

        var cached = _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getCache("translateStyleShortcuts_" + style);

        if (cached) {
          return cached;
        } // Get style parts


        var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w]+)|(\/)/gi); // Empty?

        if (!b) {
          return style;
        } // Check each part


        for (var i = 0; i < b.length; i++) {
          if (b[i].match(/^bold$/i)) {
            // Bold
            b[i] = "font-weight:" + b[i];
          } else if (b[i] == "/") {
            // Just closing tag
            // Do nothing
            b[i] = "";
          } else if (!b[i].match(/:/)) {
            // Color
            b[i] = "fill:" + b[i];
          }
        }

        var res = b.join(';');

        _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].setCache("translateStyleShortcuts_" + style, res);

        return res;
      };
      /**
       * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
       *
       * If the second parameter `quotedBlocks` is set to `true` this method will
       * also single out text blocks enclosed within single quotes that no
       * formatting should be applied to, and they should be displayed as is.
       *
       * Default for the above is `false`, so that you can use single quote in text
       * without escaping it.
       *
       * If enabled, single quotes can be escaped by doubling it - adding two
       * single quotes, which will be replaced by a one single quote in the final
       * output.
       *
       * @ignore Exclude from docs
       * @param text          Text to chunk
       * @param quotedBlocks  Use quoted blocks
       * @param noFormatting  Formatting blocks will be treated as regular text
       * @return Array of string chunks
       */


      TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {
        if (quotedBlocks === void 0) {
          quotedBlocks = false;
        }

        if (noFormatting === void 0) {
          noFormatting = false;
        } // Init result


        var res = []; // Replace double (escaped) square spaces and quotes with temporary codes

        text = this.escape(text); // Deal with style blocks

        var chunks = quotedBlocks ? text.split("'") : [text];

        for (var i = 0; i < chunks.length; i++) {
          var chunk = chunks[i]; // Empty?

          if (chunk === "") {
            continue;
          }

          if (i % 2 === 0) {
            // Text outside quotes
            // Parse for style blocks which are "text" chunks, the rest chunks are
            // "value"
            chunk = chunk.replace(/\]\[/g, "]" + _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"] + "[");
            chunk = chunk.replace(/\[\]/g, "[ ]");
            var chunks2 = chunk.split(/[\[\]]+/);

            for (var i2 = 0; i2 < chunks2.length; i2++) {
              var chunk2 = this.cleanUp(this.unescape(chunks2[i2])); // Placeholder?

              if (chunk2 === _utils_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]) {
                continue;
              } // Empty?


              if (chunk2 === "") {
                continue;
              } // Block or value


              if (i2 % 2 === 0) {
                res.push({
                  "type": "value",
                  "text": this.adapter.apply("chunk", chunk2)
                });
              } else {
                res.push({
                  "type": noFormatting ? "value" : "format",
                  "text": "[" + chunk2 + "]"
                });
              }
            }
          } else {
            // A text within doublequotes
            // All chunks are "text"
            var chunks2 = chunk.split(/[\[\]]+/);

            for (var i2 = 0; i2 < chunks2.length; i2++) {
              var chunk2 = this.cleanUp(this.unescape(chunks2[i2])); // Empty?

              if (chunk2 === "") {
                continue;
              } // Block or text


              if (i2 % 2 === 0) {
                res.push({
                  "type": "text",
                  "text": chunk2
                });
              } else if (this.isImage(chunk2)) {
                res.push({
                  "type": "image",
                  "text": "[" + chunk2 + "]"
                });
              } else {
                res.push({
                  "type": "format",
                  "text": "[" + chunk2 + "]"
                });
              }
            }
          }
        }

        return res;
      };
      /**
       * Checks if supplied format contains image information and should be
       * formatted as such.
       * I.e.: `[img: myImage.png]`
       *
       * @ignore Exclude from docs
       * @param text  Format
       * @return `true` if it is an image
       */


      TextFormatter.prototype.isImage = function (text) {
        return text.match(/img[ ]?:/) ? true : false;
      };

      return TextFormatter;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);

    var formatter;
    /**
     * Returns the global instance of [[TextFormatter]].
     *
     * All classes and instances should reuse this universal text formatter,
     * rather than create their own instance of it.
     */

    function getTextFormatter() {
      if (formatter == null) {
        formatter = new TextFormatter();
      }

      return formatter;
    }
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["TextFormatter"] = TextFormatter; //# sourceMappingURL=TextFormatter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js":
  /*!********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js ***!
    \********************************************************************************/

  /*! exports provided: Inertia */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreInteractionInertiaJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Inertia", function () {
      return Inertia;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Interaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Functionality related to inertia
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * A point of inertia is to simulate gradually drecreasing motion even after
     * actual interaction by user, that caused it, has already ended.
     *
     * [[Inertia]] object will continue triggering the same [[Sprite]] handlers
     * as if the interaction was still happening, gradually reducing
     * shift/angle/scale values until full stop.
     *
     * Basically, from the target element's point of view, while inertia is
     * playing, it is still being interacted with by user, albeit with a
     * decreasing speed.
     */


    var Inertia =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Inertia, _super);
      /**
       * Constructor
       */

      function Inertia(interaction, type, point, startPoint) {
        var _this = // Init
        _super.call(this) || this;
        /**
         * List of animations currently playing.
         */


        _this.animations = [];
        _this.className = "Inertia";
        _this.interaction = interaction;
        _this.type = type;
        _this.point = point;
        _this.startPoint = startPoint; // Make animations disposable

        _this._disposers.push(new _utils_Animation__WEBPACK_IMPORTED_MODULE_3__["AnimationDisposer"](_this.animations));

        return _this;
      }

      Object.defineProperty(Inertia.prototype, "x", {
        /**
         * Returns current X coordinate.
         *
         * @return X
         */
        get: function get() {
          return this.point.x;
        },

        /**
         * Sets current X coordinate.
         *
         * Will trigger "drag" event for the target element.
         *
         * @param value X
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](value)) {
            this.point.x = value;
            this.handleMove();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Inertia.prototype, "y", {
        /**
         * Returns current Y coordinate.
         *
         * @return Y
         */
        get: function get() {
          return this.point.y;
        },

        /**
         * Sets current Y coordinate.
         *
         * Will trigger "drag" event for the target element.
         *
         * @param value Y
         */
        set: function set(value) {
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](value)) {
            this.point.y = value;
            this.handleMove();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Simulates dragging of element.
       */

      Inertia.prototype.handleMove = function () {
        // Prepare {InteractionEvent} object
        if (this.interaction.events.isEnabled("drag")) {
          var imev = {
            type: "drag",
            target: this.interaction,
            shift: {
              x: this.x - this.startPoint.x,
              y: this.y - this.startPoint.y
            },
            startPoint: this.startPoint,
            point: {
              x: this.x,
              y: this.y
            },
            touch: false
          }; // Call handler

          this.interaction.events.dispatchImmediately("drag", imev);
        }
      };
      /**
       * Finishes up the inertia animation. (removes reference to this animation
       * object)
       */


      Inertia.prototype.done = function () {
        // Remove inertia animation from the object
        this.interaction.inertias.removeKey(this.type); // Move ended

        if (this.type === "move") {
          Object(_Interaction__WEBPACK_IMPORTED_MODULE_2__["getInteraction"])().processDragStop(this.interaction);
        } // Destroy


        this.dispose();
      };

      return Inertia;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]); //# sourceMappingURL=Inertia.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js":
  /*!************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js ***!
    \************************************************************************************/

  /*! exports provided: Interaction, getInteraction */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreInteractionInteractionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Interaction", function () {
      return Interaction;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getInteraction", function () {
      return getInteraction;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _InteractionObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./InteractionObject */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js");
    /* harmony import */


    var _InteractionKeyboardObject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./InteractionKeyboardObject */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionKeyboardObject.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _Inertia__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./Inertia */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Keyboard__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Keyboard */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js");
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./../System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Time__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ../utils/Time */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js");
    /**
     * Interaction manages all aspects of user interaction - mouse move,
     * click, hover, drag events, touch gestures.
     *
     * [[InteractionObject]] elements that want to use certain events, must attach event
     * listeners to Interaction instance.
     *
     * Interaction itself will not modify [[InteractionObject]] elements, it will be up to
     * those elements to handle interaction information received via event triggers.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
    * Interaction manages all aspects of user interaction - mouse move,
    * click, hover, drag events, touch gestures.
    *
    * [[InteractionObject]] elements that want to use certain events, must attach event
    * listeners to Interaction instance.
    *
    * Interaction itself will not modify [[InteractionObject]] elements, it will be up to
    * those elements to handle interaction information received via event triggers.
    *
    * @see {@link IInteractionEvents} for a list of available events
    */


    var Interaction =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Interaction, _super);
      /**
       * Constructor. Sets up universal document-wide move events to handle stuff
       * outside particular chart container.
       */

      function Interaction() {
        var _this = // Call super
        _super.call(this) || this;
        /**
         * An indicator of global events were already initialized.
         */


        _this._globalEventsAdded = false;
        /**
         * Holds which mouse event listeners to use.
         */

        _this._pointerEvents = {
          "pointerdown": "mousedown",
          "pointerup": "mouseup",
          "pointermove": "mousemove",
          "pointercancel": "mouseup",
          "pointerover": "mouseover",
          "pointerout": "mouseout",
          "wheel": "wheel"
        };
        /**
         * Indicates if Interaction should use only "pointer" type events, like
         * "pointermove", available in all modern browsers, ignoring "legacy"
         * events, like "touchmove".
         */

        _this._usePointerEventsOnly = false;
        /**
         * Use only touch events (for touch only devices such as tablets and phones)
         */

        _this._useTouchEventsOnly = false;
        /**
         * Add special hover events. Normally, touch device tap will also simulate
         * hover event. On some devices (ahem iOS) we want to prevent that so that
         * over/out events are not duplicated.
         */

        _this._addHoverEvents = true;
        /**
         * Indicates if passive mode options is supported by this browser.
         */

        _this._passiveSupported = false;
        /**
         * Holds list of delayed events
         */

        _this._delayedEvents = {
          out: []
        };
        /**
         * List of objects that current have a pointer hovered over them.
         */

        _this.overObjects = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        /**
         * List of objects that currently has a pressed pointer.
         */

        _this.downObjects = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        /**
         * List of objects that need mouse position to be reported to them.
         */

        _this.trackedObjects = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        /**
         * List of objects that are currently being dragged.
         */

        _this.transformedObjects = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        /**
         * Holds all known pointers.
         */

        _this.pointers = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_7__["Dictionary"]();
        /**
         * Inertia options that need to be applied to after element drag, if it's
         * `inert = true`.
         *
         * This is just a default, which can and probably will be overridden by
         * actual elements.
         */

        _this.inertiaOptions = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_7__["Dictionary"]();
        /**
         * Default options for click events. These can be overridden in
         * [[InteractionObject]].
         */

        _this.hitOptions = {
          //"holdTime": 1000,
          "doubleHitTime": 300,
          //"delayFirstHit": false,
          "hitTolerance": 10,
          "noFocus": true
        };
        /**
         * Default options for hover events. These can be overridden in
         * [[InteractionObject]].
         */

        _this.hoverOptions = {
          "touchOutBehavior": "leave",
          "touchOutDelay": 1000
        };
        /**
         * Default options for detecting a swipe gesture. These can be overridden in
         * [[InteractionObject]].
         */

        _this.swipeOptions = {
          "time": 500,
          "verticalThreshold": 75,
          "horizontalThreshold": 30
        };
        /**
         * Default options for keyboard operations. These can be overridden in
         * [[InteractionObject]].
         */

        _this.keyboardOptions = {
          "speed": 0.1,
          "accelleration": 1.2,
          "accellerationDelay": 2000
        };
        /**
         * Default options for keyboard operations. These can be overridden in
         * [[InteractionObject]].
         *
         * @since 4.5.14
         */

        _this.mouseOptions = {
          "sensitivity": 1
        }; // Set class name

        _this.className = "Interaction"; // Create InteractionObject for <body>

        _this.body = _this.getInteraction(document.body);

        _this._disposers.push(_this.body); // Detect browser capabilities and determine what event listeners to use


        if (window.hasOwnProperty("PointerEvent")) {
          // IE10+/Edge without touch controls enabled
          _this._pointerEvents.pointerdown = "pointerdown";
          _this._pointerEvents.pointerup = "pointerup";
          _this._pointerEvents.pointermove = "pointermove";
          _this._pointerEvents.pointercancel = "pointercancel";
          _this._pointerEvents.pointerover = "pointerover";
          _this._pointerEvents.pointerout = "pointerout"; //this._usePointerEventsOnly = true;
        } else if (window.hasOwnProperty("MSPointerEvent")) {
          // IE9
          _this._pointerEvents.pointerdown = "MSPointerDown";
          _this._pointerEvents.pointerup = "MSPointerUp";
          _this._pointerEvents.pointermove = "MSPointerMove";
          _this._pointerEvents.pointercancel = "MSPointerUp";
          _this._pointerEvents.pointerover = "MSPointerOver";
          _this._pointerEvents.pointerout = "MSPointerOut"; //this._usePointerEventsOnly = true;
        } else if (typeof matchMedia !== "undefined" && matchMedia('(pointer:fine)').matches) {
          // This is only for Safari as it does not support PointerEvent
          // Do nothing and let it use regular `mouse*` events
          // Hi Apple ;)
          // Additionally disable hover events for iOS devices
          if ('ontouchstart' in window) {
            _this._addHoverEvents = false;
            _this._useTouchEventsOnly = true;
          }
        } else if (window.navigator.userAgent.match(/MSIE /)) {
          // Oh looky, an MSIE that does not support PointerEvent. Hi granpa IE9!
          _this._usePointerEventsOnly = true;
        } else if (_this.fullFF()) {
          // Old FF, let's use regular events.
          // (Newer FFs would be detected by the PointerEvent availability check)
          _this._usePointerEventsOnly = true;
        } else {
          // Uses defaults for normal browsers
          // We also assume that this must be a touch device that does not have
          // any pointer events
          _this._useTouchEventsOnly = true;
        } // Detect if device has a mouse
        // This is turning out to be not reliable
        // @todo remove

        /*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== "undefined") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {
            this._useTouchEventsOnly = true;
        }*/
        // Detect proper mouse wheel events


        if ("onwheel" in document.createElement("div")) {
          // Modern browsers
          _this._pointerEvents.wheel = "wheel";
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](document.onmousewheel)) {
          // Webkit and IE support at least "mousewheel"
          _this._pointerEvents.wheel = "mousewheel";
        } // Set up default inertia options


        _this.inertiaOptions.setKey("move", {
          "time": 100,
          "duration": 500,
          "factor": 1,
          "easing": _utils_Ease__WEBPACK_IMPORTED_MODULE_12__["polyOut3"]
        });

        _this.inertiaOptions.setKey("resize", {
          "time": 100,
          "duration": 500,
          "factor": 1,
          "easing": _utils_Ease__WEBPACK_IMPORTED_MODULE_12__["polyOut3"]
        }); // Set the passive mode support


        _this._passiveSupported = Interaction.passiveSupported; // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * This is a nasty detection for Firefox. The reason why we have is that
       * Firefox ESR version does not support matchMedia correctly.
       *
       * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.
       *
       * @return Full Firefox?
       */


      Interaction.prototype.fullFF = function () {
        return window.navigator.userAgent.match(/Firefox/) && !window.navigator.userAgent.match(/Android/);
      };

      Interaction.prototype.debug = function () {};
      /**
       * ==========================================================================
       * Processing
       * ==========================================================================
       * @hidden
       */

      /**
       * Sets up global events.
       *
       * We need this so that we can track drag movement beyond chart's container.
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.addGlobalEvents = function () {
        var _this = this;

        if (!this._globalEventsAdded) {
          if (!this._useTouchEventsOnly) {
            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, this._pointerEvents.pointerdown, function (ev) {
              _this.handleGlobalPointerDown(ev);
            }));

            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, this._pointerEvents.pointermove, function (ev) {
              _this.handleGlobalPointerMove(ev);
            }));

            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, this._pointerEvents.pointerup, function (ev) {
              _this.handleGlobalPointerUp(ev);
            }));

            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, this._pointerEvents.pointercancel, function (ev) {
              _this.handleGlobalPointerUp(ev, true);
            }));

            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, "mouseenter", function (ev) {
              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.relatedTarget) && (ev.buttons == 0 || ev.which == 0)) {
                _this.handleDocumentLeave(ev);
              }
            }));
          } // No need to duplicate events for hubrid systems that support both
          // pointer events and touch events. Touch events are need only for
          // some touch-only systems, like Mobile Safari.


          if (!this._usePointerEventsOnly) {
            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, "touchstart", function (ev) {
              _this.handleGlobalTouchStart(ev);
            }));

            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, "touchmove", function (ev) {
              _this.handleGlobalTouchMove(ev);
            }));

            this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, "touchend", function (ev) {
              _this.handleGlobalTouchEnd(ev);
            }));
          }

          this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, "keydown", function (ev) {
            _this.handleGlobalKeyDown(ev);
          }));

          this._disposers.push(Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(document, "keyup", function (ev) {
            _this.handleGlobalKeyUp(ev);
          }));

          this._globalEventsAdded = true;
        }
      };
      /**
       * Sets if [[InteractionObject]] is clickable.
       *
       * @ignore Exclude from docs
       * @param io [[InteractionObject]] instance
       */


      Interaction.prototype.processClickable = function (io) {
        // Add or remove touch events
        this.processTouchable(io);
      };
      /**
       * Sets if [[InteractionObject]] will display context menu when right-clicked.
       *
       * @ignore Exclude from docs
       * @param io [[InteractionObject]] instance
       */


      Interaction.prototype.processContextMenu = function (io) {
        if (io.contextMenuDisabled) {
          if (!io.eventDisposers.hasKey("contextMenuDisabled")) {
            io.eventDisposers.setKey("contextMenuDisabled", Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, "contextmenu", function (e) {
              e.preventDefault();
            }));
          }
        } else {
          if (io.eventDisposers.hasKey("contextMenuDisabled")) {
            io.eventDisposers.getKey("contextMenuDisabled").dispose();
          }
        }
      };
      /**
       * Sets if [[InteractionObject]] is hoverable.
       *
       * @ignore Exclude from docs
       * @param io [[InteractionObject]] instance
       */


      Interaction.prototype.processHoverable = function (io) {
        var _this = this;

        if (io.hoverable || io.trackable) {
          // Add global events
          this.addGlobalEvents(); // Add hover styles

          this.applyCursorOverStyle(io); // Add local events

          if (!io.eventDisposers.hasKey("hoverable") && this._addHoverEvents) {
            io.eventDisposers.setKey("hoverable", new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, this._pointerEvents.pointerout, function (e) {
              return _this.handlePointerOut(io, e);
            }), Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, this._pointerEvents.pointerover, function (e) {
              return _this.handlePointerOver(io, e);
            })]));
          }

          if (io.trackable) {//sprite.addEventListener("touchmove", this.handleTouchMove, false, this);
          }
        } else {
          var disposer = io.eventDisposers.getKey("hoverable");

          if (disposer != null) {
            disposer.dispose();
            io.eventDisposers.removeKey("hoverable");
          }
        } // Add or remove touch events


        this.processTouchable(io);
      };
      /**
       * Sets up [[InteractionObject]] as movable. Movable can be any
       * transformation, e.g. drag, swipe, resize, track.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processMovable = function (io) {
        // Add unified events
        if (io.draggable || io.swipeable || io.trackable || io.resizable) {
          // Prep the element
          if (!this.isGlobalElement(io) && !io.isTouchProtected) {
            this.prepElement(io);
          } // Add hover styles


          this.applyCursorOverStyle(io);
        } // Add or remove touch events


        this.processTouchable(io);
      };
      /**
       * Checks if [[InteractionObject]] is trackable and sets relative events.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processTrackable = function (io) {
        this.processHoverable(io);
        this.processMovable(io);

        if (io.trackable) {
          this.trackedObjects.moveValue(io);
        } else {
          this.trackedObjects.removeValue(io);
        }
      };
      /**
       * Checks if [[InteractionObject]] is draggable.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processDraggable = function (io) {
        this.processMovable(io);
      };
      /**
       * Checks if [[InteractionObject]] is swipeable and sets relative events.
       *
       * A swipe event is triggered when a horizontal drag of 75px or more (and
       * less than 30px vertically) occurs within 700 milliseconds. This can be
       * overridden in sprites [[swipeOptions]].
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processSwipeable = function (io) {
        this.processMovable(io);
      };
      /**
       * Checks if [[InteractionObject]] is resizable and attaches required events
       * to it.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processResizable = function (io) {
        this.processMovable(io);
      };
      /**
       * Checks if [[InteractionObject]] is supposed to capture mouse wheel events
       * and prepares it to catch those events.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processWheelable = function (io) {
        var _this = this;

        if (io.wheelable) {
          //io.hoverable = true;
          if (!io.eventDisposers.hasKey("wheelable")) {
            io.eventDisposers.setKey("wheelable", new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, this._pointerEvents.wheel, function (e) {
              return _this.handleMouseWheel(io, e);
            }, this._passiveSupported ? {
              passive: false
            } : false), io.events.on("out", function (e) {
              if (io.wheelable) {
                _this.unlockWheel();
              }
            }), io.events.on("over", function (e) {
              if (io.wheelable) {
                _this.lockWheel();
              }
            })]));
          }
        } else {
          var disposer = io.eventDisposers.getKey("wheelable");

          if (disposer != null) {
            disposer.dispose();
            io.eventDisposers.removeKey("wheelable");
          }
        }
      };
      /**
       * Checks if [[InteractionObject]] is focusable. A focusable element is an
       * element that will be highlighted when users presses TAB key. If the
       * element is focusable, this function will attach relative focus/blur
       * events to it.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processFocusable = function (io) {
        var _this = this;

        if (io.focusable === true && io.tabindex > -1 && !this._useTouchEventsOnly) {
          if (!io.eventDisposers.hasKey("focusable")) {
            io.eventDisposers.setKey("focusable", new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, "focus", function (e) {
              return _this.handleFocus(io, e);
            }), Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, "blur", function (e) {
              return _this.handleBlur(io, e);
            }), Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, this._pointerEvents.pointerdown, function (e) {
              return _this.handleFocusBlur(io, e);
            }), Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, "touchstart", function (e) {
              return _this.handleFocusBlur(io, e);
            }, this._passiveSupported ? {
              passive: false
            } : false)]));
          }
        } else {
          var disposer = io.eventDisposers.getKey("focusable");

          if (disposer != null) {
            disposer.dispose();
            io.eventDisposers.removeKey("focusable");
          }
        }
      };
      /**
       * Checks if [[InteractionObject]] is "touchable". It means any interaction
       * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.
       *
       * @ignore Exclude from docs
       * @param io  Element
       */


      Interaction.prototype.processTouchable = function (io) {
        var _this = this; // Add unified events


        if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {
          // Add global events
          this.addGlobalEvents(); // Add local events

          if (!io.eventDisposers.hasKey("touchable")) {
            if (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {
              io.eventDisposers.setKey("touchable", new _utils_Disposer__WEBPACK_IMPORTED_MODULE_4__["MultiDisposer"]([Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, this._pointerEvents.pointerdown, function (e) {
                return _this.handlePointerDown(io, e);
              }), Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, "touchstart", function (e) {
                return _this.handleTouchDown(io, e);
              }, this._passiveSupported ? {
                passive: false
              } : false)]));
            } else if (!this._useTouchEventsOnly) {
              io.eventDisposers.setKey("touchable", Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, this._pointerEvents.pointerdown, function (e) {
                return _this.handlePointerDown(io, e);
              }));
            } else if (!this._usePointerEventsOnly) {
              io.eventDisposers.setKey("touchable", Object(_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["addEventListener"])(io.element, "touchstart", function (e) {
                return _this.handleTouchDown(io, e);
              }, this._passiveSupported ? {
                passive: false
              } : false));
            }
          }
        } else {
          var disposer = io.eventDisposers.getKey("touchable");

          if (disposer != null) {
            disposer.dispose();
            io.eventDisposers.removeKey("touchable");
          }
        }
      };
      /**
       * ==========================================================================
       * Non-pointer events
       * ==========================================================================
       * @hidden
       */

      /**
       * Dispatches "focus" event when element gains focus.
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handleFocus = function (io, ev) {
        if (!io.focusable) {
          ev.preventDefault();
          return;
        }

        io.isFocused = true;

        if (io.events.isEnabled("focus") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "focus",
            target: io,
            event: ev
          };
          io.events.dispatchImmediately("focus", imev);
        }
      };
      /**
       * Used by regular click events to prevent focus if "noFocus" is set.
       *
       * This should not be called by "focus" handlers.
       *
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handleFocusBlur = function (io, ev) {
        if (io.focusable !== false && this.getHitOption(io, "noFocus")) {
          io.events.once("focus", function () {
            io.events.disableType("blur");

            _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["blur"]();

            if (io.sprite) {
              io.sprite.handleBlur();
            }

            io.events.enableType("blur");
          });
        }
      };
      /**
       * Dispatches "blur" event when element loses focus.
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handleBlur = function (io, ev) {
        if (!io.focusable) {
          ev.preventDefault();
          return;
        }

        io.isFocused = false;

        if (io.events.isEnabled("blur") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "blur",
            target: io,
            event: ev
          };
          io.events.dispatchImmediately("blur", imev);
        }
      };
      /**
       * ==========================================================================
       * Global keyboard-related even handlers
       * ==========================================================================
       * @hidden
       */

      /**
       * Checks if there is an item that has currently focus and that they key is
       * one of the directional keys. If both of the conditions are true, it
       * creates an object to simulate movement of dragable element with keyboard.
       *
       * @ignore Exclude from docs
       * @param ev An original keyboard event
       */


      Interaction.prototype.handleGlobalKeyDown = function (ev) {
        if (this.focusedObject) {
          if (_utils_Keyboard__WEBPACK_IMPORTED_MODULE_10__["keyboard"].isKey(ev, "esc")) {
            // ESC removes focus
            _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["blur"]();
          } else if (this.focusedObject.draggable && _utils_Keyboard__WEBPACK_IMPORTED_MODULE_10__["keyboard"].isKey(ev, ["up", "down", "left", "right"])) {
            // Prevent scrolling of the document
            ev.preventDefault(); // Get focused object

            var io = this.focusedObject; // Get particular key

            var disposerKey = "interactionKeyboardObject"; // If such disposer already exists we know the event is going on so we
            // just move on

            if (io.eventDisposers.hasKey(disposerKey)) {
              return;
            } // Create a keyboard mover


            var ko = new _InteractionKeyboardObject__WEBPACK_IMPORTED_MODULE_6__["InteractionKeyboardObject"](io, ev);
            io.eventDisposers.setKey(disposerKey, ko);

            switch (_utils_Keyboard__WEBPACK_IMPORTED_MODULE_10__["keyboard"].getEventKey(ev)) {
              case "up":
                ko.directionY = -1;
                break;

              case "down":
                ko.directionY = 1;
                break;

              case "left":
                ko.directionX = -1;
                break;

              case "right":
                ko.directionX = 1;
                break;
            }
          }
        }
      };
      /**
       * Dispatches related events when the keyboard key is realeasd.
       *
       * @ignore Exclude from docs
       * @param ev An original keyboard event
       */


      Interaction.prototype.handleGlobalKeyUp = function (ev) {
        var disposerKey = "interactionKeyboardObject";

        if (this.focusedObject) {
          var disposer = this.focusedObject.eventDisposers.getKey(disposerKey);

          if (disposer != null) {
            // Prevent scrolling of the document
            ev.preventDefault(); // Dispose stuff

            disposer.dispose();
            this.focusedObject.eventDisposers.removeKey(disposerKey);
          }
        }
      };
      /**
       * ==========================================================================
       * Global pointer-related even handlers
       * ==========================================================================
       * @hidden
       */

      /**
       * Handler for a global "pointermove" event.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */


      Interaction.prototype.handleGlobalPointerMove = function (ev) {
        // Get pointer
        var pointer = this.getPointer(ev); // Update current point position

        pointer.point = this.getPointerPoint(ev); // Prepare and fire global event

        if (this.events.isEnabled("track") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "track",
            target: this,
            event: ev,
            pointer: pointer,
            touch: pointer.touch
          };
          this.events.dispatchImmediately("track", imev);
        } // Track


        this.addBreadCrumb(pointer, pointer.point); // Process further

        this.handleGlobalMove(pointer, ev);
      };
      /**
       * Handler for a global "pointerdown" event.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */


      Interaction.prototype.handleGlobalPointerDown = function (ev) {
        // Remove delayed hovers
        this.processDelayed(); // Get pointer

        var pointer = this.getPointer(ev); // Prepare and fire global event

        if (this.events.isEnabled("down") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "down",
            target: this,
            event: ev,
            pointer: pointer,
            touch: pointer.touch
          };
          this.events.dispatchImmediately("down", imev);
        }
      };
      /**
       * Prevents touch action from firing.
       *
       * @ignore Exclude from docs
       * @param ev Event
       */


      Interaction.prototype.preventTouchAction = function (ev) {
        if (!ev.defaultPrevented) {
          ev.preventDefault();
        }
      };
      /**
       * Handler for a global "pointerup" event.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */


      Interaction.prototype.handleGlobalPointerUp = function (ev, cancelled) {
        if (cancelled === void 0) {
          cancelled = false;
        } // Get pointer


        var pointer = this.getPointer(ev); // Prepare and fire global event

        if (this.events.isEnabled("up") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "up",
            target: this,
            event: ev,
            pointer: pointer,
            touch: pointer.touch
          };
          this.events.dispatchImmediately("up", imev);
        } // Process further


        this.handleGlobalUp(pointer, ev, cancelled);
      };
      /**
      * ==========================================================================
      * Global touch-related even handlers
      * ==========================================================================
      */

      /**
       * Handler for a global "touchmove" event.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */


      Interaction.prototype.handleGlobalTouchMove = function (ev) {
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
          // Get pointer
          var pointer = this.getPointer(ev.changedTouches[i]); // Update current point position

          pointer.point = this.getPointerPoint(ev.changedTouches[i]); // Prepare and fire global event

          if (this.events.isEnabled("track") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "track",
              target: this,
              event: ev,
              pointer: pointer,
              touch: pointer.touch
            };
            this.events.dispatchImmediately("track", imev);
          } // Track


          this.addBreadCrumb(pointer, pointer.point); // Process further

          this.handleGlobalMove(pointer, ev);
        }
      };
      /**
       * Handler for a global "touchstart" event.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */


      Interaction.prototype.handleGlobalTouchStart = function (ev) {
        // Remove delayed hovers
        this.processDelayed(); // Process each changed touch point

        for (var i = 0; i < ev.changedTouches.length; i++) {
          // Get pointer
          var pointer = this.getPointer(ev.changedTouches[i]); // Prepare and fire global event

          if (!this._usePointerEventsOnly && this.events.isEnabled("down") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "down",
              target: this,
              event: ev,
              pointer: pointer,
              touch: pointer.touch
            };
            this.events.dispatchImmediately("down", imev);
          }
        }
      };
      /**
       * Handler for a global "touchend" event.
       *
       * @ignore Exclude from docs
       * @param ev Event object
       */


      Interaction.prototype.handleGlobalTouchEnd = function (ev) {
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
          // Get pointer
          var pointer = this.getPointer(ev.changedTouches[i]); // Prepare and fire global event

          if (this.events.isEnabled("up") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "up",
              target: this,
              event: ev,
              pointer: pointer,
              touch: pointer.touch
            };
            this.events.dispatchImmediately("up", imev);
          } // Handle element-related events


          this.handleGlobalUp(pointer, ev);
        }
      };
      /**
       * ==========================================================================
       * Element-specific pointer-related even handlers
       * ==========================================================================
       * @hidden
       */

      /**
       * Handles event when pointer is over [[InteractionObject]] and button is
       * pressed.
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handlePointerDown = function (io, ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        //ev.preventDefault();
        //ev.stopPropagation();
        //if (ev.defaultPrevented) {
        //}
        // Get pointer
        var pointer = this.getPointer(ev); // Ignore if it's anything but mouse's primary button

        if (!pointer.touch && ev.which != 1 && ev.which != 3) {
          return;
        } // Set mouse button


        pointer.button = ev.which; // Reset pointer

        this.resetPointer(pointer, ev); // Process down

        this.handleDown(io, pointer, ev);
      };
      /**
       * Handles event when [[InteractionObject]] is hovered by a mouse pointer.
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handlePointerOver = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev); // Process down

        this.handleOver(io, pointer, ev);
      };
      /**
       * Handles event when [[InteractionObject]] loses hover from a mouse pointer.
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handlePointerOut = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev); // Process down

        this.handleOut(io, pointer, ev);
      };
      /**
       * Handles event when mouse wheel is crolled over the [[InteractionObject]].
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel
       */


      Interaction.prototype.handleMouseWheel = function (io, ev) {
        // Get pointer
        var pointer = this.getPointer(ev); // Update current point position

        pointer.point = this.getPointerPoint(ev); // Init delta values

        var deltaX = 0,
            deltaY = 0; // Set up modifier
        // This is needed because FireFox reports wheel deltas in "lines" instead
        // of pixels so we have to approximate pixel value

        var mod = 1;

        if (ev.deltaMode == 1) {
          mod = 50;
        } // Adjust configurable sensitivity


        mod *= this.getMouseOption(io, "sensitivity"); // Calculate deltas

        if (ev instanceof WheelEvent) {
          deltaX = Math.round(-1 * ev.wheelDeltaX || ev.deltaX) * mod;
          deltaY = Math.round(-1 * ev.wheelDeltaY || ev.deltaY) * mod;
        } else {
          throw new Error("Invalid event type");
        } // Handle the event


        this.handleWheel(io, pointer, deltaX, deltaY, ev);
      };
      /**
       * ==========================================================================
       * Element-specific touch-related even handlers
       * ==========================================================================
       * @hidden
       */

      /**
        * Handles an event when an [[InteractionObject]] is touched on a touch
        * device.
        *
        * @ignore Exclude from docs
        * @param io  Element
        * @param ev  Original event
        */


      Interaction.prototype.handleTouchDown = function (io, ev) {
        // Stop further propagation so we don't get multiple triggers on hybrid
        // devices (both mouse and touch capabilities)
        //this.maybePreventDefault(io, ev);
        //return;
        // Process each changed touch point
        for (var i = 0; i < ev.changedTouches.length; i++) {
          // Get pointer
          var pointer = this.getPointer(ev.changedTouches[i]);
          this.maybePreventDefault(io, ev, pointer); // Reset pointer

          this.resetPointer(pointer, ev.changedTouches[i]); // Process down

          this.handleDown(io, pointer, ev);
        }
      };
      /**
       * ==========================================================================
       * Universal handlers
       * ==========================================================================
       * @hidden
       */

      /**
       * Handles click/tap. Checks for doublehit.
       *
       * @ignore Exclude from docs
       * @param io       Interaction object
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.handleHit = function (io, pointer, ev) {
        // Check if this is a double-hit
        var now = _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]();

        if (io.lastHit && io.lastHit >= now - this.getHitOption(io, "doubleHitTime")) {
          // Yup - it's a double-hit
          // Cancel the hit
          //clearTimeout(io.lastHitPointer.hitTimeout);
          // If it happened too fast it probably means that hybrid device just
          // generated two events for the same tap
          if (now - io.lastHit < 100) {
            // Ignore
            return;
          } // Clear last hit


          io.lastHit = undefined;
          io.lastHitPointer = undefined; // Dispatch event

          if (io.events.isEnabled("doublehit") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "doublehit",
              target: io,
              point: pointer.point,
              event: ev,
              touch: pointer.touch
            };
            io.events.dispatchImmediately("doublehit", imev);
          }
        } else {
          // Log last hit
          io.lastHit = now;
          io.lastHitPointer = pointer;

          if (pointer.button === 3) {
            // Execute HIT now
            if (io.events.isEnabled("rightclick") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
              var imev = {
                type: "rightclick",
                target: io,
                event: ev
              };
              io.events.dispatchImmediately("rightclick", imev);
            }
          } else {
            if (io.events.isEnabled("hit") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
              var imev = {
                type: "hit",
                target: io,
                event: ev,
                point: pointer.point,
                touch: pointer.touch
              };
              io.events.dispatchImmediately("hit", imev);
            }
          }
        }
      };
      /**
       * Handles pointer hovering over [[InteractionObject]].
       *
       * @ignore Exclude from docs
       * @param io       Interaction object
       * @param pointer  Pointer
       * @param ev       Original event
       * @param soft     Invoked by helper function
       */


      Interaction.prototype.handleOver = function (io, pointer, ev, soft) {
        if (soft === void 0) {
          soft = false;
        }

        if (!io.hoverable) {
          return;
        } // Remove any delayed outs


        this.processDelayed(); // Add pointer

        io.overPointers.moveValue(pointer); // Check if object is not yet hovered

        if (!io.isRealHover) {
          // Set element as hovered
          io.isHover = true;
          io.isRealHover = true;
          this.overObjects.moveValue(io); // Generate body track event. This is needed so that if element loads
          // under unmoved mouse cursor, we still need all the actions that are
          // required to happen to kick in.

          this.handleTrack(this.body, pointer, ev, true); // Event

          if (io.events.isEnabled("over") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "over",
              target: io,
              event: ev,
              pointer: pointer,
              touch: pointer.touch
            };
            io.events.dispatchImmediately("over", imev);
          }
        }
      };
      /**
       * Handles when [[InteractionObject]] is no longer hovered.
       *
       * If `soft = true`, this means that method is being invoked by some other
       * code, not hard "out" function, like `handleUp` which implies we need to
       * run additional checks before unhovering the object.
       *
       * @ignore Exclude from docs
       * @param io       Interaction object
       * @param pointer  Pointer
       * @param ev       Original event
       * @param soft     Invoked by helper function
       * @param force    Force imediate out
       */


      Interaction.prototype.handleOut = function (io, pointer, ev, soft, force) {
        var _this = this;

        if (soft === void 0) {
          soft = false;
        }

        if (force === void 0) {
          force = false;
        }

        if (!io.hoverable) {
          return;
        } // Remove pointer


        io.overPointers.removeValue(pointer); // Check if element is still hovered

        if (io.isHover && (!io.hasDelayedOut || force)) {
          // Should we run additional checks?
          if (soft && io.overPointers.length) {
            // There are still pointers hovering - don't do anything else and
            // wait until either no over pointers are there or we get a hard out
            // event.
            return;
          } // Should we delay "out" if this is happening on a touch device?


          if (pointer.touch && !force && !this.old(pointer)) {
            // This is a touch pointer, and it hasn't moved, let's pretend
            // the object is still hovered, and act as per "behavior" setting
            var behavior = this.getHoverOption(io, "touchOutBehavior");

            if (behavior == "leave") {
              // Set to "leave", so we do not execute any "out" event.
              // It will be handled by any other interaction that happens
              // afterwards.
              this._delayedEvents.out.push({
                type: "out",
                io: io,
                pointer: pointer,
                event: ev,
                keepUntil: _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]() + 500
              });

              io.hasDelayedOut = true;
              return;
            } else if (behavior == "delay" && this.getHoverOption(io, "touchOutDelay")) {
              this._delayedEvents.out.push({
                type: "out",
                io: io,
                pointer: pointer,
                event: ev,
                keepUntil: _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]() + 500,
                timeout: this.setTimeout(function () {
                  _this.handleOut(io, pointer, ev, true);
                }, this.getHoverOption(io, "touchOutDelay"))
              });

              return;
            } else {// Nothing for "remove" - that's how it works "out-of-the-box"
            }
          } // Set element as not hovered


          io.isHover = false;
          this.overObjects.removeValue(io); // Invoke event

          if (io.events.isEnabled("out") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "out",
              target: io,
              event: ev,
              pointer: pointer,
              touch: pointer.touch
            };
            io.events.dispatchImmediately("out", imev);
          } // Reset object from lefover delayed outs, pointers


          io.overPointers.clear();
          io.hasDelayedOut = false; // @todo (clean delayed)
        }
      };
      /**
       * Processes dalyed events, such as "out" event that was initiated for
       * elements by touch.
       */


      Interaction.prototype.processDelayed = function () {
        var delayedEvent;

        while (true) {
          delayedEvent = this._delayedEvents.out.pop();

          if (!delayedEvent) {
            break;
          }

          if (delayedEvent.timeout) {
            delayedEvent.timeout.dispose();
          }

          this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);
        }
      };
      /**
       * Performs tasks on pointer down.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.handleDown = function (io, pointer, ev) {
        // Need to prevent default event from happening on transformable objects
        this.maybePreventDefault(io, ev, pointer); // Stop inertia animations if they're currently being played out

        if (io.inert) {
          this.stopInertia(io);
        } // Trigger hover because some touch devices won't trigger over events
        // on their own


        this.handleOver(io, pointer, ev, true); // Add pointer to list

        io.downPointers.moveValue(pointer); // Apply styles if necessary

        this.applyCursorDownStyle(io, pointer); // Check if object is already down

        if (!io.isDown) {
          // Lose focus if needed
          if (io.focusable !== false && this.getHitOption(io, "noFocus") && this.focusedObject) {
            _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["blur"]();
          } // Set object as hovered


          io.isDown = true;
          this.downObjects.moveValue(io); // Prep object for dragging and/or resizing

          if (io.draggable) {
            this.processDragStart(io, pointer, ev);
          }

          if (io.resizable) {
            this.processResizeStart(io, pointer, ev);
          }
        } // Dispatch "down" event


        if (io.events.isEnabled("down") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "down",
            target: io,
            event: ev,
            pointer: pointer,
            touch: pointer.touch
          };
          io.events.dispatchImmediately("down", imev);
        }
      };
      /**
       * Performs tasks on pointer up.
       *
       * @ignore Exclude from docs
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.handleGlobalUp = function (pointer, ev, cancelled) {
        var _this = this;

        if (cancelled === void 0) {
          cancelled = false;
        } // Process all down objects


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__["each"](this.downObjects.backwards().iterator(), function (io) {
          // Check if this particular pointer is pressing down
          // on object
          if (io && io.downPointers.contains(pointer)) {
            _this.handleUp(io, pointer, ev, cancelled);
          }
        });
      };
      /**
       * Simulates all pointers being up once mouse leaves document area.
       *
       * @ignore Exclude from docs
       * @param ev       Original event
       */


      Interaction.prototype.handleDocumentLeave = function (ev) {
        var _this = this; // Process all down objects


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__["each"](this.downObjects.backwards().iterator(), function (io) {
          io.downPointers.each(function (pointer) {
            _this.handleUp(io, pointer, ev);
          });
        });
      };
      /**
       * Handles when [[InteractionObject]] is no longer hovered.
       *
       * @ignore Exclude from docs
       * @param io       Interaction object
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.handleUp = function (io, pointer, ev, cancelled) {
        if (cancelled === void 0) {
          cancelled = false;
        } // Restore cursor style


        this.restoreCursorDownStyle(io, pointer); // Remove pointer from the list

        io.downPointers.removeValue(pointer); // Trigger out because some touch devices won't trigger out events
        // on their own

        if (pointer.touch || this._useTouchEventsOnly) {
          this.handleOut(io, pointer, ev, true);
        } // Check if object still down


        if (io.isDown) {
          // Check if there are no other pointers hovering this element
          if (io.downPointers.length == 0) {
            // Set element as no longer down
            io.isDown = false;
            this.downObjects.removeValue(io);
          } // Dispatch "up" event


          if (io.events.isEnabled("up") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "up",
              target: io,
              event: ev,
              pointer: pointer,
              touch: pointer.touch
            };
            io.events.dispatchImmediately("up", imev);
          } // Check if this was not a cancelled event.
          // If event was canelled (which might happen if gesture resulted in
          // navigation or page scroll) there's no point in triggering hit and
          // other actions.


          if (!cancelled) {
            // Handle swiping-related stuff
            if (io.swipeable && this.swiped(io, pointer)) {
              // Swiped - nothing else should happen
              this.handleSwipe(io, pointer, ev);
            } else {
              // Check if it maybe a click
              if (io.clickable && !this.moved(pointer, this.getHitOption(io, "hitTolerance"))) {
                this.handleHit(io, pointer, ev);
              } // Handle inertia


              if (io.inert && this.moved(pointer, this.getHitOption(io, "hitTolerance"))) {
                this.handleInertia(io, pointer);
              } else if (io.draggable) {
                this.processDragStop(io, pointer, ev);
              }

              if (io.resizable) {
                this.processResizeStop(io, pointer, ev);
              }
            }
          }
        }
      };
      /**
       * Checks if event needs to be prevented on draggable and such items, so that
       * touch gestures like navigation and scroll do not kick in.
       *
       * @param io  Object
       * @param ev  Event
       */


      Interaction.prototype.maybePreventDefault = function (io, ev, pointer) {
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev) && (io.draggable || io.swipeable || io.trackable || io.resizable) && !this.isGlobalElement(io) && ev.cancelable !== false && (!io.isTouchProtected || !pointer || !pointer.touch)) {
          ev.preventDefault();
        }
      };
      /**
       * Handles pointer move.
       *
       * @ignore Exclude from docs
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.handleGlobalMove = function (pointer, ev) {
        var _this = this; // Process hovered elements
        // We check if the element became unhovered without reporting the mouseout
        // event. (it happens in some cases)


        if (!pointer.touch) {
          var target_1 = _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["eventTarget"](pointer.lastEvent);

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__["each"](this.overObjects.backwards().iterator(), function (io) {
            // Is this pointer relevant to element?
            if (io && io.overPointers.contains(pointer) && io.hoverable) {
              // Check if the element is still hovered
              var reset = false;

              if (io.element && pointer.lastEvent) {
                if (!_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["contains"](io.element, target_1)) {
                  reset = true;
                }
              } else {
                reset = true;
              }

              if (reset) {
                _this.handleOut(io, pointer, ev, true);
              }
            }
          });
        } // Process down elements


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__["each"](this.transformedObjects.backwards().iterator(), function (io) {
          // Is this pointer relevant to element?
          if (io.downPointers.contains(pointer) && // Swipe still happening?
          !(io.swipeable && _this.swiping(io, pointer)) && (io.draggable || io.resizable)) {
            _this.handleTransform(io, ev);
          }
        }); // Process tracked elements


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__["each"](this.trackedObjects.backwards().iterator(), function (io) {
          // Is this pointer relevant to element?
          if (!io.overPointers.contains(pointer)) {
            _this.handleTrack(io, pointer, ev);
          }
        });
      };
      /**
       * Handles reporting of pointer movement.
       *
       * @ignore Exclude from docs
       * @param io        Element
       * @param pointer    Pointer
       * @param ev         Original event
       * @param skipCheck  Sould we skip check if cursor actually moved
       */


      Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {
        if (skipCheck === void 0) {
          skipCheck = false;
        } // Do nothing if the cursor did not actually move


        if (!skipCheck && !this.moved(pointer, 0)) {
          return;
        } // Initiate TRACK event


        if (io.events.isEnabled("track") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "track",
            target: io,
            event: ev,
            point: pointer.point,
            pointer: pointer,
            touch: pointer.touch
          };
          io.events.dispatchImmediately("track", imev);
        }
      };
      /**
       * Handles swipe action.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.handleSwipe = function (io, pointer, ev) {
        // We pass in InteractionEvent with shift in mouse coordinates
        // between when the drag started and ended
        if (io.events.isEnabled("swipe") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          var imev = {
            type: "swipe",
            target: io,
            event: ev,
            touch: pointer.touch
          };
          io.events.dispatchImmediately("swipe", imev);
        }

        if (pointer.startPoint.x < pointer.point.x) {
          if (io.events.isEnabled("swiperight") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "swiperight",
              target: io,
              event: ev,
              touch: pointer.touch
            };
            io.events.dispatchImmediately("swiperight", imev);
          }
        } else {
          if (io.events.isEnabled("swipeleft") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "swipeleft",
              target: io,
              event: ev,
              touch: pointer.touch
            };
            io.events.dispatchImmediately("swipeleft", imev);
          }
        }
      };
      /**
       * Handles event triggering for wheel rotation.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param deltaX   Horizontal shift
       * @param deltaY   Vertical shift
       * @param ev       Original event
       */


      Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {
        var shift = {
          x: deltaX,
          y: deltaY
        }; // Trigger generic WHEEL event

        if (io.events.isEnabled("wheel") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
          io.events.dispatchImmediately("wheel", {
            type: "wheel",
            target: io,
            event: ev,
            point: pointer.point,
            shift: shift
          });
        } // Trigger direction-specific events
        // Horizontal


        if (deltaX < 0) {
          if (io.events.isEnabled("wheelleft") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            io.events.dispatchImmediately("wheelleft", {
              type: "wheelleft",
              target: io,
              event: ev,
              point: pointer.point,
              shift: shift
            });
          }
        } else if (deltaX > 0) {
          if (io.events.isEnabled("swiperight") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            io.events.dispatchImmediately("wheelright", {
              type: "wheelright",
              target: io,
              event: ev,
              point: pointer.point,
              shift: shift
            });
          } // Vertical

        } else if (deltaY < 0) {
          if (io.events.isEnabled("wheelup") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            io.events.dispatchImmediately("wheelup", {
              type: "wheelup",
              target: io,
              event: ev,
              point: pointer.point,
              shift: shift
            });
          }
        } else if (deltaY > 0) {
          if (io.events.isEnabled("wheeldown") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            io.events.dispatchImmediately("wheeldown", {
              type: "wheeldown",
              target: io,
              event: ev,
              point: pointer.point,
              shift: shift
            });
          }
        }
      };
      /**
       * Initiates inertia checking sub-routines for different movement types:
       * drag, resize.
       *
       * @ignore Exclude from docs
       * @param sprite
       * @param pointer
       */


      Interaction.prototype.handleInertia = function (io, pointer) {
        if (io.draggable && io.downPointers.length === 0) {
          this.handleMoveInertia(io, pointer);
        }

        if (io.resizable && io.downPointers.length > 1) {
          this.handleResizeInertia(io, pointer);
        }
      };
      /**
       * Continues moving the element to simulate the effect of inertia. Happens
       * when `inert` and `draggable` object is dragged and then released.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       */


      Interaction.prototype.handleMoveInertia = function (io, pointer) {
        var interaction = io;
        var type = "move";
        var point = {
          "x": pointer.point.x,
          "y": pointer.point.y
        };
        var startPoint = {
          "x": pointer.startPoint.x,
          "y": pointer.startPoint.y
        }; // Init inertia object

        var inertia = new _Inertia__WEBPACK_IMPORTED_MODULE_8__["Inertia"](interaction, type, point, startPoint); // Get inertia data

        var ref = this.getTrailPoint(pointer, _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]() - this.getInertiaOption(io, "move", "time"));

        if (typeof ref === "undefined") {
          this.processDragStop(io, pointer, pointer.lastUpEvent);
          return;
        } // Init animation options


        var factor = this.getInertiaOption(io, "move", "factor");
        var animationOptions = [{
          "to": pointer.point.x + (pointer.point.x - ref.point.x) * factor,
          "property": "x"
        }, {
          "to": pointer.point.y + (pointer.point.y - ref.point.y) * factor,
          "property": "y"
        }]; // Start animation

        var animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_3__["Animation"](inertia, animationOptions, this.getInertiaOption(io, "move", "duration"), this.getInertiaOption(io, "move", "easing")).start();

        this._disposers.push(animation.events.on("animationended", function (ev) {
          inertia.done();
        })); // Add inertia object


        io.inertias.setKey("move", inertia);
      };
      /**
       * Continues resizing of a `resizable` element after it is resized and
       * released.
       *
       * **NOTE:** this is is just a placeholder function. No actual fucntionality
       * is implemented, yet.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       */


      Interaction.prototype.handleResizeInertia = function (io, pointer) {// Some day, folks. Some day...
      };
      /**
       * Recalculates element's position and size based on position of
       * all its related pointers.
       *
       * @ignore Exclude from docs
       * @param io  Element
       * @param ev  Original event
       */


      Interaction.prototype.handleTransform = function (io, ev) {
        // Get primary pointer and its respective points
        var pointer1 = io.downPointers.getIndex(0);
        var point1 = null;
        var startPoint1 = null;

        if (pointer1) {
          point1 = pointer1.point;
          startPoint1 = pointer1.startPoint;
        } // Init secondary pointer


        var pointer2;
        var point2;
        var startPoint2; // Use center of the sprite to simulate "second" point of touch

        point2 = {
          "x": io.originalPosition.x,
          "y": io.originalPosition.y
        };
        startPoint2 = point2; // Determine if it's a sinngle pointer or multi

        var singlePoint = true;

        for (var i = 1; i < io.downPointers.length; i++) {
          // Get pointer
          var nextPointer = io.downPointers.getIndex(i); // Doublecheck if it's not the same pointer by comparing original position

          if (startPoint1.x != nextPointer.startPoint.x && startPoint1.y != nextPointer.startPoint.y) {
            // Several pointers down
            singlePoint = false; // Get second pointer

            pointer2 = nextPointer;
            point2 = pointer2.point;
            startPoint2 = pointer2.startPoint; // Stop looking

            break;
          }
        } // Primary touch point moved?


        var pointer1Moved = pointer1 && this.moved(pointer1, 0); // Report DRAG_START if necessary

        if (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {
          if (io.events.isEnabled("dragstart") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            io.events.dispatchImmediately("dragstart", pointer1.dragStartEvents.shift());
          } //delete pointer1.dragStartEvents;

        } // Determine what we do in order of superiority


        if (singlePoint && io.draggable) {
          // We have only one pointer and the Sprite is draggable
          // There's nothing else to be done - just move it
          this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);
        } else {
          // Check if second touch point moved
          var pointer2Moved = pointer2 && this.moved(pointer2, 0);

          if (io.draggable && io.resizable) {
            //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);
            this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved, pointer1.touch);
            this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);
          } else {
            if (io.draggable) {
              this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);
            }

            if (io.resizable && (!singlePoint || ev.ctrlKey)) {
              this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);
            }
          }
        }
      };
      /**
       * Handles movement of the dragged element.
       *
       * @ignore Exclude from docs
       * @param io            Element
       * @param point         Current point of the pointer
       * @param startPoint    Starting point of the pointer
       * @param ev            Original event
       * @param pointerMoved  Did pointer move?
       */


      Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved, touch) {
        if (pointerMoved) {
          if (io.events.isEnabled("drag") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused && (!io.isTouchProtected || !touch)) {
            var imev = {
              type: "drag",
              target: io,
              event: ev,
              shift: {
                "x": point.x - startPoint.x,
                "y": point.y - startPoint.y
              },
              startPoint: startPoint,
              point: point,
              touch: touch
            };
            io.events.dispatchImmediately("drag", imev);
          }
        }
      };
      /**
       * Handles resizing of the element.
       *
       * @ignore Exclude from docs
       * @param io            Element
       * @param point1        Current position of reference point #1
       * @param startPoint1   Original position of reference point #1
       * @param point2        Current position of reference point #2
       * @param startPoint2   Original position of reference point #2
       * @param ev            Original event
       * @param pointerMoved  Did pointer move?
       */


      Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved, touch) {
        if (io.events.isEnabled("resize") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused && (!io.isTouchProtected || !touch)) {
          var imev = {
            type: "resize",
            target: io,
            event: ev,
            scale: _utils_Math__WEBPACK_IMPORTED_MODULE_13__["getScale"](point1, startPoint1, point2, startPoint2),
            startPoint1: startPoint1,
            point1: point1,
            startPoint2: startPoint2,
            point2: point2,
            touch: touch
          };
          io.events.dispatchImmediately("resize", imev);
        }
      };
      /**
       * Handles all the preparations of the element when it starts to be dragged.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.processDragStart = function (io, pointer, ev) {
        // Add to draggedObjects
        this.transformedObjects.moveValue(io); // Report "dragstart"

        var imev = {
          type: "dragstart",
          target: io,
          event: ev,
          touch: pointer ? pointer.touch : false
        }; // Log object that we are starting to drag, so we can check against and
        // avoid hovers on other objects that might be in the path of movement.

        if (pointer) {
          pointer.dragTarget = io; //pointer.startPoint = pointer.point;
        }
        /**
         * If pointer is set we will not fire the event until the pointer has
         * actually moved. If it's not set we don't have to wait for anything, so we
         * just fire off the event right away.
         */


        if (pointer && pointer.dragStartEvents) {
          pointer.dragStartEvents.push(imev);
        } else {
          if (!_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            io.dispatchImmediately("dragstart", imev);
          }
        }
      };
      /**
       * Finishes up element drag operation.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.processDragStop = function (io, pointer, ev) {
        // Pointer set?
        if (!pointer) {
          pointer = this.getDragPointer(io);
        } // Unset drag object


        if (pointer) {
          pointer.dragTarget = undefined;
        } // Removed from transformedObjects


        this.transformedObjects.removeValue(io); // Unlock document
        //this.unlockDocument();
        // Report dragstop

        if (!pointer || this.moved(pointer, 0)) {
          if (io.events.isEnabled("dragstop") && !_System__WEBPACK_IMPORTED_MODULE_11__["system"].isPaused) {
            var imev = {
              type: "dragstop",
              target: io,
              touch: pointer ? pointer.touch : false
            };
            io.events.dispatchImmediately("dragstop", imev);
          }
        }
      };
      /**
       * Handles all the preparations of the element when it starts to be resized.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.processResizeStart = function (io, pointer, ev) {
        // Add to draggedObjects
        this.transformedObjects.moveValue(io);
      };
      /**
       * Finishes up element drag operation.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       * @param ev       Original event
       */


      Interaction.prototype.processResizeStop = function (io, pointer, ev) {
        // Removed from transformedObjects
        this.transformedObjects.removeValue(io);
      };
      /**
       * ==========================================================================
       * Controls for InteractionObjects initiating directly
       * ==========================================================================
       * @hidden
       */

      /**
       * Manually triggers drag start on the element. Could be useful in cases
       * where tracking or dragging one element can also influence dragging another
       * element.
       *
       * Passing in `pointer` reference is advisable. If not passed in it will try
       * to determine which pointer to attach to. However, it's better to specify
       * it explicitly.
       *
       * @param io       Element
       * @param pointer  Pointer
       */


      Interaction.prototype.dragStart = function (io, pointer) {
        if (!pointer) {
          pointer = this.getDragPointer(io);
        }

        if (pointer) {
          this.handleDown(io, pointer, pointer.lastDownEvent);
        }
      };
      /**
       * Manually ends drag on the element.
       *
       * @param io       Element
       * @param pointer  Pointer
       */


      Interaction.prototype.dragStop = function (io, pointer) {
        if (!pointer) {
          pointer = this.getDragPointer(io);
        }

        if (pointer) {
          this.handleGlobalUp(pointer, pointer.lastUpEvent);
        }
      };
      /**
       * This method uses a fuzzy logic to find the pointer to be used for dragging.
       * Beware that this is not a rock-solid solution. If there are a few objects
       * being dragged at the same time, you may get unexepected results.
       *
       * @param io  InteractionObject to get pointers from
       * @return Pointer currently being used for dragging
       */


      Interaction.prototype.getDragPointer = function (io) {
        if (io) {
          // InteractionObject is supplied
          // Use it's first down pointer
          return io.downPointers.getIndex(0);
        } else if (this.transformedObjects.length) {
          // Use first dragged object
          return this.getDragPointer(this.transformedObjects.getIndex(0));
        } else {
          return undefined;
        }
      };
      /**
       * ==========================================================================
       * Utils
       * ==========================================================================
       * @hidden
       */

      /**
       * Returns pointer id for the given event object.
       *
       * @param ev  Event
       * @return Pointer ID
       */


      Interaction.prototype.getPointerId = function (ev) {
        var id = "";

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.identifier)) {
          id = "" + ev.identifier;
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.pointerId)) {
          id = "" + ev.pointerId;
        } else {
          id = "m";
        }

        return id.replace("-", "");
      };
      /**
       * Returns a cursor position of the event.
       *
       * @param ev  Original event
       * @return Event point
       */


      Interaction.prototype.getPointerPoint = function (ev) {
        return {
          "x": ev.clientX,
          "y": ev.clientY
        };
      };
      /**
       * Returns [[Pointer]] object that is associated with the Event.
       *
       * If no such [[Pointer]] object exists, it is created.
       *
       * @param ev  Event
       * @return Pointer
       */


      Interaction.prototype.getPointer = function (ev) {
        // Get pointer id
        var id = this.getPointerId(ev); // Get current coordinates

        var point = this.getPointerPoint(ev); // Look for the pointer in the Dictionary if it maybe already exists

        var pointer;

        if (this.pointers.hasKey(id)) {
          // We already have such pointer
          pointer = this.pointers.getKey(id); // We need this, because Edge reuses pointer ids across touch and mouse

          pointer.touch = this.isPointerTouch(ev); // Reset pointer
          //pointer.point = point;
        } else {
          // Init pointer
          pointer = {
            "id": id,
            //"touch": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != "pointer"),
            //"touch": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != "mouse"),
            "touch": this.isPointerTouch(ev),
            "startPoint": point,
            "startTime": _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"](),
            "point": point,
            "track": [],
            "swipeCanceled": false,
            "dragStartEvents": []
          }; // Add first breadcrumb

          this.addBreadCrumb(pointer, point); // Add for re-use later

          this.pointers.setKey(id, pointer);
        } // Log last event


        pointer.lastEvent = ev;
        this.lastPointer = pointer;
        return pointer;
      };
      /**
       * Determines if pointer event originated from a touch pointer or mouse.
       *
       * @param ev  Original event
       * @return Touch pointer?
       */


      Interaction.prototype.isPointerTouch = function (ev) {
        if (typeof Touch !== "undefined" && ev instanceof Touch) {
          return true;
        } else if (typeof PointerEvent !== "undefined" && ev instanceof PointerEvent && _utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.pointerType)) {
          switch (ev.pointerType) {
            case "touch":
            case "pen":
            case 2:
              return true;

            case "mouse":
            case 4:
              return false;

            default:
              return !(ev instanceof MouseEvent);
          }
        } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.type)) {
          if (ev.type.match(/^mouse/)) {
            return false;
          }
        }

        return true;
      };
      /**
       * Resets the poiner to original state, i.e. cleans movement information,
       * starting point, etc.
       *
       * @param pointer Pointer
       */


      Interaction.prototype.resetPointer = function (pointer, ev) {
        // Get current coordinates
        var point = this.getPointerPoint(ev);
        ;
        pointer.startTime = _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]();
        pointer.startPoint = {
          x: point.x,
          y: point.y
        };
        pointer.point = {
          x: point.x,
          y: point.y
        };
        pointer.track = [];
        pointer.swipeCanceled = false; //clearTimeout(pointer.swipeTimeout);
        //clearTimeout(pointer.holdTimeout);
      };
      /**
       * Adds a "breadcrumb" point to the [[Pointer]] to log its movement path.
       *
       * @param pointer  Pointer
       * @param point    Point coordinates
       */


      Interaction.prototype.addBreadCrumb = function (pointer, point) {
        pointer.track.push({
          "timestamp": _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"](),
          "point": point
        });
      };
      /**
       * Prepares the document for various touch-related operations.
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.lockDocument = function () {
        this.prepElement(this.body);
      };
      /**
       * Restores document functionality.
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.unlockDocument = function () {
        if (this.transformedObjects.length == 0) {
          this.restoreAllStyles(this.body);
        }
      };
      /**
       * Lock element (disable all touch)
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.lockElement = function (io) {
        this.prepElement(io);
      };
      /**
       * Restores element's functionality.
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.unlockElement = function (io) {
        this.restoreAllStyles(io);
      };
      /**
       * Locks document's wheel scroll.
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.lockWheel = function () {
        window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent, this._passiveSupported ? {
          passive: false
        } : false);
      };
      /**
       * Unlocks document's wheel scroll.
       *
       * @ignore Exclude from docs
       */


      Interaction.prototype.unlockWheel = function () {
        window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);
      };
      /**
       * Checks if top element at pointer's position belongs to the SVG.
       *
       * @ignore Exlude from docs
       * @param pointer  Pointer
       * @param svg      The <svg> element
       * @param id       A unique identifier of the object that is checking for locality
       * @return Belongs to SVG
       */


      Interaction.prototype.isLocalElement = function (pointer, svg, id) {
        var cached = this.getCache("local_pointer_" + pointer.id);

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](cached)) {
          return cached;
        }

        var target = (_utils_DOM__WEBPACK_IMPORTED_MODULE_9__["getRoot"](svg) || document).elementFromPoint(pointer.point.x, pointer.point.y);

        var local = target && _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["contains"](svg, target);

        this.setCache("local_pointer_" + pointer.id + "_" + id, local, 100);
        return local;
      };
      /**
       * A function that cancels mouse wheel scroll.
       *
       * @ignore Exclude from docs
       * @param ev  Event object
       * @return Returns `false` to cancel
       */


      Interaction.prototype.wheelLockEvent = function (ev) {
        ev.preventDefault();
        return false;
      };
      /**
       * Applies a set of styles to an element. Stores the original styles so they
       * can be restored later.
       *
       * @ignore
       * @param io      Element
       */


      Interaction.prototype.prepElement = function (io) {
        var el = io.element;

        if (el) {
          // Define possible props
          var props = ["touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction", "userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect", "touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect", "touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout", "contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming", "userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"];

          for (var i = 0; i < props.length; i++) {
            if (props[i] in el.style) {
              this.setTemporaryStyle(io, props[i], "none");
            }
          } // Remove iOS-specific selection;


          this.setTemporaryStyle(io, "tapHighlightColor", "rgba(0, 0, 0, 0)"); //this.setTemporaryStyle(io, "webkitOverflowScrolling", "none");
        }
      };
      /**
       * Restores replaced styles
       *
       * @ignore
       * @param  io  Element
       */


      Interaction.prototype.unprepElement = function (io) {
        var el = io.element;

        if (el) {
          // Define possible props
          var props = ["touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction", "userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect", "touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect", "touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout", "contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming", "userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"];

          for (var i = 0; i < props.length; i++) {
            if (props[i] in el.style) {
              this.restoreStyle(io, props[i]);
            }
          } // Remove iOS-specific selection;


          this.restoreStyle(io, "tapHighlightColor"); //this.restoreStyle(io, "webkitOverflowScrolling");
        }
      };
      /**
       * Returns an option associated with hit events.
       *
       * @ignore Exclude from docs
       * @param io      Element
       * @param option  Option key
       * @return Option value
       */


      Interaction.prototype.getHitOption = function (io, option) {
        var res = io.hitOptions[option];

        if (typeof res === "undefined") {
          res = this.hitOptions[option];
        }

        return res;
      };
      /**
       * Returns an option associated with hover events.
       *
       * @ignore Exclude from docs
       * @param io      Element
       * @param option  Option key
       * @return Option value
       */


      Interaction.prototype.getHoverOption = function (io, option) {
        var res = io.hoverOptions[option];

        if (typeof res === "undefined") {
          res = this.hoverOptions[option];
        }

        return res;
      };
      /**
       * Returns an option associated with swipe events.
       *
       * @ignore Exclude from docs
       * @param io      Element
       * @param option  Option key
       * @return Option value
       */


      Interaction.prototype.getSwipeOption = function (io, option) {
        var res = io.swipeOptions[option];

        if (typeof res === "undefined") {
          res = this.swipeOptions[option];
        }

        return res;
      };
      /**
       * Returns an option for keyboard.
       *
       * @ignore Exclude from docs
       * @param io      Element
       * @param option  Option key
       * @return Option value
       */


      Interaction.prototype.getKeyboardOption = function (io, option) {
        var res = io.keyboardOptions[option];

        if (typeof res === "undefined") {
          res = this.keyboardOptions[option];
        }

        return res;
      };
      /**
       * Returns an option for mouse.
       *
       * @ignore Exclude from docs
       * @param io      Element
       * @param option  Option key
       * @return Option value
       */


      Interaction.prototype.getMouseOption = function (io, option) {
        var res = io.mouseOptions[option];

        if (typeof res === "undefined") {
          res = this.mouseOptions[option];
        }

        return res;
      };
      /**
       * Returns an option associated with inertia.
       *
       * @ignore Exclude from docs
       * @param io      Element
       * @param type    Inertia type
       * @param option  Option key
       * @return Option value
       */


      Interaction.prototype.getInertiaOption = function (io, type, option) {
        var options = io.inertiaOptions.getKey(type);
        var res;

        if (options && _utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](options[option])) {
          res = options[option];
        } else {
          res = this.inertiaOptions.getKey(type)[option];
        }

        return res;
      };
      /**
       * Stops currently going on inertia. Useful if inertia is currently being
       * animated and the object is being interacted with.
       *
       * @param io Element
       */


      Interaction.prototype.stopInertia = function (io) {
        var x;
        var inertias = ["move", "resize"];

        for (var i = 0; i < inertias.length; i++) {
          x = inertias[i];

          if (io.inertias.hasKey(x)) {
            var inertia = io.inertias.getKey(x);

            if (inertia) {
              inertia.dispose(); //io.inertiaAnimations.removeKey(x);
              //this.processDragStop(io);

              continue;
            }
          }
        }
      };
      /**
       * Check if swiping is currently being performed on an object.
       *
       * @param io       Element
       * @param pointer  Pointer to check
       * @return `true` if swiping
       */


      Interaction.prototype.swiping = function (io, pointer) {
        var now = _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]();

        if (pointer.swipeCanceled || !io.swipeable) {
          return false;
        } else if (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, "verticalThreshold") && pointer.startTime > now - this.getSwipeOption(io, "time")) {
          return true;
        } else {
          return false;
        }
      };
      /**
       * Returns `true` if a successfull swipe action was performed on an element.
       *
       * @param io       Element
       * @param pointer  Pointer
       * @return Swiped?
       */


      Interaction.prototype.swiped = function (io, pointer) {
        var now = _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]();

        if (pointer.swipeCanceled) {
          return false;
        } else if (Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, "horizontalThreshold") && Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, "verticalThreshold") && pointer.startTime > now - this.getSwipeOption(io, "time")) {
          return true;
        } else {
          return false;
        }
      };
      /**
       * Applies style to mouse cursor based on its stage in relation to
       * [[InteractionObject]].
       *
       * @ignore Exclude from docs
       * @param Element
       */


      Interaction.prototype.applyCursorOverStyle = function (io) {
        // Get sprite's cursor ooptions
        var options = io.cursorOptions;

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](options.overStyle)) {
          return;
        } // Apply cursor down styles


        for (var i = 0; i < options.overStyle.length; i++) {
          _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["setStyle"](io.element, options.overStyle[i].property, options.overStyle[i].value);
        }
      };
      /**
       * Applies style to mouse cursor based on its stage in relation to
       * [[InteractionObject]].
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       */


      Interaction.prototype.applyCursorDownStyle = function (io, pointer) {
        // Not applicable for touch pointers since they don't display a cursor
        if (pointer.touch) {
          return;
        }

        var downStyle = io.cursorOptions.downStyle; // Is down?

        if (io.downPointers.contains(pointer) && _utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](downStyle)) {
          // Apply cursor down styles
          for (var i = 0; i < downStyle.length; i++) {
            this.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);
            this.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);
          }
        }
      };
      /**
       * Restores original cursor style for the element.
       *
       * @ignore Exclude from docs
       * @param io       Element
       * @param pointer  Pointer
       */


      Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {
        // Not applicable for touch pointers since they don't display a cursor
        if (pointer.touch) {
          return;
        }

        var downStyle = io.cursorOptions.downStyle; // Is down?

        if (io.downPointers.contains(pointer) && _utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](downStyle)) {
          // Apply cursor down styles
          for (var i = 0; i < downStyle.length; i++) {
            this.restoreStyle(this.body, downStyle[i].property);
            this.restoreStyle(io, downStyle[i].property);
          }
        }
      };
      /**
       * Sets style on the body of the document.
       *
       * @ignore Exclude from docs
       * @param style  Style definitions
       */


      Interaction.prototype.setGlobalStyle = function (style) {
        var body = getInteraction().body;
        var styles = _utils_Type__WEBPACK_IMPORTED_MODULE_15__["isArray"](style) ? style : [style];

        for (var i = 0; i < styles.length; i++) {
          this.setTemporaryStyle(body, styles[i].property, styles[i].value);
        }
      };
      /**
       * Restores style on the body of the document.
       *
       * @ignore Exclude from docs
       * @param style  Style definitions
       */


      Interaction.prototype.restoreGlobalStyle = function (style) {
        var body = getInteraction().body;
        var styles = _utils_Type__WEBPACK_IMPORTED_MODULE_15__["isArray"](style) ? style : [style];

        for (var i = 0; i < styles.length; i++) {
          this.restoreStyle(body, styles[i].property);
        }
      };
      /**
       * Checks if element is a non-cahrt element.
       *
       * @param io  InteractionObject
       * @return Global element?
       */


      Interaction.prototype.isGlobalElement = function (io) {
        return document.body === io.element;
      };
      /**
       * Checks if pointer has moved since it was created.
       *
       * @param pointer    Pointer
       * @param tolerance  Tolerance in pixels
       * @param minTime    Minimum time required for the pointer to be down to be considered moved
       * @return `true` if the pointer has moved
       */


      Interaction.prototype.moved = function (pointer, tolerance, minTime) {
        /*// If there was more time, we don't care if cursor actually moved
        let duration = $time.getTime() - pointer.startTime;
        if ($type.hasValue(minTime) && (minTime > duration)) {
            return false;
        }*/
        if (minTime === void 0) {
          minTime = 300;
        } // That was quick measure shift


        var shift = this.getShift(pointer);
        return Math.abs(shift.x) > tolerance || Math.abs(shift.y) > tolerance;
      };
      /**
       * Returns if pointer is "old", meaning it has been pressing for more than
       * X milliseconds.
       *
       * @ignore
       * @param pointer  Pointer
       * @param minTime  Minimum time to consider pointer old
       * @return {boolean}
       */


      Interaction.prototype.old = function (pointer, minTime) {
        if (minTime === void 0) {
          minTime = 300;
        }

        return _utils_Time__WEBPACK_IMPORTED_MODULE_16__["getTime"]() - pointer.startTime > minTime;
      };
      /**
       * Returns total a shift in pointers coordinates between its original
       * position and now.
       *
       * @param pointer  Pointer
       * @return Shift in coordinates (x/y)
       */


      Interaction.prototype.getShift = function (pointer) {
        return {
          "x": pointer.startPoint.x - pointer.point.x,
          "y": pointer.startPoint.y - pointer.point.y
        };
      };
      /**
       * Returns a point from [[Pointer]]'s move history at a certain timetamp.
       *
       * @param pointer    Pointer
       * @param timestamp  Timestamp
       * @return Point
       */


      Interaction.prototype.getTrailPoint = function (pointer, timestamp) {
        var res;

        for (var i = 0; i < pointer.track.length; i++) {
          if (pointer.track[i].timestamp >= timestamp) {
            res = pointer.track[i];
            break;
          }
        }

        return res;
      };
      /**
       * Checks if same pointer already exists in the list.
       *
       * @param list     List to check agains
       * @param pointer  Pointer
       * @return Exists?
       */


      Interaction.prototype.pointerExists = function (list, pointer) {
        var exists = false;
        list.each(function (item) {
          if (item == pointer) {
            return;
          }

          exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;
        });
        return exists;
      };
      /**
       * Returns an [[InteractionObject]] representation of a DOM element.
       *
       * You can use this on any HTML or SVG element, to add interactive features
       * to it.
       *
       * @param element  Element
       * @return InteractionObject
       */


      Interaction.prototype.getInteraction = function (element) {
        return new _InteractionObject__WEBPACK_IMPORTED_MODULE_5__["InteractionObject"](element);
      };
      /**
       * Sets a style property on an element. Stores original value to be restored
       * later with [[restoreStyle]].
       *
       * @see {@link restoreStyle}
       * @param io        Element
       * @param property  Property
       * @param value     Value
       */


      Interaction.prototype.setTemporaryStyle = function (io, property, value) {
        // Get element
        //let el = io.element.tagName == "g" ? <SVGSVGElement>io.element.parentNode : io.element;
        var el = io.element; // Save original property if it is set and hasn't been saved before already

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](el.style[property]) && !io.replacedStyles.hasKey(property)) {
          io.replacedStyles.setKey(property, el.style[property]);
        } // Replace with the new one


        _utils_DOM__WEBPACK_IMPORTED_MODULE_9__["setStyle"](el, property, value);
      };
      /**
       * Restores specific style on an element.
       *
       * @param io        Element
       * @param property  Style property
       */


      Interaction.prototype.restoreStyle = function (io, property) {
        // Reset style
        if (io.replacedStyles.hasKey(property)) {
          io.element.style[property] = io.replacedStyles.getKey(property);
          io.replacedStyles.removeKey(property);
        } else {
          delete io.element.style[property];
        }
      };
      /**
       * Restore temporarily reset styles on an element.
       *
       * @param io Element
       */


      Interaction.prototype.restoreAllStyles = function (io) {
        _utils_Iterator__WEBPACK_IMPORTED_MODULE_14__["each"](io.replacedStyles.iterator(), function (a) {
          var key = a[0];
          var value = a[1];
          io.element.style[key] = value;
          io.replacedStyles.removeKey(key);
        });
      };
      /**
       * Disposes this object and cleans up after itself.
       */


      Interaction.prototype.dispose = function () {
        if (!this.isDisposed()) {
          _super.prototype.dispose.call(this);

          this.restoreAllStyles(this.body);
          this.unlockWheel();
        }
      }; // @ts-ignore Used for debugging


      Interaction.prototype.log = function (text, ev, io) {
        var show = true;

        if (show) {
          // Touchlist?
          if (ev.changedTouches) {
            for (var i = 0; i < ev.changedTouches.length; i++) {
              this.logTouch(text, ev.type, ev.changedTouches[i]);
            }

            return;
          } // Get type


          var type = "";

          if (ev.pointerType) {
            switch (ev.pointerType) {
              case 2:
                type = "touch";
                break;

              case 4:
                type = "mouse";
                break;

              default:
                type = ev.pointerType;
                break;
            }
          } else if (typeof TouchEvent != "undefined" && ev instanceof TouchEvent) {
            type = "touch";
          } else if (ev.type.match(/^mouse/)) {
            type = "mouse";
          } else {
            type = "???";
          } // Get ID


          var id = "";

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.identifier)) {
            id = ev.identifier;
          } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_15__["hasValue"](ev.pointerId)) {
            id = ev.pointerId;
          } else {
            id = "???";
          }

          if (io) {
            console.log(text + " (" + io.uid + ")  " + ev.type + "  " + type + "  " + id);
          } else {
            console.log(text + "  " + ev.type + "  " + type + "  " + id);
          }
        }
      };
      /**
       * Checks whether there are currently any objects being transformed (dragged
       * or resized).
       *
       * If `except` is set, that object will be ignored.
       *
       * @since 4.9.3
       * @param   except  Ignore this object(s)
       * @return          Objects are being transformed
       */


      Interaction.prototype.areTransformed = function (except) {
        var count = this.transformedObjects.length;

        if (except) {
          var ex = _utils_Type__WEBPACK_IMPORTED_MODULE_15__["isArray"](except) ? except : [except];

          for (var i = 0; i < ex.length; i++) {
            if (this.transformedObjects.contains(ex[i])) {
              count--;
            }
          }
        }

        return count > 0;
      };
      /**
       * Log.
       */


      Interaction.prototype.logTouch = function (text, type, ev) {
        console.log(text + "  " + type + "  " + "touch" + "  " + ev.identifier);
      };

      Object.defineProperty(Interaction, "passiveSupported", {
        /**
         * Indicates if passive mode options is supported by this browser.
         */
        get: function get() {
          var _this = this;

          if (this._passiveSupported == null) {
            // Check for passive mode support
            try {
              var options = Object.defineProperty({}, "passive", {
                get: function get() {
                  _this._passiveSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (err) {
              this._passiveSupported = false;
            }
          }

          return this._passiveSupported;
        },
        enumerable: true,
        configurable: true
      });
      return Interaction;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"]);

    var interaction = null;
    /**
     * Returns a single unified global instance of [[Interaction]].
     *
     * All code should use this function, rather than create their own instances
     * of [[Interaction]].
     */

    function getInteraction() {
      if (interaction == null) {
        interaction = new Interaction();
      }

      return interaction;
    } //# sourceMappingURL=Interaction.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionKeyboardObject.js":
  /*!**************************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionKeyboardObject.js ***!
    \**************************************************************************************************/

  /*! exports provided: InteractionKeyboardObject */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreInteractionInteractionKeyboardObjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InteractionKeyboardObject", function () {
      return InteractionKeyboardObject;
    });
    /* harmony import */


    var _Interaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * Functionality related simulating of dragging of elements using keyboard.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`
     * element using keyboard arrows.
     *
     * @ignore Exclude from docs
     */


    var InteractionKeyboardObject =
    /** @class */
    function () {
      /**
       * Constructor.
       *
       * @param io An InteractionObject
       */
      function InteractionKeyboardObject(io, ev) {
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         */
        this._disposed = false;
        /**
         * Indicates direction of current horizontal movement.
         *
         * 0 - not moving horizontally
         * 1 - moving right
         * -1 - moving left
         */

        this.directionX = 0;
        /**
         * Indicates direction of current vertical movement.
         *
         * 0 - not moving vertically
         * 1 - moving down
         * -1 - moving up
         */

        this.directionY = 0;
        this.interaction = io;
        this.keyboardEvent = ev;
        this._startedOn = new Date().getTime();
        Object(_Interaction__WEBPACK_IMPORTED_MODULE_0__["getInteraction"])().processDragStart(io);

        _System__WEBPACK_IMPORTED_MODULE_1__["system"].animations.push(this);

        this.update();
      }
      /**
       * It's an update method which is called by the system if
       * [[InteractionObject]] is used as animation.
       *
       * This will update coordinates of the element based on the movement
       * directions.
       */


      InteractionKeyboardObject.prototype.update = function () {
        // Init and get settings
        var io = this.interaction;
        var speed = Object(_Interaction__WEBPACK_IMPORTED_MODULE_0__["getInteraction"])().getKeyboardOption(io, "speed"),
            accelleration = Object(_Interaction__WEBPACK_IMPORTED_MODULE_0__["getInteraction"])().getKeyboardOption(io, "accelleration"),
            accellerationDelay = Object(_Interaction__WEBPACK_IMPORTED_MODULE_0__["getInteraction"])().getKeyboardOption(io, "accellerationDelay"),
            shift = {
          x: 0,
          y: 0
        }; // If SHIFT key is pressed we slash speed by half and disable accelleration

        if (this.keyboardEvent.shiftKey) {
          speed *= 0.5;
          accelleration = 1;
        } // If CTRL is pressed we increase speed by x2
        else if (this.keyboardEvent.ctrlKey) {
            speed *= 2;
          } // Get elapsed time


        var ms = new Date().getTime() - this._startedOn;

        var accelleratedMs = ms - accellerationDelay; // Add accellerated movement

        if (accelleration > 0 && accelleratedMs > 0) {
          var accellerationFactor = ms / accellerationDelay;
          ms = accellerationDelay;
          shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);
          shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);
        } // Calculate position


        shift.x += this.directionX * (speed * ms);
        shift.y += this.directionY * (speed * ms); // Simulate move on Interaction

        Object(_Interaction__WEBPACK_IMPORTED_MODULE_0__["getInteraction"])().handleTransformMove(io, shift, {
          x: 0,
          y: 0
        }, this.keyboardEvent, true, false);
      };
      /**
       * Returns if this object has been already been disposed.
       *
       * @return Is disposed?
       */


      InteractionKeyboardObject.prototype.isDisposed = function () {
        return this._disposed;
      };
      /**
       * Disposes this object. Removes from system animations.
       */


      InteractionKeyboardObject.prototype.dispose = function () {
        if (!this._disposed) {
          Object(_Interaction__WEBPACK_IMPORTED_MODULE_0__["getInteraction"])().processDragStop(this.interaction);

          _utils_Array__WEBPACK_IMPORTED_MODULE_2__["remove"](_System__WEBPACK_IMPORTED_MODULE_1__["system"].animations, this);
        }
      };

      return InteractionKeyboardObject;
    }(); //# sourceMappingURL=InteractionKeyboardObject.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js":
  /*!******************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js ***!
    \******************************************************************************************/

  /*! exports provided: InteractionObjectEventDispatcher, InteractionObject */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreInteractionInteractionObjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InteractionObject", function () {
      return InteractionObject;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _InteractionObjectEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./InteractionObjectEvents */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObjectEvents.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "InteractionObjectEventDispatcher", function () {
      return _InteractionObjectEvents__WEBPACK_IMPORTED_MODULE_1__["InteractionObjectEventDispatcher"];
    });
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _Interaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Interaction Object module
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Re-exports
     */

    /**
     * Interaction object represents an object that is subject for any kind of
     * interaction with it with any input devices: mouse, touch or keyboard.
     *
     * Any DOM element can be wrapped into an Internaction object which in turn
     * enables attaching various interaction events to it, such as: hit, drag,
     * swipe, etc.
     *
     * To create an [[InteractionObject]] out of a [[Sprite]], use:
     * `interaction.getInteractionFromSprite(sprite: Sprite)`
     *
     * To create an [[InteractionObject]] out of a a regular element:
     * `interaction.getInteraction(element: HTMLElement)`
     */


    var InteractionObject =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(InteractionObject, _super);
      /**
       * Constructor
       */

      function InteractionObject(element) {
        var _this = _super.call(this) || this;
        /**
         * @ignore
         * An [[EventDispatcher]] instance which holds events for this object
         */


        _this._eventDispatcher = new _InteractionObjectEvents__WEBPACK_IMPORTED_MODULE_1__["InteractionObjectEventDispatcher"](_this);
        /**
         * Collection of Disposers for various events. (so that those get disposed
         * when the whole InteractionObject is disposed)
         *
         * @ignore Exclude from docs
         */

        _this.eventDisposers = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["Dictionary"]();
        /**
         * A [[Dictionary]] that holds temporarily replaced original style values for
         * HTML element, so that they can be restored when the functionality that
         * replaced them is done.
         *
         * @ignore Exclude from docs
         */

        _this.replacedStyles = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["Dictionary"]();
        _this._clickable = false;
        _this._contextMenuDisabled = false;
        _this._hoverable = false;
        _this._trackable = false;
        _this._draggable = false;
        _this._swipeable = false;
        _this._resizable = false;
        _this._wheelable = false;
        _this._inert = false;
        /**
         * Is element currently hovered?
         */

        _this._isHover = false;
        /**
         * Was this element hovered via pointer or is it just "pretenting" to be
         * hovered.
         *
         * @ignore
         */

        _this.isRealHover = false;
        /**
         * Is the element hovered by touch pointer?
         */

        _this._isHoverByTouch = false;
        /**
         * Has element got any pointers currently pressing down on it?
         */

        _this._isDown = false;
        /**
         * Does element have focus?
         */

        _this._isFocused = false;
        /**
         * Is element currently protected from touch interactions?
         */

        _this._isTouchProtected = false;
        /**
         * Options used for inertia functionality.
         */

        _this._inertiaOptions = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["Dictionary"]();
        /**
         * A collection of different inertia types, currently playing out.
         *
         * @ignore Exclude from docs
         */

        _this.inertias = new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["Dictionary"]();
        /**
         * Click/tap options.
         */

        _this._hitOptions = {};
        /**
         * Hover options.
         */

        _this._hoverOptions = {};
        /**
         * Swipe gesture options.
         */

        _this._swipeOptions = {};
        /**
         * Keyboard options.
         */

        _this._keyboardOptions = {};
        /**
         * Mouse options.
         */

        _this._mouseOptions = {};
        /**
         * Cursor options.
         */

        _this._cursorOptions = {
          "defaultStyle": [{
            "property": "cursor",
            "value": "default"
          }]
        };

        _this._disposers.push(_this._eventDispatcher);

        _this._element = element;
        _this.className = "InteractionObject";

        _this._disposers.push(new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["DictionaryDisposer"](_this.inertias));

        _this._disposers.push(new _utils_Dictionary__WEBPACK_IMPORTED_MODULE_4__["DictionaryDisposer"](_this.eventDisposers));

        _this.applyTheme();

        return _this;
      }

      ;
      Object.defineProperty(InteractionObject.prototype, "events", {
        /**
         * An [[EventDispatcher]] instance which holds events for this object
         */
        get: function get() {
          return this._eventDispatcher;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "isHover", {
        /**
         * @return Hovered?
         */
        get: function get() {
          return this._isHover;
        },

        /**
         * Indicates if this element is currently hovered.
         *
         * @param value Hovered?
         */
        set: function set(value) {
          if (this.isHover != value) {
            this._isHover = value;

            if (value) {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().overObjects.moveValue(this);
            } else {
              this.isRealHover = false;
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().overObjects.removeValue(this);
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "isHoverByTouch", {
        /**
         * @return Hovered?
         */
        get: function get() {
          return this._isHoverByTouch;
        },

        /**
         * Indicates if this element is currently hovered.
         *
         * @param value Hovered?
         */
        set: function set(value) {
          if (this.isHoverByTouch != value) {
            this._isHoverByTouch = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "overPointers", {
        /**
         * A list of pointers currently over the element.
         *
         * @see {@link Pointer}
         * @return List if pointers currently hovering the element
         */
        get: function get() {
          if (!this._overPointers) {
            this._overPointers = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["List"]();
          }

          return this._overPointers;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "isDown", {
        /**
         * @return Has down pointers?
         */
        get: function get() {
          return this._isDown;
        },

        /**
         * Indicates if this element has currently any pointers pressing on it.
         *
         * @param value Has down pointers?
         */
        set: function set(value) {
          if (this.isDown != value) {
            this._isDown = value;

            if (value) {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().downObjects.moveValue(this);
            } else {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().downObjects.removeValue(this);
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "downPointers", {
        /**
         * A list of pointers currently pressing down on this element.
         *
         * @see {@link Pointer}
         * @return List of down pointers
         */
        get: function get() {
          if (!this._downPointers) {
            this._downPointers = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["List"]();
          }

          return this._downPointers;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "isFocused", {
        /**
         * @return Focused?
         */
        get: function get() {
          return this._isFocused;
        },

        /**
         * Indicates if this element is currently focused.
         *
         * @param value Focused?
         */
        set: function set(value) {
          if (this.isFocused != value) {
            this._isFocused = value;

            if (value) {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().focusedObject = this;
            } else {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().focusedObject = undefined;
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "isTouchProtected", {
        /**
         * @ignore
         * @return Touch protected?
         */
        get: function get() {
          return this._isTouchProtected;
        },

        /**
         * Indicates if this element is currently being protected from touch actions.
         *
         * @ignore
         * @param value Touch protected?
         */
        set: function set(value) {
          if (this._isTouchProtected != value) {
            this._isTouchProtected = value;

            if (value) {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().unprepElement(this);
            } else if (this.draggable || this.swipeable || this.trackable || this.resizable) {
              Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().prepElement(this);
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "clickable", {
        /**
         * @return Clickable?
         */
        get: function get() {
          return this._clickable;
        },

        /**
         * Is element clickable? Clickable elements will generate "hit" events when
         * clicked or tapped.
         *
         * @param value Clickable?
         */
        set: function set(value) {
          if (this._clickable !== value) {
            this._clickable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processClickable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "contextMenuDisabled", {
        /**
         * @return Context menu disabled?
         */
        get: function get() {
          return this._contextMenuDisabled;
        },

        /**
         * Should element prevent context menu to be displayed, e.g. when
         * right-clicked?
         *
         * @default false
         * @param value Context menu disabled?
         */
        set: function set(value) {
          if (this._contextMenuDisabled !== value) {
            this._contextMenuDisabled = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processContextMenu(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "hoverable", {
        /**
         * @return Hoverable?
         */
        get: function get() {
          return this._hoverable;
        },

        /**
         * Indicates if element should generate hover events.
         *
         * @param value Hoverable?
         */
        set: function set(value) {
          if (this._hoverable !== value) {
            this._hoverable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processHoverable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "trackable", {
        /**
         * @return Track pointer?
         */
        get: function get() {
          return this._trackable;
        },

        /**
         * Indicates if pointer movement over element should be tracked.
         *
         * @param value Track pointer?
         */
        set: function set(value) {
          if (this._trackable !== value) {
            this._trackable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processTrackable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "draggable", {
        /**
         * @return Draggable?
         */
        get: function get() {
          return this._draggable;
        },

        /**
         * Indicates if element can be dragged. (moved)
         *
         * @param value Draggable?
         */
        set: function set(value) {
          if (this._draggable !== value) {
            this._draggable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processDraggable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "swipeable", {
        /**
         * @return Track swipe?
         */
        get: function get() {
          return this._swipeable;
        },

        /**
         * Indicates whether element should react to swipe gesture.
         *
         * @param value Track swipe?
         */
        set: function set(value) {
          if (this._swipeable !== value) {
            this._swipeable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processSwipeable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "resizable", {
        /**
         * @return Resizeble?
         */
        get: function get() {
          return this._resizable;
        },

        /**
         * Indicates if element can be resized.
         *
         * @param value Resizeable?
         */
        set: function set(value) {
          if (this._resizable !== value) {
            this._resizable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processResizable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "wheelable", {
        /**
         * @return Track wheel?
         */
        get: function get() {
          return this._wheelable;
        },

        /**
         * Indicates whether track moouse wheel rotation over element.
         *
         * @param value Track wheel?
         */
        set: function set(value) {
          if (this._wheelable !== value) {
            this._wheelable = value;
            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processWheelable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "inert", {
        /**
         * @return Inert?
         */
        get: function get() {
          return this._inert;
        },

        /**
         * Indicates if element is inert, i.e. if it should carry movement momentum
         * after it is dragged and released.
         *
         * @param value Inert?
         */
        set: function set(value) {
          if (this._inert !== value) {
            this._inert = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "focusable", {
        /**
         * @return Focusable?
         */
        get: function get() {
          return this._focusable;
        },

        /**
         * Indicates if element can gain focus.
         *
         * @param value Focusable?
         */
        set: function set(value) {
          if (this._focusable !== value) {
            this._focusable = value;

            if (this._focusable && this.tabindex == -1) {
              this._tabindex = 1;
            }

            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processFocusable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "tabindex", {
        /**
         * @return Tab index
         */
        get: function get() {
          return _utils_Type__WEBPACK_IMPORTED_MODULE_6__["getValueDefault"](this._tabindex, -1);
        },

        /**
         * Element's tab index.
         *
         * @param value Tab index
         */
        set: function set(value) {
          if (this._tabindex !== value) {
            this._tabindex = value;

            if (value > -1) {
              this.focusable = true;
            }

            Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().processFocusable(this);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "element", {
        /**
         * @return Element
         */
        get: function get() {
          return this._element;
        },

        /**
         * A DOM element associated with this element.
         *
         * @param element Element
         */
        set: function set(element) {
          this._element = element;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "originalPosition", {
        /**
         * @ignore Exclude from docs
         * @return Position.
         */
        get: function get() {
          return this._originalPosition || {
            x: 0,
            y: 0
          };
        },

        /**
         * Element's original position.
         *
         * @ignore Exclude from docs
         * @param value Position
         */
        set: function set(value) {
          this._originalPosition = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "originalScale", {
        /**
         * @return Scale
         */
        get: function get() {
          return _utils_Type__WEBPACK_IMPORTED_MODULE_6__["getValueDefault"](this._originalScale, 1);
        },

        /**
         * Element's original scale.
         *
         * @ignore Exclude from docs
         * @param value Scale
         */
        set: function set(value) {
          if (this._originalScale !== value) {
            this._originalScale = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "originalAngle", {
        /**
         * @return Angle
         */
        get: function get() {
          return _utils_Type__WEBPACK_IMPORTED_MODULE_6__["getValueDefault"](this._originalAngle, 0);
        },

        /**
         * Element's original angle.
         *
         * @ignore Exclude from docs
         * @param value Angle
         */
        set: function set(value) {
          if (this._originalAngle !== value) {
            this._originalAngle = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "inertiaOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("inertiaOptions", this._inertiaOptions);
          } else {
            return this._inertiaOptions;
          }
        },

        /**
         * Inertia options.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._inertiaOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "hitOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("hitOptions", this._hitOptions);
          } else {
            return this._hitOptions;
          }
        },

        /**
         * Hit options.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._hitOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "hoverOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("hoverOptions", this._hoverOptions);
          } else {
            return this._hoverOptions;
          }
        },

        /**
         * Hover options.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._hoverOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "swipeOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("swipeOptions", this._swipeOptions);
          } else {
            return this._swipeOptions;
          }
        },

        /**
         * Swipe options.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._swipeOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "keyboardOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("keyboardOptions", this._keyboardOptions);
          } else {
            return this._keyboardOptions;
          }
        },

        /**
         * Keyboard options.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._keyboardOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "mouseOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("mouseOptions", this._mouseOptions);
          } else {
            return this._mouseOptions;
          }
        },

        /**
         * Mouse options.
         *
         * Enables controlling options related to the mouse, for example sensitivity
         * of its mouse wheel.
         *
         * E.g. the below will reduce chart's wheel-zoom speed to half its default
         * speed:
         *
         * ```TypeScript
         * chart.plotContainer.mouseOptions.sensitivity = 0.5;
         * ```
         * ```JavaScript
         * chart.plotContainer.mouseOptions.sensitivity = 0.5;
         * ```
         * ```JSON
         * {
         *   // ...
         *   "plotContainer": {
         *     "mouseOptions": {
         *       "sensitivity": 0.5
         *     }
         *   }
         * }
         * ```
         *
         * @since 4.5.14
         * @param value  Options
         */
        set: function set(value) {
          this._mouseOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(InteractionObject.prototype, "cursorOptions", {
        /**
         * @return Options
         */
        get: function get() {
          if (this.sprite && this.sprite._adapterO) {
            return this.sprite._adapterO.apply("cursorOptions", this._cursorOptions);
          } else {
            return this._cursorOptions;
          }
        },

        /**
         * Cursor options.
         *
         * @param value  Options
         */
        set: function set(value) {
          this._cursorOptions = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all properties and related assets from another object of the same
       * type.
       *
       * @param source Source object
       */

      InteractionObject.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.inertiaOptions = source.inertiaOptions;
        this.hitOptions = source.hitOptions;
        this.hoverOptions = source.hoverOptions;
        this.swipeOptions = source.swipeOptions;
        this.keyboardOptions = source.keyboardOptions;
        this.cursorOptions = source.cursorOptions;
        this.contextMenuDisabled = source.contextMenuDisabled;
        Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])().applyCursorOverStyle(this);
      };
      /**
       * @ignore Exclude from docs
       */


      InteractionObject.prototype.setEventDisposer = function (key, value, f) {
        var disposer = this.eventDisposers.getKey(key);

        if (value) {
          if (disposer == null) {
            this.eventDisposers.setKey(key, f());
          }
        } else {
          if (disposer != null) {
            disposer.dispose();
            this.eventDisposers.removeKey(key);
          }
        }
      };
      /**
       * Disposes object.
       */


      InteractionObject.prototype.dispose = function () {
        _super.prototype.dispose.call(this); // Remove from all interaction registries


        var interaction = Object(_Interaction__WEBPACK_IMPORTED_MODULE_5__["getInteraction"])();
        interaction.overObjects.removeValue(this);
        interaction.downObjects.removeValue(this);
        interaction.trackedObjects.removeValue(this);
        interaction.transformedObjects.removeValue(this); // Unlock document wheel

        if (this.isHover && this.wheelable) {
          interaction.unlockWheel();
        }

        if (interaction.focusedObject === this) {
          interaction.focusedObject = undefined;
        }
      };

      return InteractionObject;
    }(_Base__WEBPACK_IMPORTED_MODULE_2__["BaseObjectEvents"]); //# sourceMappingURL=InteractionObject.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObjectEvents.js":
  /*!************************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObjectEvents.js ***!
    \************************************************************************************************/

  /*! exports provided: InteractionObjectEventDispatcher */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreInteractionInteractionObjectEventsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InteractionObjectEventDispatcher", function () {
      return InteractionObjectEventDispatcher;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /**
     * Represents an Event Dispatcher for [[InteractionObject]].
     *
     * Besides regular [[EventDispatcher]] functionality it adds new events with
     * direct application to DOM nodes. Primarily used to handle keyboard events,
     * but can turn into something else moving forward.
     */


    var InteractionObjectEventDispatcher =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(InteractionObjectEventDispatcher, _super);

      function InteractionObjectEventDispatcher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Holds a list of Disposers for DOM events added.
         */


        _this._domEvents = {};
        return _this;
      }
      /**
       * Adds a DOM event and returns Disposer.
       *
       * @return Disposer
       */


      InteractionObjectEventDispatcher.prototype._addDOMEvent = function (type, key, listener, context) {
        var _this = this;

        if (!this._domEvents[type]) {
          var callback_1 = function callback_1(e) {
            listener.call(context, key, e);
          };

          this.target.element.addEventListener(type, callback_1, false);
          this._domEvents[type] = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_2__["CounterDisposer"](function () {
            delete _this._domEvents[type];

            _this.target.element.removeEventListener(type, callback_1, false);
          });
        }

        return this._domEvents[type].increment();
      };

      InteractionObjectEventDispatcher.prototype._dispatchKeyboardEvent = function (key, ev) {
        // TODO use this.dispatchImmediately ?
        if (this.target.events.isEnabled(key)) {
          this.target.events.dispatchImmediately(key, {
            type: key,
            target: this.target,
            event: ev
          });
        }
      };

      InteractionObjectEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {
        var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);

        var disposers = [info.disposer];

        switch (type) {
          case "hit":
          case "doublehit":
          case "rightclick":
          case "down":
          case "up":
            this.target.clickable = true;
            break;

          case "drag":
          case "dragstart":
          case "dragstop":
            this.target.draggable = true;
            break;

          case "track":
            this.target.trackable = true;
            break;

          case "resize":
            this.target.resizable = true;
            break;

          case "swipe":
          case "swipeleft":
          case "swiperight":
            this.target.swipeable = true;
            break;

          case "wheel":
          case "wheelup":
          case "wheeldown":
          case "wheelleft":
          case "wheelright":
            this.target.wheelable = true;
            break;

          case "over":
          case "out":
            this.target.hoverable = true;
            break;

          case "focus":
          case "blur":
          case "focusin":
          case "focusout":
            this.target.focusable = true;
            break;

          case "keydown":
            disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
            break;

          case "keyup":
            disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
            break;

          case "keypress":
            disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
            break;

          case "input":
            disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));
            break;
        }

        info.disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_2__["MultiDisposer"](disposers);
        return info;
      };

      return InteractionObjectEventDispatcher;
    }(_utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__["TargetedEventDispatcher"]); //# sourceMappingURL=InteractionObjectEvents.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js ***!
    \******************************************************************************/

  /*! exports provided: MouseCursorStyle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreInteractionMouseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MouseCursorStyle", function () {
      return MouseCursorStyle;
    });
    /**
     * Mouse-related functionality
     */

    /**
     * Defines static methods that hold style list for various mouse cursor styles,
     * maintaining browser compatibility.
     */


    var MouseCursorStyle =
    /** @class */
    function () {
      function MouseCursorStyle() {}
      /**
       * Styles for "grab" mouse cursor.
       */


      MouseCursorStyle.grab = [{
        "property": "cursor",
        "value": "move"
      }, {
        "property": "cursor",
        "value": "grab"
      }, {
        "property": "cursor",
        "value": "-webkit-grab"
      }];
      /**
       * Styles for "grabbing" mouse cursor.
       */

      MouseCursorStyle.grabbing = [{
        "property": "cursor",
        "value": "move"
      }, {
        "property": "cursor",
        "value": "grabbing"
      }, {
        "property": "cursor",
        "value": "-webkit-grabbing"
      }];
      /**
       * Styles for "pointer" mouse cursor. (usually used for links)
       */

      MouseCursorStyle.pointer = [{
        "property": "cursor",
        "value": "pointer"
      }];
      /**
       * Styles for default mouse cursor. (browser determines style)
       */

      MouseCursorStyle.default = [{
        "property": "cursor",
        "value": "default"
      }];
      /**
       * Styles for horizontal bi-directional resize mouse cursor.
       */

      MouseCursorStyle.horizontalResize = [{
        "property": "cursor",
        "value": "ew-resize"
      }];
      /**
       * Styles for vertical bi-directional mouse cursor.
       */

      MouseCursorStyle.verticalResize = [{
        "property": "cursor",
        "value": "ns-resize"
      }];
      /**
       * Styles for "no-allowed" cursor.
       * @since 4.7.15
       */

      MouseCursorStyle.notAllowed = [{
        "property": "cursor",
        "value": "not-allowed"
      }];
      /**
       * Styles for "text" cursor.
       * @since 4.9.12
       */

      MouseCursorStyle.text = [{
        "property": "cursor",
        "value": "text"
      }];
      return MouseCursorStyle;
    }(); //# sourceMappingURL=Mouse.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js":
  /*!********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js ***!
    \********************************************************************************/

  /*! exports provided: AMElement */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingAMElementJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AMElement", function () {
      return AMElement;
    });
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * [[AMElement]] represents any SVG element and related functionality.
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * A base class for all SVG elements. Provides low-level DOM functionality.
     *
     * All visual elements extend this class.
     */


    var AMElement =
    /** @class */
    function () {
      /**
       * Constructor creates a new element or uses the one that was passed in.
       *
       * @param element Element reference node type
       */
      function AMElement(element) {
        /**
         * Indicates if the element was already disposed.
         */
        this._isDisposed = false;
        /**
         * Current X coordinate.
         */

        this._x = 0;
        /**
         * Current Y coordinate.
         */

        this._y = 0;
        /**
         *
         */

        this._rotationY = 0;
        /**
         *
         */

        this._rotationX = 0;
        /**
         * Current rotation.
         */

        this._rotation = 0;
        /**
         * Current scale.
         */

        this._scale = 1;

        if (typeof element === "string") {
          this.node = document.createElementNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_0__["SVGNS"], element);
        } else {
          this.node = element;
        }
      }
      /**
       * Removes element's node from DOM.
       */


      AMElement.prototype.removeNode = function () {
        if (this.node) {
          if (this.node.parentNode) {
            this.node.parentNode.removeChild(this.node);
          }
        }
      };

      Object.defineProperty(AMElement.prototype, "transformString", {
        /**
         * Returns `transform` attribute of the element.
         *
         * @ignore Exclude from docs
         * @return Transform attribute value
         */
        get: function get() {
          if (this.node) {
            return this._transformString;
            /*
            const value = this.node.getAttribute("transform");
                  if (value !== null) {
                return value;
            }*/
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Appply position, rotation and scale properties via elemen's `transform`
       * property
       *
       * @ignore Exclude from docs
       */

      AMElement.prototype.transform = function () {
        var transfromString = "translate(" + this._x + "," + this._y + ")";

        if (this._scale != 1) {
          transfromString += (transfromString ? " " : "") + "scale(" + this._scale + ")";
        }

        if (this._rotation != 0) {
          var rotateString = "rotate(" + this._rotation + ")";

          if (this._rotationX && this._rotationY) {
            rotateString = "rotate(" + this._rotation + " " + this._rotationX + " " + this._rotationY + ")";
          }

          transfromString += (transfromString ? " " : "") + rotateString;
        }

        this._transformString = transfromString;
        this.node.setAttribute("transform", transfromString);
      };
      /**
       * Returns bounding box of the element.
       *
       * ATTENTION: Bounding box calculations are extremely costly so should be
       * used sparingly and cached whenever possible.
       *
       * @return Bounding rectangle
       */


      AMElement.prototype.getBBox = function () {
        var bbox = {
          width: 0,
          height: 0,
          x: 0,
          y: 0
        }; // FF would fail if getBBox() is called without node added to parent

        if (this.node && this.node.parentNode) {
          try {
            // again for ff. TODO: check if this doesn't slow down
            var svgbbox = this.node.getBBox();
            bbox.x = svgbbox.x;
            bbox.y = svgbbox.y;
            bbox.width = svgbbox.width;
            bbox.height = svgbbox.height;
          } catch (err) {}
        }

        return bbox;
      };
      /**
       * Moves the element to new coordinates.
       *
       * @param x  Target X
       * @param y  Target Y
       */


      AMElement.prototype.moveTo = function (point) {
        if (point) {
          var x = point.x;
          var y = point.y;

          if (this._x != x || this._y != y) {
            this._x = x;
            this._y = y;
            this.transform();
          }
        }
      };

      Object.defineProperty(AMElement.prototype, "content", {
        /**
         * Returns element's contents as SVG markup.
         *
         * @return Contents
         */
        get: function get() {
          // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers
          return this.node.innerHTML || "";
        },

        /**
         * Element's SVG contents.
         *
         * @param value Contents
         */
        set: function set(value) {
          // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers
          this.node.innerHTML = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "textContent", {
        /**
         * @return Text contents
         */
        get: function get() {
          return this.node.textContent || "";
        },

        /**
         * Text contents of the SVG element.
         *
         * @param value Text contents
         */
        set: function set(value) {
          this.node.textContent = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "x", {
        /**
         * @return X coordinate (px)
         */
        get: function get() {
          return this._x;
        },

        /**
         * Element's X position in pixels.
         *
         * @param value  X coordinate (px)
         */
        set: function set(value) {
          if (this._x != value) {
            this._x = value;
            this.transform();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "y", {
        /**
         * @return Y coordinate (px)
         */
        get: function get() {
          return this._y;
        },

        /**
         * Element's Y position in pixels.
         *
         * @param value Y coordinate (px)
         */
        set: function set(value) {
          if (this._y != value) {
            this._y = value;
            this.transform();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "rotation", {
        /**
         * @return Rotation
         */
        get: function get() {
          return this._rotation;
        },

        /**
         * Element's rotation in degrees.
         *
         * @param value Rotation
         */
        set: function set(angle) {
          if (this._rotation != angle) {
            this._rotation = angle;
            this.transform();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "rotationX", {
        /**
         * @ignore
         */
        get: function get() {
          return this._rotationX;
        },

        /**
         * @ignore
         */
        set: function set(x) {
          if (this._rotationX != x) {
            this._rotationX = x;
            this.transform();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "rotationY", {
        /**
         * @ignore
         */
        get: function get() {
          return this._rotationY;
        },

        /**
         * @ignore
         */
        set: function set(y) {
          if (this._rotationY != y) {
            this._rotationY = y;
            this.transform();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(AMElement.prototype, "scale", {
        /**
         * @return Scale
         */
        get: function get() {
          return this._scale;
        },

        /**
         * Element's scale where 1 is original size.
         *
         * Setting to 0.5 will reduce element's size by 50%, 2 will make element
         * twice as large, etc.
         *
         * @param value Scale
         */
        set: function set(value) {
          if (this._scale != value) {
            this._scale = value;
            this.transform();
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Removes an attribute from element.
       *
       * @param attribute  Attribute to remove
       */

      AMElement.prototype.removeAttr = function (attribute) {
        this.node.removeAttribute(attribute);
      };
      /**
       * Sets a set of attributes on a element.
       *
       * @param attributes  An object with attribute names (key) and values
       * @return The same element
       */


      AMElement.prototype.attr = function (attributes) {
        var _this = this;

        _utils_Object__WEBPACK_IMPORTED_MODULE_1__["each"](attributes, function (attributeName, attributeValue) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](attributeValue)) {
            _this.node.removeAttribute(attributeName);
          } else {
            // this is for performance testing
            //if(attributeValue == this.node.getAttribute(attributeName)){
            //	console.log(attributeName, attributeValue)
            //}
            _this.node.setAttribute(attributeName, attributeValue);
          }
        });

        return this;
      };
      /**
       * Returns a value of a node attribute.
       *
       * @param attribute  Attribute name
       * @return Attribute value
       */


      AMElement.prototype.getAttr = function (attribute) {
        return this.node.getAttribute(attribute);
      };
      /**
       * Sets a single attribute of the element's node using namesspace.
       *
       * @param ns         Namespace
       * @param attribute  Attribute
       * @param value      Value
       * @return The same element
       */


      AMElement.prototype.attrNS = function (ns, attribute, value) {
        this.node.setAttributeNS(ns, attribute, value);
        return this;
      };
      /**
       * Returns a namespaced attribute value from node.
       *
       * @param ns         Namespace
       * @param attribute  Attribute
       * @return Attribute value
       */


      AMElement.prototype.getAttrNS = function (ns, attribute) {
        return this.node.getAttributeNS(ns, attribute);
      };
      /**
       * Removes `style` attribute from node.
       *
       * @param attribute  Attribute to remove
       */


      AMElement.prototype.removeStyle = function (attribute) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        this.node.style[attribute] = null;
        delete this.node.style[attribute];
      };
      /**
       * Returns style attribute value.
       *
       * @param attribute  Style attribute value
       * @return Attribute value
       */


      AMElement.prototype.getStyle = function (attribute) {
        // @todo Review because it's a bit messy and maybe not needed (pratically not used)
        return this.node.style[attribute];
      };
      /**
       * Adds style attributes to element's node.
       *
       * @param attributes  Object containing attribute: value pairs
       * @return The same element
       */


      AMElement.prototype.addStyle = function (attributes) {
        var _this = this; // @todo Review because it's a bit messy and maybe not needed (pratically not used)


        _utils_Object__WEBPACK_IMPORTED_MODULE_1__["each"](attributes, function (attributeName, attributeValue) {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](attributeValue)) {
            _this.removeStyle(attributeName);
          } else {
            _this.node.style[attributeName] = attributeValue;
          }
        });

        return this;
      };
      /**
       * Adds a class to element.
       *
       * @param name  Class name
       */


      AMElement.prototype.addClass = function (name) {
        _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["addClass"](this.node, name);
      };
      /**
       * Removes a class from element.
       *
       * @param name Class name
       */


      AMElement.prototype.removeClass = function (name) {
        _utils_DOM__WEBPACK_IMPORTED_MODULE_0__["removeClass"](this.node, name);
      };
      /**
       * Sets a class name on element.
       *
       * @param name  Class name
       */


      AMElement.prototype.setClass = function (name) {
        this.node.setAttribute("class", name);
      };
      /**
       * Removes all element's child nodes, basically leaving it empty.
       */


      AMElement.prototype.removeChildNodes = function () {
        // remove all children
        while (this.node.childNodes.length > 0) {
          this.node.removeChild(this.node.firstChild);
        }
      };
      /**
       * Was this element already been disposed?
       *
       * @return Disposed?
       */


      AMElement.prototype.isDisposed = function () {
        return this._isDisposed;
      };
      /**
       * Disposes element.
       */


      AMElement.prototype.dispose = function () {
        this.removeNode();
      };

      return AMElement;
    }(); //# sourceMappingURL=AMElement.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js ***!
    \****************************************************************************/

  /*! exports provided: Group */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingGroupJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Group", function () {
      return Group;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _AMElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./AMElement */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates an SVG `<g>` element.
     *
     * SVG groups are used for elements that need more elements just one.
     *
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element
     */


    var Group =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Group, _super);
      /**
       * Constructor.
       *
       * @param elementName Element type (should be "g")
       */

      function Group(elementName) {
        return _super.call(this, elementName) || this;
      }
      /**
       * Adds an element to group.
       *
       * This will manipulate DOM. `element` will be physically moved into group.
       *
       * @param element  Element
       */


      Group.prototype.add = function (element) {
        if (element) {
          this.node.appendChild(element.node);
        }
      };
      /**
       * Adds an element to group.
       *
       * This will manipulate DOM. `element` will be physically moved into group.
       *
       * @param element  Element
       */


      Group.prototype.addToBack = function (element) {
        if (element) {
          var first = this.node.childNodes[0];

          if (first) {
            if (first != element.node) {
              this.node.insertBefore(element.node, first);
            }
          } else {
            this.node.appendChild(element.node);
          }
        }
      };
      /**
       * Removes the `element` from group.
       *
       * Please note that this will not dispose the element itself, it will just
       * remove it from the group.
       *
       * @param element  Element
       */


      Group.prototype.removeElement = function (element) {
        // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child
        if (element) {
          try {
            if (element.node && element.node.parentNode == this.node) {
              this.node.removeChild(element.node);
            }
          } catch (err) {}
        }
      };
      /**
       * Checks if this group already has the child element added
       *
       * @param element
       * @return {boolean}
       */


      Group.prototype.hasChild = function (element) {
        for (var i = 0; i < this.node.childNodes.length; i++) {
          if (this.node.childNodes[i] == element.node) {
            return true;
          }
        }

        return false;
      };

      Object.defineProperty(Group.prototype, "content", {
        /**
         * @return SVG markup
         */
        get: function get() {
          return this.node.innerHTML;
        },

        /**
         * Content of the group element.
         *
         * Can be used to add a lot of proprietary SVG markup into group.
         *
         * @param value  SVG markup
         */
        set: function set(value) {
          this.node.innerHTML = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Removes all children from the group.
       */

      Group.prototype.removeChildren = function () {
        if (this.node.childNodes) {
          while (this.node.childNodes.length > 0) {
            var childNode = this.node.firstChild;

            if (childNode && childNode.parentNode) {
              childNode.parentNode.removeChild(childNode);
            }
          }
        }
      };

      return Group;
    }(_AMElement__WEBPACK_IMPORTED_MODULE_1__["AMElement"]); //# sourceMappingURL=Group.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js ***!
    \****************************************************************************/

  /*! exports provided: Paper, getGhostPaper */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingPaperJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Paper", function () {
      return Paper;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getGhostPaper", function () {
      return getGhostPaper;
    });
    /* harmony import */


    var _AMElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AMElement */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js");
    /* harmony import */


    var _Group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Group */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js");
    /* harmony import */


    var _SVGContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./SVGContainer */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /**
     * Paper class just like the white sheet of pressed fiber it draws its name
     * inspiration from is used as a starting point to start a drawing.
     *
     * Before we can start adding elements (drawing) we need to take out a new sheet
     * of paper, or in this instance create a blank SVG element.
     *
     * This class creates such element, as well as implements methods needed to
     * start adding elements to it.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Paper class which when instantiated will create an SVG element as well as
     * some of the sub-elements like `<desc>`, `<defs>`.
     *
     * Use its methods like `addGroup` and `append` to add elements to the paper.
     */


    var Paper =
    /** @class */
    function () {
      /**
       * Creates main `<svg>` container and related elements.
       *
       * @param container A reference to HTML element to create `<svg>` in
       */
      function Paper(container, id) {
        // Store container reference
        this.container = container;
        this.id = id; // Create SVG element

        var svg = document.createElementNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_3__["SVGNS"], "svg");
        svg.setAttribute("version", "1.1");
        svg.setAttributeNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_3__["XMLNS"], "xmlns", _utils_DOM__WEBPACK_IMPORTED_MODULE_3__["SVGNS"]);
        svg.setAttributeNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_3__["XMLNS"], "xmlns:xlink", _utils_DOM__WEBPACK_IMPORTED_MODULE_3__["XLINK"]);
        svg.setAttribute("role", "group");
        this.container.appendChild(svg); // Add description

        var desc = document.createElementNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_3__["SVGNS"], "desc");
        desc.appendChild(document.createTextNode("JavaScript chart by amCharts"));
        svg.appendChild(desc); // Add defs

        this.defs = document.createElementNS(_utils_DOM__WEBPACK_IMPORTED_MODULE_3__["SVGNS"], "defs");
        svg.appendChild(this.defs); // Set width and height to fit container

        svg.style.width = "100%";
        svg.style.height = "100%";
        svg.style.overflow = "visible"; // Store variable

        this.svg = svg;
      }
      /**
       * Creates and returns a new element. Does not attach it to Paper yet.
       *
       * @param elementName  Element name
       * @return New element
       */


      Paper.prototype.add = function (elementName) {
        return new _AMElement__WEBPACK_IMPORTED_MODULE_0__["AMElement"](elementName);
      };
      /**
       * Creates and returns a new Group element. Does not attach it to Paper.
       *
       * @param groupName  Element name
       * @return New Group
       */


      Paper.prototype.addGroup = function (groupName) {
        return new _Group__WEBPACK_IMPORTED_MODULE_1__["Group"](groupName);
      };
      /**
       * Appends an element to Paper.
       *
       * @param element Element to append
       */


      Paper.prototype.append = function (element) {
        if (element) {
          this.svg.appendChild(element.node);
        }
      };
      /**
       * Appends an element to `<defs>` block of the Paper.
       *
       * @param element  Element
       */


      Paper.prototype.appendDef = function (element) {
        if (element) {
          this.defs.appendChild(element.node);
        }
      };
      /**
       * Creates and returns new `<foreignObject>` element. Does not append it to
       * Paper.
       *
       * @return A foreignObject element
       */


      Paper.prototype.foreignObject = function () {
        var element = new _AMElement__WEBPACK_IMPORTED_MODULE_0__["AMElement"]("foreignObject"); //this.append(element);

        return element;
      };
      /**
       * Checks if browser supports `<foreignObject>` elements.
       *
       * @return Supports `foreignObject`?
       */


      Paper.prototype.supportsForeignObject = function () {
        return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Extensibility", "1.1");
      };

      return Paper;
    }();

    var ghostPaper = null;
    /**
     * A [[Paper]] instance to create elements, that are not yet ready to be
     * placed in visible DOM.
     *
     * @ignore Exclude from docs
     */

    function getGhostPaper() {
      if (ghostPaper === null) {
        // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet
        var ghostDiv = document.createElement("div");
        ghostDiv.hidden = true;
        document.body.appendChild(ghostDiv);
        var ghostSvgContainer = new _SVGContainer__WEBPACK_IMPORTED_MODULE_2__["SVGContainer"](ghostDiv, true);
        ghostPaper = new Paper(ghostSvgContainer.SVGContainer, "ghost");
      }

      return ghostPaper;
    } //# sourceMappingURL=Paper.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js ***!
    \***************************************************************************/

  /*! exports provided: polyline, moveTo, lineTo, quadraticCurveTo, cubicCurveTo, closePath, arcTo, arc, arcToPoint, rectangle, rectToPath, pathToPoints, spiralPoints, pointsToPath */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingPathJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyline", function () {
      return polyline;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "moveTo", function () {
      return moveTo;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "lineTo", function () {
      return lineTo;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "quadraticCurveTo", function () {
      return quadraticCurveTo;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cubicCurveTo", function () {
      return cubicCurveTo;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "closePath", function () {
      return closePath;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "arcTo", function () {
      return arcTo;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "arc", function () {
      return arc;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "arcToPoint", function () {
      return arcToPoint;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rectangle", function () {
      return rectangle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rectToPath", function () {
      return rectToPath;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pathToPoints", function () {
      return pathToPoints;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "spiralPoints", function () {
      return spiralPoints;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pointsToPath", function () {
      return pointsToPath;
    });
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _rendering_Paper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../rendering/Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /**
     * A collection of functions that deals with path calculations.
     */

    /**
     * ============================================================================
     * PATH FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Returns an SVG path from a number of points.
     *
     * @ignore Exclude from docs
     * @param points  An array of line elbow points
     * @return SVG path
     */


    function polyline(points) {
      var path = lineTo(points[0]);
      var prevPoint = {
        x: 0,
        y: 0
      };
      var minStep = _Options__WEBPACK_IMPORTED_MODULE_3__["options"].minPolylineStep;

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](minStep)) {
        minStep = 0.5;
      }

      for (var i = 0, len = points.length; i < len; i++) {
        var point = points[i];

        if (_utils_Math__WEBPACK_IMPORTED_MODULE_0__["getDistance"](point, prevPoint) > minStep) {
          path += lineTo(point);
          prevPoint = point;
        }
      }

      return path;
    }
    /**
     * Returns a starting point of an SVG path.
     *
     * @ignore Exclude from docs
     * @param point  Starting point
     * @return SVG path
     */


    function moveTo(point) {
      return " M" + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.y, 4) + " ";
    }
    /**
     * Returns a line part of SVG path.
     *
     * @ignore Exclude from docs
     * @param point  SVG path
     * @return SVG path
     */


    function lineTo(point) {
      return " L" + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.y, 4) + " ";
    }
    /**
     * Returns a quadratic curve part of an SVG path.
     *
     * @ignore Exclude from docs
     * @param point         End point of the curve
     * @param controlPoint  Control point
     * @return SVG path
     */


    function quadraticCurveTo(point, controlPoint) {
      return " Q" + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](controlPoint.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](controlPoint.y, 4) + " " + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.y, 4);
    }
    /**
     * Returns a cubic curve part of an SVG path.
     *
     * @ignore Exclude from docs
     * @param point          End point of the curve
     * @param controlPointA  Control point A
     * @param controlPointB  Control point B
     * @return SVG path
     */


    function cubicCurveTo(point, controlPointA, controlPointB) {
      return " C" + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](controlPointA.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](controlPointA.y, 4) + " " + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](controlPointB.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](controlPointB.y, 4) + " " + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.x, 4) + "," + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.y, 4);
    }
    /**
     * Returns a terminator for an SVG path.
     *
     * @ignore Exclude from docs
     * @return SVG path
     */


    function closePath() {
      return " Z";
    }
    /**
     * Returns an arc part of an SVG path.
     *
     * @ignore Exclude from docs
     * @todo Better parameter descriptions
     * @param startAngle  Starting angle
     * @param arc         Arc
     * @param radius      Radius
     * @param radiusY     Vertical radius
     * @return SVG path
     */


    function arcTo(startAngle, arc, radius, radiusY) {
      if (arc == 0) {
        return "";
      }

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](radiusY)) {
        radiusY = radius;
      }

      var path = "";
      var c = ",";
      var segments = Math.ceil(Math.abs(arc) / 180);
      var l = 1;

      if (arc < 0) {
        l = 0;
      } // previous, as we use a not A


      var pax = 0;
      var pay = 0; // center

      var cx = -_utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](startAngle) * radius;
      var cy = -_utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](startAngle) * radiusY; // foir very short angles and big radius, solves artefacts

      if (arc < 0.5 && radius > 3000) {
        var endAngle = startAngle + arc;

        var ax = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](endAngle) * radius, 4);

        var ay = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](endAngle) * radiusY, 4);

        return lineTo({
          x: ax,
          y: ay
        });
      }

      for (var i = 0; i < segments; i++) {
        var endAngle = startAngle + arc / segments * (i + 1);

        var ax = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](endAngle) * radius + cx - pax, 4);

        var ay = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](endAngle) * radiusY + cy - pay, 4);

        path += " a" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;
        pax = ax;
        pay = ay;
      }

      return path;
    }
    /**
     * Creates an arc path.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param startAngle         [description]
     * @param arc                [description]
     * @param radius             [description]
     * @param innerRadius        [description]
     * @param radiusY            [description]
     * @param cornerRadius       [description]
     * @param innerCornerRadius  [description]
     * @return SVG path
     */


    function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {
      if (arc == 0) {
        return "";
      }

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](innerRadius)) {
        innerRadius = 0;
      }

      if (radius == 0 && innerRadius <= 0) {
        return "";
      }

      if (radius < innerRadius) {
        var temp = radius;
        radius = innerRadius;
        innerRadius = temp;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](radiusY)) {
          radiusY = radiusY / innerRadius * radius;
        }
      }

      arc = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["min"](arc, 360);

      if (arc == 360) {
        cornerRadius = 0;
        innerCornerRadius = 0;
      }

      var endAngle = startAngle + arc;

      var crSin = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["min"](arc, 45) / 2);

      radiusY = _utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](radiusY) ? radiusY : radius;
      cornerRadius = cornerRadius || 0;
      innerCornerRadius = _utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](innerCornerRadius) ? innerCornerRadius : cornerRadius;
      var innerRadiusY = radiusY / radius * innerRadius;
      var cornerRadiusY = radiusY / radius * cornerRadius;
      var innerCornerRadiusY = radiusY / radius * innerCornerRadius;
      cornerRadius = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](cornerRadius, 0, (radius - innerRadius) / 2);
      cornerRadiusY = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
      innerCornerRadius = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](innerCornerRadius, 0, (radius - innerRadius) / 2);
      innerCornerRadiusY = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);
      cornerRadius = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](cornerRadius, 0, radius * crSin), 4);
      cornerRadiusY = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](cornerRadiusY, 0, radiusY * crSin), 4);
      innerCornerRadius = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](innerCornerRadius, 0, innerRadius * crSin), 4);
      innerCornerRadiusY = _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](innerCornerRadiusY, 0, innerRadiusY * crSin), 4);
      var crAngle = Math.asin(cornerRadius / radius / 2) * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["DEGREES"] * 2;
      var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["DEGREES"] * 2;

      if (innerRadius < innerCornerRadius) {
        innerRadius = innerCornerRadius;
      }

      if (innerRadiusY < innerCornerRadiusY) {
        innerRadiusY = innerCornerRadiusY;
      }

      var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["DEGREES"] * 2;
      var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["DEGREES"] * 2;

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](crInnerAngle)) {
        crInnerAngle = 0;
      }

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](crInnerAngleY)) {
        crInnerAngleY = 0;
      }

      var middleAngle = startAngle + arc / 2;
      var mPoint = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](_utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](middleAngle) * innerRadius, 4),
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](middleAngle) * innerRadiusY
      };
      var a0 = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](startAngle) * (innerRadius + innerCornerRadius),
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](startAngle) * (innerRadiusY + innerCornerRadiusY)
      };
      var b0 = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](startAngle) * (radius - cornerRadius),
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](startAngle) * (radiusY - cornerRadiusY)
      };
      var c0 = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](endAngle) * (radius - cornerRadius),
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](endAngle) * (radiusY - cornerRadiusY)
      };
      var d0 = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](endAngle) * (innerRadius + innerCornerRadius),
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](endAngle) * (innerRadiusY + innerCornerRadiusY)
      };
      var b1 = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](startAngle + crAngle) * radius,
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](startAngle + crAngleY) * radiusY
      };
      var d1 = {
        x: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["cos"](endAngle - crInnerAngle) * innerRadius,
        y: _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](endAngle - crInnerAngleY) * innerRadiusY
      }; // some magic math

      innerCornerRadius += innerCornerRadius * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](crInnerAngle / 2);
      innerCornerRadiusY += innerCornerRadiusY * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["sin"](crInnerAngleY / 2);

      if (crInnerAngle > (endAngle - startAngle) / 2) {
        d1 = mPoint;
      }

      var path = ""; // start from b if this is full circle

      if (arc == 360) {
        path = moveTo(b0);
      } // otherwise start from a
      else {
          path = moveTo(a0);
          path += lineTo(b0);
          path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);
        } // draw arc


      path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY); // draw inner arc

      if (_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](innerRadius) && innerRadius != 0) {
        // move to B if this is full circle
        if (arc == 360 && cornerRadius == 0) {
          path += moveTo(d0);
        } // draw line otherwise
        else {
            path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);
            path += lineTo(d0);
            path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);
          }

        path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);

        if (arc < 360 || cornerRadius > 0) {
          path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);
        }

        path += lineTo(a0);
      } else {
        path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);

        if (arc < 360) {
          path += lineTo(a0);
        }
      }

      return path;
    }
    /**
     * Creates a path for an arc to specific coordinate.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param point         Reference point
     * @param radius        Radius
     * @param radiusY       Vertical radius (for skewed arcs)
     * @param sweepFlag     [description]
     * @param largeArcFlag  [description]
     * @param xAxisRotation [description]
     * @return Arc path
     */


    function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {
      if (radius == 0) {
        return "";
      }

      xAxisRotation = xAxisRotation || 0;
      largeArcFlag = Boolean(largeArcFlag);
      sweepFlag = Boolean(sweepFlag);
      var c = ",";
      var sweepFlagValue = +sweepFlag; // converts to 1 or 0

      var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0

      return " A" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.x, 4) + c + _utils_Math__WEBPACK_IMPORTED_MODULE_0__["round"](point.y, 4);
    }
    /**
     * Creates a new rectangle.
     *
     * @ignore Exclude from docs
     * @param width   Width (px)
     * @param height  Height (px)
     * @param x       X position
     * @param y       Y position
     * @return Rectangle
     */


    function rectangle(width, height, x, y) {
      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](x)) {
        x = 0;
      }

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](y)) {
        y = 0;
      }

      return moveTo({
        x: x,
        y: y
      }) + lineTo({
        x: x + width,
        y: y
      }) + lineTo({
        x: x + width,
        y: y + height
      }) + lineTo({
        x: x,
        y: y + height
      }) + closePath();
    }
    /**
     * Converts a rectangle to an SVG path.
     *
     * @ignore Exclude from docs
     * @param rect  Rectangle
     * @param ccw   Counter-clockwise?
     * @return SVG path
     */


    function rectToPath(rect, ccw) {
      var c = ",";
      var L = " L";

      if (ccw) {
        return "M" + rect.x + c + rect.y + L + rect.x + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + rect.y + L + rect.x + c + rect.y;
      } else {
        return "M" + rect.x + c + rect.y + L + (rect.x + rect.width) + c + rect.y + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + rect.x + c + (rect.y + rect.height) + L + rect.x + c + rect.y;
      }
    }
    /**
     * Converts SVG path to array of points.
     *
     * Note, this is experimental feature based on method which is deprecated
     * on some browsers and some browsers do not support it at all.
     *
     * You can save the output of this function, but not rely on it completely.
     */


    function pathToPoints(path, pointCount) {
      var paper = Object(_rendering_Paper__WEBPACK_IMPORTED_MODULE_2__["getGhostPaper"])();
      var svgPath = paper.add("path").node;
      svgPath.setAttribute("d", path);

      if (svgPath.getPointAtLength && svgPath.getTotalLength) {
        var length_1 = svgPath.getTotalLength();
        var toPoints = [];

        for (var i = 0; i < pointCount; i++) {
          var point = svgPath.getPointAtLength(i / pointCount * length_1);
          toPoints.push({
            x: point.x,
            y: point.y
          });
        }

        return toPoints;
      }

      svgPath.remove();
    }

    function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {
      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](startAngle)) {
        startAngle = 0;
      }

      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](startAngle)) {
        endAngle = startAngle;
      }

      var r = innerRadius + 0.01;
      var angle = startAngle * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["RADIANS"];
      var points = [];

      while (r < radius + radiusStep) {
        var stepSize = step;

        if (stepSize / 2 > r) {
          stepSize = 2 * r;
        }

        angle += 2 * Math.asin(stepSize / 2 / r);

        if (angle * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["DEGREES"] > endAngle + (radius - innerRadius) / radiusStep * 360) {
          break;
        }

        var degrees = angle * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["DEGREES"];
        var point = {
          x: cx + r * Math.cos(angle),
          y: cy + r * radiusY / radius * Math.sin(angle)
        };
        points.push(point);
        r = innerRadius + degrees / 360 * radiusStep;
      }

      points.shift();
      return points;
    }

    function pointsToPath(points) {
      if (!points || points.length == 0) {
        return "";
      }

      var path = moveTo(points[0]);

      if (points && points.length > 0) {
        for (var i = 1; i < points.length; i++) {
          path += lineTo(points[i]);
        }
      }

      return path;
    } //# sourceMappingURL=Path.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js":
  /*!***********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js ***!
    \***********************************************************************************/

  /*! exports provided: svgContainers, SVGContainer */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingSVGContainerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "svgContainers", function () {
      return svgContainers;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SVGContainer", function () {
      return SVGContainer;
    });
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _elements_Popup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../elements/Popup */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Popup.js");
    /* harmony import */


    var _elements_Modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../elements/Modal */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Modal.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_DOM__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var css_element_queries_src_ResizeSensor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! css-element-queries/src/ResizeSensor */
    "./node_modules/css-element-queries/src/ResizeSensor.js");
    /* harmony import */


    var css_element_queries_src_ResizeSensor__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(css_element_queries_src_ResizeSensor__WEBPACK_IMPORTED_MODULE_8__);
    /**
     * This functionality is related to the HTML wrapper that houses `<svg>` tag.
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * A array of all SVG Containers (one SVG container per chart instance).
     *
     * @ignore Exclude from docs
     */


    var svgContainers = [];
    /**
     * A class used to create an HTML wrapper for the SVG contents.
     */

    var SVGContainer =
    /** @class */
    function () {
      /**
       * Constructor
       *
       * * Creates an HTML wrapper for SVG
       */
      function SVGContainer(htmlElement, ghost) {
        var _this = this;
        /**
         * Indicates if this object has already been deleted. Any
         * destruction/disposal code should take this into account when deciding
         * wheter to run potentially costly disposal operations if they already have
         * been run.
         */


        this._disposed = false;
        /**
         * If this component is in a separate HTML container, `autoResize` means the
         * module will constantly measure container's size and adopt contents to it.
         */

        this.autoResize = true;
        /**
         * Holds list of references to [[Sprite]] objects that should not be exported
         * when exporting chart to an image.
         *
         * @ignore
         */

        this.nonExportableSprites = [];
        /**
         * List of objects that need to be disposed when this one is disposed.
         */

        this._disposers = [];
        this.cssScale = 1; // Log parent HTML element

        this.htmlElement = htmlElement;

        if (!ghost) {
          var callback_1 = function callback_1() {
            if (_this.autoResize) {
              _this.measure();
            }
          };

          this.resizeSensor = new css_element_queries_src_ResizeSensor__WEBPACK_IMPORTED_MODULE_8___default.a(htmlElement, callback_1);

          this._disposers.push(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_0__["Disposer"](function () {
            _this.resizeSensor.detach(callback_1);
          }));
        } // Adds to containers array


        svgContainers.push(this);
        /**
         * Create child div for the container - it will have svg node
         * It might seem that this container is not necessay, however having it solves
         * a problems with mouse position detection and some other.
         */

        var svgContainer = document.createElement("div");
        var style = svgContainer.style;
        style.width = "100%";
        style.height = "100%";
        style.position = "relative";
        htmlElement.appendChild(svgContainer);
        this.SVGContainer = svgContainer;
      }
      /**
       * Measures size of parent HTML element.
       *
       * @ignore Exclude from docs
       */


      SVGContainer.prototype.measure = function () {
        var width = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["width"](this.htmlElement);

        var height = _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["height"](this.htmlElement);

        var container = this.container;

        if (container) {
          if (this.width != width || this.height != height) {
            this.width = width;
            this.height = height;

            if (width > 0) {
              container.maxWidth = width;
            }

            if (height > 0) {
              container.maxHeight = height;
            }

            _utils_DOM__WEBPACK_IMPORTED_MODULE_5__["fixPixelPerfect"](this.SVGContainer);
          }

          if (!container.maxWidth) {
            container.maxWidth = 0;
          }

          if (!container.maxHeight) {
            container.maxHeight = 0;
          }

          this.cssScale = 1;
          this.checkTransform(this.htmlElement);
        }
      };

      Object.defineProperty(SVGContainer.prototype, "container", {
        /**
         * @return Container
         */
        get: function get() {
          return this._container;
        },

        /**
         * A [[Container]] element which is placed into container.
         *
         * @param container  Container
         */
        set: function set(container) {
          this._container = container;
          this.measure();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns if this object has been already been disposed.
       *
       * @return Is disposed?
       */

      SVGContainer.prototype.isDisposed = function () {
        return this._disposed;
      };
      /**
       * Removes this container from SVG container list in system, which
       * effectively disables size change monitoring for it.
       */


      SVGContainer.prototype.dispose = function () {
        if (!this._disposed) {
          _utils_Array__WEBPACK_IMPORTED_MODULE_6__["remove"](svgContainers, this);
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_6__["each"](this._disposers, function (item) {
          item.dispose();
        });
      };

      Object.defineProperty(SVGContainer.prototype, "hideOverflow", {
        /**
         * Indicates if chart container should have its style set
         * to `overflow: hidden`.
         *
         * Normally, we don't want that, so that certain elements, such as tooltips,
         * would be able to go outside chart area.
         *
         * There is one issue though. Some browsers ignore SVG masks and would
         * display scrollbars if chart elements, that go outside chart area extend
         * outside window.
         *
         * This is especially true for [[MapChart]], which can have its elements
         * extend very widely when zoomed in. Even if those parts are not visible
         * because of SVG masks, some browsers might still display window scrollbars.
         *
         * This is why we set this setting to `true` in [[MapChart]].
         *
         * Other charts use default of `false`.
         */
        set: function set(value) {
          if (value) {
            this.SVGContainer.style.overflow = "hidden";
          } else {
            this.SVGContainer.style.overflow = "";
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(SVGContainer.prototype, "modal", {
        /**
         * ==========================================================================
         * MODAL/POPUP RELATED STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * Returns a [[Modal]] instance, associated with this chart.
         * (elements top parent)
         *
         * Accessing modal does not make it appear. To make a modal appear, use
         * `showModal()` method.
         *
         * @see {@link Modal} for more information about using Modal windows
         * @return Modal instance
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](this._modal)) {
            // Create new modal
            this._modal = new _elements_Modal__WEBPACK_IMPORTED_MODULE_2__["Modal"]();
            this._modal.container = this.SVGContainer; // Add to disposers

            this._disposers.push(this._modal);
          }

          return this._modal;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Opens a modal window with specific content (`text` parameter) and,
       * optionally, `title`.
       *
       * The `text` parameter can contain HTML content.
       *
       * @see {@link Modal} for more information about using Modal windows
       * @param text   Modal contents
       * @param title  Title for the modal window
       */

      SVGContainer.prototype.openModal = function (text, title) {
        // Hide previous modal
        this.closeModal(); // Create modal

        var modal = this.modal;
        modal.content = text;
        modal.readerTitle = title || "";
        modal.title = title || "";
        modal.open();
        return modal;
      };
      /**
       * Hides modal window if there is one currently open.
       */


      SVGContainer.prototype.closeModal = function () {
        if (this._modal) {
          this.modal.close();
        }
      };

      Object.defineProperty(SVGContainer.prototype, "popups", {
        /**
         * A list of popups for this chart.
         *
         * @return Popups
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](this._popups)) {
            // Create popup template
            var popupTemplate = new _elements_Popup__WEBPACK_IMPORTED_MODULE_1__["Popup"]();
            popupTemplate.container = this.SVGContainer; // Create the list

            this._popups = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["ListTemplate"](popupTemplate); // Add to disposers

            this._disposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_3__["ListDisposer"](this._popups));

            this._disposers.push(this._popups.template);
          }

          return this._popups;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Creates, opens, and returns a new [[Popup]] window.
       *
       * `text` can be any valid HTML.
       *
       * `title` is currently not supported.
       *
       * @param text   Popup contents
       * @param title  Popup title
       * @return Popup instance
       */

      SVGContainer.prototype.openPopup = function (text, title) {
        var popup = this.popups.create();
        popup.content = text;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](title)) {
          popup.title = title;
        }

        popup.open();
        return popup;
      };
      /**
       * Closes all currently open popup windows
       */


      SVGContainer.prototype.closeAllPopups = function () {
        this.popups.each(function (popup) {
          popup.close();
        });
      };

      Object.defineProperty(SVGContainer.prototype, "readerAlertElement", {
        /**
         * ==========================================================================
         * ACCESSIBILITY STUFF
         * ==========================================================================
         * @hidden
         */

        /**
         * A `<div>` element used as as placeholder to trigger screen alerts.
         *
         * @sunce 4.9.2
         * @return Element
         */
        get: function get() {
          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](this._readerAlertElement)) {
            // Create element
            var div = document.createElement("div");
            div.setAttribute("role", "alert");
            div.style.zIndex = "-100000";
            div.style.opacity = "0";
            this.SVGContainer.appendChild(div);
            this._readerAlertElement = div;
          }

          return this._readerAlertElement;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Triggers screen reader read out a message.
       *
       * @since 4.9.2
       * @param  text  Alert text
       */

      SVGContainer.prototype.readerAlert = function (text) {
        this.readerAlertElement.innerHTML = text;
      };
      /**
       * ==========================================================================
       * OTHER STUFF
       * ==========================================================================
       * @hidden
       */


      SVGContainer.prototype.checkTransform = function (div) {
        if (window.getComputedStyle) {
          if (div && div.style) {
            var style = window.getComputedStyle(div, null);

            if (style) {
              var matrix = style.getPropertyValue("-webkit-transform") || style.getPropertyValue("-moz-transform") || style.getPropertyValue("-ms-transform") || style.getPropertyValue("-o-transform") || style.getPropertyValue("transform");

              if (matrix && matrix !== "none") {
                var values = matrix.split('(')[1].split(')')[0].split(',');
                var a = Number(values[0]);
                var b = Number(values[1]);
                var scale = Math.sqrt(a * a + b * b);

                if (!isNaN(scale)) {
                  this.cssScale *= scale;
                }
              }
            }
          }

          if (div.parentNode && div.parentNode instanceof HTMLElement) {
            this.checkTransform(div.parentNode);
          }
        }
      };

      return SVGContainer;
    }(); //# sourceMappingURL=SVGContainer.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js":
  /*!********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js ***!
    \********************************************************************************/

  /*! exports provided: Tension, wavedLine, Basis */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingSmoothingJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Tension", function () {
      return Tension;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "wavedLine", function () {
      return wavedLine;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Basis", function () {
      return Basis;
    });
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    var Tension =
    /** @class */
    function () {
      /**
       * Constructor.
       *
       * @param tensionX [description]
       * @param tensionY [description]
       */
      function Tension(tensionX, tensionY) {
        this._tensionX = tensionX;
        this._tensionY = tensionY;
      }
      /**
       * [smooth description]
       *
       * @ignore Exclude from docs
       * @todo Description
       * @param points  [description]
       * @return [description]
       */


      Tension.prototype.smooth = function (points) {
        var tensionX = this._tensionX;
        var tensionY = this._tensionY;

        if (points.length < 3 || tensionX >= 1 && tensionY >= 1) {
          return _Path__WEBPACK_IMPORTED_MODULE_1__["polyline"](points);
        }

        var first = points[0];
        var last = points[points.length - 1];
        var closed = false;

        if (_utils_Math__WEBPACK_IMPORTED_MODULE_4__["round"](first.x, 3) == _utils_Math__WEBPACK_IMPORTED_MODULE_4__["round"](last.x) && _utils_Math__WEBPACK_IMPORTED_MODULE_4__["round"](first.y) == _utils_Math__WEBPACK_IMPORTED_MODULE_4__["round"](last.y)) {
          closed = true;
        } // Can't moveTo here, as it wont be possible to have fill then.


        var path = "";

        for (var i = 0, len = points.length - 1; i < len; i++) {
          var p0 = points[i - 1];
          var p1 = points[i];
          var p2 = points[i + 1];
          var p3 = points[i + 2];

          if (i === 0) {
            if (closed) {
              p0 = points[points.length - 2];
            } else {
              p0 = points[i];
            }
          } else if (i == points.length - 2) {
            if (closed) {
              p3 = points[1];
            } else {
              p3 = points[i + 1];
            }
          }

          var controlPointA = _utils_Math__WEBPACK_IMPORTED_MODULE_4__["getCubicControlPointA"](p0, p1, p2, p3, tensionX, tensionY);

          var controlPointB = _utils_Math__WEBPACK_IMPORTED_MODULE_4__["getCubicControlPointB"](p0, p1, p2, p3, tensionX, tensionY);

          path += _Path__WEBPACK_IMPORTED_MODULE_1__["cubicCurveTo"](p2, controlPointA, controlPointB);
        }

        return path;
      };

      return Tension;
    }();
    /**
     * Returns a waved line SVG path between two points.
     *
     * @ignore Exclude from docs
     * @param point1            Starting point
     * @param point2            Ending point
     * @param waveLength        Wave length
     * @param waveHeight        Wave height
     * @param adjustWaveLength  Adjust wave length based on the actual line length
     * @return SVG path
     */


    function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {
      var x1 = point1.x;
      var y1 = point1.y;
      var x2 = point2.x;
      var y2 = point2.y;

      var distance = _utils_Math__WEBPACK_IMPORTED_MODULE_4__["getDistance"](point1, point2);

      if (adjustWaveLength) {
        waveLength = distance / Math.round(distance / waveLength);
      }

      var d = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].getCache(_utils_Utils__WEBPACK_IMPORTED_MODULE_3__["stringify"](["wavedLine", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));

      if (!d) {
        if (distance > 0) {
          var angle = Math.atan2(y2 - y1, x2 - x1);
          var cos = Math.cos(angle);
          var sin = Math.sin(angle);
          var waveLengthX = waveLength * cos;
          var waveLengthY = waveLength * sin;

          if (waveLength <= 1 || waveHeight <= 1) {
            d = _Path__WEBPACK_IMPORTED_MODULE_1__["lineTo"](point2);
          } else {
            var halfWaveCount = Math.round(2 * distance / waveLength);
            var points = [];
            var sign = 1;

            if (x2 < x1) {
              sign *= -1;
            }

            if (y2 < y1) {
              sign *= -1;
            }

            for (var i = 0; i <= halfWaveCount; i++) {
              sign *= -1;
              var x = x1 + i * waveLengthX / 2 + sign * waveHeight / 2 * sin;
              var y = y1 + i * waveLengthY / 2 - sign * waveHeight / 2 * cos;
              points.push({
                x: x,
                y: y
              });
            }

            d = new Tension(tension, tension).smooth(points);
          }
        } else {
          d = "";
        }

        _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].setCache(_utils_Utils__WEBPACK_IMPORTED_MODULE_3__["stringify"](["wavedLine", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);
      }

      return d;
    }
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    var Basis =
    /** @class */
    function () {
      /**
       * Constructor.
       *
       * @param info  [description]
       */
      function Basis(info) {
        this._closed = info.closed;
      }
      /**
       * [smooth description]
       *
       * @ignore Exclude from docs
       * @todo Description
       * @param points  [description]
       * @return [description]
       */


      Basis.prototype.smooth = function (points) {
        var _this = this;

        var x0 = NaN;
        var x1 = NaN;
        var x2 = NaN;
        var x3 = NaN;
        var x4 = NaN;
        var y0 = NaN;
        var y1 = NaN;
        var y2 = NaN;
        var y3 = NaN;
        var y4 = NaN;
        var point = 0;
        var output = "";

        var pushCurve = function pushCurve(x, y) {
          output += _Path__WEBPACK_IMPORTED_MODULE_1__["cubicCurveTo"]({
            x: (x0 + 4 * x1 + x) / 6,
            y: (y0 + 4 * y1 + y) / 6
          }, {
            x: (2 * x0 + x1) / 3,
            y: (2 * y0 + y1) / 3
          }, {
            x: (x0 + 2 * x1) / 3,
            y: (y0 + 2 * y1) / 3
          });
        };

        var pushPoint = function pushPoint(_a) {
          var x = _a.x,
              y = _a.y;

          switch (point) {
            case 0:
              point = 1;

              if (_this._closed) {
                x2 = x;
                y2 = y;
              } else {
                output += _Path__WEBPACK_IMPORTED_MODULE_1__["lineTo"]({
                  x: x,
                  y: y
                });
              }

              break;

            case 1:
              point = 2;

              if (_this._closed) {
                x3 = x;
                y3 = y;
              }

              break;

            case 2:
              point = 3;

              if (_this._closed) {
                x4 = x;
                y4 = y;
                output += _Path__WEBPACK_IMPORTED_MODULE_1__["moveTo"]({
                  x: (x0 + 4 * x1 + x) / 6,
                  y: (y0 + 4 * y1 + y) / 6
                });
                break;
              } else {
                output += _Path__WEBPACK_IMPORTED_MODULE_1__["lineTo"]({
                  x: (5 * x0 + x1) / 6,
                  y: (5 * y0 + y1) / 6
                }); // fall-through
              }

            default:
              pushCurve(x, y);
              break;
          }

          x0 = x1;
          x1 = x;
          y0 = y1;
          y1 = y;
        };

        _utils_Array__WEBPACK_IMPORTED_MODULE_2__["each"](points, pushPoint);

        if (this._closed) {
          switch (point) {
            case 1:
              output += _Path__WEBPACK_IMPORTED_MODULE_1__["moveTo"]({
                x: x2,
                y: y2
              });
              output += _Path__WEBPACK_IMPORTED_MODULE_1__["closePath"]();
              break;

            case 2:
              output += _Path__WEBPACK_IMPORTED_MODULE_1__["moveTo"]({
                x: (x2 + 2 * x3) / 3,
                y: (y2 + 2 * y3) / 3
              });
              output += _Path__WEBPACK_IMPORTED_MODULE_1__["lineTo"]({
                x: (x3 + 2 * x2) / 3,
                y: (y3 + 2 * y2) / 3
              });
              output += _Path__WEBPACK_IMPORTED_MODULE_1__["closePath"]();
              break;

            case 3:
              pushPoint({
                x: x2,
                y: y2
              });
              pushPoint({
                x: x3,
                y: y3
              });
              pushPoint({
                x: x4,
                y: y4
              });
              break;
          }
        } else {
          switch (point) {
            case 3:
              pushCurve(x1, y1);
            // fall-through

            case 2:
              output += _Path__WEBPACK_IMPORTED_MODULE_1__["lineTo"]({
                x: x1,
                y: y1
              });
              break;
          }

          output += _Path__WEBPACK_IMPORTED_MODULE_1__["closePath"]();
        }

        return output;
      };

      return Basis;
    }(); //# sourceMappingURL=Smoothing.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/CirclePattern.js":
  /*!******************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/CirclePattern.js ***!
    \******************************************************************************************/

  /*! exports provided: CirclePattern */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsCirclePatternJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CirclePattern", function () {
      return CirclePattern;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Pattern__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Pattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Rectangular pattern module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Circular pattern
     */

    var CirclePattern =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CirclePattern, _super);
      /**
       * Constructor
       */

      function CirclePattern() {
        var _this = _super.call(this) || this;

        _this.properties["radius"] = 2;
        _this._circle = _this.paper.add("circle");

        _this.addElement(_this._circle);

        _this.shapeRendering = "auto";
        return _this;
      }
      /**
       * Draws the circle element.
       */


      CirclePattern.prototype.draw = function () {
        _super.prototype.draw.call(this);

        if (this._circle) {
          this._circle.attr({
            "r": this.radius,
            "cx": this.width / 2,
            "cy": this.height / 2
          });
        }
      };

      Object.defineProperty(CirclePattern.prototype, "radius", {
        /**
         * @return Radius (px)
         */
        get: function get() {
          return this.properties["radius"];
        },

        /**
         * Circle radius in pixels.
         *
         * @param value Radius (px)
         */
        set: function set(value) {
          this.properties["radius"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      return CirclePattern;
    }(_Pattern__WEBPACK_IMPORTED_MODULE_1__["Pattern"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["CirclePattern"] = CirclePattern; //# sourceMappingURL=CirclePattern.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/ColorModifier.js":
  /*!******************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/ColorModifier.js ***!
    \******************************************************************************************/

  /*! exports provided: ColorModifier */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsColorModifierJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ColorModifier", function () {
      return ColorModifier;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * A base class for color modifiers.
     *
     * @ignore Exclude from docs
     */


    var ColorModifier =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ColorModifier, _super);
      /**
       * Constructor
       */

      function ColorModifier() {
        var _this = _super.call(this) || this;

        _this.className = "ColorModifier";

        _this.applyTheme();

        return _this;
      }
      /**
       * Modifies color value.
       *
       * @ignore Exclude from docs
       * @param value  Original color
       * @return Modified
       */


      ColorModifier.prototype.modify = function (value) {
        return value;
      };

      return ColorModifier;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["ColorModifier"] = ColorModifier; //# sourceMappingURL=ColorModifier.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js":
  /*!*********************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js ***!
    \*********************************************************************************************/

  /*! exports provided: GradientModifier */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsGradientModifierJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GradientModifier", function () {
      return GradientModifier;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _ColorModifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./ColorModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/ColorModifier.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * This class can be used to modify linear gradient steps, changing visual
     * properties like lightness, brightness, opacity of each set.
     *
     * It can also set offsets for each gradient step.
     *
     * E.g. if I want to fill a columns in a column series to be a solid fill from
     * top to 80% of height, then gradually fades out, I can use the following
     * gradient modifier as a `fillModifier`:
     *
     * ```TypeScript
     * let fillModifier = new am4core.GradientModifier();
     * fillModifier.opacities = [1, 1, 0];
     * fillModifier.offsets = [0, 0.8, 1];
     * columnSeries.columns.template.fillModifier = fillModifier;
     * ```
     * ```JavaScript
     * var fillModifier = new am4core.GradientModifier();
     * fillModifier.opacities = [1, 1, 0];
     * fillModifier.offsets = [0, 0.8, 1];
     * columnSeries.columns.template.fillModifier = fillModifier;
     * ```
     * ```JSON
     * "series": [{
     *   "type": "ColumnSeries",
     *   "columns": {
     *     "fillModifier": {
     *       "type": "GradientModifier",
     *       "opacities": [1, 1, 0],
     *       "offsets": [0, 0.8, 1]
     *     }
     *   }
     * }]
     * ```
     */


    var GradientModifier =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(GradientModifier, _super);
      /**
       * Constructor.
       */

      function GradientModifier() {
        var _this = _super.call(this) || this;

        _this.lightnesses = [];
        _this.brightnesses = [];
        _this.opacities = [];
        _this.offsets = [];
        _this.className = "GradientModifier";

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(GradientModifier.prototype, "lightnesses", {
        /**
         * @return Lightness values
         */
        get: function get() {
          return this._lightnesses;
        },

        /**
         * An array of lightness values for each step.
         *
         * @param value  Lightness values
         */
        set: function set(value) {
          this._lightnesses = value;
          this._brightnesses = [];
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(GradientModifier.prototype, "brightnesses", {
        /**
         * @return Brightness values
         */
        get: function get() {
          return this._brightnesses;
        },

        /**
         * An array of brightness values for each step.
         *
         * @param value  Brightness values
         */
        set: function set(value) {
          this._brightnesses = value;
          this._lightnesses = [];
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(GradientModifier.prototype, "opacities", {
        /**
         * @return Opacity values
         */
        get: function get() {
          return this._opacities;
        },

        /**
         * An array of opacity values for each step.
         *
         * @param value  Opacity values
         */
        set: function set(value) {
          this._opacities = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(GradientModifier.prototype, "offsets", {
        /**
         * @return Offsets
         */
        get: function get() {
          return this._offsets;
        },

        /**
         * An array of relative position (0-1) for each step.
         *
         * If not set, all steps will be of equal relative length.
         *
         * @param value  Offsets
         */
        set: function set(value) {
          this._offsets = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Modifies the color based on step setting.
       *
       * @ignore Exclude from docs
       * @param value  Source color
       * @return A gradient that matches set modification rules
       */

      GradientModifier.prototype.modify = function (value) {
        // Clear current gradient
        this.gradient.clear(); // Get step count

        var count = 0;

        if (this.opacities) {
          count = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["max"](count, this.opacities.length);
        }

        if (this.lightnesses) {
          count = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["max"](count, this.lightnesses.length);
        }

        if (this.brightnesses) {
          count = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["max"](count, this.brightnesses.length);
        } // Init step values


        var opacity = 1,
            lightness,
            brightness; // Apply steps

        for (var i = 0; i < count; i++) {
          // Take base color
          var color = value; // Check if there are any parameters for this step

          if (this.opacities && _utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](this.opacities[i])) {
            opacity = this.opacities[i];
          }

          if (this.lightnesses && _utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](this.lightnesses[i])) {
            lightness = this.lightnesses[i];
            brightness = undefined;
          }

          if (this.brightnesses && _utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](this.brightnesses[i])) {
            brightness = this.brightnesses[i];
            lightness = undefined;
          } // Check if we need to brighten/lighten color


          if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](brightness)) {
            color = value.brighten(this.brightnesses[i]);
          } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](lightness)) {
            color = value.lighten(this.lightnesses[i]);
          } // Get offset (it's OK if it's undefined)


          var offset = this.offsets[i]; // Apply step

          this.gradient.addColor(color, opacity, offset);
        }

        return this.gradient;
      };

      GradientModifier.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this._offsets = source.offsets;
        this._brightnesses = source.brightnesses;
        this._lightnesses = source.lightnesses;
        this._opacities = source.opacities;
      };

      return GradientModifier;
    }(_ColorModifier__WEBPACK_IMPORTED_MODULE_1__["ColorModifier"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["GradientModifier"] = GradientModifier; //# sourceMappingURL=GradientModifier.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js":
  /*!****************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js ***!
    \****************************************************************************************/

  /*! exports provided: LinePattern */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsLinePatternJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LinePattern", function () {
      return LinePattern;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Pattern__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Pattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _rendering_Path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Line pattern.
     */

    var LinePattern =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LinePattern, _super);
      /**
       * Constructor
       */

      function LinePattern() {
        var _this = _super.call(this) || this;

        _this.properties["gap"] = 0;
        _this._line = _this.paper.add("path");

        _this.addElement(_this._line);

        return _this;
      }
      /**
       * Draws the pattern.
       */


      LinePattern.prototype.draw = function () {
        _super.prototype.draw.call(this);

        if (Math.round(this.rotation / 90) != this.rotation / 90) {
          this.properties["shapeRendering"] = "auto";
        }

        if (this._line) {
          var w = this.width;
          var h = this.height;
          var path = "";

          if (!this.gap) {
            if (Math.round(this.rotation / 90) != this.rotation / 90) {
              path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
                x: -w,
                y: h / 2
              }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
                x: w * 2,
                y: h / 2
              });
              this.properties["rotationX"] = this.width / 2;
              this.properties["rotationY"] = this.height / 2;
            } else {
              path = _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
                x: 0,
                y: 0
              }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
                x: w,
                y: 0
              });
            }
          } else {
            var step = this.gap + this.strokeWidth;
            var count = this.height / step;

            for (var i = -count / 2; i < count * 1.5; i++) {
              if (Math.round(this.rotation / 90) != this.rotation / 90) {
                path += _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
                  x: -w,
                  y: (i + 0.5) * step
                }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
                  x: w * 2,
                  y: (i + 0.5) * step
                });
                this.properties["rotationX"] = this.width / 2;
                this.properties["rotationY"] = this.height / 2;
              } else {
                path += _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["moveTo"]({
                  x: -w,
                  y: i * step
                }) + _rendering_Path__WEBPACK_IMPORTED_MODULE_3__["lineTo"]({
                  x: w * 2,
                  y: i * step
                });
              }
            }
          }

          this._line.attr({
            "d": path
          });
        }
      };

      Object.defineProperty(LinePattern.prototype, "gap", {
        /**
         * @return gap
         */
        get: function get() {
          return this.properties["gap"];
        },

        /**
         * Number of pixels between pattern lines.
         *
         * The pattern will automatically draw required number of lines to fill
         * pattern area maintaining `gap` distance between them.
         *
         * 0 (zero) means only single line will be drawn.
         *
         * @default 0
         * @since 4.7.7
         */
        set: function set(value) {
          this.properties["gap"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      return LinePattern;
    }(_Pattern__WEBPACK_IMPORTED_MODULE_1__["Pattern"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["LinePattern"] = LinePattern; //# sourceMappingURL=LinePattern.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js":
  /*!*******************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js ***!
    \*******************************************************************************************/

  /*! exports provided: LinearGradient */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsLinearGradientJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LinearGradient", function () {
      return LinearGradient;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _Paper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Contains code and logic for generating linear gradients.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Linear gradient class.
     */


    var LinearGradient =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LinearGradient, _super);
      /**
       * Constructor.
       */

      function LinearGradient() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * List of colors switch definitions in a gradient.
         */


        _this._stops = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        /**
         * Gradient direction.
         */

        _this._rotation = 0;
        _this.className = "LinearGradient";

        _this._stops.events.on("setIndex", _this.validate, _this);

        _this._stops.events.on("inserted", _this.validate, _this); // Create element


        _this.element = _this.paper.addGroup("linearGradient");
        _this.id = "gradient-" + _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getUniqueId();

        _this.element.attr({
          "id": _this.id
        });

        _this._disposers.push(_this.element); // Apply theme


        _this.applyTheme();

        return _this;
      }
      /**
       * Draws gradient.
       *
       * @ignore Exclude from docs
       */


      LinearGradient.prototype.validate = function () {
        var _this = this;

        var rotation = (this._rotation + 90) * _utils_Math__WEBPACK_IMPORTED_MODULE_6__["RADIANS"];
        var x1 = Math.round(50 + Math.sin(rotation + Math.PI) * 50) + '%';
        var y1 = Math.round(50 + Math.cos(rotation) * 50) + '%';
        var x2 = Math.round(50 + Math.sin(rotation) * 50) + '%';
        var y2 = Math.round(50 + Math.cos(rotation + Math.PI) * 50) + '%';
        var gradientElement = this.element;
        gradientElement.removeChildNodes();
        gradientElement.attr({
          "x1": x1,
          "x2": x2,
          "y1": y1,
          "y2": y2
        });

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["each"](_utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["indexed"](this._stops.iterator()), function (a) {
          var i = a[0];
          var stop = a[1];
          var offset = stop.offset;

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["isNumber"](offset)) {
            offset = i / (_this._stops.length - 1);
          }

          var gradientStop = _this.paper.add("stop");

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](stop.color)) {
            gradientStop.attr({
              "stop-color": stop.color.toString()
            });
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["isNumber"](stop.opacity)) {
            gradientStop.attr({
              "stop-opacity": stop.opacity
            });
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_7__["isNumber"](offset)) {
            gradientStop.attr({
              "offset": offset
            });
          }

          gradientElement.add(gradientStop);
        });
      };
      /**
       * Clears the gradient.
       *
       * @ignore Exclude from docs
       */


      LinearGradient.prototype.clear = function () {
        this._stops.clear();
      };
      /**
       * Adds a color step to the gradient.
       *
       * @param color    Color (hex code or named color)
       * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)
       * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)
       */


      LinearGradient.prototype.addColor = function (color, opacity, offset) {
        this._stops.push({
          color: color,
          opacity: opacity,
          offset: offset
        });
      };

      Object.defineProperty(LinearGradient.prototype, "stops", {
        /**
         * A list of color stops in the gradient.
         *
         * @return Stops
         */
        get: function get() {
          return this._stops;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(LinearGradient.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return Paper
         */
        get: function get() {
          if (this._paper) {
            return this._paper;
          }

          return Object(_Paper__WEBPACK_IMPORTED_MODULE_3__["getGhostPaper"])();
        },

        /**
         * [[Paper]] instace to use for the gradient.
         *
         * @ignore Exclude from docs
         * @param paper  Paper
         */
        set: function set(paper) {
          if (this._paper != paper) {
            this._paper = paper;
            this.validate();
            paper.appendDef(this.element);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(LinearGradient.prototype, "rotation", {
        /**
         * @return Rotation
         */
        get: function get() {
          return this._rotation;
        },

        /**
         * Rotation (direction) of the gradient in degrees.
         *
         * @param value  Rotation
         */
        set: function set(value) {
          //this.element.attr({ "gradientTransform": "rotate(" + value + " 10 100)" });
          this._rotation = value;
          this.validate();
        },
        enumerable: true,
        configurable: true
      });

      LinearGradient.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.stops.copyFrom(source.stops);
        this._rotation = source.rotation;
      };

      return LinearGradient;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["LinearGradient"] = LinearGradient; //# sourceMappingURL=LinearGradient.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradientModifier.js":
  /*!***************************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradientModifier.js ***!
    \***************************************************************************************************/

  /*! exports provided: LinearGradientModifier */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsLinearGradientModifierJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LinearGradientModifier", function () {
      return LinearGradientModifier;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _LinearGradient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony import */


    var _GradientModifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./GradientModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * This class can be used to modify linear gradient steps, changing visual
     * properties like lightness, brightness, opacity of each set.
     *
     * It can also set offsets for each gradient step.
     *
     * E.g. if I want to fill a columns in a column series to be a solid fill from
     * top to 80% of height, then gradually fades out, I can use the following
     * gradient modifier as a `fillModifier`:
     *
     * ```TypeScript
     * let fillModifier = new am4core.LinearGradientModifier();
     * fillModifier.opacities = [1, 1, 0];
     * fillModifier.offsets = [0, 0.8, 1];
     * columnSeries.columns.template.fillModifier = fillModifier;
     * ```
     * ```JavaScript
     * var fillModifier = new am4core.LinearGradientModifier();
     * fillModifier.opacities = [1, 1, 0];
     * fillModifier.offsets = [0, 0.8, 1];
     * columnSeries.columns.template.fillModifier = fillModifier;
     * ```
     * ```JSON
     * "series": [{
     *   "type": "ColumnSeries",
     *   "columns": {
     *     "fillModifier": {
     *       "type": "LinearGradientModifier",
     *       "opacities": [1, 1, 0],
     *       "offsets": [0, 0.8, 1]
     *     }
     *   }
     * }]
     * ```
     */


    var LinearGradientModifier =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LinearGradientModifier, _super);
      /**
       * Constructor.
       */

      function LinearGradientModifier() {
        var _this = _super.call(this) || this;

        _this.className = "LinearGradientModifier";
        _this.gradient = new _LinearGradient__WEBPACK_IMPORTED_MODULE_1__["LinearGradient"]();

        _this.applyTheme();

        return _this;
      }

      LinearGradientModifier.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.gradient = source.gradient.clone();
      };

      return LinearGradientModifier;
    }(_GradientModifier__WEBPACK_IMPORTED_MODULE_2__["GradientModifier"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["LinearGradientModifier"] = LinearGradientModifier; //# sourceMappingURL=LinearGradientModifier.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js":
  /*!************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js ***!
    \************************************************************************************/

  /*! exports provided: Pattern */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsPatternJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Pattern", function () {
      return Pattern;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Paper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Pattern module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Base class to define patterns.
     */

    var Pattern =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Pattern, _super); //public propertyValues = new Dictionary<PatternProperties, any>();

      /**
       * Constructor
       */

      function Pattern() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * List of elements the pattern consists of.
         */


        _this._elements = new _utils_List__WEBPACK_IMPORTED_MODULE_3__["List"]();
        /**
         * A storage for Filter property/value pairs.
         *
         * @ignore Exclude from docs
         * @see {@link PatternProperties}
         */

        _this.properties = {};
        _this.className = "Pattern"; // Set defaults

        _this.width = 10;
        _this.height = 10;
        _this.x = 0;
        _this.y = 0;
        _this.patternUnits = "userSpaceOnUse";
        var interfaceColors = new _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_6__["InterfaceColorSet"]();
        _this.backgroundFill = interfaceColors.getFor("background");
        _this.backgroundOpacity = 0;
        _this.fillOpacity = 1;
        _this.fill = interfaceColors.getFor("alternativeBackground");
        _this.stroke = interfaceColors.getFor("alternativeBackground");
        _this.strokeOpacity = 1;
        _this.strokeWidth = 1;
        _this.shapeRendering = "crispEdges";
        _this.rotation = 0; // Create main group to store pattern elements inelements

        _this.element = _this.paper.addGroup("pattern");
        _this.id = "pattern-" + _Registry__WEBPACK_IMPORTED_MODULE_5__["registry"].getUniqueId();

        _this.element.attr({
          "id": _this.id
        });

        _this._disposers.push(_this.element); // Make elements disposable


        _this._disposers.push(new _utils_List__WEBPACK_IMPORTED_MODULE_3__["ListDisposer"](_this._elements)); // Request again to trigger getter/setter code


        _this.patternUnits = _this.patternUnits;
        _this.width = _this.width;
        _this.height = _this.height; // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws the pattern.
       */


      Pattern.prototype.draw = function () {
        var _this = this;

        var patternElement = this.element;

        if (patternElement) {
          patternElement.removeChildNodes();
          var background = this.paper.add("rect");
          background.attr({
            "width": this.width,
            "height": this.height,
            "shape-rendering": "crispEdges",
            "fill": this.backgroundFill.hex,
            "fill-opacity": this.backgroundOpacity,
            "stroke": this.backgroundFill.hex,
            "stroke-opacity": this.backgroundOpacity
          });
          patternElement.add(background);
          patternElement.attr({
            "x": this.x,
            "y": this.y,
            "width": this.width,
            "height": this.height,
            "stroke": this.stroke.hex,
            "fill": this.fill.hex,
            "fill-opacity": this.fillOpacity,
            "stroke-opacity": this.strokeOpacity,
            "stroke-width": this.strokeWidth,
            "shape-rendering": this.shapeRendering,
            "patternUnits": this.patternUnits,
            "stroke-dasharray": this.strokeDasharray
          });

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_7__["each"](this._elements.iterator(), function (element) {
            element.rotation = _this.rotation;
            element.rotationX = _this.properties["rotationX"];
            element.rotationY = _this.properties["rotationY"];

            _this.element.add(element);
          });
        }
      };
      /**
       * Animate pattern properties.
       *
       * @see {@link Animation}
       * @param animationOptions  Animation options
       * @param duration          Duration (ms)
       * @param easing            Easing function
       * @return Animation instance
       */


      Pattern.prototype.animate = function (animationOptions, duration, easing) {
        return new _utils_Animation__WEBPACK_IMPORTED_MODULE_4__["Animation"](this, animationOptions, duration, easing).start();
      };
      /**
       * Adds an element to the pattern.
       *
       * @param element  Element
       */


      Pattern.prototype.addElement = function (element) {
        this._elements.push(element);

        this._disposers.push(element);
      };
      /**
       * Remove an element from the pattern.
       *
       * @param element  Element
       */


      Pattern.prototype.removeElement = function (element) {
        this._elements.removeValue(element);

        this.removeDispose(element);
      };

      Object.defineProperty(Pattern.prototype, "elements", {
        /**
         * Returns the list of SVG elements comprising the pattern.
         *
         * @return Pattern elements
         */
        get: function get() {
          return this._elements;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "fillOpacity", {
        /**
         * @return Opacity (0-1)
         */
        get: function get() {
          return this.properties["fillOpacity"];
        },

        /**
         * Pattern fill opacity. (0-1)
         *
         * @param value  Opacity (0-1)
         */
        set: function set(value) {
          this.properties["fillOpacity"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "fill", {
        /**
         * @return Fill color
         */
        get: function get() {
          return this.properties["fill"];
        },

        /**
         * Fill color of the pattern.
         *
         * @param value  Fill color
         */
        set: function set(value) {
          this.properties["fill"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "backgroundFill", {
        /**
         * @return Background color
         */
        get: function get() {
          return this.properties["backgroundFill"];
        },

        /**
         * Pattern background fill color.
         *
         * @param value  Background color
         */
        set: function set(value) {
          this.properties["backgroundFill"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "backgroundOpacity", {
        /**
         * @return Background opacity (0-1)
         */
        get: function get() {
          return this.properties["backgroundOpacity"];
        },

        /**
         * Pattern backgorund opacity. (0-1)
         *
         * @param value  Background opacity (0-1)
         */
        set: function set(value) {
          this.properties["backgroundOpacity"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "stroke", {
        /**
         * @return Color
         */
        get: function get() {
          return this.properties["stroke"];
        },

        /**
         * Pattern stroke (border) color.
         *
         * @param value  Color
         */
        set: function set(value) {
          this.properties["stroke"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "strokeOpacity", {
        /**
         * @return Opacity (0-1)
         */
        get: function get() {
          return this.properties["strokeOpacity"];
        },

        /**
         * Pattern stroke opacity. (0-1)
         *
         * @param value  Opacity (0-1)
         */
        set: function set(value) {
          this.properties["strokeOpacity"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "strokeWidth", {
        /**
         * @return Stroke thickness (px)
         */
        get: function get() {
          return this.properties["strokeWidth"];
        },

        /**
         * Pattern stroke thickness in pixels.
         *
         * @param value  Stroke thickness (px)
         */
        set: function set(value) {
          this.properties["strokeWidth"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "shapeRendering", {
        get: function get() {
          return this.properties["shapeRendering"];
        },

        /**
         * Shape rendering
         * @param value [description]
         */
        set: function set(value) {
          this.properties["shapeRendering"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "rotation", {
        /**
         * @return Rotation
         */
        get: function get() {
          return this.properties["rotation"];
        },

        /**
         * Pattern rotation in degrees.
         *
         * @param value  Rotation
         */
        set: function set(value) {
          this.properties["rotation"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "patternUnits", {
        /**
         * @return Units
         */
        get: function get() {
          return this.properties["patternUnits"];
        },

        /**
         * Pattern measuring units.
         *
         * Available options: "userSpaceOnUse" | "objectBoundingBox".
         *
         * @param value  Units
         */
        set: function set(value) {
          this.properties["patternUnits"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "width", {
        /**
         * @return Width (px)
         */
        get: function get() {
          return this.properties["width"];
        },

        /**
         * Pattern width in pixels.
         *
         * @param value  Width (px)
         */
        set: function set(value) {
          this.properties["width"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "height", {
        /**
         * @return Height (px)
         */
        get: function get() {
          return this.properties["height"];
        },

        /**
         * Pattern height in pixels.
         *
         * @param value Height (px)
         */
        set: function set(value) {
          this.properties["height"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "x", {
        /**
         * @return X (px)
         */
        get: function get() {
          return this.properties["x"];
        },

        /**
         * X position. (pixels)
         *
         * @param value X (px)
         */
        set: function set(value) {
          this.properties["x"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "y", {
        /**
         * @return Y (px)
         */
        get: function get() {
          return this.properties["y"];
        },

        /**
         * Y position (px).
         *
         * @param value Y (px)
         */
        set: function set(value) {
          this.properties["y"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return Paper
         */
        get: function get() {
          if (this._paper) {
            return this._paper;
          }

          return Object(_Paper__WEBPACK_IMPORTED_MODULE_2__["getGhostPaper"])();
        },

        /**
         * [[Paper]] instance to draw pattern in.
         *
         * @ignore Exclude from docs
         * @param paper  Paper
         */
        set: function set(paper) {
          if (this._paper != paper) {
            this._paper = paper;
            this.draw();
            paper.appendDef(this.element);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies properties from another Pattern instance.
       *
       * @param source  Source pattern
       */

      Pattern.prototype.copyFrom = function (source) {
        var _this = this;

        _super.prototype.copyFrom.call(this, source);

        _utils_Object__WEBPACK_IMPORTED_MODULE_8__["each"](source.properties, function (key, value) {
          _this[key] = value;
        });
      };

      Object.defineProperty(Pattern.prototype, "animations", {
        /**
         * A list of animations currently running on the patter.
         *
         * @ignore Exclude from docs
         * @return Animation list
         */
        get: function get() {
          if (!this._animations) {
            this._animations = [];

            this._disposers.push(new _utils_Animation__WEBPACK_IMPORTED_MODULE_4__["AnimationDisposer"](this._animations));
          }

          return this._animations;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Pattern.prototype, "strokeDasharray", {
        /**
         * @return `stroke-dasharray`
         */
        get: function get() {
          return this.properties["strokeDashArray"];
        },

        /**
         * A `stroke-dasharray` for the stroke (outline).
         *
         * "Dasharray" allows setting rules to make lines dashed, dotted, etc.
         *
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`
         * @param value  `stroke-dasharray`
         */
        set: function set(value) {
          this.properties["strokeDashArray"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Processes JSON-based config before it is applied to the object.
       *
       * @ignore Exclude from docs
       * @param config  Config
       */

      Pattern.prototype.processConfig = function (config) {
        if (config) {
          // Set up series
          if (_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](config.elements) && _utils_Type__WEBPACK_IMPORTED_MODULE_9__["isArray"](config.elements)) {
            for (var i = 0, len = config.elements.length; i < len; i++) {
              var element = config.elements[i];

              if (_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](element["type"])) {
                var sprite = this.createEntryInstance(element);

                if (sprite instanceof _Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]) {
                  sprite.config = element;
                }

                this.addElement(_utils_Type__WEBPACK_IMPORTED_MODULE_9__["hasValue"](element["typeProperty"]) ? sprite[element["typeProperty"]] : sprite.element);
              }
            }
          }
        }

        _super.prototype.processConfig.call(this, config);
      };

      return Pattern;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_5__["registry"].registeredClasses["Pattern"] = Pattern; //# sourceMappingURL=Pattern.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js":
  /*!*******************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js ***!
    \*******************************************************************************************/

  /*! exports provided: RadialGradient */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsRadialGradientJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RadialGradient", function () {
      return RadialGradient;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _Paper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../../utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /**
     * Contains code and logic for generating radial gradients.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Radial gradient class.
     */


    var RadialGradient =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RadialGradient, _super);
      /**
       * Constructor
       */

      function RadialGradient() {
        var _this = _super.call(this) || this;
        /**
         * List of colors switch definitions in a gradient.
         */


        _this._stops = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        _this.element = _this.paper.addGroup("radialGradient");
        _this.id = "gradient-" + _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getUniqueId();

        _this.element.attr({
          "id": _this.id
        });

        _this._disposers.push(_this.element);

        _this.applyTheme();

        return _this;
      }
      /**
       * Draws gradient.
       */


      RadialGradient.prototype.draw = function () {
        var _this = this;

        var gradientElement = this.element;

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](this.cx)) {
          var value = this.cx;

          if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_7__["Percent"]) {
            value = value.percent + "%";
          }

          gradientElement.attr({
            "cx": value
          });
        }

        if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](this.cy)) {
          var value = this.cy;

          if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_7__["Percent"]) {
            value = value.percent + "%";
          }

          gradientElement.attr({
            "cy": value
          });
        }

        if (this.fx) {
          var value = this.fx;

          if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_7__["Percent"]) {
            value = value.percent + "%";
          }

          gradientElement.attr({
            "fx": value
          });
        }

        if (this.fy) {
          var value = this.fy;

          if (value instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_7__["Percent"]) {
            value = value.percent + "%";
          }

          gradientElement.attr({
            "fy": value
          });
        }

        gradientElement.removeChildNodes();

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["each"](_utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["indexed"](this._stops.iterator()), function (a) {
          var i = a[0];
          var stop = a[1];
          var offset = stop.offset;

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](offset)) {
            offset = i / (_this._stops.length - 1);
          }

          var gradientStop = _this.paper.add("stop");

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["hasValue"](stop.color)) {
            gradientStop.attr({
              "stop-color": stop.color.toString()
            });
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](stop.opacity)) {
            gradientStop.attr({
              "stop-opacity": stop.opacity
            });
          }

          if (_utils_Type__WEBPACK_IMPORTED_MODULE_6__["isNumber"](offset)) {
            gradientStop.attr({
              "offset": offset
            });
          }

          gradientElement.add(gradientStop);
        });
      };
      /**
       * Adds a color step to the gradient.
       *
       * @param color    Color (hex code or named color)
       * @param opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)
       * @param offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)
       */


      RadialGradient.prototype.addColor = function (color, opacity, offset) {
        this._stops.push({
          color: color,
          opacity: opacity,
          offset: offset
        });

        this.draw();
      };

      Object.defineProperty(RadialGradient.prototype, "paper", {
        /**
         * @ignore Exclude from docs
         * @return Paper
         */
        get: function get() {
          if (this._paper) {
            return this._paper;
          }

          return Object(_Paper__WEBPACK_IMPORTED_MODULE_3__["getGhostPaper"])();
        },

        /**
         * A [[Paper]] instace to use for the gradient.
         *
         * @ignore Exclude from docs
         * @param paper  Paper
         */
        set: function set(paper) {
          if (this._paper != paper) {
            this._paper = paper;
            this.draw();
            paper.appendDef(this.element);
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RadialGradient.prototype, "cx", {
        get: function get() {
          return this._cx;
        },

        /**
         * Center x coordinate of the gradient, can be set as number or Percent
         *
         * @param point  Center point
         */
        set: function set(value) {
          this._cx = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RadialGradient.prototype, "cy", {
        get: function get() {
          return this._cy;
        },

        /**
         * Center y coordinate of the gradient, can be set as number or Percent
         *
         * @param point  Center point
         */
        set: function set(value) {
          this._cy = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RadialGradient.prototype, "fx", {
        get: function get() {
          return this._fx;
        },

        /**
         * y coordinate of the focal point of a gradient, can be set in pixels or as Percent
         *
         * @param point  Center point
         */
        set: function set(value) {
          this._fx = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RadialGradient.prototype, "fy", {
        get: function get() {
          return this._fy;
        },

        /**
         * y coordinate of the focal point of a gradient, can be set in pixels or as Percent
         *
         * @param point  Center point
         */
        set: function set(value) {
          this._fy = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });

      RadialGradient.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.stops.copyFrom(source.stops);
        this.cx = source.cx;
        this.cy = source.cy;
        this.fx = source.fx;
        this.fy = source.fy;
      };

      Object.defineProperty(RadialGradient.prototype, "stops", {
        /**
         * A list of color stops in the gradient.
         *
         * @return Stops
         */
        get: function get() {
          return this._stops;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Clears the gradient.
       *
       * @ignore Exclude from docs
       */

      RadialGradient.prototype.clear = function () {
        this._stops.clear();
      };

      return RadialGradient;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].registeredClasses["RadialGradient"] = RadialGradient; //# sourceMappingURL=RadialGradient.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradientModifier.js":
  /*!***************************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradientModifier.js ***!
    \***************************************************************************************************/

  /*! exports provided: RadialGradientModifier */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsRadialGradientModifierJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RadialGradientModifier", function () {
      return RadialGradientModifier;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _RadialGradient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./RadialGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js");
    /* harmony import */


    var _GradientModifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./GradientModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * This class can be used to modify radial gradient steps, changing visual
     * properties like lightness, brightness, opacity of each set.
     *
     * It can also set offsets for each gradient step.
     *
     * E.g. if I want to fill a columns in a column series to be a solid fill from
     * top to 80% of height, then gradually fades out, I can use the following
     * gradient modifier as a `fillModifier`:
     *
     * ```TypeScript
     * let fillModifier = new am4core.LinearGradientModifier();
     * fillModifier.opacities = [1, 1, 0];
     * fillModifier.offsets = [0, 0.8, 1];
     * columnSeries.columns.template.fillModifier = fillModifier;
     * ```
     * ```JavaScript
     * var fillModifier = new am4core.LinearGradientModifier();
     * fillModifier.opacities = [1, 1, 0];
     * fillModifier.offsets = [0, 0.8, 1];
     * columnSeries.columns.template.fillModifier = fillModifier;
     * ```
     * ```JSON
     * "series": [{
     *   "type": "ColumnSeries",
     *   "columns": {
     *     "fillModifier": {
     *       "type": "LinearGradientModifier",
     *       "opacities": [1, 1, 0],
     *       "offsets": [0, 0.8, 1]
     *     }
     *   }
     * }]
     * ```
     */


    var RadialGradientModifier =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RadialGradientModifier, _super);
      /**
       * Constructor.
       */

      function RadialGradientModifier() {
        var _this = _super.call(this) || this;

        _this.className = "RadialGradientModifier";
        _this.gradient = new _RadialGradient__WEBPACK_IMPORTED_MODULE_1__["RadialGradient"]();

        _this.applyTheme();

        return _this;
      }

      RadialGradientModifier.prototype.copyFrom = function (source) {
        _super.prototype.copyFrom.call(this, source);

        this.gradient = source.gradient.clone();
      };

      return RadialGradientModifier;
    }(_GradientModifier__WEBPACK_IMPORTED_MODULE_2__["GradientModifier"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["RadialGradientModifier"] = RadialGradientModifier; //# sourceMappingURL=RadialGradientModifier.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RectPattern.js":
  /*!****************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RectPattern.js ***!
    \****************************************************************************************/

  /*! exports provided: RectPattern */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFillsRectPatternJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RectPattern", function () {
      return RectPattern;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Pattern__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Pattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Rectangular pattern module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Rectangular pattern
     */

    var RectPattern =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RectPattern, _super);
      /**
       * Constructor
       */

      function RectPattern() {
        var _this = _super.call(this) || this;

        _this.rectHeight = 1;
        _this.rectWidth = 1;
        _this._rect = _this.paper.add("rect");

        _this.addElement(_this._rect);

        return _this;
      }
      /**
       * Draws the rectangular element.
       */


      RectPattern.prototype.draw = function () {
        _super.prototype.draw.call(this);

        this.properties["rotationX"] = this.width / 2;
        this.properties["rotationY"] = this.height / 2;

        if (this._rect) {
          this._rect.attr({
            "width": this.rectWidth,
            "height": this.rectHeight,
            "x": (this.width - this.rectWidth) / 2,
            "y": (this.height - this.rectHeight) / 2
          });
        }
      };

      Object.defineProperty(RectPattern.prototype, "rectWidth", {
        /**
         * @return Width (px)
         */
        get: function get() {
          return this.properties["rectWidth"];
        },

        /**
         * Rectangle width in pixels.
         *
         * @param value Width (px)
         */
        set: function set(value) {
          this.properties["rectWidth"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(RectPattern.prototype, "rectHeight", {
        /**
         * @return Height (px)
         */
        get: function get() {
          return this.properties["rectHeight"];
        },

        /**
         * Rectangle height in pixels.
         *
         * @param value Height (px)
         */
        set: function set(value) {
          this.properties["rectHeight"] = value;
          this.draw();
        },
        enumerable: true,
        configurable: true
      });
      return RectPattern;
    }(_Pattern__WEBPACK_IMPORTED_MODULE_1__["Pattern"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["RectPattern"] = RectPattern; //# sourceMappingURL=RectPattern.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/BlurFilter.js":
  /*!*****************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/BlurFilter.js ***!
    \*****************************************************************************************/

  /*! exports provided: BlurFilter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersBlurFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BlurFilter", function () {
      return BlurFilter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Module for "Blur" filter.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a "Blur" filter.
     */

    var BlurFilter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BlurFilter, _super);
      /**
       * Constructor
       */

      function BlurFilter() {
        var _this = _super.call(this) || this;

        _this.className = "BlurFilter"; // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`

        _this.feGaussianBlur = _this.paper.add("feGaussianBlur");

        _this.feGaussianBlur.attr({
          "result": "blurOut",
          "in": "SourceGraphic"
        });

        _this.filterPrimitives.push(_this.feGaussianBlur); // Set default properties


        _this.width = 200;
        _this.height = 200;
        _this.blur = 1.5;

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(BlurFilter.prototype, "blur", {
        /**
         * @return Blur
         */
        get: function get() {
          return this.properties.blur;
        },

        /**
         * Blur value.
         *
         * The bigger the value, the blurrier the target element will become.
         *
         * @default 1.5
         * @param value Blur
         */
        set: function set(value) {
          this.properties.blur = value;
          this.feGaussianBlur.attr({
            "stdDeviation": value / this.scale
          });
        },
        enumerable: true,
        configurable: true
      });
      return BlurFilter;
    }(_Filter__WEBPACK_IMPORTED_MODULE_1__["Filter"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["BlurFilter"] = BlurFilter; //# sourceMappingURL=BlurFilter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/ColorizeFilter.js":
  /*!*********************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/ColorizeFilter.js ***!
    \*********************************************************************************************/

  /*! exports provided: ColorizeFilter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersColorizeFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ColorizeFilter", function () {
      return ColorizeFilter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Module for "Colorize" filter.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a "Colorize" filter.
     */

    var ColorizeFilter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ColorizeFilter, _super);
      /**
       * Constructor
       */

      function ColorizeFilter() {
        var _this = _super.call(this) || this;

        _this.className = "ColorizeFilter"; // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`

        _this.feColorMatrix = _this.paper.add("feColorMatrix");

        _this.feColorMatrix.attr({
          "type": "matrix"
        }); //this.feColorMatrix.setAttribute("in", "SourceAlpha");


        _this.filterPrimitives.push(_this.feColorMatrix); // Set default properties


        _this.intensity = 1;

        _this.applyTheme();

        return _this;
      }
      /**
       * (Re)applies colors to the already existing filter by modifying filyer's
       * color matrix element.
       *
       * @ignore Exclude from docs
       */


      ColorizeFilter.prototype.applyFilter = function () {
        var i = this.intensity;
        var ii = 1 - i;
        var r;
        var g;
        var b;
        var color = this.color;

        if (color && color.rgb) {
          r = color.rgb.r / 255 * i;
          g = color.rgb.g / 255 * i;
          b = color.rgb.b / 255 * i;
        } else {
          r = 0;
          g = 0;
          b = 0;
        }

        this.feColorMatrix.attr({
          "values": ii + " 0 0 0 " + r + " 0 " + ii + " 0 0 " + g + " 0 0 " + ii + " 0 " + b + " 0 0 0 1 0"
        });
      };

      Object.defineProperty(ColorizeFilter.prototype, "color", {
        /**
         * @return Color
         */
        get: function get() {
          return this.properties["color"];
        },

        /**
         * Target color to apply to the element.
         *
         * Depending on the `intensity`, all colors of the target element will steer
         * towards this color.
         *
         * E.g. setting to `am4core.color("greener")` will make all colors greener.
         *
         * @param value  Color
         */
        set: function set(value) {
          this.properties["color"] = value;
          this.applyFilter();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ColorizeFilter.prototype, "intensity", {
        /**
         * @return Intensity (0-1)
         */
        get: function get() {
          return this.properties.intensity;
        },

        /**
         * Intensity of the color (0-1).
         *
         * The bigger the number the more of a `color` target's colors will become.
         *
         * 0 means the colors will remain as they are.
         * 1 means all colors will become the target `color`.
         *
         * @default 1
         * @param value  Intensity (0-1)
         */
        set: function set(value) {
          this.properties.intensity = value;
          this.applyFilter();
        },
        enumerable: true,
        configurable: true
      });
      return ColorizeFilter;
    }(_Filter__WEBPACK_IMPORTED_MODULE_1__["Filter"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["ColorizeFilter"] = ColorizeFilter; //# sourceMappingURL=ColorizeFilter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DesaturateFilter.js":
  /*!***********************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DesaturateFilter.js ***!
    \***********************************************************************************************/

  /*! exports provided: DesaturateFilter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersDesaturateFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DesaturateFilter", function () {
      return DesaturateFilter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Module for "Desaturate" filter.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creats a "Desaturate" filter
     */


    var DesaturateFilter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DesaturateFilter, _super);
      /**
       * Constructor
       */

      function DesaturateFilter() {
        var _this = _super.call(this) || this;

        _this.className = "DesaturateFilter"; // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`

        _this.feColorMatrix = _this.paper.add("feColorMatrix");

        _this.feColorMatrix.attr({
          "type": "saturate"
        });

        _this.filterPrimitives.push(_this.feColorMatrix); // Set default properties


        _this.width = 120;
        _this.height = 120;
        _this.saturation = 0;

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(DesaturateFilter.prototype, "saturation", {
        /**
         * @return Saturation (0-1)
         */
        get: function get() {
          return this.properties["saturation"];
        },

        /**
         * Saturation.
         *
         * 0 - completely desaturated.
         * 1 - fully saturated (gray).
         *
         * @param value  Saturation (0-1)
         */
        set: function set(value) {
          this.properties["saturation"] = value;
          this.feColorMatrix.attr({
            "values": value.toString()
          });
        },
        enumerable: true,
        configurable: true
      });
      return DesaturateFilter;
    }(_Filter__WEBPACK_IMPORTED_MODULE_1__["Filter"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["DesaturateFilter"] = DesaturateFilter; //# sourceMappingURL=DesaturateFilter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DropShadowFilter.js":
  /*!***********************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DropShadowFilter.js ***!
    \***********************************************************************************************/

  /*! exports provided: DropShadowFilter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersDropShadowFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DropShadowFilter", function () {
      return DropShadowFilter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Module for "Drop Shadow" filter.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creats a "Drop Shadow" filter.
     */

    var DropShadowFilter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DropShadowFilter, _super);
      /**
       * Constructor
       */

      function DropShadowFilter() {
        var _this = _super.call(this) || this;

        _this.className = "DropShadowFilter"; // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`

        _this.color = Object(_utils_Color__WEBPACK_IMPORTED_MODULE_2__["color"])("#000");
        _this.feGaussianBlur = _this.paper.add("feGaussianBlur");

        _this.feGaussianBlur.attr({
          "result": "blurOut",
          "in": "SourceGraphic"
        });

        _this.filterPrimitives.push(_this.feGaussianBlur);

        _this.feOffset = _this.paper.add("feOffset");

        _this.feOffset.attr({
          "result": "offsetBlur"
        });

        _this.filterPrimitives.push(_this.feOffset);

        _this.feFlood = _this.paper.add("feFlood");

        _this.feFlood.attr({
          "flood-color": _this.color
        });

        _this.filterPrimitives.push(_this.feFlood);

        _this.feComposite = _this.paper.add("feComposite");

        _this.feComposite.attr({
          "in2": "offsetBlur",
          operator: "in"
        });

        _this.filterPrimitives.push(_this.feComposite);

        _this.feMerge = _this.paper.addGroup("feMerge");

        _this.feMerge.add(_this.paper.add("feMergeNode"));

        _this.feMerge.add(_this.paper.add("feMergeNode").attr({
          "in": "SourceGraphic"
        }));

        _this.filterPrimitives.push(_this.feMerge); // Set default properties


        _this.width = 200;
        _this.height = 200;
        _this.blur = 1.5;
        _this.dx = 3;
        _this.dy = 3;
        _this.opacity = 0.5;

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(DropShadowFilter.prototype, "color", {
        /**
         * @return Color
         */
        get: function get() {
          return this.properties.color;
        },

        /**
         * Shadow color.
         *
         * @param value  Color
         */
        set: function set(value) {
          this.properties.color = value;

          if (this.feFlood) {
            this.feFlood.attr({
              "flood-color": value
            });
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DropShadowFilter.prototype, "opacity", {
        /**
         * @return Opacity (0-1)
         */
        get: function get() {
          return this.properties.opacity;
        },

        /**
         * Opacity of the shadow. (0-1)
         *
         * @param value  Opacity (0-1)
         */
        set: function set(value) {
          this.properties.opacity = value;
          this.feFlood.attr({
            "flood-opacity": value
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DropShadowFilter.prototype, "dx", {
        /**
         * @return Horizontal offset (px)
         */
        get: function get() {
          return this.properties.dx;
        },

        /**
         * Horizontal offset in pixels.
         *
         * @param value  Horizontal offset (px)
         */
        set: function set(value) {
          this.properties.dx = value;
          this.feOffset.attr({
            "dx": value / this.scale
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DropShadowFilter.prototype, "dy", {
        /**
         * @return Vertical offset (px)
         */
        get: function get() {
          return this.properties.dy;
        },

        /**
         * Vertical offset in pixels.
         *
         * @param value Vertical offset (px)
         */
        set: function set(value) {
          this.properties.dy = value;
          this.feOffset.attr({
            "dy": value / this.scale
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(DropShadowFilter.prototype, "blur", {
        /**
         * @return Blur
         */
        get: function get() {
          return this.properties.blur;
        },

        /**
         * Blur.
         *
         * @param value  Blur
         */
        set: function set(value) {
          this.properties.blur = value;
          this.feGaussianBlur.attr({
            "stdDeviation": value / this.scale
          });
        },
        enumerable: true,
        configurable: true
      });
      /**
       * [updateScale description]
       *
       * @todo Description
       */

      DropShadowFilter.prototype.updateScale = function () {
        this.dx = this.dx;
        this.dy = this.dy;
        this.blur = this.blur;
      };

      return DropShadowFilter;
    }(_Filter__WEBPACK_IMPORTED_MODULE_1__["Filter"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["DropShadowFilter"] = DropShadowFilter; //# sourceMappingURL=DropShadowFilter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js":
  /*!*************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js ***!
    \*************************************************************************************/

  /*! exports provided: Filter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Filter", function () {
      return Filter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Paper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /**
     * This module contains a base class for an SVG filter.
     *
     * Filters can be used to decorate, change and transform just about any DOM
     * element.
     *
     * A Filter works by applying one or more effects (primitives) to SVG element.
     *
     * For more information on how SVG filters work, refer to
     * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Base filter class.
     *
     * This class while can be instantiated will not do anything. It is just a base
     * functionality for any other "real" filters to extend.
     *
     * Filters can be used to decorate, change and transform just about any DOM
     * element.
     *
     * A Filter works by applying one or more effects (primitives) to SVG element.
     *
     * For more information on how SVG filters work, refer to
     * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).
     *
     * @todo Example
     */

    var Filter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Filter, _super);
      /**
       * Constructor
       */

      function Filter() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * A storage for Filter property/value pairs.
         *
         * @ignore Exclude from docs
         * @see {@link FilterProperties}
         */


        _this.properties = {};
        /**
         * Identifies if this object is a "template" and should not be treated as
         * real object that is drawn or actually used in the chart.
         */

        _this.isTemplate = false;
        /**
         * [_scale description]
         *
         * @todo Description
         */

        _this._scale = 1;
        /**
         * [_nonScaling description]
         *
         * @todo Description
         */

        _this._nonScaling = true;
        _this.className = "Filter"; // Create a list to hold primitives (effect elements)

        _this.filterPrimitives = new _utils_List__WEBPACK_IMPORTED_MODULE_4__["List"](); // Automatically add added primitives to `_disposers` so they are discarded
        // when Filter object is destroyed (disposed)

        _this.filterPrimitives.events.on("inserted", function (ev) {
          _this._disposers.push(ev.newValue);
        }); // Set default dimensions


        _this.width = 120;
        _this.height = 120; // Apply theme

        _this.applyTheme();

        return _this;
      }
      /**
       * Appends actual filter elements to the filter group.
       *
       * @ignore Exclude from docs
       * @param filterElement An SVG `<group>` element to add filter element to
       */


      Filter.prototype.appendPrimitives = function (filterElement) {
        _utils_Iterator__WEBPACK_IMPORTED_MODULE_6__["each"](this.filterPrimitives.iterator(), function (filterPrimitive) {
          filterElement.add(filterPrimitive);
        });
      };
      /**
       * Uses Transitions filter's values from current to target. This is used to
       * smoothly appear filter, rather than it pop into effect.
       *
       * @ignore Exclude from docs
       * @param animationOptions  Animation options
       * @param duration          Duration in milliseconds
       * @param easing            Easing function
       * @return Animation instance
       */


      Filter.prototype.animate = function (animationOptions, duration, easing) {
        var animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_3__["Animation"](this, animationOptions, duration, easing).start();
        return animation;
      };

      Object.defineProperty(Filter.prototype, "width", {
        /**
         * @return Width (%)
         */
        get: function get() {
          return this.properties["width"];
        },

        /**
         * Width of the filter element in percent.
         *
         * If the filter is designed to "bleed out" of the original target element,
         * like for example a shadow, you need this bigger than 100, or the
         * non-fitting parts will be clipped.
         *
         * @default 120
         * @param value Width (px)
         */
        set: function set(value) {
          this.properties["width"] = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Filter.prototype, "height", {
        /**
         * @return Height
         */
        get: function get() {
          return this.properties["height"];
        },

        /**
         * Height of the filter element in percent.
         *
         * If the filter is designed to "bleed out" of the original target element,
         * like for example a shadow, you need this bigger than 100, or the
         * non-fitting parts will be clipped.
         *
         * @default 120
         * @param value Height (%)
         */
        set: function set(value) {
          this.properties["height"] = value;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies properties from another [[Filter]] object.
       *
       * @param filter Source [[Filter]] object
       */

      Filter.prototype.copyFrom = function (filter) {
        var _this = this;

        _super.prototype.copyFrom.call(this, filter);

        _utils_Object__WEBPACK_IMPORTED_MODULE_5__["each"](filter.properties, function (key, value) {
          _this[key] = value;
        });
      };

      Object.defineProperty(Filter.prototype, "paper", {
        /**
         * @return Paper
         */
        get: function get() {
          if (this._paper) {
            return this._paper;
          }

          return Object(_Paper__WEBPACK_IMPORTED_MODULE_2__["getGhostPaper"])();
        },

        /**
         * Sets [[Paper]] instance to create filter's elements in.
         *
         * @ignore Exclude from docs
         * @param paper  Paper
         */
        set: function set(paper) {
          if (this._paper != paper) {
            this._paper = paper;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Filter.prototype, "animations", {
        /**
         * All animations currently in play.
         *
         * @ignore Exclude from docs
         * @return List of animations
         */
        get: function get() {
          if (!this._animations) {
            this._animations = [];

            this._disposers.push(new _utils_Animation__WEBPACK_IMPORTED_MODULE_3__["AnimationDisposer"](this._animations));
          }

          return this._animations;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Filter.prototype, "scale", {
        /**
         * @ignore Exclude from docs
         */
        get: function get() {
          return this._scale;
        },

        /**
         * [[Sprite]] uses this method to inform filter about it's scale.
         *
         * @ignore Exclude from docs
         */
        set: function set(value) {
          this._scale = value;
          this.updateScale();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Updates filter properties which depend on scale.
       *
       * @ignore Exclude from docs
       */

      Filter.prototype.updateScale = function () {// Dummy method for extending classes to override.
      };

      Object.defineProperty(Filter.prototype, "nonScaling", {
        /**
         * @return Non scaling?
         */
        get: function get() {
          return this._nonScaling;
        },

        /**
         * If a filter is non scaling, it will look the same even if the sprite is
         * scaled, otherwise filter will scale together with a [[Sprite]].
         *
         * @default false
         * @param value  Non scaling?
         */
        set: function set(value) {
          this._nonScaling = value;

          if (!value) {
            this._scale = 1;
          }

          this.updateScale();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Filter.prototype, "sprite", {
        /**
         * A target element this filter is currently attached to.
         *
         * We need to keep track of it because one filter can be used for just one
         * element, so we have to remove it from the old "parent" when attaching to
         * the new one.
         *
         * @ignore Exclude from docs
         * @param value  Target element
         */
        set: function set(value) {
          this.setSprite(value);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets filter's target element.
       *
       * @ignore Exclude from docs
       * @param value  Element filter is being attached to
       */

      Filter.prototype.setSprite = function (value) {
        if (this._sprite && this._sprite != value) {
          this._sprite.filters.removeValue(this);
        }

        this._sprite = value;
      };

      return Filter;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]); //# sourceMappingURL=Filter.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/FocusFilter.js":
  /*!******************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/FocusFilter.js ***!
    \******************************************************************************************/

  /*! exports provided: FocusFilter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersFocusFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FocusFilter", function () {
      return FocusFilter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony import */


    var _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /**
     * Module for "Focus" filter.
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a "Focus" filter.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility
     * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance
     */


    var FocusFilter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(FocusFilter, _super);
      /**
       * Constructor
       */

      function FocusFilter() {
        var _this = _super.call(this) || this;

        _this.className = "FocusFilter"; // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`

        _this.feFlood = _this.paper.add("feFlood");

        _this.feFlood.attr({
          "flood-color": new _utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_2__["InterfaceColorSet"]().getFor("primaryButtonHover"),
          "result": "base"
        });

        _this.filterPrimitives.push(_this.feFlood);

        _this.feMorphology = _this.paper.add("feMorphology");

        _this.feMorphology.attr({
          "result": "bigger",
          "in": "SourceGraphic",
          "operator": "dilate",
          "radius": "2"
        });

        _this.filterPrimitives.push(_this.feMorphology);

        _this.feColorMatrix = _this.paper.add("feColorMatrix");

        _this.feColorMatrix.attr({
          "result": "mask",
          "in": "bigger",
          "type": "matrix",
          "values": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0"
        });

        _this.filterPrimitives.push(_this.feColorMatrix);

        _this.feComposite = _this.paper.add("feComposite");

        _this.feComposite.attr({
          "result": "drop",
          "in": "base",
          "in2": "mask",
          "operator": "in"
        });

        _this.filterPrimitives.push(_this.feComposite);

        _this.feBlend = _this.paper.add("feBlend");

        _this.feBlend.attr({
          "in": "SourceGraphic",
          "in2": "drop",
          "mode": "normal"
        });

        _this.filterPrimitives.push(_this.feBlend); // Set default properties


        _this.width = 130;
        _this.height = 130;

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(FocusFilter.prototype, "stroke", {
        /**
         * @return Color
         */
        get: function get() {
          return this.properties["stroke"];
        },

        /**
         * Stroke (outline) color.
         *
         * @param value  Color
         */
        set: function set(value) {
          this.properties["stroke"] = value;
          this.feFlood.attr({
            "flood-color": value
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(FocusFilter.prototype, "strokeWidth", {
        /**
         * @return Outline thickness (px)
         */
        get: function get() {
          return this.properties["strokeWidth"];
        },

        /**
         * Stroke (outline) thickness in pixels.
         *
         * @param value  Outline thickness (px)
         */
        set: function set(value) {
          this.properties["strokeWidth"] = value;
          this.feMorphology.attr({
            "radius": value
          });
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(FocusFilter.prototype, "opacity", {
        /**
         * @return Outline opacity (0-1)
         */
        get: function get() {
          return this.properties["opacity"];
        },

        /**
         * Opacity of the outline. (0-1)
         *
         * @param value  Outline opacity (0-1)
         */
        set: function set(value) {
          this.properties["opacity"] = value;
          this.feColorMatrix.attr({
            "values": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " + value + " 0"
          });
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets filter's target element.
       *
       * In addition it also disables built-in focus outline on element this
       * filter is applied to.
       *
       * @ignore Exclude from docs
       * @param value  Element filter is being attached to
       */

      FocusFilter.prototype.setSprite = function (value) {
        if (this._sprite && this._sprite != value) {
          this._sprite.group.removeStyle("outline");
        }

        value.group.addStyle({
          "outline": "none"
        });

        _super.prototype.setSprite.call(this, value);
      };

      return FocusFilter;
    }(_Filter__WEBPACK_IMPORTED_MODULE_1__["Filter"]); //# sourceMappingURL=FocusFilter.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js":
  /*!********************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js ***!
    \********************************************************************************************/

  /*! exports provided: LightenFilter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreRenderingFiltersLightenFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LightenFilter", function () {
      return LightenFilter;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * Module for "Lighten" filter.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates a "Lighten" filter.
     */


    var LightenFilter =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LightenFilter, _super);
      /**
       * Constructor
       */

      function LightenFilter() {
        var _this = _super.call(this) || this;

        _this.className = "LightenFilter"; // Create elements
        // NOTE: we do not need to add each individual element to `_disposers`
        // because `filterPrimitives` has an event handler which automatically adds
        // anything added to it to `_disposers`

        _this.feColorMatrix = _this.paper.add("feColorMatrix");

        _this.feColorMatrix.attr({
          "type": "matrix"
        });

        _this.filterPrimitives.push(_this.feColorMatrix); // Set default properties


        _this.lightness = 0;

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(LightenFilter.prototype, "lightness", {
        /**
         * @return Lightness
         */
        get: function get() {
          return this.properties["lightness"];
        },

        /**
         * Lightness of the target colors.
         *
         * If `lightness` is a positive number, the filter will make all colors
         * lighter.
         *
         * If `lightness` is negative, colors will be darkened.
         *
         * @param value  Lightness
         */
        set: function set(value) {
          this.properties["lightness"] = value;
          var v = value + 1;
          this.feColorMatrix.attr({
            "values": v + " 0 0 0 0 0 " + v + " 0 0 0 0 0 " + v + " 0 0 0 0 0 1 0"
          });
        },
        enumerable: true,
        configurable: true
      });
      return LightenFilter;
    }(_Filter__WEBPACK_IMPORTED_MODULE_1__["Filter"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["LightenFilter"] = LightenFilter; //# sourceMappingURL=LightenFilter.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js ***!
    \**************************************************************************/

  /*! exports provided: GlobalAdapter, globalAdapter, Adapter */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsAdapterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GlobalAdapter", function () {
      return GlobalAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "globalAdapter", function () {
      return globalAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Adapter", function () {
      return Adapter;
    });
    /* harmony import */


    var _SortedList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./SortedList */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js");
    /* harmony import */


    var _Number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Number */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Number.js");
    /* harmony import */


    var _Order__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Order */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Order.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * An Adapter can be used to apply chained synchronous transformations to any
     * value at runtime.
     *
     * Each type class using Adapters must have `adapters` property and adapter
     * interface defined.
     *
     * Adapters can be used to allow external code to apply transformations to any
     * value at any time.
     *
     * For example we have a Weather class which has a method `now()` which returns
     * current temperature.
     *
     * ```
     * function now() {
     *   // ... calculate temperature
     *   let temp = "Temperature now is " + degrees + "F";
     *   return temp;
     * }
     * ```
     *
     * Now, supposed we want to let other classes to modify the output of the
     * `now()`? We just apply an adapter to the `temp` before it is returned:
     *
     * ```
     * temp = this.adapters.apply("now", {
     *   temp: temp,
     *   degrees: degrees
     * }).temp;
     * ```
     *
     * Some other class might tap onto it by defining an Adapter that calculates
     * the temperature in Celsius:
     *
     * weather.adapters.add("now", (arg) => {
     *   arg.temp += "(" + farenheitToCelsius(arg.degrees) + "C)";
     *   return arh;
     * });
     *
     * Furthermore some time-related class could add time:
     *
     * weather.adapters.add("now", (arg) => {
     *   arg.temp += "; the time now is " + (new Date().toLocaleString());
     *   return arh;
     * });
     *
     * So without adapters we would get output like this:
     *
     * ```
     * Temperature now is 90F
     * ```
     *
     * With adapters applied we now have:
     *
     * ```
     * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM
     * ```
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * GLOBAL ADAPTER
     * ============================================================================
     * @hidden
     */

    /**
     * A global adapter is an adpater that is attached to a class type rather than
     * specific object instance.
     *
     * @ignore Exclude from docs
     */


    var GlobalAdapter =
    /** @class */
    function () {
      function GlobalAdapter() {
        /**
         * Callback id iterator.
         */
        this._callbackId = 0;
        /**
         * A list of if callbacks (adapters).
         */

        this._callbacks = new _SortedList__WEBPACK_IMPORTED_MODULE_0__["SortedList"](function (left, right) {
          return _Order__WEBPACK_IMPORTED_MODULE_2__["or"](_Number__WEBPACK_IMPORTED_MODULE_1__["order"](left.priority, right.priority), _Number__WEBPACK_IMPORTED_MODULE_1__["order"](left.id, right.id));
        });
      }
      /**
       * Adds a global callback which is not specific to any particular object.
       * Whenever an adapter in any object of the specific class type is invoked
       * global adapters will kick in.
       *
       * @param type      Class type
       * @param key       Adapter key
       * @param callback  Callback function
       * @param priority  Priority (higher priority meaning adapter will be applied later)
       * @param scope     Callback function scaope
       */


      GlobalAdapter.prototype.addAll = function (type, key, callback, priority, scope) {
        if (priority === void 0) {
          priority = 0;
        }

        this._callbacks.insert({
          id: ++this._callbackId,
          key: key,
          callback: callback,
          priority: priority,
          scope: scope,
          type: type
        });
      };
      /**
       * Returns if there are adapters for specific type available.
       *
       * @param type  Adapter type
       * @param key   Adapter key
       * @return {boolean}
       */


      GlobalAdapter.prototype.isEnabled = function (type, key) {
        return _utils_Array__WEBPACK_IMPORTED_MODULE_4__["any"](this._callbacks.values, function (x) {
          return x.key === key && type instanceof x.type;
        });
      };
      /**
       * Applies global adapters for the object of the specific type.
       *
       * @param type   Class type
       * @param key    Adapter key
       * @param value  Value
       */


      GlobalAdapter.prototype.applyAll = function (type, key, value) {
        // This is needed to improve the performance and reduce garbage collection
        var callbacks = this._callbacks.values;
        var length = callbacks.length;

        if (length == 0) {
          return value;
        } // Cycle through all callbacks and find the ones we need to use


        for (var i = 0; i < length; ++i) {
          var item = callbacks[i];

          if (item.key === key && type instanceof item.type) {
            value = item.callback.call(item.scope, value, type, key);
          }
        }

        return value;
      };

      return GlobalAdapter;
    }();
    /**
     * A global Adapter for plugins that want to add specific
     * functionality for any chart, not just specific instance.
     *
     * If you want to add an adapter which applies to all instances of the same
     * object type, like, for instance all slices in PieSeries, you can use
     * global adapter.
     *
     * Global adapter is a system-wide instance, accessible via `globalAdapter`.
     *
     * ```TypeScript
     * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, "fill">(am4charts.PieSeries, "fill", (value, target, key) => {
     *   return am4core.color("#005500");
     * });
     * ```
     * ```JavaScript
     * am4core.globalAdapter.addAll(am4charts.PieSeries, "fill", (value, target, key) => {
     *   return am4core.color("#005500");
     * });
     * ```
     *
     * @todo Description (improve)
     */


    var globalAdapter = new GlobalAdapter();
    /**
     * ============================================================================
     * REGULAR ADAPTER
     * ============================================================================
     * @hidden
     */

    /**
     * Adapter allows adding ordered callback functions and associating them with a
     * string-based key. An Adapter user can then easily invoke those callbacks to
     * apply custom functions on its input, output or intermediate values.
     *
     * Custom code and plugins can add their own callbacks to modify and enhance
     * core functionality.
     *
     * See the description of `add()` for an example.
     *
     * Almost any object in amCharts4 has own adapter, accessible with `adapter`
     * property.
     *
     * Any adapters added to it will be applied to that object only.
     *
     * ### Global Adapters
     *
     * If you want to add an adapter which applies to all instances of the same
     * object type, like, for instance all slices in PieSeries, you can use
     * global adapter.
     *
     * Global adapter is a system-wide instance, accessible via `globalAdapter`.
     *
     * ```TypeScript
     * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, "fill">(am4charts.PieSeries. "fill", (value, target, key) => {
     *   return am4core.color("#005500");
     * });
     * ```
     * ```JavaScript
     * am4core.globalAdapter.addAll(am4charts.PieSeries. "fill", (value, target, key) => {
     *   return am4core.color("#005500");
     * });
     * ```
     *
     * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.
     *
     * @important
     */

    var Adapter =
    /** @class */
    function () {
      /**
       * Constructor, sets the object referece this Adapter should be used for.
       *
       * @param c Object
       */
      function Adapter(c) {
        /**
         * Internal counter for callback ids.
         */
        this._callbackId = 0;
        /**
         * A list of adapter callbacks.
         *
         * @param $number.order(left.priority, right.priority) [description]
         * @param $number.order(left.id,       right.id));	}  [description]
         */

        this._callbacks = new _SortedList__WEBPACK_IMPORTED_MODULE_0__["SortedList"](function (left, right) {
          return _Order__WEBPACK_IMPORTED_MODULE_2__["or"](_Number__WEBPACK_IMPORTED_MODULE_1__["order"](left.priority, right.priority), _Number__WEBPACK_IMPORTED_MODULE_1__["order"](left.id, right.id));
        });
        this._disabled = {};
        this.object = c; // TODO this exposes the internal events

        this.events = this._callbacks.events;
      }
      /**
       * Adds a callback for a specific key.
       *
       * ```TypeScript
       * // Override fill color value and make all slices green
       * chart.series.template.adapter.add("fill", (value, target, key) => {
       *   return am4core.color("#005500");
       * });
       * ```
       * ```JavaScript
       * // Override fill color value and make all slices green
       * chart.series.template.adapter.add("fill", function(value, target, key) {
       *   return am4core.color("#005500");
       * });
       * ```
       * ```JSON
       * {
       *   // ...
       *   "series": [{
       *     // ...
       *     "adapter": {
       *     	// Override fill color value and make all slices green
       *     	"fill": function(value, target, key) {
       *     	  return am4core.color("#005500");
       *     	}
       *     }
       *   }]
       * }
       * ```
       *
       * The above will call user-defined function (adapter) whenever `fill` value
       * is requested from the Pie series, allowing it to override the default
       * using custom code and any fuzzy logic.
       *
       * There can be any number of adapters set on one property key.
       *
       * In this case adapters will be applied in daisy-chain fashion. The first
       * adapter in queue will make its transformation. The next one will have
       * the output of the first adapter as a starting value, etc.
       *
       * The order of the adapters are determined either by the order they were
       * added in, or their `priority` value.
       *
       * The heigher the `priority`, the later in the game adapter will be applied.
       *
       * @param key       Key
       * @param callback  A callback function
       * @param priority  The higher priority, the more chance the adapter will be applied last
       * @param scope     Scope for the callback function
       */


      Adapter.prototype.add = function (key, callback, priority, scope) {
        if (priority === void 0) {
          priority = 0;
        }

        this._callbacks.insert({
          id: ++this._callbackId,
          key: key,
          callback: callback,
          priority: priority,
          scope: scope
        });
      };
      /**
       * Checks whether specific adapter is already set.
       *
       * @param key       Key
       * @param callback  A callback function
       * @param priority  The higher priority, the more chance the adapter will be applied last
       * @param scope     Scope for the callback function
       * @returns                            Adapter set?
       */


      Adapter.prototype.has = function (key, callback, priority, scope) {
        if (priority === void 0) {
          priority = 0;
        }

        return _utils_Iterator__WEBPACK_IMPORTED_MODULE_3__["contains"](this._callbacks.iterator(), function (item) {
          return item.key === key && item.callback === callback && item.priority === priority && item.scope === scope;
        });
      };
      /**
       * Removes adapter callbacks for the specific `key`.
       *
       * If `priority` is specified, only callbacks for that priority are removed.
       *
       * @param key      Key
       * @param priority Priority
       * @todo Implement
       */


      Adapter.prototype.remove = function (key, priority) {
        var _this = this; // It has to make a copy because it removes the elements while iterating
        // TODO inefficient
        // TODO should this re-enable the key ?


        _utils_Array__WEBPACK_IMPORTED_MODULE_4__["each"](_utils_Iterator__WEBPACK_IMPORTED_MODULE_3__["toArray"](this._callbacks.iterator()), function (item) {
          // TODO test this
          if (item.key === key && (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](priority) || priority === item.priority)) {
            _this._callbacks.remove(item);
          }
        });
      };
      /**
       * Enable applying adapters for a certain key, if it was disabled before by
       * `disableKey()`.
       *
       * @param key Key
       */


      Adapter.prototype.enableKey = function (key) {
        delete this._disabled[key];
      };
      /**
       * Disable applying adapters for a certain key.
       *
       * Optionally, can set how many applies to skip before automatically
       * re-enabling the applying.
       *
       * @param key     Key
       * @param amount  Number of applies to skip
       */


      Adapter.prototype.disableKey = function (key, amount) {
        if (amount === void 0) {
          amount = Infinity;
        }

        this._disabled[key] = amount;
      };

      Adapter.prototype._hasListenersByType = function (key) {
        return _utils_Array__WEBPACK_IMPORTED_MODULE_4__["any"](this._callbacks.values, function (x) {
          return x.key === key;
        });
      };
      /**
       * Returns if there are any enabled adapters set for the specific `key`.
       *
       * @returns Are there any adapters for the key?
       */


      Adapter.prototype.isEnabled = function (key) {
        return this._disabled[key] == null && (this._hasListenersByType(key) || globalAdapter.isEnabled(this.object, key));
      };

      Adapter.prototype._shouldDispatch = function (key) {
        var count = this._disabled[key];

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](count)) {
          return true;
        } else {
          if (count <= 1) {
            delete this._disabled[key];
          } else {
            --this._disabled[key];
          }

          return false;
        }
      };
      /**
       * Passes the input value through all the callbacks for the defined `key`.
       *
       * @param key      Key
       * @param value    Input value
       * @param ...rest  Rest of the parameters to be passed into callback
       * @return Output value
       */


      Adapter.prototype.apply = function (key, value) {
        if (this._shouldDispatch(key)) {
          // This is needed to improve the performance and reduce garbage collection
          var callbacks = this._callbacks.values;
          var length_1 = callbacks.length;

          if (length_1 > 0) {
            for (var i = 0; i < length_1; ++i) {
              var item = callbacks[i];

              if (item.key === key) {
                value = item.callback.call(item.scope, value, this.object, key);
              }
            }
          } // Apply global adapters


          value = globalAdapter.applyAll(this.object, key, value);
          return value;
        } else {
          return value;
        }
      };
      /**
       * Returns all adapter keys which are in this adapter.
       *
       * @return Adapter keys
       */


      Adapter.prototype.keys = function () {
        // TODO inefficient
        return _utils_Iterator__WEBPACK_IMPORTED_MODULE_3__["toArray"](_utils_Iterator__WEBPACK_IMPORTED_MODULE_3__["map"](this._callbacks.iterator(), function (x) {
          return x.key;
        }));
      };
      /**
       * Copies all the adapter callbacks from `source`.
       *
       * @param source  An Adapter to copy items from
       */


      Adapter.prototype.copyFrom = function (source) {
        var _this = this;

        _utils_Iterator__WEBPACK_IMPORTED_MODULE_3__["each"](source._callbacks.iterator(), function (x) {
          _this.add(x.key, x.callback, x.priority, x.scope);
        });
      };
      /**
       * Clears all callbacks from this Adapter.
       */


      Adapter.prototype.clear = function () {
        // TODO should this also re-enable all the keys ?
        this._callbacks.clear();
      };

      return Adapter;
    }(); //# sourceMappingURL=Adapter.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js ***!
    \****************************************************************************/

  /*! exports provided: animate, AnimationDisposer, Animation */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsAnimationJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "animate", function () {
      return animate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AnimationDisposer", function () {
      return AnimationDisposer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Animation", function () {
      return Animation;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _defs_SVGDefaults__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../defs/SVGDefaults */
    "./node_modules/@amcharts/amcharts4/.internal/core/defs/SVGDefaults.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _utils_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _utils_Percent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _utils_AsyncPending__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/AsyncPending */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Colors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../utils/Colors */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /**
     * Animation module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Calls a `callback` function for the `duration` of milliseconds.
     *
     * @todo Needed?
     * @deprecated Not used anywhere
     * @ignore Exclude from docs
     * @param duration  Duration (ms)
     * @param callback  Callback function
     * @return Disposer
     */


    function animate(duration, callback) {
      var disposed = false; // TODO use performance.now() ?

      var startTime = Date.now();

      function loop(now) {
        if (!disposed) {
          var diff = now - startTime;

          if (diff >= duration) {
            callback(1);
          } else {
            _utils_AsyncPending__WEBPACK_IMPORTED_MODULE_6__["nextFrame"](loop);

            callback(diff / duration);
          }
        }
      }

      _utils_AsyncPending__WEBPACK_IMPORTED_MODULE_6__["nextFrame"](loop);

      return new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["Disposer"](function () {
        disposed = true;
      });
    }
    /**
     * Returns numeric value accoring to progress between start and end values.
     *
     * @param progress  Progress (0-1)
     * @param from
     * @param to
     * @return Value according to progress
     */


    function getProgressNumber(progress, from, to) {
      return from + (to - from) * progress;
    }
    /**
     * Returns [[Percent]] value accoring to progress between start and end
     * values.
     *
     * @param progress  Progress (0-1)
     * @param from
     * @param to
     * @return Value according to progress
     */


    function getProgressPercent(progress, from, to) {
      return new _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"](getProgressNumber(progress, from.percent, to.percent));
    }
    /**
     * Returns color value accoring to progress between start and end values.
     *
     * @param progress  Progress (0-1)
     * @param from
     * @param to
     * @return Color according to progress
     */


    function getProgressColor(progress, from, to) {
      var color = new _utils_Color__WEBPACK_IMPORTED_MODULE_4__["Color"](_utils_Colors__WEBPACK_IMPORTED_MODULE_8__["interpolate"](from.rgb, to.rgb, progress));

      if (from.alpha != to.alpha) {
        color.alpha = from.alpha + (to.alpha - from.alpha) * progress;
      }

      return color;
    }
    /**
     * [getHybridProperty description]
     *
     * @todo Description
     * @param property [description]
     * @param type [description]
     * @return [description]
     */


    function getHybridProperty(property, type) {
      return type + property.charAt(0).toUpperCase() + property.substr(1);
    }

    var AnimationDisposer =
    /** @class */
    function () {
      function AnimationDisposer(array) {
        this._disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["Disposer"](function () {
          while (array.length !== 0) {
            array[0].dispose();
          }
        });
      }

      AnimationDisposer.prototype.isDisposed = function () {
        return this._disposer.isDisposed();
      };

      AnimationDisposer.prototype.dispose = function () {
        this._disposer.dispose();
      };

      return AnimationDisposer;
    }();
    /**
     * Animation can be used to transition certain properties on an object that
     * implements [[IAnimatable]] interface.
     *
     * @see {@link IAnimationEvents} for a list of available events
     */


    var Animation =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Animation, _super);
      /**
       * Constructor
       *
       * @param object            An object animation should run on
       * @param animationOptions  One or several (array) of animation options
       * @param duration          Duration (ms)
       * @param easing            Easing function
       */

      function Animation(object, animationOptions, duration, easing) {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Duration of the animation in milliseconds.
         */


        _this.duration = 0;
        /**
         * Easing function to use.
         *
         * @see {@link Ease}
         */

        _this.easing = _utils_Ease__WEBPACK_IMPORTED_MODULE_7__["linear"];
        /**
         * Contains progress of the current animation: 0 (start) to 1 (end).
         */

        _this.progress = 0;
        /**
         * Indicated how many times animation should loop.
         */

        _this._loop = 0;
        /**
         * Animation is paused.
         */

        _this._pause = false;
        /**
         * Holds reference to timeout for delayed play.
         */

        _this._delayTimeout = null;
        /**
         * Elapsed time in currently playing animation.
         */

        _this._time = 0;
        _this._isFinished = false;
        _this.className = "Animation"; // Set parameters

        _this.object = object;
        _this.animationOptions = _utils_Array__WEBPACK_IMPORTED_MODULE_10__["toArray"](animationOptions);
        _this.duration = duration;

        if (easing) {
          _this.easing = easing;
        } // Run check if there are already animations playing on the same properties
        // and stop them - the last animation takes precedence
        //this.stopSameAnimations();

        /*if ($type.hasValue(callback)) {
            // TODO don't use .call
            this.events.on("animationended", callback, object);
        }*/
        // Apply theme


        _this.applyTheme();

        return _this;
      } // TODO verify that this is correct


      Animation.prototype.debug = function () {};
      /**
       * Disposes this object, clears up after itself.
       */


      Animation.prototype.dispose = function () {
        _super.prototype.dispose.call(this);

        this.pause();
      };
      /**
       * Delays animation start by X milliseconds.
       *
       * @param delay  Delay (ms)
       * @return Animation
       */


      Animation.prototype.delay = function (delay) {
        var _this = this; //@todo Maybe not use `bind()`


        if (delay > 0) {
          this.pause(); // This is so that it will get disposed if `this.object` is disposed
          // TODO hacky, figure out a better way

          _utils_Array__WEBPACK_IMPORTED_MODULE_10__["move"](this.object.animations, this);

          var id_1 = setTimeout(function () {
            _this._delayTimeout = null;

            _this.start();
          }, delay);
          this._delayTimeout = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_3__["Disposer"](function () {
            clearTimeout(id_1);
          });
        }

        return this;
      };

      Animation.prototype._start = function () {
        this._isFinished = false; // Clear delay timeout if there was one

        if (this._delayTimeout) {
          this.removeDispose(this._delayTimeout);
          this._delayTimeout = null;
        } // Run check if there are already animations playing on the same properties
        // and stop them - the last animation takes precedence


        this.stopSameAnimations(); // Reset counters

        this._pause = false; // Register animation

        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["move"](_System__WEBPACK_IMPORTED_MODULE_12__["system"].animations, this); // Register this animation in object's `animations` list


        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["move"](this.object.animations, this);

        _System__WEBPACK_IMPORTED_MODULE_12__["system"].requestFrame();
      };
      /**
       * Starts animation.
       *
       * @return Animation
       */


      Animation.prototype.start = function () {
        this._start();

        this._startTime = Date.now();
        this._time = 0;
        this.staticOptions = []; // Process initial property values

        for (var i = this.animationOptions.length - 1; i >= 0; i--) {
          var options = this.animationOptions[i];

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_11__["hasValue"](options.from)) {
            if (options.childObject) {
              options.from = options.childObject[options.property];
            } else {
              options.from = this.object[options.property];

              if (!_utils_Type__WEBPACK_IMPORTED_MODULE_11__["hasValue"](options.from)) {
                options.from = _defs_SVGDefaults__WEBPACK_IMPORTED_MODULE_2__["SVGDefaults"][options.property];
              }
            }
            /*if (!$type.hasValue(options.from)) {
                throw Error("Could not get initial transition value.");
            }*/

          }

          if (options.from == options.to) {
            // || options.to == (<any>this.object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue
            _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.animationOptions, options);
          } else if (!_utils_Type__WEBPACK_IMPORTED_MODULE_11__["hasValue"](options.from) || !(options.from instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"]) && options.to instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"] || options.from instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"] && !(options.to instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"])) {
            // Initial value is undefined, treat it as static
            this.staticOptions.push(options);

            _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.animationOptions, options);
          } else {
            // Use different update methods for different value types
            if (_utils_Type__WEBPACK_IMPORTED_MODULE_11__["isNumber"](options.to)) {
              // Numeric value
              options.updateMethod = getProgressNumber; // Check if initial value is not Percent

              if (options.from instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"]) {
                // It is. Let's convert it to pixel value
                // @todo Check if we can do this in a less hacky way
                var convertedFrom = this.object[getHybridProperty(options.property, "pixel")];

                if (!isNaN(convertedFrom)) {
                  options.from = convertedFrom;
                } else {
                  this.staticOptions.push(options);

                  _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.animationOptions, options);
                }
              } else if (isNaN(options.from)) {
                // Static value
                this.staticOptions.push(options);

                _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.animationOptions, options);
              }
            } else {
              // Check if maybe we have a color or percent value
              if (options.to instanceof _utils_Color__WEBPACK_IMPORTED_MODULE_4__["Color"]) {
                // Yup - set resolved named color
                //options.from = $colors.stringToColor(<string>options.from);
                if (options.from) {
                  options.updateMethod = getProgressColor;
                } else {
                  // Static value
                  this.staticOptions.push(options);

                  _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.animationOptions, options);
                }
              } else if (options.to instanceof _utils_Percent__WEBPACK_IMPORTED_MODULE_5__["Percent"]) {
                // Percent
                options.updateMethod = getProgressPercent; // Check if the initial value is maybe in pixels

                if (!isNaN(options.from)) {
                  // It is. Let's convert it
                  // @todo Check if we can do this in a less hacky way
                  var convertedFrom = this.object[getHybridProperty(options.property, "relative")];

                  if (!isNaN(convertedFrom)) {
                    options.from = Object(_utils_Percent__WEBPACK_IMPORTED_MODULE_5__["percent"])(convertedFrom * 100);
                  }
                }
              } else {
                // Static value
                this.staticOptions.push(options);

                _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.animationOptions, options);
              }
            }
          }
        } // Apply static options (just in case they were reset by previous
        // animation loop)


        this.applyStaticOptions();

        if (this.events.isEnabled("animationstarted")) {
          var event_1 = {
            type: "animationstarted",
            target: this,
            progress: this.progress
          };
          this.events.dispatchImmediately("animationstarted", event_1);
        }

        this.update(); // If duration is 0, just end animation

        if (this.duration === 0) {
          this.end();
        }

        return this;
      };
      /**
       * Sets loop count for the animation. If parameter is not a valid number the
       * animation will keep on looping indefinitely.
       *
       * @param count  Number of times to loop animation
       * @return Animation
       */


      Animation.prototype.loop = function (count) {
        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_11__["isNumber"](count)) {
          count = Infinity;
        }

        this._loop = count;
        return this;
      };
      /**
       * Pauses animation.
       *
       * @return Animation
       */


      Animation.prototype.pause = function () {
        this._pause = true;

        if (this._delayTimeout) {
          this.removeDispose(this._delayTimeout);
          this._delayTimeout = null;
        }

        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](_System__WEBPACK_IMPORTED_MODULE_12__["system"].animations, this);

        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](this.object.animations, this);

        return this;
      };
      /**
       * Resumes paused animation.
       *
       * @return Animation
       */


      Animation.prototype.resume = function () {
        this._start();

        this._startTime = Date.now() - this._time;
        return this;
      };
      /**
       * Jumps to animation end. If animation is set to loop, this will start
       * another round of animation from start.
       *
       * @return Animation
       */


      Animation.prototype.end = function () {
        // Pause and complete the progress
        if (this._loop == 0) {
          this.pause();
        }

        this.setProgress(1); // Apply static options

        this.applyStaticOptions();

        if (this.events.isEnabled("animationended")) {
          var event_2 = {
            type: "animationended",
            target: this,
            progress: this.progress
          };
          this.events.dispatchImmediately("animationended", event_2);
        } // Check if we should loop


        if (this._loop > 0) {
          this._loop--;
          this.start();
        } else {
          this.stop();
          this._isFinished = true;
        }

        return this;
      };
      /**
       * Stops animation immediately leaving properties in their current values.
       */


      Animation.prototype.kill = function () {
        this.pause();
        this._isFinished = true;
      };
      /**
       * Returns indicator if this animation is finished or not
       *
       * @return Is finished?
       */


      Animation.prototype.isFinished = function () {
        return this._isFinished;
      };
      /**
       * Applies static options that can't be animated.
       */


      Animation.prototype.applyStaticOptions = function () {
        var _this = this;

        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["each"](this.staticOptions, function (options) {
          if (options.childObject) {
            options.childObject[options.property] = _this.progress == 1 ? options.to : options.from;
          } else {
            _this.object[options.property] = _this.progress == 1 ? options.to : options.from;
          }
        });
      };
      /**
       * Stops animation.
       *
       * When animation is stopped, the properties of the target object will remain
       * where they were at the moment when `stop()` was called.
       *
       * @param skipEvent  Do not trigger `animationstopped` event
       * @return Animation
       */


      Animation.prototype.stop = function (skipEvent) {
        this.pause();

        if (!skipEvent) {
          if (this.events.isEnabled("animationstopped")) {
            var event_3 = {
              type: "animationstopped",
              target: this,
              progress: this.progress
            };
            this.events.dispatchImmediately("animationstopped", event_3);
          }
        }

        return this;
      };
      /**
       * Sets current progress and updates object's numeric and color values.
       *
       * @param progress Progress (0-1)
       */


      Animation.prototype.setProgress = function (progress) {
        var _this = this;

        this._time = this.duration * progress; // just in case we call this from outside

        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["each"](this.animationOptions, function (options) {
          if (options.updateMethod && _utils_Type__WEBPACK_IMPORTED_MODULE_11__["hasValue"](options.from)) {
            var value = options.updateMethod(progress, options.from, options.to);

            if (options.childObject) {
              options.childObject[options.property] = value;
            } else {
              _this.object[options.property] = value;
            }
          }
        });

        this.progress = progress;

        if (this.events.isEnabled("animationprogress")) {
          var event_4 = {
            type: "animationprogress",
            target: this,
            progress: this.progress
          };
          this.events.dispatchImmediately("animationprogress", event_4);
        }

        _System__WEBPACK_IMPORTED_MODULE_12__["system"].requestFrame();
      };
      /**
       * Tracks and sets progress according to time or frames.
       *
       * @ignore Exclude from docs
       * @return Animation
       */


      Animation.prototype.update = function () {
        if (!this._pause) {
          var progress = void 0;
          this._time = _utils_Math__WEBPACK_IMPORTED_MODULE_9__["fitToRange"](Date.now() - this._startTime, 0, this.duration);
          var timeProgress = this._time / this.duration;
          progress = this.easing(timeProgress);

          if (this.duration == 0 || !_utils_Type__WEBPACK_IMPORTED_MODULE_11__["isNumber"](progress) || timeProgress >= 1) {
            progress = 1;
          }

          this.setProgress(progress);

          if (_utils_Math__WEBPACK_IMPORTED_MODULE_9__["round"](this._time / this.duration, 6) == 1) {
            this.end();
          }
        }

        return this;
      };

      Object.defineProperty(Animation.prototype, "delayed", {
        /**
         * Returns `true` if this animation is delayed.
         *
         * @readonly
         * @return [description]
         */
        get: function get() {
          return this._delayTimeout ? true : false;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks other animations currently running on the same object and removes
       * overlapping options from those other animations that are contained in
       * this animation.
       *
       * This is needed to ensure that no two confurent animations step on each
       * other's toes by trying to animate the same property.
       */

      Animation.prototype.stopSameAnimations = function () {
        var _this = this; // stop animation of the same property
        // TODO make this more efficient
        // TODO don't copy the array


        _utils_Array__WEBPACK_IMPORTED_MODULE_10__["each"](_utils_Array__WEBPACK_IMPORTED_MODULE_10__["copy"](this.object.animations), function (animation) {
          if (animation !== _this && !animation.delayed) {
            var killed_1 = [];

            _utils_Array__WEBPACK_IMPORTED_MODULE_10__["each"](_this.animationOptions, function (newOptions) {
              _utils_Array__WEBPACK_IMPORTED_MODULE_10__["each"](animation.animationOptions, function (oldOptions) {
                if (newOptions.property == oldOptions.property && newOptions.childObject == oldOptions.childObject) {
                  killed_1.push(oldOptions);

                  if (animation.animationOptions.length == 0) {
                    animation.kill();
                  }
                }
              });
            });

            _utils_Array__WEBPACK_IMPORTED_MODULE_10__["each"](killed_1, function (oldOptions) {
              _utils_Array__WEBPACK_IMPORTED_MODULE_10__["remove"](animation.animationOptions, oldOptions);
            });
          }
        });
      };
      /**
       * Adds easing functions to "function" fields.
       *
       * @param field  Field name
       * @return Assign as function?
       */


      Animation.prototype.asFunction = function (field) {
        return field == "easing" || _super.prototype.asIs.call(this, field);
      };

      return Animation;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"]); //# sourceMappingURL=Animation.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js":
  /*!************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js ***!
    \************************************************************************/

  /*! exports provided: indexOf, any, map, each, eachReverse, eachContinue, shiftLeft, last, first, insert, setIndex, pushAll, remove, move, add, replace, toArray, has, copy, slice, insertIndex, removeIndex, getSortedIndex, findIndex, find, shuffle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsArrayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "indexOf", function () {
      return indexOf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "any", function () {
      return any;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "map", function () {
      return map;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "each", function () {
      return each;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "eachReverse", function () {
      return eachReverse;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "eachContinue", function () {
      return eachContinue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "shiftLeft", function () {
      return shiftLeft;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "last", function () {
      return last;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "first", function () {
      return first;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "insert", function () {
      return insert;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "setIndex", function () {
      return setIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pushAll", function () {
      return pushAll;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "remove", function () {
      return remove;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "move", function () {
      return move;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "add", function () {
      return add;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "replace", function () {
      return replace;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toArray", function () {
      return toArray;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "has", function () {
      return has;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copy", function () {
      return copy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "slice", function () {
      return slice;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "insertIndex", function () {
      return insertIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "removeIndex", function () {
      return removeIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getSortedIndex", function () {
      return getSortedIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findIndex", function () {
      return findIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "find", function () {
      return find;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "shuffle", function () {
      return shuffle;
    });
    /* harmony import */


    var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * UTILITY FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Searches `array` for `value`.
     *
     * Returns -1 if not found.
     *
     * @param array  Source array
     * @param value  Value to search
     * @returns Index
     */


    function indexOf(array, value) {
      var length = array.length;

      for (var i = 0; i < length; ++i) {
        // TODO handle NaN
        if (array[i] === value) {
          return i;
        }
      }

      return -1;
    }
    /**
     * Calls `test` for each element in `array`.
     *
     * If `test` returns `true` then it immediately returns `true`.
     *
     * If `test` returns `false` for all of the elements in `array` then it returns `false`.
     *
     * @param array  Source array
     * @param test   Function which is called on each element
     * @returns Whether `test` returned true or not
     */


    function any(array, test) {
      var length = array.length;

      for (var i = 0; i < length; ++i) {
        if (test(array[i])) {
          return true;
        }
      }

      return false;
    }
    /**
     * Calls `fn` function for every member of array and returns a new array out
     * of all outputs.
     *
     * @param array  Source array
     * @param fn     Callback function
     * @returns New array
     */


    function map(array, fn) {
      var length = array.length;
      var output = new Array(length);

      for (var i = 0; i < length; ++i) {
        output[i] = fn(array[i], i);
      }

      return output;
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */


    function each(array, fn) {
      var length = array.length;

      for (var i = 0; i < length; ++i) {
        fn(array[i], i);
      }
    }
    /**
     * Iterates through all items in array in reverse order and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */


    function eachReverse(array, fn) {
      var i = array.length;

      while (i--) {
        fn(array[i], i);
      }
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * If `fn` call evaluates to `false`, further iteration is cancelled.
     *
     * @param array  Source array
     * @param fn     Callback function
     */


    function eachContinue(array, fn) {
      var length = array.length;

      for (var i = 0; i < length; ++i) {
        if (!fn(array[i], i)) {
          break;
        }
      }
    }
    /**
     * Shifts an item at `index` towards beginning of the array.
     *
     * @param array  Source array
     * @param index  Target element index
     */


    function shiftLeft(array, index) {
      var length = array.length;

      for (var i = index; i < length; ++i) {
        array[i - index] = array[i];
      }

      array.length = length - index;
    }
    /**
     * Returns the last item of the array.
     *
     * @param array  Source array
     * @returns Last item
     */


    function last(array) {
      var length = array.length;
      return length ? array[length - 1] : undefined;
    }
    /**
     * Returns the first item of the array.
     *
     * @param array  Source array
     * @returns Last item
     */


    function first(array) {
      return array[0];
    }
    /**
     * Inserts `element` into `array` at `index`.
     *
     * Caps `index` to be between `0` and `array.length`
     *
     * @param array    Source array
     * @param element  Item to insert
     * @param array    Index to insert item at
     */


    function insert(array, element, index) {
      //if (array) {
      index = _Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](index, 0, array.length);
      array.splice(index, 0, element); //}
    }
    /**
     * Removes all copies of `element` from `array` (if they exist) and then
     * inserts `element` at `index`.
     *
     * @param array    Source array
     * @param element  Item
     * @param array    Index to move item to
     */


    function setIndex(array, element, index) {
      remove(array, element);
      insert(array, element, index);
    }
    /**
     * Pushes all of the elements from `input` into `array`.
     *
     * @param array  Output array
     * @param input  Input array
     */


    function pushAll(array, input) {
      var length = input.length;

      for (var i = 0; i < length; ++i) {
        array.push(input[i]);
      }
    }
    /**
     * Removes `element` from `array`.
     *
     * If there are multiple copies of `element`, they are all removed.
     *
     * @param array    Source array
     * @param element  Item to remove
     */


    function remove(array, element) {
      var found = false;
      var index = array.indexOf(element);

      if (index !== -1) {
        found = true;
        array.splice(index, 1);
        var length_1 = array.length;

        while (index < length_1) {
          // TODO handle NaN
          if (array[index] === element) {
            array.splice(index, 1);
            --length_1;
          } else {
            ++index;
          }
        }
      }

      return found;
    }
    /**
     * Adds an `element` to `array`.
     *
     * If array already contains and item like this, it is removed before adding
     * it again.
     *
     * Optionally `toIndex` can be specified to add element at specific index.
     *
     * @param array    Source array
     * @param element  Item to add
     * @param array    Index to move item to
     */


    function move(array, element, toIndex) {
      // @todo this implementation must be the same as the List.moveValue method
      // @todo don't do anything if the desired index is the same as the current index
      var index = indexOf(array, element); // @todo remove all old values rather than only the first ?

      if (index !== -1) {
        removeIndex(array, index);
      }

      if (toIndex == null) {
        array.push(element);
      } else {
        insertIndex(array, toIndex, element);
      }
    }
    /**
     * Inserts `element` into `array` at `index`.
     *
     * If `index` is not provided, it will insert `element` at the end of `array`.
     *
     * @param array    Source array
     * @param element  Item to add
     * @param array    Index to add item at
     */


    function add(array, element, index) {
      // Append to the end if index is not set
      if (!_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](index)) {
        array.push(element);
      } // Add to the beginning of array if index is 0
      else if (index === 0) {
          array.unshift(element);
        } // Add to indicated place if index is set
        else {
            array.splice(index, 0, element);
          }
    }
    /**
     * Removes `element` from `array` (if it exists) and then inserts `element` at
     * `index`.
     *
     * If `index` is not provided, it will insert `element` at the end of `array`.
     *
     * @param array    Source array
     * @param element  Item to remove
     * @param array    Index to move item to
     */


    function replace(array, element, index) {
      // check if exists
      var ind = array.indexOf(element); // remove if exists

      if (ind !== -1) {
        array.splice(ind, 1);
      } // add to end if index is not set


      if (!_Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](index)) {
        array.push(element);
      } // add to indicated place if index is set
      else {
          array.splice(index, 0, element);
        }
    }
    /**
     * Wraps `input` in an array, if it isn't already an array.
     *
     * @param input  Source value
     * @return An array
     */


    function toArray(input) {
      if (Array.isArray(input)) {
        return input;
      } else {
        return [input];
      }
    }
    /**
     * Returns `true` if `element` exists in `array`.
     *
     * @param array    Source array
     * @param element  Item to search for
     * @returns Item in array?
     */


    function has(array, element) {
      return indexOf(array, element) !== -1;
    }
    /**
     * Returns a shallow copy of `array`.
     *
     * @param array  Source array
     * @returns Copy of the array
     */


    function copy(array) {
      var length = array.length; // It's faster to create the array with a pre-defined length

      var output = new Array(length);

      for (var i = 0; i < length; ++i) {
        // Because the array has a pre-defined length, we have to assign rather than push
        // This is also faster than pushing
        output[i] = array[i];
      }

      return output;
    }
    /**
     * Returns a copy of `array` which contains all the elements between `start`
     * and `end`. (including `start` and excluding `end`)
     *
     * If `end` is not provided, it defaults to `array.length`.
     *
     * @param array  Source array
     * @param start  Start index
     * @param end    End index
     * @returns Part of the array
     */


    function slice(array, start, end) {
      if (end === void 0) {
        end = array.length;
      }

      var output = new Array(end - start);

      for (var i = start; i < end; ++i) {
        output[i - start] = array[i];
      }

      return output;
    }
    /**
     * Inserts a value into array at specific index.
     *
     * @param array  Source array
     * @param index  Index
     * @param value  Value to insert
     */


    function insertIndex(array, index, value) {
      array.splice(index, 0, value);
    }
    /**
     * Removes a value from array at specific index.
     *
     * @param array  Source array
     * @param index  Index
     */


    function removeIndex(array, index) {
      array.splice(index, 1);
    }
    /**
     * Orders an array using specific `ordering` function and returns index of
     * the `value`.
     *
     * @ignore Exclude from docs
     * @param array     Source array
     * @param ordering  An ordering function
     * @param value     Value to search for
     * @returns Result of the search
     */


    function getSortedIndex(array, ordering, value) {
      var start = 0;
      var end = array.length;
      var found = false;

      while (start < end) {
        // TODO is this faster/slower than using Math.floor ?
        var pivot = start + end >> 1;
        var order = ordering(value, array[pivot]); // less

        if (order < 0) {
          end = pivot; // equal
        } else if (order === 0) {
          found = true;
          start = pivot + 1; // more
        } else {
          start = pivot + 1;
        }
      }

      return {
        found: found,
        index: found ? start - 1 : start
      };
    }
    /**
     * Searches the array using custom function and returns index of the item if
     * found.
     *
     * Will call `matches` function on all items of the array. If return value
     * evaluates to `true`, index is returned.
     *
     * Otherwise returns -1.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Index of the item if found
     */


    function findIndex(array, matches) {
      var length = array.length;

      for (var i = 0; i < length; ++i) {
        if (matches(array[i], i)) {
          return i;
        }
      }

      return -1;
    }
    /**
     * Searches the array using custom function and returns item if found.
     *
     * Will call `matches` function on all items of the array. If return value
     * evaluates to `true`, index is returned.
     *
     * Otherwise returns `undefined`.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */


    function find(array, matches) {
      var index = findIndex(array, matches);

      if (index !== -1) {
        return array[index];
      }
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */


    function shuffle(array) {
      // https://stackoverflow.com/a/2450976/449477
      var currentIndex = array.length,
          temporaryValue,
          randomIndex; // While there remain elements to shuffle...

      while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1; // And swap it with the current element.

        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
      }
    } //# sourceMappingURL=Array.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js ***!
    \*******************************************************************************/

  /*! exports provided: raf, nextFrame, readFrame, writeFrame, whenIdle, triggerIdle */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsAsyncPendingJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "raf", function () {
      return raf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "nextFrame", function () {
      return nextFrame;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "readFrame", function () {
      return readFrame;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "writeFrame", function () {
      return writeFrame;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "whenIdle", function () {
      return whenIdle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "triggerIdle", function () {
      return triggerIdle;
    });
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * A collection of low-level async operation stuff.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    var pendingFrame = false;
    var nextQueue = [];
    var readQueue = [];
    var writeQueue = [];
    var idleQueue = [];
    var fps = 1000 / 60;
    /**
     * [raf description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */

    var raf = typeof requestAnimationFrame === "function" ? function (fn) {
      requestAnimationFrame(fn);
    } : function (fn) {
      setTimeout(fn, fps);
    };
    /**
     * [frameLoop description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */

    function frameLoop() {
      var now = Date.now();
      var length = nextQueue.length;

      for (var i = 0; i < length; ++i) {
        nextQueue[i](now);
      }

      _Array__WEBPACK_IMPORTED_MODULE_0__["shiftLeft"](nextQueue, length);

      for (var i = 0; i < readQueue.length; ++i) {
        readQueue[i](now);
      }

      readQueue.length = 0;

      for (var i = 0; i < writeQueue.length; ++i) {
        writeQueue[i](now);
      }

      writeQueue.length = 0;

      if (nextQueue.length === 0 && readQueue.length === 0) {
        pendingFrame = false;
      } else {
        raf(frameLoop);
      }
    }
    /**
     * [pendFrame description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function pendFrame() {
      if (!pendingFrame) {
        pendingFrame = true;
        raf(frameLoop);
      }
    }
    /**
     * [nextFrame description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param fn [description]
     */


    function nextFrame(fn) {
      nextQueue.push(fn);
      pendFrame();
    }
    /**
     * [readFrame description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param fn [description]
     */


    function readFrame(fn) {
      readQueue.push(fn);
      pendFrame();
    }
    /**
     * [writeFrame description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param fn [description]
     */


    function writeFrame(fn) {
      writeQueue.push(fn);
      pendFrame();
    }
    /**
     * [whenIdle description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param fn [description]
     */


    function whenIdle(fn) {
      idleQueue.push(fn);
    }
    /**
     * [triggerIdle description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @todo Maybe don't trigger a callback which was added while in the middle of triggering?
     */


    function triggerIdle() {
      var now = Date.now();
      var length = idleQueue.length;

      for (var i = 0; i < length; ++i) {
        idleQueue.shift()(now);
      }
    } //# sourceMappingURL=AsyncPending.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Browser.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Browser.js ***!
    \**************************************************************************/

  /*! exports provided: isSafari, isInternetExplorer */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsBrowserJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isSafari", function () {
      return isSafari;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isInternetExplorer", function () {
      return isInternetExplorer;
    }); // Also detects iOS


    function isSafari() {
      return /apple/i.test(navigator.vendor);
    }

    function isInternetExplorer() {
      return /MSIE |Trident\//.test(navigator.userAgent);
    } //# sourceMappingURL=Browser.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js":
  /*!************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js ***!
    \************************************************************************/

  /*! exports provided: Cache, cache */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsCacheJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Cache", function () {
      return Cache;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cache", function () {
      return cache;
    });
    /* harmony import */


    var _Dictionary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Represents object cache.
     *
     * @ignore Exclude from docs
     * @todo Better storage
     * @todo TTL logging
     * @todo Garbage collector
     */


    var Cache =
    /** @class */
    function () {
      function Cache() {
        /**
         * Storage for cache items.
         */
        this._storage = new _Dictionary__WEBPACK_IMPORTED_MODULE_0__["Dictionary"]();
        /**
         * Default TTL in milliseconds.
         */

        this.ttl = 1000;
      }
      /**
       * Caches or updates cached value, resets TTL.
       *
       * If `ttl` is set to zero, item will never expire.
       *
       * @param owner  An id of the object that owns this cache
       * @param key    Index key
       * @param value  Value
       * @param ttl    TTL of the cache to live in milliseconds
       */


      Cache.prototype.set = function (owner, key, value, ttl) {
        // Create if storage does not exist for this owner
        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () {
          return new _Dictionary__WEBPACK_IMPORTED_MODULE_0__["Dictionary"]();
        }); // Create cache item


        var item = {
          "touched": new Date().getTime(),
          "ttl": _Type__WEBPACK_IMPORTED_MODULE_1__["isNumber"](ttl) ? ttl : this.ttl,
          "value": value
        }; // Set

        ownerStorage.setKey(key, item);
      };
      /**
       * Rerturns cached item, respecting TTL.
       *
       * @param owner  An id of the object that owns this cache
       * @param key    Index key
       * @param value  Value to return if cache not available
       * @return Value, or `undefined` if not set
       */


      Cache.prototype.get = function (owner, key, value) {
        if (value === void 0) {
          value = undefined;
        } // 		 || ypeof this._storage[owner][key] === "undefined" || this._storage[owner][key].expired === true) {


        if (this._storage.hasKey(owner)) {
          var ownerStorage = this._storage.getKey(owner);

          if (ownerStorage.hasKey(key)) {
            var cacheItem = ownerStorage.getKey(key);

            if (cacheItem.ttl && cacheItem.touched + cacheItem.ttl < new Date().getTime()) {
              cacheItem.expired = true;
            }

            if (cacheItem.expired) {
              ownerStorage.removeKey(key);
              return value;
            }

            return cacheItem.value;
          } else {
            return value;
          }
        } else {
          return value;
        }
      };
      /**
       * Clears cache for specific owner or everything.
       *
       * @param owner Owner to clear cache for
       */


      Cache.prototype.clear = function (owner) {
        if (owner) {
          this._storage.removeKey(owner);
        } else {
          this._storage.clear();
        }
      };

      return Cache;
    }();
    /**
     * ============================================================================
     * GLOBAL INSTANCE
     * ============================================================================
     * @hidden
     */

    /**
     * A global instance of cache. Use this instance to cache any values.
     *
     * @ignore Exclude from docs
     */


    var cache = new Cache(); //# sourceMappingURL=Cache.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js":
  /*!************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js ***!
    \************************************************************************/

  /*! exports provided: Color, color, isColor, castColor, toColor */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsColorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Color", function () {
      return Color;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "color", function () {
      return color;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isColor", function () {
      return isColor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "castColor", function () {
      return castColor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toColor", function () {
      return toColor;
    });
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Colors */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * This module contains Color object definition
     */

    /**
     * Represents a color.
     *
     * `Color` accepts value only in [[iRGB]] object format. To create `Color`
     * object by parsing it from any supported string-based formats, use helper
     * [[color]] function:
     *
     * ```TypeScript
     * am4core.color("#ff0000");
     * am4core.color("#f00");
     * am4core.color("rgb(255, 0, 0)");
     * am4core.color("rgba(255, 0, 0, 0.5)");
     * am4core.color({ r: 255, g: 0, b: 0 });
     * am4core.color("red");
     * ```
     * ```JavaScript
     * am4core.color("#ff0000");
     * am4core.color("#f00");
     * am4core.color("rgb(255, 0, 0)");
     * am4core.color("rgba(255, 0, 0, 0.5)");
     * am4core.color({ r: 255, g: 0, b: 0 });
     * am4core.color("red");
     * ```
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info
     */


    var Color =
    /** @class */
    function () {
      /**
       * Constructor
       *
       * @param color Source color
       */
      function Color(color) {
        this._value = color;
      }

      Object.defineProperty(Color.prototype, "rgb", {
        /**
         * Returns [[iRGB]] representation of the color.
         *
         * @return RGB object
         */
        get: function get() {
          return this._value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Color.prototype, "hex", {
        /**
         * Returns color hex value string, e.g. "#FF0000".
         *
         * @return Hex color code
         */
        get: function get() {
          return this._value ? _Colors__WEBPACK_IMPORTED_MODULE_1__["rgbToHex"](this._value) : "none";
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Color.prototype, "rgba", {
        /**
         * Returns an `rgba()` representation of the color, e.g.:
         * `rgba(255, 0, 0, 0.5)`.
         *
         * @return rgba color string
         */
        get: function get() {
          return this._value ? _Colors__WEBPACK_IMPORTED_MODULE_1__["rgbToRGBA"](this._value) : "none";
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Color.prototype, "alpha", {
        /**
         * Returns current transparency.
         *
         * @return Alpha (0-1)
         */
        get: function get() {
          if (this._value != null && this._value.a != null) {
            return this._value.a;
          } else {
            return 1;
          }
        },

        /**
         * Set alpha (transparency) of the color.
         *
         * @param value Alpha (0-1)
         */
        set: function set(value) {
          if (this._value) {
            this._value.a = value;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Color.prototype, "lightColor", {
        /**
         * Returns current light color setting.
         *
         * @return Color
         */
        get: function get() {
          if (!this._lightColor) {
            this._lightColor = new Color({
              r: 255,
              g: 255,
              b: 255
            });
          }

          return this._lightColor;
        },

        /**
         * Sets "light" color. Used when determining contrasting color.
         *
         * @param color Color
         */
        set: function set(color) {
          this._lightColor = color;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Color.prototype, "darkColor", {
        /**
         * Returns current dark color setting.
         *
         * @return Color
         */
        get: function get() {
          if (!this._darkColor) {
            this._darkColor = new Color({
              r: 0,
              g: 0,
              b: 0
            });
          }

          return this._darkColor;
        },

        /**
         * Sets "dark" color. Used when determining contrasting color.
         *
         * @param color Color
         */
        set: function set(color) {
          this._darkColor = color;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Overrides `toString` method so that [[Color]] object can be used as
       * string.
       *
       * @ignore Exclude from docs
       * @return String represantion of color (usable in CSS)
       */

      Color.prototype.toString = function () {
        return this.alpha < 1 ? this.rgba : this.hex;
      };
      /**
       * Returns a new [[Color]] which is percent lighter (positive value),
       * or darker (negative value).
       *
       * Parameter is in the scale of -1 to 1.
       *
       * @param percent  Increase/decrease lightness by X
       * @return New Color
       */


      Color.prototype.lighten = function (percent) {
        return new Color(_Colors__WEBPACK_IMPORTED_MODULE_1__["lighten"](this.rgb, percent));
      };
      /**
       * Returns a new [[Color]] which is percent brighter (positive value),
       * or darker (negative value).
       *
       * Parameter is in the scale of -1 to 1.
       *
       * @param percent  Increase/decrease brightness by X
       * @return New Color
       */


      Color.prototype.brighten = function (percent) {
        return new Color(_Colors__WEBPACK_IMPORTED_MODULE_1__["brighten"](this.rgb, percent));
      };
      /**
       * Returns a new [[Color]] based on current color with specific saturation
       * applied.
       *
       * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
       * saturated).
       *
       * @param saturation  Saturation (0-1)
       * @return New (saturated) color
       */


      Color.prototype.saturate = function (saturation) {
        return new Color(_Colors__WEBPACK_IMPORTED_MODULE_1__["saturate"](this.rgb, saturation));
      };

      Object.defineProperty(Color.prototype, "alternative", {
        /**
         * Returns a either light or dark color that contrasts specifically with
         * this color.
         *
         * Uses properties `darkColor` (default black) and `lightColor` (default
         * white).
         *
         * Useful when determining which color label should be on a colored
         * background, so that it stands out.
         *
         * @return Contrasting color
         */
        get: function get() {
          if (this.rgb != null) {
            return _Colors__WEBPACK_IMPORTED_MODULE_1__["isLight"](this.rgb) ? this.darkColor : this.lightColor;
          } else {
            throw new Error("Color does not exist");
          }
        },
        enumerable: true,
        configurable: true
      });
      return Color;
    }();
    /**
     * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]
     * object for it.
     *
     * @param value  Input value
     * @param alpha  Alpha (0-1)
     * @return Color object
     */


    function color(value, alpha) {
      if (!_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](value)) {
        return new Color(undefined);
      }

      if (typeof value == "string") {
        var cacheId = "_color_" + value + "_" + (alpha || "1");

        var cached = _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].getCache(cacheId);

        if (cached) {
          return new Color({
            r: cached.r,
            g: cached.g,
            b: cached.b,
            a: cached.a
          });
        }

        var rgb = _Colors__WEBPACK_IMPORTED_MODULE_1__["rgb"](value, alpha);

        _Registry__WEBPACK_IMPORTED_MODULE_0__["registry"].setCache(cacheId, rgb);

        return new Color(rgb);
      } // Check if it's already a Color object


      if (value instanceof Color) {
        if (_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](alpha)) {
          value.alpha = alpha;
        }

        return value;
      } // Not a string or Color instance, it's the iRGB object then


      return new Color(value);
    }
    /**
     * Checks if supplied argument is instance of [[Color]].
     *
     * @param value  Input value
     * @return Is Color?
     */


    function isColor(value) {
      return value instanceof Color;
    }
    /**
     * Converts any value to [[Color]].
     *
     * @param value  Input value
     * @return Color
     */


    function castColor(value) {
      return color(value);
    }
    /**
     * Converts any value into a [[Color]].
     *
     * @param value  Source value
     * @return Color object
     */


    function toColor(value) {
      if (_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](value) && !isColor(value)) {
        return castColor(value);
      }

      return value;
    } //# sourceMappingURL=Color.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/ColorSet.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/ColorSet.js ***!
    \***************************************************************************/

  /*! exports provided: ColorSet */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsColorSetJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ColorSet", function () {
      return ColorSet;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Colors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Colors */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /**
     * This module contains ColorSet object definition
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Represents a set of colors. Can also generate colors according to set rules.
     *
     * @important
     * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info
     */


    var ColorSet =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ColorSet, _super);
      /**
       * Constructor
       */

      function ColorSet() {
        var _this = _super.call(this) || this;
        /**
         * Holds the list of the colors in this set. (preset or auto-generated)
         */


        _this._list = [];
        /**
         * Current step in a color generator's cycle.
         */

        _this._currentStep = 0;
        /**
         * If set to non-zero value, the ColorSet will start iterating colors from
         * that particular index, not the first color in the list.
         */

        _this._startIndex = 0;
        /**
         * Current pass in the color generator's cycle. Normally a generator would
         * cycle through all available hue range, then repeat it, alternating other
         * color properties, to generate distinctive colors.
         */

        _this._currentPass = 0;
        /**
         * A base color. If there are no colors pre-set in the color list, ColorSet
         * will use this color as a base when generating new ones, applying
         * `stepOptions` and `passOptions` to this base color.
         */

        _this.baseColor = new _Color__WEBPACK_IMPORTED_MODULE_2__["Color"]({
          r: 103,
          g: 183,
          b: 220
        });
        /**
         * Modifications to apply with each new generated color.
         */

        _this.stepOptions = {};
        /**
         * Modifications to apply on top of `stepOptions` for each "pass" of the
         * color generation.
         *
         * A "pass" is when ColorSet generates `minColors` number of colors.
         */

        _this.passOptions = {
          brighten: -0.2
        };
        /**
         * An index increment to use when iterating through color list.
         *
         * Default is 1, which means returning each and every color.
         *
         * Setting it to a bigger number will make ColorSet `next()` iterator skip
         * some colors.
         *
         * E.g. setting to 2, will return every second color in the list.
         *
         * This is useful, when the color list has colors that are too close each
         * other for contrast.
         *
         * However, having bigger number will mean that `next()` iterator will go
         * through the list quicker, and the generator will kick sooner.
         */

        _this.step = 1;
        /**
         * A number of colors to generate in one "pass".
         *
         * This setting can be automatically overridden, if ColorSet has a list of
         * pre-set colors. In such case ColorSet will generate exactly the same
         * number of colors with each pass as there were colors in original set.
         */

        _this.minColors = 20;
        /**
         * Do not let the "lightness" of generated color to fall below this
         * threshold.
         */

        _this.minLightness = 0.2;
        /**
         * Do not let the "lightness" of generated color to get above this threshold.
         */

        _this.maxLightness = 0.9;
        /**
         * Randomly shuffle generated colors.
         */

        _this.shuffle = false;
        /**
         * When colors are generated, based on `stepOptions`, each generated color
         * gets either lighter or darker.
         *
         * If this is set to `true`, color generator will switch to opposing spectrum
         * when reaching `minLightness` or `maxLightness`.
         *
         * E.g. if we start off with a red color, then gradually generate lighter
         * colors through rose shades, then switch back to dark red and gradually
         * increase the lightness of it until it reaches the starting red.
         *
         * If set to `false` it will stop there and cap lightness at whatever level
         * we hit `minLightness` or `maxLightness`, which may result in a number of
         * the same colors.
         */

        _this.wrap = true;
        /**
         * Re-use same colors in the pre-set list, when ColorSet runs out of colors,
         * rather than start generating new ones.
         */

        _this.reuse = false;
        /**
         * Saturation of colors. This will change saturation of all colors of color
         * set.
         *
         * It is recommended to set this in theme, as changing it at run time won't
         * make the items to redraw and change color.
         */

        _this.saturation = 1;
        _this.className = "ColorSet";

        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(ColorSet.prototype, "list", {
        /**
         * Returns current list of colors.
         *
         * If there are none, a new list of colors is generated, based on various
         * ColorSet settings.
         *
         * @return Color list
         */
        get: function get() {
          if (!this._list) {
            this.generate(this.minColors);
          }

          return this._list;
        },

        /**
         * Sets a list of pre-defined colors to use for the iterator.
         *
         * @param value Color list
         */
        set: function set(value) {
          this._list = value;
          this.reset();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Gets reusable color.
       *
       * @param   index  Index of color
       * @return         Color
       */

      ColorSet.prototype.getReusableColor = function (index) {
        if (this._list.length == 0) {
          this.generate(1);
          return this.list[0];
        } else {
          var tmpstep = index - Math.floor(index / this._list.length) * this.list.length;
          return this.list[tmpstep];
        }
      };
      /**
       * Returns next color in the list using internal iterator counter.
       *
       * If `step` is set to something other than 1, it may return other color than
       * exact next one in the list.
       *
       * @return Color
       */


      ColorSet.prototype.next = function () {
        var color;

        if (this.list.length <= this._currentStep) {
          if (this.reuse) {
            color = this.getReusableColor(this._currentStep);
          } else {
            this.generate(this.minColors);
            color = this.list[this._currentStep];
          }
        } else {
          color = this.list[this._currentStep];
        }

        this._currentStep += this.step;
        return color.saturate(this.saturation);
      };
      /**
       * Returns a color at specific index in the list.
       *
       * @param i  Index
       * @return Color
       */


      ColorSet.prototype.getIndex = function (i) {
        var color;

        if (this.list.length <= i) {
          if (this.reuse) {
            color = this.getReusableColor(i);
          } else {
            this.generate(this.minColors);
            color = this.getIndex(i);
          }
        } else {
          color = this.list[i];
        }

        return color.saturate(this.saturation);
      };
      /**
       * Resets internal iterator.
       *
       * Calling `next()` after this will return the very first color in the color
       * list, even if it was already returned before.
       */


      ColorSet.prototype.reset = function () {
        this._currentStep = this._startIndex;
      };

      Object.defineProperty(ColorSet.prototype, "currentStep", {
        /**
         * @return Step
         */
        get: function get() {
          return this._currentStep;
        },

        /**
         * Sets current color iteration. You can use this property to skip some
         * colors from iteration. E.g. setting it to `10` will skip first ten
         * colors.
         *
         * Please note that the number is zero-based.
         *
         * @param value  Step
         */
        set: function set(value) {
          this._currentStep = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ColorSet.prototype, "startIndex", {
        /**
         * @return Index
         */
        get: function get() {
          return this._startIndex;
        },

        /**
         * If set to non-zero value, the ColorSet will start iterating colors from
         * that particular index, not the first color in the list.
         *
         * @default 0
         * @since 4.4.9
         * @param  value  Index
         */
        set: function set(value) {
          this._startIndex = value;
          this.reset();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Generates colors based on the various ColorSet settings.
       *
       * @param count Number of colors to generate
       */

      ColorSet.prototype.generate = function (count) {
        // Init
        var curColor = this.currentColor;

        var hsl = _Colors__WEBPACK_IMPORTED_MODULE_4__["rgbToHsl"](_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](curColor.rgb));

        var hueStep = _Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;
        var mods = {
          brighten: 0,
          lighten: 0,
          hue: hsl.h,
          lightness: hsl.l,
          saturation: hsl.s
        }; // Generate list of hues, and shuffle them

        var hues = [];
        var startIndex = this.list.length == 0 ? 0 : 1;

        if (this.reuse) {
          for (var i = startIndex; i <= count; i++) {
            hues.push(_Colors__WEBPACK_IMPORTED_MODULE_4__["rgbToHsl"](_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](this._list[i].rgb)).h);
          }
        } else {
          for (var i = startIndex; i <= count; i++) {
            var h = hsl.h + hueStep * i;

            if (this.wrap && h > 1) {
              h -= 1;
            }

            hues.push(h);
          }
        } // Shuffle colors randomly


        if (this.shuffle) {
          hues.sort(function (a, b) {
            return Math.random() - 0.5;
          });
        } // Generate colors by rotating hue


        for (var i = 0; i < count; i++) {
          // Update hue
          if (this.reuse) {
            hsl = _Colors__WEBPACK_IMPORTED_MODULE_4__["rgbToHsl"](_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](this._list[i].rgb));
          } else {
            hsl.h = hues.shift();
          } // Apply HSL mods


          this.applyStepOptions(hsl, mods, i, this._currentPass); // Convert back to Color

          var c = Object(_Color__WEBPACK_IMPORTED_MODULE_2__["color"])(_Colors__WEBPACK_IMPORTED_MODULE_4__["hslToRgb"](hsl)); // Apply regular color mods

          var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;

          if (brighten != 0) {
            if (this.wrap) {
              brighten = _Utils__WEBPACK_IMPORTED_MODULE_6__["fitNumberRelative"](brighten, this.minLightness, this.maxLightness);
            } else {
              brighten = _Utils__WEBPACK_IMPORTED_MODULE_6__["fitNumber"](brighten, this.minLightness, this.maxLightness);
            }

            c = c.brighten(brighten);
          }

          var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;

          if (lighten != 0) {
            if (this.wrap) {
              lighten = _Utils__WEBPACK_IMPORTED_MODULE_6__["fitNumberRelative"](lighten, this.minLightness, this.maxLightness);
            } else {
              lighten = _Utils__WEBPACK_IMPORTED_MODULE_6__["fitNumber"](lighten, this.minLightness, this.maxLightness);
            }

            c = c.lighten(lighten);
          }

          this._list.push(c);
        }

        this._currentPass++;
      };

      Object.defineProperty(ColorSet.prototype, "currentColor", {
        /**
         * Returns current last color. It's either the last color in the list of
         * colors, or `baseColor` if list is empty.
         *
         * @return Color
         */
        get: function get() {
          if (this._list.length == 0) {
            return this.baseColor.saturate(this.saturation);
          } else {
            return this._list[this._list.length - 1].saturate(this.saturation);
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Generates modifiers for color, based on what step and pass.
       *
       * @param hsl   Curren HSL value of the color to modify
       * @param base  The modifiers that were before modification to use as a base
       * @param step  Current step
       * @param pass  Current pass
       */

      ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {
        // Process lightness
        hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;

        if (this.wrap) {
          if (hsl.l > 1) {
            hsl.l = hsl.l - Math.floor(hsl.l);
          } else if (hsl.l < 0) {
            hsl.l = -(hsl.l - Math.floor(hsl.l));
          }

          hsl.l = _Utils__WEBPACK_IMPORTED_MODULE_6__["fitNumberRelative"](hsl.l, this.minLightness, this.maxLightness);
        } else {
          if (hsl.l > 1) {
            hsl.l = 1;
          } else if (hsl.l < 0) {
            hsl.l = 0;
          }

          hsl.l = _Utils__WEBPACK_IMPORTED_MODULE_6__["fitNumber"](hsl.l, this.minLightness, this.maxLightness);
        }
      };
      /**
       * Processes JSON-based config before it is applied to the object.
       *
       * @ignore Exclude from docs
       * @param config  Config
       */


      ColorSet.prototype.processConfig = function (config) {
        if (config) {
          // Set up axis ranges
          if (_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](config.list) && _Type__WEBPACK_IMPORTED_MODULE_5__["isArray"](config.list)) {
            for (var i = 0, len = config.list.length; i < len; i++) {
              if (!(config.list[i] instanceof _Color__WEBPACK_IMPORTED_MODULE_2__["Color"])) {
                config.list[i] = Object(_Color__WEBPACK_IMPORTED_MODULE_2__["color"])(config.list[i]);
              }
            }
          }
        }

        _super.prototype.processConfig.call(this, config);
      };

      return ColorSet;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_3__["registry"].registeredClasses["ColorSet"] = ColorSet; //# sourceMappingURL=ColorSet.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js ***!
    \*************************************************************************/

  /*! exports provided: rgb, hexToRgb, rgbaToRgb, rgbToHex, rgbToRGBA, pad2, interpolate, lighten, getLightnessStep, brighten, getBrightnessStep, saturate, hslToRgb, rgbToHsl, rgbToHsv, hsvToRgb, isLight */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsColorsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rgb", function () {
      return rgb;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hexToRgb", function () {
      return hexToRgb;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rgbaToRgb", function () {
      return rgbaToRgb;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rgbToHex", function () {
      return rgbToHex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rgbToRGBA", function () {
      return rgbToRGBA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pad2", function () {
      return pad2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "interpolate", function () {
      return interpolate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "lighten", function () {
      return lighten;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLightnessStep", function () {
      return getLightnessStep;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "brighten", function () {
      return brighten;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getBrightnessStep", function () {
      return getBrightnessStep;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "saturate", function () {
      return saturate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hslToRgb", function () {
      return hslToRgb;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rgbToHsl", function () {
      return rgbToHsl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rgbToHsv", function () {
      return rgbToHsv;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hsvToRgb", function () {
      return hsvToRgb;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isLight", function () {
      return isLight;
    });
    /* harmony import */


    var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * A collection of color-related functions
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Define named colors for easy resolution to RGB.
     */


    var namedColors = {
      aliceblue: {
        r: 240,
        g: 248,
        b: 255
      },
      antiquewhite: {
        r: 250,
        g: 235,
        b: 215
      },
      aqua: {
        r: 0,
        g: 255,
        b: 255
      },
      aquamarine: {
        r: 127,
        g: 255,
        b: 212
      },
      azure: {
        r: 240,
        g: 255,
        b: 255
      },
      beige: {
        r: 245,
        g: 245,
        b: 220
      },
      bisque: {
        r: 255,
        g: 228,
        b: 196
      },
      black: {
        r: 0,
        g: 0,
        b: 0
      },
      blanchedalmond: {
        r: 255,
        g: 235,
        b: 205
      },
      blue: {
        r: 0,
        g: 0,
        b: 255
      },
      blueviolet: {
        r: 138,
        g: 43,
        b: 226
      },
      brown: {
        r: 165,
        g: 42,
        b: 42
      },
      burlywood: {
        r: 222,
        g: 184,
        b: 135
      },
      cadetblue: {
        r: 95,
        g: 158,
        b: 160
      },
      chartreuse: {
        r: 127,
        g: 255,
        b: 0
      },
      chocolate: {
        r: 210,
        g: 105,
        b: 30
      },
      coral: {
        r: 255,
        g: 127,
        b: 80
      },
      cornflowerblue: {
        r: 100,
        g: 149,
        b: 237
      },
      cornsilk: {
        r: 255,
        g: 248,
        b: 220
      },
      crimson: {
        r: 220,
        g: 20,
        b: 60
      },
      cyan: {
        r: 0,
        g: 255,
        b: 255
      },
      darkblue: {
        r: 0,
        g: 0,
        b: 139
      },
      darkcyan: {
        r: 0,
        g: 139,
        b: 139
      },
      darkgoldenrod: {
        r: 184,
        g: 134,
        b: 11
      },
      darkgray: {
        r: 169,
        g: 169,
        b: 169
      },
      darkgrey: {
        r: 169,
        g: 169,
        b: 169
      },
      darkgreen: {
        r: 0,
        g: 100,
        b: 0
      },
      darkkhaki: {
        r: 189,
        g: 183,
        b: 107
      },
      darkmagenta: {
        r: 139,
        g: 0,
        b: 139
      },
      darkolivegreen: {
        r: 85,
        g: 107,
        b: 47
      },
      darkorange: {
        r: 255,
        g: 140,
        b: 0
      },
      darkorchid: {
        r: 153,
        g: 50,
        b: 204
      },
      darkred: {
        r: 139,
        g: 0,
        b: 0
      },
      darksalmon: {
        r: 233,
        g: 150,
        b: 122
      },
      darkseagreen: {
        r: 143,
        g: 188,
        b: 143
      },
      darkslateblue: {
        r: 72,
        g: 61,
        b: 139
      },
      darkslategray: {
        r: 47,
        g: 79,
        b: 79
      },
      darkslategrey: {
        r: 47,
        g: 79,
        b: 79
      },
      darkturquoise: {
        r: 0,
        g: 206,
        b: 209
      },
      darkviolet: {
        r: 148,
        g: 0,
        b: 211
      },
      deeppink: {
        r: 255,
        g: 20,
        b: 147
      },
      deepskyblue: {
        r: 0,
        g: 191,
        b: 255
      },
      dimgray: {
        r: 105,
        g: 105,
        b: 105
      },
      dimgrey: {
        r: 105,
        g: 105,
        b: 105
      },
      dodgerblue: {
        r: 30,
        g: 144,
        b: 255
      },
      firebrick: {
        r: 178,
        g: 34,
        b: 34
      },
      floralwhite: {
        r: 255,
        g: 250,
        b: 240
      },
      forestgreen: {
        r: 34,
        g: 139,
        b: 34
      },
      fuchsia: {
        r: 255,
        g: 0,
        b: 255
      },
      gainsboro: {
        r: 220,
        g: 220,
        b: 220
      },
      ghostwhite: {
        r: 248,
        g: 248,
        b: 255
      },
      gold: {
        r: 255,
        g: 215,
        b: 0
      },
      goldenrod: {
        r: 218,
        g: 165,
        b: 32
      },
      gray: {
        r: 128,
        g: 128,
        b: 128
      },
      grey: {
        r: 128,
        g: 128,
        b: 128
      },
      green: {
        r: 0,
        g: 128,
        b: 0
      },
      greenyellow: {
        r: 173,
        g: 255,
        b: 47
      },
      honeydew: {
        r: 240,
        g: 255,
        b: 240
      },
      hotpink: {
        r: 255,
        g: 105,
        b: 180
      },
      indianred: {
        r: 205,
        g: 92,
        b: 92
      },
      indigo: {
        r: 75,
        g: 0,
        b: 130
      },
      ivory: {
        r: 255,
        g: 255,
        b: 240
      },
      khaki: {
        r: 240,
        g: 230,
        b: 140
      },
      lavender: {
        r: 230,
        g: 230,
        b: 250
      },
      lavenderblush: {
        r: 255,
        g: 240,
        b: 245
      },
      lawngreen: {
        r: 124,
        g: 252,
        b: 0
      },
      lemonchiffon: {
        r: 255,
        g: 250,
        b: 205
      },
      lightblue: {
        r: 173,
        g: 216,
        b: 230
      },
      lightcoral: {
        r: 240,
        g: 128,
        b: 128
      },
      lightcyan: {
        r: 224,
        g: 255,
        b: 255
      },
      lightgoldenrodyellow: {
        r: 250,
        g: 250,
        b: 210
      },
      lightgray: {
        r: 211,
        g: 211,
        b: 211
      },
      lightgrey: {
        r: 211,
        g: 211,
        b: 211
      },
      lightgreen: {
        r: 144,
        g: 238,
        b: 144
      },
      lightpink: {
        r: 255,
        g: 182,
        b: 193
      },
      lightsalmon: {
        r: 255,
        g: 160,
        b: 122
      },
      lightseagreen: {
        r: 32,
        g: 178,
        b: 170
      },
      lightskyblue: {
        r: 135,
        g: 206,
        b: 250
      },
      lightslategray: {
        r: 119,
        g: 136,
        b: 153
      },
      lightslategrey: {
        r: 119,
        g: 136,
        b: 153
      },
      lightsteelblue: {
        r: 176,
        g: 196,
        b: 222
      },
      lightyellow: {
        r: 255,
        g: 255,
        b: 224
      },
      lime: {
        r: 0,
        g: 255,
        b: 0
      },
      limegreen: {
        r: 50,
        g: 205,
        b: 50
      },
      linen: {
        r: 250,
        g: 240,
        b: 230
      },
      magenta: {
        r: 255,
        g: 0,
        b: 255
      },
      maroon: {
        r: 128,
        g: 0,
        b: 0
      },
      mediumaquamarine: {
        r: 102,
        g: 205,
        b: 170
      },
      mediumblue: {
        r: 0,
        g: 0,
        b: 205
      },
      mediumorchid: {
        r: 186,
        g: 85,
        b: 211
      },
      mediumpurple: {
        r: 147,
        g: 112,
        b: 219
      },
      mediumseagreen: {
        r: 60,
        g: 179,
        b: 113
      },
      mediumslateblue: {
        r: 123,
        g: 104,
        b: 238
      },
      mediumspringgreen: {
        r: 0,
        g: 250,
        b: 154
      },
      mediumturquoise: {
        r: 72,
        g: 209,
        b: 204
      },
      mediumvioletred: {
        r: 199,
        g: 21,
        b: 133
      },
      midnightblue: {
        r: 25,
        g: 25,
        b: 112
      },
      mintcream: {
        r: 245,
        g: 255,
        b: 250
      },
      mistyrose: {
        r: 255,
        g: 228,
        b: 225
      },
      moccasin: {
        r: 255,
        g: 228,
        b: 181
      },
      navajowhite: {
        r: 255,
        g: 222,
        b: 173
      },
      navy: {
        r: 0,
        g: 0,
        b: 128
      },
      oldlace: {
        r: 253,
        g: 245,
        b: 230
      },
      olive: {
        r: 128,
        g: 128,
        b: 0
      },
      olivedrab: {
        r: 107,
        g: 142,
        b: 35
      },
      orange: {
        r: 255,
        g: 165,
        b: 0
      },
      orangered: {
        r: 255,
        g: 69,
        b: 0
      },
      orchid: {
        r: 218,
        g: 112,
        b: 214
      },
      palegoldenrod: {
        r: 238,
        g: 232,
        b: 170
      },
      palegreen: {
        r: 152,
        g: 251,
        b: 152
      },
      paleturquoise: {
        r: 175,
        g: 238,
        b: 238
      },
      palevioletred: {
        r: 219,
        g: 112,
        b: 147
      },
      papayawhip: {
        r: 255,
        g: 239,
        b: 213
      },
      peachpuff: {
        r: 255,
        g: 218,
        b: 185
      },
      peru: {
        r: 205,
        g: 133,
        b: 63
      },
      pink: {
        r: 255,
        g: 192,
        b: 203
      },
      plum: {
        r: 221,
        g: 160,
        b: 221
      },
      powderblue: {
        r: 176,
        g: 224,
        b: 230
      },
      purple: {
        r: 128,
        g: 0,
        b: 128
      },
      rebeccapurple: {
        r: 102,
        g: 51,
        b: 153
      },
      red: {
        r: 255,
        g: 0,
        b: 0
      },
      rosybrown: {
        r: 188,
        g: 143,
        b: 143
      },
      royalblue: {
        r: 65,
        g: 105,
        b: 225
      },
      saddlebrown: {
        r: 139,
        g: 69,
        b: 19
      },
      salmon: {
        r: 250,
        g: 128,
        b: 114
      },
      sandybrown: {
        r: 244,
        g: 164,
        b: 96
      },
      seagreen: {
        r: 46,
        g: 139,
        b: 87
      },
      seashell: {
        r: 255,
        g: 245,
        b: 238
      },
      sienna: {
        r: 160,
        g: 82,
        b: 45
      },
      silver: {
        r: 192,
        g: 192,
        b: 192
      },
      skyblue: {
        r: 135,
        g: 206,
        b: 235
      },
      slateblue: {
        r: 106,
        g: 90,
        b: 205
      },
      slategray: {
        r: 112,
        g: 128,
        b: 144
      },
      slategrey: {
        r: 112,
        g: 128,
        b: 144
      },
      snow: {
        r: 255,
        g: 250,
        b: 250
      },
      springgreen: {
        r: 0,
        g: 255,
        b: 127
      },
      steelblue: {
        r: 70,
        g: 130,
        b: 180
      },
      tan: {
        r: 210,
        g: 180,
        b: 140
      },
      teal: {
        r: 0,
        g: 128,
        b: 128
      },
      thistle: {
        r: 216,
        g: 191,
        b: 216
      },
      tomato: {
        r: 255,
        g: 99,
        b: 71
      },
      turquoise: {
        r: 64,
        g: 224,
        b: 208
      },
      violet: {
        r: 238,
        g: 130,
        b: 238
      },
      wheat: {
        r: 245,
        g: 222,
        b: 179
      },
      white: {
        r: 255,
        g: 255,
        b: 255
      },
      whitesmoke: {
        r: 245,
        g: 245,
        b: 245
      },
      yellow: {
        r: 255,
        g: 255,
        b: 0
      },
      yellowgreen: {
        r: 154,
        g: 205,
        b: 50
      }
    };
    /**
     * Tries to resolve a named color into a hex color representation.
     *
     * @ignore Exclude from docs
     * @param value  Color name
     * @return Color
     * @deprecated
     * @hidden
     */

    /*export function resolveNamedColor(value: string): Color {
        return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;
    }*/

    /**
     * Converts a proper color hex code (i.e. "#FF5500") or named color (i.e. "red")
     * into an {iRGB} object. If the code is not correctly formatted, an RGB of
     * black is returned.
     *
     * @ignore Exclude from docs
     * @param color  Color code
     * @param alpha  Alpha (0-1)
     * @return RGB
     */

    function rgb(color, alpha) {
      // Init return value
      var rgb; // Try resolving color format
      // Named color?

      if (namedColors[color]) {
        rgb = namedColors[color];
      } // Hex code?
      else if (color.charAt(0) === "#") {
          rgb = hexToRgb(color);
        } // rgb() format?
        else if (color.match(/^rgba?\(/)) {
            rgb = rgbaToRgb(color);
          } // Was not able to resolve?


      if (!rgb) {
        rgb = {
          r: 0,
          g: 0,
          b: 0,
          a: 1
        };
      } // Set alpha


      if (_Type__WEBPACK_IMPORTED_MODULE_1__["hasValue"](alpha)) {
        rgb.a = alpha;
      }

      return rgb;
    }
    /**
     * Converts a hex color code (i.e. "#FF5500") to an [[iRGB]] object.
     *
     * @ignore Exclude from docs
     * @param hex  Hex color code
     * @return RGB
     */


    function hexToRgb(hex) {
      // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
      var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
      });
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : undefined;
    }
    /**
     * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].
     *
     * @ignore Exclude from docs
     * @param color  Color code
     * @return RGB
     */


    function rgbaToRgb(color) {
      color = color.replace(/[ ]/g, ""); // Init

      var matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i); // Try rgb() format

      if (matches) {
        matches.push("1");
      } else {
        matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i);

        if (!matches) {
          return;
        }
      }

      return {
        r: parseInt(matches[1]),
        g: parseInt(matches[2]),
        b: parseInt(matches[3]),
        a: parseFloat(matches[4])
      };
    }
    /**
     * Converts an [[iRGB]] object into a hex color code.
     *
     * @ignore Exclude from docs
     * @param rgb  RGB
     * @return Hex color code
     */


    function rgbToHex(rgb) {
      return "#" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));
    }
    /**
     * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.
     *
     * @ignore Exclude from docs
     * @param rgb  RGB
     * @return `rgba()` syntax
     */


    function rgbToRGBA(rgb) {
      if (_Type__WEBPACK_IMPORTED_MODULE_1__["hasValue"](rgb.a) && rgb.a !== 1) {
        return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")";
      } else {
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
      }
    }
    /**
     * Pads a 1-digit string with a zero.
     *
     * @ignore Exclude from docs
     * @param c  Input string
     * @return Padded string
     */


    function pad2(c) {
      return c.length == 1 ? "0" + c : "" + c;
    }
    /**
     * Returns an intermediate color between two colors based on the relative
     * position. Position needs to be in range between 0 and 1. Zero meaning the
     * resulting color will be closest to the first reference color.
     *
     * @ignore Exclude from docs
     * @param color1   First reference color
     * @param color2   Second reference color
     * @param percent  Relative position (0-1)
     * @return Interpolated color
     */


    function interpolate(rgb1, rgb2, percent) {
      percent = _Math__WEBPACK_IMPORTED_MODULE_0__["fitToRange"](percent, 0, 1);

      if (rgb1) {
        if (rgb2) {
          return {
            r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),
            g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),
            b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),
            a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)
          };
        } else {
          return rgb1;
        }
      } else if (rgb2) {
        return rgb2;
      } else {
        return rgb1;
      }
    }
    /**
     * Returns a color that is `percent` brighter than the reference color.
     *
     * @ignore Exclude from docs
     * @param color    Reference color
     * @param percent  Brightness percent
     * @return Hex code of the new color
     */


    function lighten(rgb, percent) {
      if (rgb) {
        return {
          r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
          g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
          b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
          a: rgb.a
        };
      } else {
        // TODO is this correct ?
        return rgb;
      }
    }

    ;
    /**
     * Gets lightness step.
     *
     * @ignore Exclude from docs
     * @param value    Value
     * @param percent  Percent
     * @return Step
     */

    function getLightnessStep(value, percent) {
      var base = percent > 0 ? 255 - value : value;
      return Math.round(base * percent);
    }
    /**
     * Returns a color that is `percent` brighter than the source `color`.
     *
     * @ignore Exclude from docs
     * @param color    Source color
     * @param percent  Brightness percent
     * @return New color
     */


    function brighten(rgb, percent) {
      if (rgb) {
        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230); //let base = Math.max(rgb.r, rgb.g, rgb.b);

        var step = getLightnessStep(base, percent);
        return {
          r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
          g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
          b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
          a: rgb.a
        };
      } else {
        // TODO is this correct ?
        return rgb;
      }
    }

    ;
    /**
     * Returns brightness step.
     *
     * @ignore Exclude from docs
     * @param value    Value
     * @param percent  Percent
     * @return Step
     */

    function getBrightnessStep(value, percent) {
      var base = 255; //percent > 0 ? 255 - value : value;

      return Math.round(base * percent);
    }
    /**
     * Returns a new [[iRGB]] object based on `rgb` parameter with specific
     * saturation applied.
     *
     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
     * saturated).
     *
     * @ignore Exclude from docs
     * @param color       Base color
     * @param saturation  Saturation (0-1)
     * @return New color
     */


    function saturate(rgb, saturation) {
      if (rgb == null || saturation == 1) {
        return rgb;
      }

      var hsl = rgbToHsl(rgb);
      hsl.s = saturation;
      return hslToRgb(hsl);
    }
    /*
    // not used
    export function rgbToMatrix(rgb: iRGB): string {
        let r = $type.toText($math.round((rgb.r || 0) / 255, 10));
        let g = $type.toText($math.round((rgb.g || 0) / 255, 10));
        let b = $type.toText($math.round((rgb.b || 0) / 255, 10));
        let a = $type.toText(rgb.a || 1);
        return	      r + " 0 0 0 0" +
                        " 0 " + g + " 0 0 0" +
                        " 0 0 " + b + " 0 0" +
                        " 0 0 0 " + a + " 0";
    }
    */

    /**
     * The functions below are taken and adapted from Garry Tan's blog post:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * The further attributions go mjijackson.com, which now seems to be defunct.
     */

    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h, s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * Function adapted from:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * @ignore Exclude from docs
     * @param h       The hue
     * @param s       The saturation
     * @param l       The lightness
     * @return The RGB representation
     */


    function hslToRgb(color) {
      var r, g, b;
      var h = color.h;
      var s = color.s;
      var l = color.l;

      if (s == 0) {
        r = g = b = l; // achromatic
      } else {
        var hue2rgb = function hue2rgb(p, q, t) {
          if (t < 0) {
            t += 1;
          }

          if (t > 1) {
            t -= 1;
          }

          if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
          }

          if (t < 1 / 2) {
            return q;
          }

          if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
          }

          return p;
        };

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }

      return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
      };
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h, s, and l in the set [0, 1].
     *
     * Function adapted from:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * @ignore Exclude from docs
     * @param r       The red color value
     * @param g       The green color value
     * @param b       The blue color value
     * @return The HSL representation
     */


    function rgbToHsl(color) {
      var r = color.r / 255;
      var g = color.g / 255;
      var b = color.b / 255;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h = 0;
      var s = 0;
      var l = (max + min) / 2;

      if (max === min) {
        h = s = 0; // achromatic
      } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;

          case g:
            h = (b - r) / d + 2;
            break;

          case b:
            h = (r - g) / d + 4;
            break;
        }

        h /= 6;
      }

      return {
        h: h,
        s: s,
        l: l
      };
    }
    /**
     * Converts an RGB color value to HSV. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h, s, and v in the set [0, 1].
     *
     * @ignore Exclude from docs
     * @param   Number  r       The red color value
     * @param   Number  g       The green color value
     * @param   Number  b       The blue color value
     * @return  Array           The HSV representation
     */


    function rgbToHsv(color) {
      var r = color.r / 255;
      var g = color.g / 255;
      var b = color.b / 255;
      var max = Math.max(r, g, b),
          min = Math.min(r, g, b);
      var h = 0;
      var s = 0;
      var v = max;
      var d = max - min;
      s = max == 0 ? 0 : d / max;

      if (max == min) {
        h = 0; // achromatic
      } else {
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;

          case g:
            h = (b - r) / d + 2;
            break;

          case b:
            h = (r - g) / d + 4;
            break;
        }

        h /= 6;
      }

      return {
        h: h,
        s: s,
        v: v
      };
    }
    /**
     * Converts an HSV color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
     * Assumes h, s, and v are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * @ignore Exclude from docs
     * @param   Number  h       The hue
     * @param   Number  s       The saturation
     * @param   Number  v       The value
     * @return  Array           The RGB representation
     */


    function hsvToRgb(color) {
      var r = 0;
      var g = 0;
      var b = 0;
      var h = color.h;
      var s = color.s;
      var v = color.v;
      var i = Math.floor(h * 6);
      var f = h * 6 - i;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);

      switch (i % 6) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;

        case 1:
          r = q;
          g = v;
          b = p;
          break;

        case 2:
          r = p;
          g = v;
          b = t;
          break;

        case 3:
          r = p;
          g = q;
          b = v;
          break;

        case 4:
          r = t;
          g = p;
          b = v;
          break;

        case 5:
          r = v;
          g = p;
          b = q;
          break;
      }

      return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
      };
    }
    /**
     * Returns `true` if color is "light". Useful indetermining which contrasting
     * color to use for elements over this color. E.g.: you would want to use
     * black text over light background, and vice versa.
     *
     * @ignore Exclude from docs
     * @param color  Source color
     * @return Light?
     */


    function isLight(color) {
      return (color.r * 299 + color.g * 587 + color.b * 114) / 1000 >= 128;
    } //# sourceMappingURL=Colors.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js ***!
    \**********************************************************************/

  /*! exports provided: SVGNS, XMLNS, XLINK, addEventListener, getElement, addClass, removeClass, setStyle, getComputedStyle, blur, focus, outerHTML, isElement, contains, getRoot, eventTarget, copyAttributes, fixPixelPerfect, StyleRule, StyleClass, ready, findFont, findFontSize, isHidden, isElementInViewport */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsDOMJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SVGNS", function () {
      return SVGNS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "XMLNS", function () {
      return XMLNS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "XLINK", function () {
      return XLINK;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "addEventListener", function () {
      return addEventListener;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getElement", function () {
      return getElement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "addClass", function () {
      return addClass;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "removeClass", function () {
      return removeClass;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "setStyle", function () {
      return setStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getComputedStyle", function () {
      return getComputedStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "blur", function () {
      return blur;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "focus", function () {
      return focus;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "outerHTML", function () {
      return outerHTML;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isElement", function () {
      return isElement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "contains", function () {
      return contains;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getRoot", function () {
      return getRoot;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "eventTarget", function () {
      return eventTarget;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copyAttributes", function () {
      return copyAttributes;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fixPixelPerfect", function () {
      return fixPixelPerfect;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "StyleRule", function () {
      return StyleRule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "StyleClass", function () {
      return StyleClass;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ready", function () {
      return ready;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findFont", function () {
      return findFont;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findFontSize", function () {
      return findFontSize;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isHidden", function () {
      return isHidden;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isElementInViewport", function () {
      return isElementInViewport;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Disposer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _AsyncPending__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./AsyncPending */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js");
    /* harmony import */


    var _Object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * A collection of DOM-related functions.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * SVG namespace.
     *
     * @ignore Exclude from docs
     */


    var SVGNS = "http://www.w3.org/2000/svg";
    /**
     * XML namespace.
     *
     * @ignore Exclude from docs
     */

    var XMLNS = "http://www.w3.org/2000/xmlns/";
    /**
     * XLINK namespace.
     *
     * @ignore Exclude from docs
     */

    var XLINK = "http://www.w3.org/1999/xlink";
    /**
     * Function that adds a disposable event listener directly to a DOM element.
     *
     * @ignore Exclude from docs
     * @param dom       A DOM element to add event to
     * @param type      Event type
     * @param listener  Event listener
     * @returns Disposable event
     */

    function addEventListener(dom, type, listener, options) {
      //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)
      //console.log(type, dom);
      dom.addEventListener(type, listener, options || false);
      return new _Disposer__WEBPACK_IMPORTED_MODULE_1__["Disposer"](function () {
        dom.removeEventListener(type, listener, options || false);
      });
    }
    /**
     * Finds and returns an element reference using following logic:
     * * If we pass in an element instance, we just return it back.
     * * If we pass in a string, the function looks for an element with such id.
     * * If no element with such id is found, we grab the first element with a tag name like this.
     *
     * @ignore Exclude from docs
     * @param el  Element definition (reference, or id, or tag name)
     * @return Element reference
     * @todo Review this function as it seems pretty fuzzy and hacky
     */


    function getElement(el) {
      if (_Type__WEBPACK_IMPORTED_MODULE_5__["isString"](el)) {
        var e = document.getElementById(el);

        if (e == null) {
          e = document.getElementsByClassName(el)[0];
        }

        if (e instanceof HTMLElement) {
          return e;
        }
      } else if (el instanceof HTMLElement) {
        return el;
      }
    }
    /**
     * Adds a class name to an HTML or SVG element.
     *
     * @ignore Exclude from docs
     * @param element    Element
     * @param className  Class name to add
     */


    function addClass(element, className) {
      if (!element) {
        return;
      }

      if (element.classList) {
        element.classList.add(className);
      } else {
        var currentClassName = element.getAttribute("class");

        if (currentClassName) {
          element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
            return item !== className;
          }).join(" ") + " " + className);
        } else {
          element.setAttribute("class", className);
        } //element.className = element.className.replace(new RegExp("^" + className + "| " + className), "") + " " + className;

      }
    }
    /**
     * Removes a class name from an HTML or SVG element.
     *
     * @ignore Exclude from docs
     * @param element    Element
     * @param className  Class name to add
     */


    function removeClass(element, className) {
      if (!element) {
        return;
      }

      if (element.classList) {
        element.classList.remove(className);
      } else {
        var currentClassName = element.getAttribute("class");

        if (currentClassName) {
          element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
            return item !== className;
          }).join(" "));
        } //element.className = element.className.replace(new RegExp("^" + className + "| " + className), "");

      }
    }
    /**
     * Sets style property on DOM element.
     *
     * @ignore Exclude from docs
     * @todo Still needed?
     */


    function setStyle(element, property, value) {
      element.style[property] = value;
    }
    /**
     * Gets the computed style value for an element.
     *
     * @ignore Exclude from docs
     */


    function getComputedStyle(element, property) {
      if (element.currentStyle) {
        return element.currentStyle[property];
      }

      return document.defaultView.getComputedStyle(element, null).getPropertyValue(property);
    }
    /**
     * Removes focus from any element by shifting focus to body.
     *
     * @ignore Exclude from docs
     */


    function blur() {
      var input = document.createElement("input");
      input.style.position = "fixed";
      input.style.top = "0px";
      input.style.left = "-10000px";
      document.body.appendChild(input);
      input.focus();
      input.blur();
      document.body.removeChild(input);
    }
    /**
     * Tries to focus the element.
     *
     * @ignore Exlude from docs
     * @param element  Element to focus
     */


    function focus(element) {
      if (element instanceof HTMLElement) {
        element.focus();
      } else {
        var input = document.createElement("input");
        var fo = document.createElementNS(SVGNS, "foreignObject");
        fo.appendChild(input);
        element.appendChild(fo);
        input.focus();
        input.disabled = true;
        fo.remove();
      }
      /*if ((<any>element).focus != undefined) {
          (<any>element).focus();
      }
      else if (element instanceof SVGSVGElement) {
          // Not implemented
          // @todo implement focus fallback
      }*/

    }
    /**
     * Returns markup for the element including the element tag itself.
     * SVG elements do not support `outerHTML` so this functions applies of
     * a workaround which creates a new temporary wrapper, clones element and uses
     * wrapper's `innerHTML`.
     *
     * @ignore Exclude from docs
     * @param element  Element to get full markup for
     * @return Markup
     * @deprecated Not in use anywhere
     */


    function outerHTML(element) {
      if (element.outerHTML) {
        return element.outerHTML;
      } else {
        var twrap = document.createElement("div");
        var tnode = element.cloneNode(true);
        twrap.appendChild(tnode);
        var content = twrap.innerHTML;
        return content;
      }
    }
    /**
     * Checks if element is a valid DOM node.
     *
     * @ignore Exclude from docs
     * @param el  Element
     * @return `true` if element is a valid DOM node
     */


    function isElement(el) {
      return el instanceof Object && el && el.nodeType === 1;
    }
    /**
     * Checks of element `a` contains element `b`.
     *
     * @param a  Aleged ascendant
     * @param b  Aleged descendant
     * @return Contains?
     */


    function contains(a, b) {
      var cursor = b;

      while (true) {
        if (a === cursor) {
          return true;
        } else if (cursor.parentNode == null) {
          // TODO better ShadowRoot detection
          if (cursor.host == null) {
            return false;
          } else {
            cursor = cursor.host;
          }
        } else {
          cursor = cursor.parentNode;
        }
      }
    }
    /**
     * Returns the root of the element (either the Document or the ShadowRoot)
     *
     * @param a  Node
     * @return Root
     */


    function getRoot(a) {
      // TODO replace with Node.prototype.getRootNode
      var owner = a.ownerDocument;
      var cursor = a;

      while (true) {
        if (cursor.parentNode == null) {
          // If the cursor is the document, or it is a ShadowRoot
          // TODO better ShadowRoot detection
          if (cursor === owner || cursor.host != null) {
            return cursor;
          } else {
            return null;
          }
        } else {
          cursor = cursor.parentNode;
        }
      }
    }
    /**
     * Gets the true target of the Event.
     *
     * This is needed to make events work with the shadow DOM.
     *
     * @param event  Event
     * @return EventTarget
     */


    function eventTarget(event) {
      if (typeof event.composedPath === "function") {
        return event.composedPath()[0];
      } else {
        return event.target;
      }
    }
    /**
     * Copies attributes from one element to another.
     *
     * @ignore Exclude from docs
     * @param source  Element to copy attributes from
     * @param target  Element to copy attributes to
     */


    function copyAttributes(source, target) {
      _Array__WEBPACK_IMPORTED_MODULE_4__["each"](source.attributes, function (attr) {
        // TODO what if it's null ?
        if (attr.value != null) {
          target.setAttribute(attr.name, attr.value);
        }
      });
    }
    /**
     * [fixPixelPerfect description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param el  Element
     */


    function fixPixelPerfect(el) {
      Object(_AsyncPending__WEBPACK_IMPORTED_MODULE_2__["readFrame"])(function () {
        // sometimes IE doesn't like this
        // TODO figure out a way to remove this
        try {
          var rect = el.getBoundingClientRect();
          var left_1 = rect.left - Math.round(rect.left);
          var top_1 = rect.top - Math.round(rect.top);

          if (left_1 !== 0) {
            Object(_AsyncPending__WEBPACK_IMPORTED_MODULE_2__["writeFrame"])(function () {
              el.style.left = left_1 + "px";
            });
          }

          if (top_1 !== 0) {
            Object(_AsyncPending__WEBPACK_IMPORTED_MODULE_2__["writeFrame"])(function () {
              el.style.top = top_1 + "px";
            });
          }
        } catch (e) {}
      });
    }
    /**
     * [rootStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    var rootStylesheet;
    /**
     * [getStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @return [description]
     */

    function getStylesheet() {
      if (!_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](rootStylesheet)) {
        // TODO use createElementNS ?
        var e = document.createElement("style");
        e.type = "text/css";
        document.head.appendChild(e);
        rootStylesheet = e.sheet;
      }

      return rootStylesheet;
    }
    /**
     * [makeStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param selector  [description]
     * @return [description]
     */


    function makeStylesheet(selector) {
      var root = getStylesheet();
      var index = root.cssRules.length;
      root.insertRule(selector + "{}", index);
      return root.cssRules[index];
    }
    /**
     * Defines a class for a CSS rule.
     *
     * Can be used to dynamically add CSS to the document.
     */


    var StyleRule =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StyleRule, _super);
      /**
       * Constructor.
       *
       * @param selector  CSS selector
       * @param styles    An object of style attribute - value pairs
       */

      function StyleRule(selector, styles) {
        var _this = // TODO test this
        _super.call(this, function () {
          var root = getStylesheet(); // TODO a bit hacky

          var index = _Array__WEBPACK_IMPORTED_MODULE_4__["indexOf"](root.cssRules, _this._rule);

          if (index === -1) {
            throw new Error("Could not dispose StyleRule");
          } else {
            root.deleteRule(index);
          }
        }) || this;

        _this._rule = makeStylesheet(selector);

        _Object__WEBPACK_IMPORTED_MODULE_3__["each"](styles, function (key, value) {
          _this.setStyle(key, value);
        });

        return _this;
      }

      Object.defineProperty(StyleRule.prototype, "selector", {
        /**
         * @return CSS selector
         */
        get: function get() {
          return this._rule.selectorText;
        },

        /**
         * A CSS selector text.
         *
         * E.g.: `.myClass p`
         *
         * @param selector  CSS selector
         */
        set: function set(selector) {
          this._rule.selectorText = selector;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Sets the same style properties with browser-specific prefixes.
       *
       * @param name   Attribute name
       * @param value  Attribute value
       */

      StyleRule.prototype._setVendorPrefixName = function (name, value) {
        var style = this._rule.style;
        style.setProperty("-webkit-" + name, value, "");
        style.setProperty("-moz-" + name, value, "");
        style.setProperty("-ms-" + name, value, "");
        style.setProperty("-o-" + name, value, "");
        style.setProperty(name, value, "");
      };
      /**
       * Sets a value for specific style attribute.
       *
       * @param name   Attribute
       * @param value  Value
       */


      StyleRule.prototype.setStyle = function (name, value) {
        if (name === "transition") {
          this._setVendorPrefixName(name, value);
        } else {
          this._rule.style.setProperty(name, value, "");
        }
      };

      return StyleRule;
    }(_Disposer__WEBPACK_IMPORTED_MODULE_1__["Disposer"]);
    /**
     * An internal counter for unique style ids.
     *
     * @ignore Exclude from docs
     */


    var styleId = 0;
    /**
     * @ignore Exclude from docs
     * @todo Description
     */

    var StyleClass =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StyleClass, _super);
      /**
       * Constructor.
       *
       * @param styles  An object of style attribute - value pairs
       * @param name    Class name
       */

      function StyleClass(styles, name) {
        var _this = this;

        var className = !_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](name) // TODO generate the classname randomly
        ? "__style_" + ++styleId + "__" : name;
        _this = _super.call(this, "." + className, styles) || this;
        _this._className = className;
        return _this;
      }

      Object.defineProperty(StyleClass.prototype, "className", {
        /**
         * @return Class name
         */
        get: function get() {
          return this._className;
        },

        /**
         * Class name.
         *
         * @param name  Class name
         */
        set: function set(name) {
          this._className = name;
          this.selector = "." + name;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Converts the whole class to
       * @ignore Exclude from docs
       */

      StyleClass.prototype.toString = function () {
        return this._className;
      };

      return StyleClass;
    }(StyleRule);

    function ready(f) {
      if (document.readyState !== "loading") {
        f();
      } else {
        var listener_1 = function listener_1() {
          if (document.readyState !== "loading") {
            document.removeEventListener("readystatechange", listener_1);
            f();
          }
        };

        document.addEventListener("readystatechange", listener_1);
      }
    }
    /**
     * Returns a font fmaily name for the element (directly set or
     * computed/inherited).
     *
     * @ignore Exclude from docs
     * @param element  Element
     * @return Font family
     */


    function findFont(element) {
      // Check if element has styles set
      var font = getComputedStyle(element, "font-family");

      if (!font) {
        // Completely transparent. Look for a parent
        var parent_1 = element.parentElement || element.parentNode;

        if (parent_1) {
          return findFont(parent_1);
        } else {
          return undefined;
        }
      } else {
        return font;
      }
    }
    /**
     * Returns a font fmaily name for the element (directly set or
     * computed/inherited).
     *
     * @ignore Exclude from docs
     * @param element  Element
     * @return Font family
     */


    function findFontSize(element) {
      // Check if element has styles set
      var font = getComputedStyle(element, "font-size");

      if (!font) {
        // Completely transparent. Look for a parent
        var parent_2 = element.parentElement || element.parentNode;

        if (parent_2) {
          return findFontSize(parent_2);
        } else {
          return undefined;
        }
      } else {
        return font;
      }
    }
    /**
     * Checks whether element is not visible, whether directly or via its
     * ascendants.
     *
     * @param   element  Target element
     * @return           Hidden?
     */


    function isHidden(element) {
      return element.offsetParent === null;
    }
    /**
     * Checks wthether element is in the current viewport.
     *
     * @since 2.5.5
     * @param   el Element
     * @return     Within viewport?
     */


    function isElementInViewport(el, viewportTarget) {
      // Get position data of the element
      var rect = el.getBoundingClientRect(); // Should we measure against specific viewport element?

      if (viewportTarget) {
        // Check if viewport itself is visible
        if (!isElementInViewport(viewportTarget)) {
          return false;
        } // Check if element is visible within the viewport


        var viewportRect = viewportTarget.getBoundingClientRect();
        return rect.top >= 0 && rect.left >= 0 && rect.top <= viewportRect.top + viewportRect.height && rect.left <= viewportRect.left + viewportRect.width;
      }

      return rect.top >= 0 && rect.left >= 0 && rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth);
    } //# sourceMappingURL=DOM.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js ***!
    \*****************************************************************************/

  /*! exports provided: DictionaryDisposer, Dictionary, DictionaryTemplate */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsDictionaryJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DictionaryDisposer", function () {
      return DictionaryDisposer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Dictionary", function () {
      return Dictionary;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DictionaryTemplate", function () {
      return DictionaryTemplate;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Disposer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _Object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _Iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _String__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./String */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * A disposable dictionary, which when disposed itself will call `dispose()`
     * method on all its items.
     */


    var DictionaryDisposer =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DictionaryDisposer, _super);

      function DictionaryDisposer(dict) {
        var _this = this;

        var disposer = dict.events.on("removed", function (x) {
          x.oldValue.dispose();
        }, undefined, false);
        _this = _super.call(this, function () {
          disposer.dispose(); // TODO clear the dictionary ?

          _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](dict.iterator(), function (a) {
            var v = a[1];
            v.dispose();
          });
        }) || this;
        return _this;
      }

      return DictionaryDisposer;
    }(_Disposer__WEBPACK_IMPORTED_MODULE_1__["Disposer"]);
    /**
     * A Dictionary is collection where values of some type can be mapped to
     * string keys.
     *
     * You might call it an "associative list" or "associative array".
     */


    var Dictionary =
    /** @class */
    function () {
      /**
       * Constructor
       */
      function Dictionary() {
        /**
         * Event dispatcher.
         */
        this.events = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__["EventDispatcher"]();
        this._dictionary = {};
      }
      /**
       * Returns `true` if key exists in Dictionary.
       *
       * @param key  The key to search for
       * @return `true` if key exists, `false` if it doesn't
       */


      Dictionary.prototype.hasKey = function (key) {
        return _Object__WEBPACK_IMPORTED_MODULE_3__["hasKey"](this._dictionary, key);
      };
      /**
       * Returns the value for a specific key.
       *
       * @param key  The key to search for
       * @return Value for the key, or `undefined` if it doesn't exist
       */


      Dictionary.prototype.getKey = function (key) {
        return this._dictionary[key];
      };
      /**
       * Inserts value at specific key.
       *
       * Will thrown an exception if the key already exists in the dictionary.
       *
       * @param key    Key
       * @param value  Value
       */


      Dictionary.prototype.insertKey = function (key, value) {
        if (_Object__WEBPACK_IMPORTED_MODULE_3__["hasKey"](this._dictionary, key)) {
          throw new Error("Key " + key + " already exists in dictionary");
        } else {
          this._dictionary[key] = value;

          if (this.events.isEnabled("insertKey")) {
            this.events.dispatchImmediately("insertKey", {
              type: "insertKey",
              target: this,
              key: key,
              newValue: value
            });
          }
        }
      };
      /**
       * Adds or updates key/value into dictionary.
       *
       * If the key already exists, the old value will be overwritten.
       *
       * If the new value is exactly the same as the old value (using ===), it won't do anything.
       *
       * @param key    Key
       * @param value  Value
       */


      Dictionary.prototype.setKey = function (key, value) {
        if (_Object__WEBPACK_IMPORTED_MODULE_3__["hasKey"](this._dictionary, key)) {
          var oldValue = this._dictionary[key];

          if (oldValue !== value) {
            this._dictionary[key] = value;

            if (this.events.isEnabled("setKey")) {
              this.events.dispatchImmediately("setKey", {
                type: "setKey",
                target: this,
                key: key,
                oldValue: oldValue,
                newValue: value
              });
            }

            if (this.events.isEnabled("removed")) {
              this.events.dispatchImmediately("removed", {
                type: "removed",
                target: this,
                oldValue: oldValue
              });
            }
          }
        } else {
          this._dictionary[key] = value;

          if (this.events.isEnabled("insertKey")) {
            this.events.dispatchImmediately("insertKey", {
              type: "insertKey",
              target: this,
              key: key,
              newValue: value
            });
          }
        }
      };
      /**
       * Updates the value at specific `key` using custom function.
       *
       * Passes in current value into the function, and uses its output as a new
       * value.
       *
       * If the new value is exactly the same as the old value (using ===), it won't do anything.
       *
       * @ignore Exclude from docs
       * @param key  Key
       * @param fn   Function to transform the value
       */


      Dictionary.prototype.updateKey = function (key, fn) {
        if (_Object__WEBPACK_IMPORTED_MODULE_3__["hasKey"](this._dictionary, key)) {
          var oldValue = this._dictionary[key];
          var newValue = fn(oldValue);

          if (oldValue !== newValue) {
            this._dictionary[key] = newValue;

            if (this.events.isEnabled("setKey")) {
              this.events.dispatchImmediately("setKey", {
                type: "setKey",
                target: this,
                key: key,
                oldValue: oldValue,
                newValue: newValue
              });
            }

            if (this.events.isEnabled("removed")) {
              this.events.dispatchImmediately("removed", {
                type: "removed",
                target: this,
                oldValue: oldValue
              });
            }
          }
        } else {
          throw new Error("Key " + key + " doesn't exist in dictionary");
        }
      };
      /**
       * Removes value at specific `key` from dictionary.
       *
       * @param key  Key to remove
       */


      Dictionary.prototype.removeKey = function (key) {
        if (_Object__WEBPACK_IMPORTED_MODULE_3__["hasKey"](this._dictionary, key)) {
          var oldValue = this._dictionary[key];
          delete this._dictionary[key];

          if (this.events.isEnabled("removeKey")) {
            this.events.dispatchImmediately("removeKey", {
              type: "removeKey",
              target: this,
              key: key,
              oldValue: oldValue
            });
          }

          if (this.events.isEnabled("removed")) {
            this.events.dispatchImmediately("removed", {
              type: "removed",
              target: this,
              oldValue: oldValue
            });
          }
        }
      };
      /**
       * [insertKeyIfEmpty description]
       *
       * @ignore Exclude from docs
       * @todo description
       * @param key      [description]
       * @param ifEmpty  [description]
       * @return [description]
       */


      Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {
        if (!this.hasKey(key)) {
          this.insertKey(key, ifEmpty());
        }

        return this.getKey(key);
      };
      /**
       * Removes all items from the dictionary.
       */


      Dictionary.prototype.clear = function () {
        var _this = this; // TODO dispatch this after clear


        if (this.events.isEnabled("removed")) {
          _Object__WEBPACK_IMPORTED_MODULE_3__["each"](this._dictionary, function (key, value) {
            _this.events.dispatchImmediately("removed", {
              type: "removed",
              target: _this,
              oldValue: value
            });
          });
        }

        this._dictionary = {};

        if (this.events.isEnabled("cleared")) {
          this.events.dispatchImmediately("cleared", {
            type: "cleared",
            target: this
          });
        }
      };
      /**
       * Copies items from another Dictionary.
       *
       * @param source  A Dictionary to copy items from
       */


      Dictionary.prototype.copyFrom = function (source) {
        var _this = this;

        _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](source.iterator(), function (a) {
          // TODO fix this type cast
          _this.setKey(a[0], a[1]);
        });
      };
      /**
       * Returns an interator that can be used to iterate through all items in
       * the dictionary.
       *
       * @return Iterator
       */


      Dictionary.prototype.iterator = function () {
        // @todo fix this type after the Iterator bug is fixed
        // https://github.com/Microsoft/TypeScript/issues/16730
        return _Object__WEBPACK_IMPORTED_MODULE_3__["entries"](this._dictionary);
      };
      /**
       * Returns an ES6 iterator for the keys/values of the dictionary.
       */


      Dictionary.prototype[Symbol.iterator] = function () {
        var _a, _b, _i, key;

        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_c) {
          switch (_c.label) {
            case 0:
              _a = [];

              for (_b in this._dictionary) _a.push(_b);

              _i = 0;
              _c.label = 1;

            case 1:
              if (!(_i < _a.length)) return [3
              /*break*/
              , 4];
              key = _a[_i];
              if (!_Object__WEBPACK_IMPORTED_MODULE_3__["hasKey"](this._dictionary, key)) return [3
              /*break*/
              , 3];
              return [4
              /*yield*/
              , [key, this._dictionary[key]]];

            case 2:
              _c.sent();

              _c.label = 3;

            case 3:
              _i++;
              return [3
              /*break*/
              , 1];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      };
      /**
       * Calls `f` for each key/value in the dictionary.
       */


      Dictionary.prototype.each = function (f) {
        _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](this.iterator(), function (_a) {
          var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__read"])(_a, 2),
              key = _b[0],
              value = _b[1];

          return f(key, value);
        });
      };
      /**
       * Returns an iterator that can be used to iterate through all items in
       * the dictionary, ordered by key.
       *
       * @ignore Exclude from docs
       * @return Iterator
       */


      Dictionary.prototype.sortedIterator = function () {
        return _Iterator__WEBPACK_IMPORTED_MODULE_4__["sort"](this.iterator(), function (x, y) {
          return _String__WEBPACK_IMPORTED_MODULE_5__["order"](x[0], y[0]);
        });
      };

      return Dictionary;
    }();
    /**
     * A version of a [[Dictionary]] that has a "template".
     *
     * A template is an instance of an object, that can be used to create new
     * elements in the list without actually needing to create instances for those.
     *
     * When new element is created in the list, e.g. by calling its `create()`
     * method, an exact copy of the element is created (including properties and
     * other attributes), inserted into the list and returned.
     */


    var DictionaryTemplate =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DictionaryTemplate, _super);
      /**
       * Constructor
       *
       * @param t Template object
       */

      function DictionaryTemplate(t) {
        var _this = _super.call(this) || this;

        _this.template = t;
        return _this;
      }

      Object.defineProperty(DictionaryTemplate.prototype, "template", {
        /**
         * @return Template object
         */
        get: function get() {
          return this._template;
        },

        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param v  Template object
         */
        set: function set(v) {
          v.isTemplate = true;
          this._template = v;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all elements from other dictionary.
       *
       * @param source  Source dictionary
       */

      DictionaryTemplate.prototype.copyFrom = function (source) {
        var _this = this;

        _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](source.iterator(), function (a) {
          // TODO fix this type cast
          // TODO why does this need to clone ?
          _this.setKey(a[0], a[1].clone());
        });
      };
      /**
       * Instantiates a new object of the specified type, adds it to specified
       * `key` in the dictionary, and returns it.
       *
       * @param make  Item type to use. Will use the default type for the dictionary if not specified.
       * @return      Newly created item
       */


      DictionaryTemplate.prototype.create = function (key) {
        var _this = this;

        return this.insertKeyIfEmpty(key, function () {
          return _this.template.clone();
        });
      };

      return DictionaryTemplate;
    }(Dictionary); //# sourceMappingURL=Dictionary.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js ***!
    \***************************************************************************/

  /*! exports provided: Disposer, MultiDisposer, MutableValueDisposer, CounterDisposer */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsDisposerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Disposer", function () {
      return Disposer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MultiDisposer", function () {
      return MultiDisposer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MutableValueDisposer", function () {
      return MutableValueDisposer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CounterDisposer", function () {
      return CounterDisposer;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * A base class for disposable objects.
     *
     * @ignore Exclude from docs
     */


    var Disposer =
    /** @class */
    function () {
      /**
       * Constructor.
       *
       * @param dispose  Function that disposes object
       */
      function Disposer(dispose) {
        this._disposed = false;
        this._dispose = dispose;
      }
      /**
       * Checks if object is disposed.
       *
       * @return Disposed?
       */


      Disposer.prototype.isDisposed = function () {
        return this._disposed;
      };
      /**
       * Disposes the object.
       */


      Disposer.prototype.dispose = function () {
        if (!this._disposed) {
          this._disposed = true;

          this._dispose();
        }
      };

      return Disposer;
    }();
    /**
     * A collection of related disposers that can be disposed in one go.
     *
     * @ignore Exclude from docs
     */


    var MultiDisposer =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MultiDisposer, _super);

      function MultiDisposer(disposers) {
        return _super.call(this, function () {
          _Array__WEBPACK_IMPORTED_MODULE_1__["each"](disposers, function (x) {
            x.dispose();
          });
        }) || this;
      }

      return MultiDisposer;
    }(Disposer);
    /**
     * A special kind of Disposer that has attached value set.
     *
     * If a new value is set using `set()` method, the old disposer value is
     * disposed.
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    var MutableValueDisposer =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MutableValueDisposer, _super);
      /**
       * Constructor.
       */

      function MutableValueDisposer() {
        var _this = _super.call(this, function () {
          if (_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](_this._disposer)) {
            _this._disposer.dispose();

            _this._disposer = undefined;
          }
        }) || this;

        return _this;
      }
      /**
       * Returns current value.
       *
       * @return Value
       */


      MutableValueDisposer.prototype.get = function () {
        return this._value;
      };
      /**
       * Sets value and disposes previous disposer if it was set.
       *
       * @param value     New value
       * @param disposer  Disposer
       */


      MutableValueDisposer.prototype.set = function (value, disposer) {
        if (_Type__WEBPACK_IMPORTED_MODULE_2__["hasValue"](this._disposer)) {
          this._disposer.dispose();
        }

        this._disposer = disposer;
        this._value = value;
      };
      /**
       * Resets the disposer value.
       */


      MutableValueDisposer.prototype.reset = function () {
        this.set(undefined, undefined);
      };

      return MutableValueDisposer;
    }(Disposer);
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    var CounterDisposer =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CounterDisposer, _super);

      function CounterDisposer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_counter description]
         *
         * @todo Description
         */


        _this._counter = 0;
        return _this;
      }
      /**
       * [increment description]
       *
       * @todo Description
       */


      CounterDisposer.prototype.increment = function () {
        var _this = this; // TODO throw an error if it is disposed


        ++this._counter; // TODO make this more efficient

        return new Disposer(function () {
          --_this._counter;

          if (_this._counter === 0) {
            _this.dispose();
          }
        });
      };

      return CounterDisposer;
    }(Disposer); //# sourceMappingURL=Disposer.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js ***!
    \***********************************************************************/

  /*! exports provided: linear, quadIn, quadOut, quadInOut, polyIn, polyOut, polyInOut, polyIn3, polyOut3, polyInOut3, expIn, expOut, expInOut, sinIn, sinOut, sinInOut, cubicIn, cubicOut, cubicInOut, circleIn, circleOut, circleInOut, bounceIn, bounceOut, bounceInOut, elasticIn, elasticOut, elasticInOut */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsEaseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "linear", function () {
      return linear;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "quadIn", function () {
      return quadIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "quadOut", function () {
      return quadOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "quadInOut", function () {
      return quadInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyIn", function () {
      return polyIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyOut", function () {
      return polyOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyInOut", function () {
      return polyInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyIn3", function () {
      return polyIn3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyOut3", function () {
      return polyOut3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "polyInOut3", function () {
      return polyInOut3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "expIn", function () {
      return expIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "expOut", function () {
      return expOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "expInOut", function () {
      return expInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sinIn", function () {
      return sinIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sinOut", function () {
      return sinOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sinInOut", function () {
      return sinInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cubicIn", function () {
      return cubicIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cubicOut", function () {
      return cubicOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cubicInOut", function () {
      return cubicInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "circleIn", function () {
      return circleIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "circleOut", function () {
      return circleOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "circleInOut", function () {
      return circleInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bounceIn", function () {
      return bounceIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bounceOut", function () {
      return bounceOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bounceInOut", function () {
      return bounceInOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "elasticIn", function () {
      return elasticIn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "elasticOut", function () {
      return elasticOut;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "elasticInOut", function () {
      return elasticInOut;
    });
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * A collection of easing functions
     *
     * Parts of this collection are taken from D3.js library (https://d3js.org/)
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * The functions below are from D3.js library (https://d3js.org/)
     *
     * ----------------------------------------------------------------------------
     * Copyright 2017 Mike Bostock
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice,
     *    this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *    this list of conditions and the following disclaimer in the documentation
     *    and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its
     *    contributors may be used to endorse or promote products derived from this
     *    software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     * ----------------------------------------------------------------------------
     * @hidden
     */

    /**
     * ============================================================================
     * LINEAR FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Easing function: "linear".
     */


    function linear(t) {
      return +t;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.linear"] = linear;
    /**
     * Easing function: "quadIn".
     */

    function quadIn(t) {
      return t * t;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.quadIn"] = quadIn;
    /**
     * Easing function: "quadOut".
     */

    function quadOut(t) {
      return t * (2 - t);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.quadOut"] = quadOut;
    /**
     * Easing function: "quadInOut".
     */

    function quadInOut(t) {
      t *= 2;
      return (t <= 1 ? t * t : --t * (2 - t) + 1) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.quadInOut"] = quadInOut;
    /**
     * Easing function: "polyIn".
     */

    function polyIn(t, e) {
      return Math.pow(t, e);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.polyIn"] = polyIn;
    /**
     * Easing function: "polyOut".
     */

    function polyOut(t, e) {
      return 1 - Math.pow(1 - t, e);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.polyOut"] = polyOut;
    /**
     * Easing function: "polyInOut".
     */

    function polyInOut(t, e) {
      t *= 2;
      return (t <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.polyInOut"] = polyInOut;
    /**
     * Easing function: "polyIn3".
     */

    function polyIn3(t) {
      return polyIn(t, 3);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.polyIn3"] = polyIn3;
    /**
     * Easing function: "polyOut3".
     */

    function polyOut3(t) {
      return polyOut(t, 3);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.polyOut3"] = polyOut3;
    /**
     * Easing function: "polyInOut3".
     */

    function polyInOut3(t) {
      return polyInOut(t, 3);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.polyInOut3"] = polyInOut3;
    /**
     * ============================================================================
     * EXPONENTIAL FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Easing function: "expIn".
     */

    function expIn(t) {
      return Math.pow(2, 10 * t - 10);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.expIn"] = expIn;
    /**
     * Easing function: "expOut".
     */

    function expOut(t) {
      return 1 - Math.pow(2, -10 * t);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.expOut"] = expOut;
    /**
     * Easing function: "expInOut".
     */

    function expInOut(t) {
      t *= 2;
      return (t <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.expInOut"] = expInOut;
    /**
     * ============================================================================
     * SINE FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Easing function: "sinIn".
     */

    function sinIn(t) {
      return 1 - Math.cos(t * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["HALFPI"]);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.sinIn"] = sinIn;
    /**
     * Easing function: "sinOut".
     */

    function sinOut(t) {
      return Math.sin(t * _utils_Math__WEBPACK_IMPORTED_MODULE_0__["HALFPI"]);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.sinOut"] = sinOut;
    /**
     * Easing function: "sinInOut".
     */

    function sinInOut(t) {
      return (1 - Math.cos(_utils_Math__WEBPACK_IMPORTED_MODULE_0__["PI"] * t)) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.sinInOut"] = sinInOut;
    /**
     * ============================================================================
     * CUBIC FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Easing function: "cubicIn".
     */

    function cubicIn(t) {
      return t * t * t;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.cubicIn"] = cubicIn;
    /**
     * Easing function: "cubicOut".
     */

    function cubicOut(t) {
      return --t * t * t + 1;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.cubicOut"] = cubicOut;
    /**
     * Easing function: "cubicInOut".
     */

    function cubicInOut(t) {
      t *= 2;
      return (t <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.cubicInOut"] = cubicInOut;
    /**
     * ============================================================================
     * CIRCLE FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Easing function: "circleIn".
     */

    function circleIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.circleIn"] = circleIn;
    /**
     * Easing function: "circleOut".
     */

    function circleOut(t) {
      return Math.sqrt(1 - --t * t);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.circleOut"] = circleOut;
    /**
     * Easing function: "circleInOut".
     */

    function circleInOut(t) {
      t *= 2;
      return (t <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.circleInOut"] = circleInOut;
    /**
     * ============================================================================
     * BOUNCE FUNCTIONS
     * ============================================================================
     * @hidden
     */

    var b1 = 4 / 11,
        b2 = 6 / 11,
        b3 = 8 / 11,
        b4 = 3 / 4,
        b5 = 9 / 11,
        b6 = 10 / 11,
        b7 = 15 / 16,
        b8 = 21 / 22,
        b9 = 63 / 64,
        b0 = 1 / b1 / b1;
    /**
     * Easing function: "bounceIn".
     */

    function bounceIn(t) {
      return 1 - bounceOut(1 - t);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.bounceIn"] = bounceIn;
    /**
     * Easing function: "bounceOut".
     */

    function bounceOut(t) {
      t = +t;
      return t < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.bounceOut"] = bounceOut;
    /**
     * Easing function: "bounceInOut".
     */

    function bounceInOut(t) {
      t *= 2;
      return (t <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.bounceInOut"] = bounceInOut;
    /**
     * ============================================================================
     * ELASTIC FUNCTIONS
     * ============================================================================
     * @hidden
     */

    var tau = 2 * Math.PI;
    var amplitude = 1;
    var period = 0.3 / tau;
    var s = Math.asin(1 / amplitude) * period;
    /**
     * Easing function: "elasticIn".
     *
     * @function elasticIn
     * @param a  Amplitude
     * @param p  period
     */

    function elasticIn(t) {
      return amplitude * Math.pow(2, 10 * --t) * Math.sin((s - t) / period);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.elasticIn"] = elasticIn;
    /**
     * Easing function: "elasticOut".
     *
     * @function elasticOut
     * @param a  Amplitude
     * @param p  period
     */

    function elasticOut(t) {
      return 1 - amplitude * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / period);
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.elasticOut"] = elasticOut;
    /**
     * Easing function: "elasticInOut".
     *
     * @function elasticInOut
     * @param a  Amplitude
     * @param p  period
     */

    function elasticInOut(t) {
      t = t * 2 - 1;
      return (t < 0 ? amplitude * Math.pow(2, 10 * t) * Math.sin((s - t) / period) : 2 - amplitude * Math.pow(2, -10 * t) * Math.sin((s + t) / period)) / 2;
    }

    _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["ease.elasticInOut"] = elasticInOut; //# sourceMappingURL=Ease.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js ***!
    \**********************************************************************************/

  /*! exports provided: EventDispatcher, TargetedEventDispatcher */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsEventDispatcherJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EventDispatcher", function () {
      return EventDispatcher;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TargetedEventDispatcher", function () {
      return TargetedEventDispatcher;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Disposer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _AsyncPending__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./AsyncPending */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Event Dispatcher module is used for registering listeners and dispatching
     * events across amCharts system.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /*export interface IEventDispatcher<T> {
        isDisposed(): boolean;
        dispose(): void;
        hasListeners(): boolean;
        enable(): void;
        disable(): void;
        enableType<Key extends keyof T>(type: Key): void;
        disableType<Key extends keyof T>(type: Key, amount?: number): void;
        isEnabled<Key extends keyof T>(type: Key): boolean;
        has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;
        dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;
        dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;
        onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;
        on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;
        once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;
        off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;
        off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;
        copyFrom(source: this): void;
    }*/

    /**
     * Universal Event Dispatcher.
     *
     * @important
     */


    var EventDispatcher =
    /** @class */
    function () {
      /**
       * Constructor
       */
      function EventDispatcher() {
        this._listeners = [];
        this._killed = [];
        this._disabled = {};
        this._iterating = 0;
        this._enabled = true;
        this._disposed = false;
      }
      /**
       * Returns if this object has been already disposed.
       *
       * @return Disposed?
       */


      EventDispatcher.prototype.isDisposed = function () {
        return this._disposed;
      };
      /**
       * Dispose (destroy) this object.
       */


      EventDispatcher.prototype.dispose = function () {
        if (!this._disposed) {
          this._disposed = true;
          var a = this._listeners;
          this._iterating = 1;
          this._listeners = null;
          this._disabled = null;

          try {
            _Array__WEBPACK_IMPORTED_MODULE_2__["each"](a, function (x) {
              x.disposer.dispose();
            });
          } finally {
            this._killed = null;
            this._iterating = null;
          }
        }
      };
      /**
       * Checks if this particular event dispatcher has any listeners set.
       *
       * @return Has listeners?
       */


      EventDispatcher.prototype.hasListeners = function () {
        return this._listeners.length !== 0;
      };
      /**
       * Checks if this particular event dispatcher has any particular listeners set.
       *
       * @return Has particular event listeners?
       */


      EventDispatcher.prototype.hasListenersByType = function (type) {
        return _Array__WEBPACK_IMPORTED_MODULE_2__["any"](this._listeners, function (x) {
          return (x.type === null || x.type === type) && !x.killed;
        });
      };
      /**
       * Enable dispatching of events if they were previously disabled by
       * `disable()`.
       */


      EventDispatcher.prototype.enable = function () {
        this._enabled = true;
      };
      /**
       * Disable dispatching of events until re-enabled by `enable()`.
       */


      EventDispatcher.prototype.disable = function () {
        this._enabled = false;
      };
      /**
       * Enable dispatching particular event, if it was disabled before by
       * `disableType()`.
       *
       * @param type Event type
       */


      EventDispatcher.prototype.enableType = function (type) {
        delete this._disabled[type];
      };
      /**
       * Disable dispatching of events for a certain event type.
       *
       * Optionally, can set how many dispatches to skip before automatically
       * re-enabling the dispatching.
       *
       * @param type    Event type
       * @param amount  Number of event dispatches to skip
       */


      EventDispatcher.prototype.disableType = function (type, amount) {
        if (amount === void 0) {
          amount = Infinity;
        }

        this._disabled[type] = amount;
      };
      /**
       * Removes listener from dispatcher.
       *
       * Will throw an exception if such listener does not exists.
       *
       * @param listener Listener to remove
       */


      EventDispatcher.prototype._removeListener = function (listener) {
        if (this._iterating === 0) {
          var index = this._listeners.indexOf(listener);

          if (index === -1) {
            throw new Error("Invalid state: could not remove listener");
          }

          this._listeners.splice(index, 1);
        } else {
          this._killed.push(listener);
        }
      };
      /**
       * Removes existing listener by certain parameters.
       *
       * @param once         Listener's once setting
       * @param type         Listener's type
       * @param callback     Callback function
       * @param context      Callback context
       */


      EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {
        if (this._disposed) {
          throw new Error("EventDispatcher is disposed");
        }

        this._eachListener(function (info) {
          if (info.once === once && // TODO is this correct ?
          info.type === type && (callback == null || info.callback === callback) && info.context === context) {
            info.disposer.dispose();
          }
        });
      };
      /**
       * Checks if dispatching for particular event type is enabled.
       *
       * @param type  Event type
       * @return Enabled?
       */


      EventDispatcher.prototype.isEnabled = function (type) {
        if (this._disposed) {
          throw new Error("EventDispatcher is disposed");
        } // TODO is this check correct ?


        return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;
      };
      /**
       * Checks if there's already a listener with specific parameters.
       *
       * @param type      Listener's type
       * @param callback  Callback function
       * @param context   Callback context
       * @return Has listener?
       */


      EventDispatcher.prototype.has = function (type, callback, context) {
        var index = _Array__WEBPACK_IMPORTED_MODULE_2__["findIndex"](this._listeners, function (info) {
          return info.once !== true && // Ignoring "once" listeners
          info.type === type && (callback == null || info.callback === callback) && info.context === context;
        });

        return index !== -1;
      };
      /**
       * Checks whether event of the particular type should be dispatched.
       *
       * @param type  Event type
       * @return Dispatch?
       */


      EventDispatcher.prototype._shouldDispatch = function (type) {
        if (this._disposed) {
          throw new Error("EventDispatcher is disposed");
        }

        var count = this._disabled[type];

        if (!_Type__WEBPACK_IMPORTED_MODULE_4__["isNumber"](count)) {
          return this._enabled;
        } else {
          if (count <= 1) {
            delete this._disabled[type];
          } else {
            --this._disabled[type];
          }

          return false;
        }
      };
      /**
       * [_eachListener description]
       *
       * All of this extra code is needed when a listener is removed while iterating
       *
       * @todo Description
       * @param fn [description]
       */


      EventDispatcher.prototype._eachListener = function (fn) {
        var _this = this;

        ++this._iterating;

        try {
          _Array__WEBPACK_IMPORTED_MODULE_2__["each"](this._listeners, fn);
        } finally {
          --this._iterating; // TODO should this be inside or outside the finally ?

          if (this._iterating === 0 && this._killed.length !== 0) {
            // Remove killed listeners
            _Array__WEBPACK_IMPORTED_MODULE_2__["each"](this._killed, function (killed) {
              _this._removeListener(killed);
            });

            this._killed.length = 0;
          }
        }
      };
      /**
       * Dispatches an event immediately without waiting for next cycle.
       *
       * @param type   Event type
       * @param event  Event object
       * @todo automatically add in type and target properties if they are missing
       */


      EventDispatcher.prototype.dispatchImmediately = function (type, event) {
        if (this._shouldDispatch(type)) {
          // TODO check if it's faster to use an object of listeners rather than a single big array
          // TODO if the function throws, maybe it should keep going ?
          this._eachListener(function (listener) {
            if (!listener.killed && (listener.type === null || listener.type === type)) {
              listener.dispatch(type, event);
            }
          });
        }
      };
      /**
       * Shelves the event to be dispatched within next update cycle.
       *
       * @param type   Event type
       * @param event  Event object
       * @todo automatically add in type and target properties if they are missing
       */


      EventDispatcher.prototype.dispatch = function (type, event) {
        if (this._shouldDispatch(type)) {
          this._eachListener(function (listener) {
            // TODO check if it's faster to use an object of listeners rather than a single big array
            if (!listener.killed && (listener.type === null || listener.type === type)) {
              // TODO if the function throws, maybe it should keep going ?
              // TODO dispatch during the update cycle, rather than using whenIdle
              _AsyncPending__WEBPACK_IMPORTED_MODULE_3__["whenIdle"](function () {
                if (!listener.killed) {
                  listener.dispatch(type, event);
                }
              });
            }
          });
        }
      };
      /**
       * Creates, catalogs and returns an [[EventListener]].
       *
       * Event listener can be disposed.
       *
       * @param once         Listener's once setting
       * @param type         Listener's type
       * @param callback     Callback function
       * @param context      Callback context
       * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
       * @param dispatch
       * @returns An event listener
       */


      EventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {
        var _this = this;

        if (this._disposed) {
          throw new Error("EventDispatcher is disposed");
        }

        this._removeExistingListener(once, type, callback, context);

        var info = {
          type: type,
          callback: callback,
          context: context,
          shouldClone: shouldClone,
          dispatch: dispatch,
          killed: false,
          once: once,
          disposer: new _Disposer__WEBPACK_IMPORTED_MODULE_1__["Disposer"](function () {
            info.killed = true;

            _this._removeListener(info);
          })
        };

        this._listeners.push(info);

        return info;
      };
      /**
       * Creates an event listener to be invoked on **any** event.
       *
       * @param callback     Callback function
       * @param context      Callback context
       * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
       * @returns A disposable event listener
       * @todo what if `listen` is called on the same function twice ?
       */


      EventDispatcher.prototype.onAll = function (callback, context, shouldClone) {
        if (shouldClone === void 0) {
          shouldClone = true;
        }

        return this._on(false, null, callback, context, shouldClone, function (type, event) {
          return callback.call(context, type, event);
        }).disposer;
      };
      /**
       * Creates an event listener to be invoked on a specific event type.
       *
       * ```TypeScript
       * series.events.on("hidden", (ev) => {
       *   console.log("Series hidden: " + ev.target.name);
       * }, this);
       * ```
       * ```JavaScript
       * series.events.on("hidden", function(ev) {
       *   console.log("Series hidden: " + ev.target.name);
       * }, this);
       * ```
       * ```JSON
       * {
       *   // ...
       *   "series": [{
       *     // ...
       *     "events": {
       *     	"hidden": function(ev) {
       *     	  console.log("Series hidden: " + ev.target.name);
       *     	}
       *     }
       *   }]
       * }
       * ```
       *
       * The above will invoke our custom event handler whenever series we put
       * event on is hidden.
       *
       * @param type         Listener's type
       * @param callback     Callback function
       * @param context      Callback context
       * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
       * @returns A disposable event listener
       * @todo what if `listen` is called on the same function twice ?
       */


      EventDispatcher.prototype.on = function (type, callback, context, shouldClone) {
        if (shouldClone === void 0) {
          shouldClone = true;
        }

        return this._on(false, type, callback, context, shouldClone, function (type, event) {
          return callback.call(context, event);
        }).disposer;
      };
      /**
       * Creates an event listener to be invoked on a specific event type once.
       *
       * Once the event listener is invoked, it is automatically disposed.
       *
       * ```TypeScript
       * series.events.on("hidden", (ev) => {
       *   console.log("Series hidden: " + ev.target.name);
       * }, this);
       * ```
       * ```JavaScript
       * series.events.on("hidden", function(ev) {
       *   console.log("Series hidden: " + ev.target.name);
       * }, this);
       * ```
       * ```JSON
       * {
       *   // ...
       *   "series": [{
       *     // ...
       *     "events": {
       *     	"hidden": function(ev) {
       *     	  console.log("Series hidden: " + ev.target.name);
       *     	}
       *     }
       *   }]
       * }
       * ```
       *
       * The above will invoke our custom event handler the first time series we
       * put event on is hidden.
       *
       * @param type         Listener's type
       * @param callback     Callback function
       * @param context      Callback context
       * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
       * @returns A disposable event listener
       * @todo what if `listen` is called on the same function twice ?
       */


      EventDispatcher.prototype.once = function (type, callback, context, shouldClone) {
        if (shouldClone === void 0) {
          shouldClone = true;
        }

        var x = this._on(true, type, callback, context, shouldClone, function (type, event) {
          x.disposer.dispose();
          callback.call(context, event);
        }); // TODO maybe this should return a different Disposer ?


        return x.disposer;
      };
      /**
       * Removes the event listener with specific parameters.
       *
       * @param type         Listener's type
       * @param callback     Callback function
       * @param context      Callback context
       */


      EventDispatcher.prototype.off = function (type, callback, context) {
        this._removeExistingListener(false, type, callback, context);
      };
      /**
       * Copies all dispatcher parameters, including listeners, from another event
       * dispatcher.
       *
       * @param source Source event dispatcher
       */


      EventDispatcher.prototype.copyFrom = function (source) {
        var _this = this;

        if (this._disposed) {
          throw new Error("EventDispatcher is disposed");
        }

        if (source === this) {
          throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }

        _Array__WEBPACK_IMPORTED_MODULE_2__["each"](source._listeners, function (x) {
          // TODO is this correct ?
          if (!x.killed && x.shouldClone) {
            if (x.type === null) {
              _this.onAll(x.callback, x.context);
            } else if (x.once) {
              _this.once(x.type, x.callback, x.context);
            } else {
              _this.on(x.type, x.callback, x.context);
            }
          }
        });
      };

      return EventDispatcher;
    }();
    /**
     * A version of the [[EventDispatcher]] that dispatches events for a specific
     * target object.
     *
     * @important
     */


    var TargetedEventDispatcher =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TargetedEventDispatcher, _super);
      /**
       * Constructor
       *
       * @param target Event dispatcher target
       */

      function TargetedEventDispatcher(target) {
        var _this = _super.call(this) || this;

        _this.target = target;
        return _this;
      }
      /**
       * Copies all dispatcher parameters, including listeners, from another event
       * dispatcher.
       *
       * @param source Source event dispatcher
       */


      TargetedEventDispatcher.prototype.copyFrom = function (source) {
        var _this = this;

        if (this._disposed) {
          throw new Error("EventDispatcher is disposed");
        }

        if (source === this) {
          throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
        }

        _Array__WEBPACK_IMPORTED_MODULE_2__["each"](source._listeners, function (x) {
          // TODO very hacky
          if (x.context === source.target) {
            return;
          } // TODO is this correct ?


          if (!x.killed && x.shouldClone) {
            if (x.type === null) {
              _this.onAll(x.callback, x.context);
            } else if (x.once) {
              _this.once(x.type, x.callback, x.context);
            } else {
              _this.on(x.type, x.callback, x.context);
            }
          }
        });
      };

      return TargetedEventDispatcher;
    }(EventDispatcher); //# sourceMappingURL=EventDispatcher.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Instance.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Instance.js ***!
    \***************************************************************************/

  /*! exports provided: disposeAllCharts, addToQueue, removeFromQueue, viewPortHandler, queueHandler, create, createFromConfig, useTheme, unuseTheme, unuseAllThemes, addLicense */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsInstanceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "disposeAllCharts", function () {
      return disposeAllCharts;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "addToQueue", function () {
      return addToQueue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "removeFromQueue", function () {
      return removeFromQueue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "viewPortHandler", function () {
      return viewPortHandler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "queueHandler", function () {
      return queueHandler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "create", function () {
      return create;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "createFromConfig", function () {
      return createFromConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "useTheme", function () {
      return useTheme;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "unuseTheme", function () {
      return unuseTheme;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "unuseAllThemes", function () {
      return unuseAllThemes;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "addLicense", function () {
      return addLicense;
    });
    /* harmony import */


    var _System__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony import */


    var _Component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Component */
    "./node_modules/@amcharts/amcharts4/.internal/core/Component.js");
    /* harmony import */


    var _rendering_Paper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../rendering/Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony import */


    var _rendering_SVGContainer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/SVGContainer */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js");
    /* harmony import */


    var _rendering_filters_FocusFilter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../rendering/filters/FocusFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/FocusFilter.js");
    /* harmony import */


    var _elements_Preloader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../elements/Preloader */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Preloader.js");
    /* harmony import */


    var _elements_AmChartsLogo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../elements/AmChartsLogo */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/AmChartsLogo.js");
    /* harmony import */


    var _elements_Tooltip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../elements/Tooltip */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js");
    /* harmony import */


    var _utils_Disposer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _Percent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _DOM__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony import */


    var _Utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ./Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony import */


    var _Log__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ./Log */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Log.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * INSTANTIATION FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Creates all HTML and SVG containers needed for the chart instance, as well
     * as the new [[Sprite]] (as specified in `classType` parameter).
     *
     * @param htmlElement  A container to creat elements in
     * @param classType    A class definition of the new element to create
     * @return Newly-created Sprite object
     */


    function createChild(htmlElement, classType) {
      var htmlContainer = _DOM__WEBPACK_IMPORTED_MODULE_15__["getElement"](htmlElement);

      if (htmlContainer) {
        htmlContainer.innerHTML = ""; //htmlContainer.style.overflow = "hidden";

        var svgDiv_1 = new _rendering_SVGContainer__WEBPACK_IMPORTED_MODULE_5__["SVGContainer"](htmlContainer);
        var paper = new _rendering_Paper__WEBPACK_IMPORTED_MODULE_4__["Paper"](svgDiv_1.SVGContainer, "svg-" + (_rendering_SVGContainer__WEBPACK_IMPORTED_MODULE_5__["svgContainers"].length - 1)); // the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside
        // svg area - this is often needed when working with small charts.
        // main container which holds content container and tooltips container

        var container_1 = new _Container__WEBPACK_IMPORTED_MODULE_2__["Container"]();
        container_1.htmlContainer = htmlContainer;
        container_1.svgContainer = svgDiv_1;
        container_1.width = Object(_Percent__WEBPACK_IMPORTED_MODULE_11__["percent"])(100);
        container_1.height = Object(_Percent__WEBPACK_IMPORTED_MODULE_11__["percent"])(100);
        container_1.background.fillOpacity = 0;
        container_1.paper = paper;
        paper.append(container_1.group); // this is set from parent container, but this one doesn't have, so do it manually.

        container_1.relativeWidth = 1;
        container_1.relativeHeight = 1;
        svgDiv_1.container = container_1; // creating classType instance

        var sprite_1 = container_1.createChild(classType);
        sprite_1.topParent = container_1;
        var uid = sprite_1.uid;
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].invalidSprites[uid] = [];
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].invalidDatas[uid] = [];
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].invalidPositions[uid] = [];
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].invalidLayouts[uid] = [];
        container_1.baseId = uid;
        sprite_1.isBaseSprite = true;
        sprite_1.focusFilter = new _rendering_filters_FocusFilter__WEBPACK_IMPORTED_MODULE_6__["FocusFilter"]();

        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].baseSprites.push(sprite_1);

        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].baseSpritesByUid[uid] = sprite_1;
        sprite_1.maskRectangle = {
          x: 0,
          y: 0,
          width: Math.max(svgDiv_1.width, 0),
          height: Math.max(svgDiv_1.height, 0)
        }; // this solves issues with display:none, as all children are measured as 0x0

        container_1.events.on("maxsizechanged", function (event) {
          if (event.previousWidth == 0 || event.previousHeight == 0) {
            container_1.deepInvalidate();
          }

          if (sprite_1.maskRectangle) {
            sprite_1.maskRectangle = {
              x: 0,
              y: 0,
              width: Math.max(svgDiv_1.width, 0),
              height: Math.max(svgDiv_1.height, 0)
            };
          }
        });
        var loopTimer_1 = null; // Checks to see whether the chart was properly disposed or not

        var loop_1 = function loop_1() {
          if (!sprite_1.isDisposed()) {
            if (_DOM__WEBPACK_IMPORTED_MODULE_15__["getRoot"](sprite_1.dom) == null) {
              _Log__WEBPACK_IMPORTED_MODULE_17__["warn"]("Chart was not disposed", sprite_1.uid);

              loopTimer_1 = null;
            } else {
              loopTimer_1 = window.setTimeout(loop_1, 1000);
            }
          } else {
            loopTimer_1 = null;
          }
        };

        loop_1();
        sprite_1.addDisposer(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_10__["Disposer"](function () {
          if (loopTimer_1 !== null) {
            clearTimeout(loopTimer_1);
          }

          _Array__WEBPACK_IMPORTED_MODULE_13__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].baseSprites, sprite_1);

          _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].baseSpritesByUid[sprite_1.uid] = undefined;
        })); // TODO figure out a better way of doing this

        sprite_1.addDisposer(container_1); // tooltip container

        var tooltipContainer_1 = container_1.createChild(_Container__WEBPACK_IMPORTED_MODULE_2__["Container"]);
        tooltipContainer_1.topParent = container_1;
        tooltipContainer_1.width = Object(_Percent__WEBPACK_IMPORTED_MODULE_11__["percent"])(100);
        tooltipContainer_1.height = Object(_Percent__WEBPACK_IMPORTED_MODULE_11__["percent"])(100);
        tooltipContainer_1.isMeasured = false;
        container_1.tooltipContainer = tooltipContainer_1;
        sprite_1.tooltip = new _elements_Tooltip__WEBPACK_IMPORTED_MODULE_9__["Tooltip"]();
        sprite_1.tooltip.hide(0);
        sprite_1.tooltip.setBounds({
          x: 0,
          y: 0,
          width: tooltipContainer_1.maxWidth,
          height: tooltipContainer_1.maxHeight
        });
        tooltipContainer_1.events.on("maxsizechanged", function () {
          _Type__WEBPACK_IMPORTED_MODULE_14__["getValue"](sprite_1.tooltip).setBounds({
            x: 0,
            y: 0,
            width: tooltipContainer_1.maxWidth,
            height: tooltipContainer_1.maxHeight
          });
        }, undefined, false); //@todo: maybe we don't need to create one by default but only on request?

        var preloader_1 = new _elements_Preloader__WEBPACK_IMPORTED_MODULE_7__["Preloader"]();
        preloader_1.events.on("inited", function () {
          preloader_1.__disabled = true;
        }, undefined, false);
        container_1.preloader = preloader_1; //if (!options.commercialLicense) {

        if (sprite_1 instanceof _Container__WEBPACK_IMPORTED_MODULE_2__["Container"] && !sprite_1.hasLicense()) {
          var logo_1 = tooltipContainer_1.createChild(_elements_AmChartsLogo__WEBPACK_IMPORTED_MODULE_8__["AmChartsLogo"]);
          tooltipContainer_1.events.on("maxsizechanged", function (ev) {
            if (tooltipContainer_1.maxWidth <= 100 || tooltipContainer_1.maxHeight <= 50) {
              logo_1.hide();
            } else if (logo_1.isHidden || logo_1.isHiding) {
              logo_1.show();
            }
          }, undefined, false);
          sprite_1.logo = logo_1;
          logo_1.align = "left";
          logo_1.valign = "bottom";
        }

        _Utils__WEBPACK_IMPORTED_MODULE_16__["used"](sprite_1.numberFormatter); // need to create one.
        // Set this as an autonomouse instance
        // Controls like Preloader, Export will use this.


        container_1.isStandaloneInstance = true;

        if (_Options__WEBPACK_IMPORTED_MODULE_12__["options"].onlyShowOnViewport) {
          if (!_DOM__WEBPACK_IMPORTED_MODULE_15__["isElementInViewport"](htmlContainer, _Options__WEBPACK_IMPORTED_MODULE_12__["options"].viewportTarget)) {
            sprite_1.__disabled = true;
            sprite_1.tooltipContainer.__disabled = true;
            var disposers = [_DOM__WEBPACK_IMPORTED_MODULE_15__["addEventListener"](window, "DOMContentLoaded", function () {
              viewPortHandler(sprite_1);
            }), _DOM__WEBPACK_IMPORTED_MODULE_15__["addEventListener"](window, "load", function () {
              viewPortHandler(sprite_1);
            }), _DOM__WEBPACK_IMPORTED_MODULE_15__["addEventListener"](window, "resize", function () {
              viewPortHandler(sprite_1);
            }), _DOM__WEBPACK_IMPORTED_MODULE_15__["addEventListener"](window, "scroll", function () {
              viewPortHandler(sprite_1);
            })];

            if (_Options__WEBPACK_IMPORTED_MODULE_12__["options"].viewportTarget) {
              disposers.push(_DOM__WEBPACK_IMPORTED_MODULE_15__["addEventListener"](_Options__WEBPACK_IMPORTED_MODULE_12__["options"].viewportTarget, "resize", function () {
                viewPortHandler(sprite_1);
              }));
              disposers.push(_DOM__WEBPACK_IMPORTED_MODULE_15__["addEventListener"](_Options__WEBPACK_IMPORTED_MODULE_12__["options"].viewportTarget, "scroll", function () {
                viewPortHandler(sprite_1);
              }));
            }

            var disposer = new _utils_Disposer__WEBPACK_IMPORTED_MODULE_10__["MultiDisposer"](disposers);
            sprite_1.addDisposer(disposer);
            sprite_1.vpDisposer = disposer;
          } else if (_Options__WEBPACK_IMPORTED_MODULE_12__["options"].queue) {
            addToQueue(sprite_1);
          }
        } else if (_Options__WEBPACK_IMPORTED_MODULE_12__["options"].queue) {
          addToQueue(sprite_1);
        }

        return sprite_1;
      } else {
        _System__WEBPACK_IMPORTED_MODULE_0__["system"].log("html container not found");

        throw new Error("html container not found");
      }
    }
    /**
     * Disposes all of the currently active charts.
     */


    function disposeAllCharts() {
      while (_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].baseSprites.length !== 0) {
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].baseSprites.pop().dispose();
      }
    }

    function addToQueue(sprite) {
      if (_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue.indexOf(sprite) == -1) {
        sprite.__disabled = true;
        sprite.tooltipContainer.__disabled = true;
        sprite.events.disableType("appeared");

        if (_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue.length == 0) {
          queueHandler(sprite);
        }

        sprite.addDisposer(new _utils_Disposer__WEBPACK_IMPORTED_MODULE_10__["Disposer"](function () {
          removeFromQueue(sprite);
        }));

        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue.push(sprite);
      }
    }

    function removeFromQueue(sprite) {
      var index = _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue.indexOf(sprite);

      if (index >= 0) {
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue.splice(_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue.indexOf(sprite), 1);

        var nextSprite = _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].queue[index];

        if (nextSprite) {
          queueHandler(nextSprite);
        }
      }
    }

    function viewPortHandler(sprite) {
      if (sprite.__disabled && _DOM__WEBPACK_IMPORTED_MODULE_15__["isElementInViewport"](sprite.htmlContainer, _Options__WEBPACK_IMPORTED_MODULE_12__["options"].viewportTarget)) {
        if (sprite.vpDisposer) {
          sprite.vpDisposer.dispose();
        }

        addToQueue(sprite);
      }
    }

    function queueHandler(sprite) {
      sprite.__disabled = false;
      sprite.tooltipContainer.__disabled = false;
      sprite.events.enableType("appeared");

      if (sprite.showOnInit) {
        sprite.events.on("appeared", function () {
          removeFromQueue(sprite);
        });
      }

      if (sprite.vpDisposer) {
        sprite.vpDisposer.dispose();
      }

      if (sprite instanceof _Container__WEBPACK_IMPORTED_MODULE_2__["Container"]) {
        sprite.invalidateLabels();
      }

      if (sprite instanceof _Component__WEBPACK_IMPORTED_MODULE_3__["Component"]) {
        sprite.invalidateData();
        sprite.reinit();
        sprite.events.once("datavalidated", function () {
          if (sprite.showOnInit) {
            sprite.appear();
          } else {
            removeFromQueue(sprite);
          }
        });
      } else {
        if (sprite.showOnInit) {
          sprite.appear();
        } else {
          removeFromQueue(sprite);
        }
      }
    }
    /**
     * A shortcut to creating a chart instance.
     *
     * The first argument is either a reference to or an id of a DOM element to be
     * used as a container for the chart.
     *
     * The second argument is the type reference of the chart type. (for plain
     * JavaScript users this can also be a string indicating chart type)
     *
     * ```TypeScript
     * let chart = am4core.create("chartdiv", am4charts.PieChart);
     * ```
     * ```JavaScript
     * // Can pass in chart type reference like this:
     * var chart = am4core.create("chartdiv", am4charts.PieChart);
     *
     * // ... or chart class type as a string:
     * var chart = am4core.create("chartdiv", "PieChart");
     * ```
     *
     * @param htmlElement  Reference or id of the target container element
     * @param classType    Class type of the target chart type
     * @return Chart instance
     */


    function create(htmlElement, classType) {
      // This is a nasty hack for the benefit of vanilla JS users, who do not
      // enjoy benefits of type-check anyway.
      // We're allowing passing in a name of the class rather than type reference
      // itself.
      var classError;

      if (_Type__WEBPACK_IMPORTED_MODULE_14__["isString"](classType)) {
        if (_Type__WEBPACK_IMPORTED_MODULE_14__["hasValue"](_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses[classType])) {
          classType = _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses[classType];
        } else {
          classType = _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses["Container"];
          classError = new Error("Class [" + classType + "] is not loaded.");
        }
      } // Create the chart


      var chart = createChild(htmlElement, classType); // Error?

      if (classError) {
        chart.raiseCriticalError(classError);
      }

      return chart;
    }
    /**
     * A shortcut to creating a chart from a config object.
     *
     * Example:
     *
     * ```TypeScript
     * let chart am4core.createFromConfig({ ... }, "chartdiv", am4charts.XYChart );
     * ```
     * ```JavaScript
     * var chart am4core.createFromConfig({ ... }, "chartdiv", "XYChart" );
     * ```
     *
     * If `chartType` parameter is not supplied it must be set in a config object,
     * via reference to chart type, e.g.:
     *
     * ```TypeScript
     * {
     *   "type": am4charts.XYChart,
     *   // ...
     * }
     * ```
     * ```JavaScript
     * {
     *   "type": am4charts.XYChart,
     *   // ...
     * }
     * ```
     *
     * Or via string: (if you are using JavaScript)
     *
     * ```TypeScript
     * {
     *   "type": "XYChart",
     *   // ...
     * }
     * ```
     * ```JavaScript
     * {
     *   "type": "XYChart",
     *   // ...
     * }
     * ```
     *
     * A `container` can either be a reference to an HTML container to put chart
     * in, or it's unique id.
     *
     * If `container` is not specified, it must be included in the config object:
     *
     * ```TypeScript
     * {
     *   "type": "XYChart",
     *   "container": "chartdiv",
     *   // ...
     * }
     * ```
     * ```JavaScript
     * {
     *   "type": "XYChart",
     *   "container": "chartdiv",
     *   // ...
     * }
     * ```
     *
     * @param config       Config object in property/value pairs
     * @param htmlElement  Container reference or ID
     * @param objectType   Chart type
     * @return A newly created chart instance
     * @todo Throw exception if type is not correct
     */


    function createFromConfig(config, htmlElement, classType) {
      // Extract chart type from config if necessary
      if (!_Type__WEBPACK_IMPORTED_MODULE_14__["hasValue"](classType)) {
        classType = config.type;
        delete config.type;
      } // Extract element from config if necessary


      if (!_Type__WEBPACK_IMPORTED_MODULE_14__["hasValue"](htmlElement)) {
        htmlElement = config.container;
        delete config.container;
      } // Check if we need to extract actual type reference


      var finalType;
      var classError;

      if (_Type__WEBPACK_IMPORTED_MODULE_14__["isString"](classType) && _Type__WEBPACK_IMPORTED_MODULE_14__["hasValue"](_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses[classType])) {
        finalType = _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].registeredClasses[classType];
      } else if (typeof classType !== "function") {
        finalType = _Container__WEBPACK_IMPORTED_MODULE_2__["Container"];
        classError = new Error("Class [" + classType + "] is not loaded.");
      } else {
        finalType = classType;
      } // Create the chart


      var chart = createChild(htmlElement, finalType); // Set config

      if (classError) {
        chart.raiseCriticalError(classError);
      } else {
        chart.config = config;
      }

      return chart;
    }
    /**
     * Applies a theme to System, and subsequently all chart instances created
     * from that point forward.
     *
     * amCharts supports multiple themes. Calling `useTheme` multiple times will
     * make the System apply multiple themes, rather than overwrite previously
     * set one.
     *
     * This enables combining features from multiple themes on the same chart.
     * E.g.:
     *
     * ```TypeScript
     * am4core.useTheme(am4themes.material);
     * am4core.useTheme(am4themes.animated);
     * ```
     * ```JavaScript
     * am4core.useTheme(am4themes.material);
     * am4core.useTheme(am4themes.animated);
     * ```
     *
     * The above will apply both the Material color and animation options to all
     * charts created.
     *
     * @param value  A reference to a theme
     */


    function useTheme(value) {
      if (_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].themes.indexOf(value) === -1) {
        _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].themes.push(value);
      }
    }
    /**
     * Removes a theme from "active themes" list, so it won't get applied to any
     * charts created subsequently.
     *
     * @param value  A reference to a theme
     */


    function unuseTheme(value) {
      _Array__WEBPACK_IMPORTED_MODULE_13__["remove"](_Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].themes, value);
    }
    /**
     * Removes all "active" themes. Any charts created subsequently will not have
     * any theme applied to them.
     */


    function unuseAllThemes() {
      _Registry__WEBPACK_IMPORTED_MODULE_1__["registry"].themes = [];
    }
    /**
     * Adds a license, e.g.:
     *
     * ```TypeScript
     * am4core.addLicense("xxxxxxxx");
     * ```
     * ```JavaScript
     * am4core.addLicense("xxxxxxxx");
     * ```
     *
     * Multiple licenses can be added to cover for multiple products.
     *
     * @since 4.5.16
     * @param  license  License key
     */


    function addLicense(license) {
      _Options__WEBPACK_IMPORTED_MODULE_12__["options"].licenses.push(license);
    } //# sourceMappingURL=Instance.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js":
  /*!************************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js ***!
    \************************************************************************************/

  /*! exports provided: InterfaceColorSet */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsInterfaceColorSetJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InterfaceColorSet", function () {
      return InterfaceColorSet;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /**
     * This module contains a version of ColorSet that can (and should) be used for
     * coloring UI elements.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * This module contains a version of ColorSet that can (and should) be used for
     * coloring UI elements.
     *
     * The main difference from the basic [[ColorSet]] is that instead of sequenced
     * colors, it uses a concept of named colors.
     *
     * This way, every element in the UI can extract an exact color theme author
     * meant for the specific purpose, like strokes, backgrounds, etc.
     *
     * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info
     */


    var InterfaceColorSet =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(InterfaceColorSet, _super);
      /**
       * Constructor
       */

      function InterfaceColorSet() {
        var _this = _super.call(this) || this;
        /**
         * Maps the list of purposes (like "stroke") to an index of color of the
         * color set.
         */


        _this._purposes = {
          stroke: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#e5e5e5"),
          fill: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#f3f3f3"),
          primaryButton: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#6794dc"),
          primaryButtonHover: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#6771dc"),
          primaryButtonDown: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#68dc75"),
          primaryButtonActive: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#68dc75"),
          primaryButtonText: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#FFFFFF"),
          primaryButtonStroke: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#FFFFFF"),
          secondaryButton: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#d9d9d9"),
          secondaryButtonHover: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#d9d9d9").brighten(-0.25),
          secondaryButtonDown: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#d9d9d9").brighten(-0.35),
          secondaryButtonActive: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#d9d9d9").brighten(0.35),
          secondaryButtonText: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#000000"),
          secondaryButtonStroke: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#FFFFFF"),
          grid: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#000000"),
          background: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#ffffff"),
          alternativeBackground: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#000000"),
          text: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#000000"),
          alternativeText: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#FFFFFF"),
          disabledBackground: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#999999"),
          positive: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#67dc75"),
          negative: Object(_Color__WEBPACK_IMPORTED_MODULE_3__["color"])("#dc6788")
        };
        _this.className = "InterfaceColorSet";

        _this.applyTheme();

        return _this;
      }

      InterfaceColorSet.prototype.debug = function () {};
      /**
       * Returns a color to be used for the specific purpose.
       *
       * ```TypeScript
       * let uicolors = new am4core.InterfaceColorSet();
       * console.log(uicolors.getFor("stroke"));
       * ```
       * ```JavaScript
       * var uicolors = new am4core.InterfaceColorSet();
       * console.log(uicolors.getFor("stroke"));
       * ```
       *
       * @param purpose  Color use purpuse
       * @return Color
       */


      InterfaceColorSet.prototype.getFor = function (purpose) {
        return this._purposes[purpose];
      };
      /**
       * Sets color to be used for the specific purpose.
       *
       * @param purpose  Color use purpose
       * @param color    Color
       */


      InterfaceColorSet.prototype.setFor = function (purpose, color) {
        this._purposes[purpose] = color;
      };

      return InterfaceColorSet;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].registeredClasses["InterfaceColorSet"] = InterfaceColorSet; //# sourceMappingURL=InterfaceColorSet.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js ***!
    \***************************************************************************/

  /*! exports provided: fromArray, length, toArray, eachContinue, each, sort, map, filter, concat, flatten, indexed, findIndex, find, findMap, contains, foldl, min, max, join, ListIterator */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsIteratorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fromArray", function () {
      return fromArray;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "length", function () {
      return length;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toArray", function () {
      return toArray;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "eachContinue", function () {
      return eachContinue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "each", function () {
      return each;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sort", function () {
      return sort;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "map", function () {
      return map;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "filter", function () {
      return filter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "concat", function () {
      return concat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "flatten", function () {
      return flatten;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "indexed", function () {
      return indexed;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findIndex", function () {
      return findIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "find", function () {
      return find;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findMap", function () {
      return findMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "contains", function () {
      return contains;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "foldl", function () {
      return foldl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "min", function () {
      return min;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "max", function () {
      return max;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "join", function () {
      return join;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ListIterator", function () {
      return ListIterator;
    });
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    function fromArray(array) {
      return function (push) {
        var length = array.length;

        for (var i = 0; i < length; ++i) {
          if (!push(array[i])) {
            break;
          }
        }
      };
    }
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    function length(iter) {
      var sum = 0;
      iter(function (_) {
        ++sum;
        return true;
      });
      return sum;
    }
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    function toArray(iter) {
      var output = [];
      iter(function (value) {
        output.push(value);
        return true;
      });
      return output;
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function eachContinue(iter, fn) {
      iter(fn);
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function each(iter, fn) {
      iter(function (value) {
        fn(value);
        return true;
      });
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function sort(iter, fn) {
      return fromArray(toArray(iter).sort(fn));
    }
    /**
     * [A description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function map(iter, fn) {
      return function (push) {
        return iter(function (value) {
          return push(fn(value));
        });
      };
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function filter(iter, fn) {
      return function (push) {
        return iter(function (value) {
          if (fn(value)) {
            return push(value);
          } else {
            return true;
          }
        });
      };
    }
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    function concat() {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return function (push) {
        var go = true;

        var push2 = function push2(value) {
          return go = push(value);
        };

        var length = args.length;

        for (var i = 0; i < length; ++i) {
          args[i](push2);

          if (!go) {
            break;
          }
        }
      };
    }
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    function flatten(iter) {
      return function (push) {
        var go = true;

        var push2 = function push2(value) {
          return go = push(value);
        };

        iter(function (value) {
          value(push2);
          return go;
        });
      };
    }
    /**
     * [number description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function indexed(iter) {
      return function (push) {
        var index = 0;
        iter(function (value) {
          return push([index++, value]);
        });
      };
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function findIndex(iter, matches) {
      var found = false;
      var i = 0;
      iter(function (value) {
        if (matches(value)) {
          found = true;
          return false;
        } else {
          ++i;
          return true;
        }
      });
      return found ? i : -1;
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function find(iter, matches) {
      var output;
      iter(function (value) {
        if (matches(value)) {
          output = value;
          return false;
        } else {
          return true;
        }
      });
      return output;
    }
    /**
     * [A description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function findMap(iter, matches) {
      var output;
      iter(function (value) {
        var v = matches(value);

        if (v !== null) {
          output = v;
          return false;
        } else {
          return true;
        }
      });
      return output;
    }
    /**
     * [iter description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function contains(iter, matches) {
      var output = false;
      iter(function (value) {
        if (matches(value)) {
          output = true;
          return false;
        } else {
          return true;
        }
      });
      return output;
    }
    /**
     * [A description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */


    function foldl(iter, init, fn) {
      iter(function (value) {
        init = fn(init, value);
        return true;
      });
      return init;
    }
    /**
     * [min2 description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param left [description]
     * @param right [description]
     * @return [description]
     */


    function min2(left, right) {
      if (left == null || right < left) {
        return right;
      } else {
        return left;
      }
    }
    /**
     * [min description]
     *
     * @ignore Exclude from docs
     * @todo Verify that this works correctly
     * @todo Description
     * @param a [description]
     * @return [description]
     */


    function min(a) {
      return foldl(a, null, min2);
    }
    /**
     * [max2 description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param left [description]
     * @param right [description]
     * @return [description]
     */


    function max2(left, right) {
      if (left == null || right > left) {
        return right;
      } else {
        return left;
      }
    }
    /**
     * [max description]
     *
     * @ignore Exclude from docs
     * @todo Verify that this works correctly
     * @todo Description
     * @param a [description]
     * @return [description]
     */


    function max(a) {
      return foldl(a, null, max2);
    }
    /**
     * [join description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param iter [description]
     * @param separator [description]
     * @return [description]
     */


    function join(iter, separator) {
      if (separator === void 0) {
        separator = "";
      }

      var first = true;
      var init = "";
      iter(function (value) {
        if (first) {
          first = false;
        } else {
          init += separator;
        }

        init += value;
        return true;
      });
      return init;
    }
    /**
     * @ignore Exclude from docs
     * @todo Description
     */


    var ListIterator =
    /** @class */
    function () {
      /**
       * Constructor
       *
       * @param list [description]
       * @param create [description]
       */
      function ListIterator(list, create) {
        // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list
        this.createNewItems = false;
        this.list = list;
        this._create = create;
        this.reset();
      }

      ListIterator.prototype.reset = function () {
        this._listCopy = toArray(this.list.iterator());
      };

      ListIterator.prototype.clear = function () {
        this._listCopy.length = 0;
      };

      ListIterator.prototype.getFirst = function () {
        return this.returnItem(0);
      };

      ListIterator.prototype.getLast = function () {
        return this.returnItem(this._listCopy.length - 1);
      };

      ListIterator.prototype.find = function (fn) {
        var index = _Array__WEBPACK_IMPORTED_MODULE_0__["findIndex"](this._listCopy, fn);

        if (index !== -1) {
          var item = this._listCopy[index]; // TODO use removeIndex instead ?

          _Array__WEBPACK_IMPORTED_MODULE_0__["remove"](this._listCopy, item);

          return item;
        } else {
          return this.getLast();
        }
      };

      ListIterator.prototype.removeItem = function (item) {
        return _Array__WEBPACK_IMPORTED_MODULE_0__["remove"](this._listCopy, item);
      };

      ListIterator.prototype.returnItem = function (index) {
        if (index >= 0 && index < this._listCopy.length) {
          var item = this._listCopy[index]; // TODO use removeIndex instead ?

          _Array__WEBPACK_IMPORTED_MODULE_0__["remove"](this._listCopy, item);

          return item;
        } else if (this.createNewItems) {
          return this._create();
        }
      };

      ListIterator.prototype.iterator = function () {
        return fromArray(this._listCopy);
      };

      return ListIterator;
    }(); //# sourceMappingURL=Iterator.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js ***!
    \***************************************************************************/

  /*! exports provided: Keyboard, keyboard */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsKeyboardJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Keyboard", function () {
      return Keyboard;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "keyboard", function () {
      return keyboard;
    });
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * A collection of keyboard-related utilities accessible via `keyboard`
     * instance.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * A class that represents collection of keyboard-related utilities.
     *
     * Do not instantiate this class directly, but rather use `keyboard` variable.
     */


    var Keyboard =
    /** @class */
    function () {
      function Keyboard() {}
      /**
       * Returns a named key based on information contained in the event or
       * "other".
       *
       * @param ev  A keyboard event
       * @return Keyboard named key
       */


      Keyboard.prototype.getEventKey = function (ev) {
        // Get the key code
        var code = ev.keyCode || ev.which,
            key; // Map to internal key

        switch (code) {
          case 38:
            key = "up";
            break;

          case 40:
            key = "down";
            break;

          case 37:
            key = "left";
            break;

          case 39:
            key = "right";
            break;

          case 13:
            key = "enter";
            break;

          case 27:
            key = "esc";
            break;

          case 36:
            key = "home";
            break;

          case 35:
            key = "end";
            break;

          case 9:
            key = "tab";
            break;

          case 17:
            key = "ctrl";
            break;

          case 18:
            key = "alt";
            break;

          case 16:
            key = "shift";
            break;

          case 32:
            key = "space";
            break;

          case 36:
            key = "home";
            break;

          case 35:
            key = "end";
            break;

          case 33:
            key = "pgup";
            break;

          case 34:
            key = "pgdn";
            break;

          case 45:
            key = "ins";
            break;

          case 46:
            key = "del";
            break;

          case 107:
            key = "plus";
            break;

          case 109:
            key = "minus";
            break;

          default:
            key = "other";
            break;
        }

        return key;
      };
      /**
       * Checks if event key is one or more of the selected named keys.
       *
       * @param ev   Keyboard event
       * @param key  Named key or array of keys
       * @return Is event key one of the list?
       */


      Keyboard.prototype.isKey = function (ev, key) {
        var eventKey = this.getEventKey(ev);

        if (_Type__WEBPACK_IMPORTED_MODULE_0__["isString"](key)) {
          key = [key];
        }

        return key.indexOf(eventKey) !== -1;
      };
      /**
       * Returns `true` if shift key was presset at the moment of the event.
       *
       * @param ev  Event object
       * @return Was shift pressed?
       */


      Keyboard.prototype.shiftKey = function (ev) {
        return ev.shiftKey;
      };
      /**
       * Returns `true` if ctrl key was presset at the moment of the event.
       *
       * @param ev  Event object
       * @return Was ctrl pressed?
       */


      Keyboard.prototype.ctrlKey = function (ev) {
        return ev.ctrlKey;
      };
      /**
       * Returns `true` if alt key was presset at the moment of the event
       * @param ev  Event object
       * @return Was alt pressed?
       */


      Keyboard.prototype.altKey = function (ev) {
        return ev.altKey;
      };
      /**
       * Returns `true` if meta key was presset at the moment of the event
       * @param ev  Event object
       * @return Was meta pressed?
       */


      Keyboard.prototype.metaKey = function (ev) {
        return ev.metaKey;
      };

      return Keyboard;
    }();
    /**
     * A single [[Keyboard]] instance to be reused across all elements so that
     * they don't need to instantiate their own.
     *
     * @ignore Exclude from docs
     */


    var keyboard = new Keyboard(); //# sourceMappingURL=Keyboard.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js ***!
    \***************************************************************************/

  /*! exports provided: Language */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsLanguageJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Language", function () {
      return Language;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _lang_en__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../../lang/en */
    "./node_modules/@amcharts/amcharts4/lang/en.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /**
     * Language module contains everything related to language-specific operations:
     * * Translating prompts
     * * Translating functions
     * * Date format localizations
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */


    ;
    ;
    /**
     * Handles all language-related tasks, like loading and storing translations,
     * translating prompts, lists of prompts and even functions.
     *
     * Almost every object in amCharts4 universe will have a `language` property,
     * which can be accessed for prompt translation.
     *
     * @see {@link ILanguageAdapters} for a list of available Adapters
     * @todo Make prompt keys case-insensitive
     * @important
     */

    var Language =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Language, _super);
      /**
       * Constructor
       */

      function Language() {
        var _this = _super.call(this) || this;
        /**
         * Adapter.
         */


        _this.adapter = new _Adapter__WEBPACK_IMPORTED_MODULE_2__["Adapter"](_this);
        /**
         * Current locale.
         */

        _this._locale = _lang_en__WEBPACK_IMPORTED_MODULE_5__["default"];
        /**
         * Default locale. A locale to fall back to if none is specified, or
         * if there's no translation for the prompt for the current language.
         */

        _this._defaultLocale = _lang_en__WEBPACK_IMPORTED_MODULE_5__["default"];
        _this.className = "Language"; // Set default language if necessary

        if (_Type__WEBPACK_IMPORTED_MODULE_4__["hasValue"](_Options__WEBPACK_IMPORTED_MODULE_6__["options"].defaultLocale)) {
          _this.locale = _Options__WEBPACK_IMPORTED_MODULE_6__["options"].defaultLocale;
        }

        _this.applyTheme();

        return _this;
      }
      /**
       * Returns locale that is currently used.
       *
       * @param locale  Force locale. Will use current language if not set.
       * @return Locale
       */


      Language.prototype.getLocale = function (locale) {
        if (locale == null) {
          locale = this._locale;
        }

        return this.adapter.apply("locale", {
          locale: locale
        }).locale;
      };
      /**
       * Returns the translation of the string.
       *
       * If the translation is empty, it will return untranslated prompt.
       *
       * Third parameter and up are strings that can be used to replace "%X"
       * placeholders in prompt.
       *
       * E.g.:
       *
       * ```TypeScript
       * // Results in "This is a first translation test"
       * chart.language.translate("This is a %1 translation %2", null, "first", "test");
       * ```
       * ```JavaScriptScript
       * // Results in "This is a first translation test"
       * chart.language.translate("This is a %1 translation %2", null, "first", "test");
       * ```
       *
       * @param  prompt   A string to translate
       * @param  locale   Force translation into specific locale, e.g. fr_FR
       * @param  rest     Parameters to replace in string
       * @return          Translation
       */


      Language.prototype.translate = function (prompt, locale) {
        var rest = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          rest[_i - 2] = arguments[_i];
        } // Get langauge


        locale = this.getLocale(locale); // Init translation

        var translation = prompt; // Get translations for the locale

        var translations = this.getTranslations(locale);
        var value = translations[prompt]; // Try to look for the translation

        if (value === null) {
          value = "";
        } else if (_Type__WEBPACK_IMPORTED_MODULE_4__["hasValue"](value)) {
          // It might be an empty string
          if (value) {
            translation = value;
          }
        } else if (locale !== this._defaultLocale) {
          // Try to look in default language
          return this.translate.apply(this, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])([prompt, this._defaultLocale], rest));
        } // Replace %1, %2, etc params


        if (rest.length) {
          for (var len = rest.length, i = 0; i < len; ++i) {
            translation = translation.split("%" + (i + 1)).join(rest[i]);
          }
        } // Return the translation


        return this.adapter.apply("translate", {
          translation: translation,
          locale: locale
        }).translation;
      };
      /**
       * Non-type-checked translation.
       *
       * Can be used by plugins and other code that may have their own non-standard
       * translation prompts.
       *
       * @since 4.5.5
       * @param  prompt   A string to translate
       * @param  locale   Force translation into specific locale, e.g. fr_FR
       * @param  rest     Parameters to replace in string
       * @return          Translation
       */


      Language.prototype.translateAny = function (prompt, locale) {
        var rest = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          rest[_i - 2] = arguments[_i];
        }

        return this.translate(prompt, locale);
      };
      /**
       * Translates prompt.
       *
       * If translation is empty, it will return empty string, which is a different
       * behavior than that of regular `translate`.
       *
       * @param prompt   A string to translate
       * @param locale   Force translation into specific locale, e.g. fr_FR
       * @param ...rest  Parameters to replace in string
       * @return Translation
       */


      Language.prototype.translateEmpty = function (prompt, locale) {
        var rest = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          rest[_i - 2] = arguments[_i];
        }

        var translation = this.translate.apply(this, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])([prompt, locale], rest));
        return translation == prompt ? "" : translation;
      };
      /**
       * Translates a function.
       *
       * This method will return a function reference, but will not run it. It's
       * up to the caller script to run the function.
       *
       * @param prompt  A function id to translate
       * @param locale  Force translation into specific locale. e.g. fr_FR
       * @return A language-specific version of the function
       * @todo Apply adapter
       */


      Language.prototype.translateFunc = function (prompt, locale) {
        // Get langauge
        locale = this.getLocale(locale); // Get translations for the locale

        var translations = this.getTranslations(locale);
        var value = translations[prompt]; // Try to look for the translation

        if (value != null) {
          return value;
        } // Try to look in default language


        if (locale !== this._defaultLocale) {
          return this.translateFunc(prompt, this._defaultLocale);
        } // Fail - return empty function


        return function () {
          return "";
        };
      };
      /**
       * Translates a list of prompts in one go.
       *
       * @param list    An array of strings to translate
       * @param locale  Force translation into specific locale. e.g. fr_FR
       * @return An array of translated strings in the same order as source list
       */


      Language.prototype.translateAll = function (list, locale) {
        var _this = this; // Translate all items in the list


        if (!this.isDefault()) {
          return _Array__WEBPACK_IMPORTED_MODULE_3__["map"](list, function (x) {
            return _this.translate(x, locale);
          });
        } else {
          return list;
        }
      };
      /**
       * Returns `true` if the currently selected locale is a default locale.
       *
       * @return `true` if locale is default; `false` if it is not.
       */


      Language.prototype.isDefault = function () {
        return this._defaultLocale === this._locale;
      };

      Object.defineProperty(Language.prototype, "locale", {
        /**
         * @return Locale definition
         */
        get: function get() {
          return this._locale;
        },

        /**
         * Current locale.
         *
         * @param value  Locale definition (translations)
         */
        set: function set(value) {
          if (this._locale != value) {
            this._locale = value;

            if (this.events.isEnabled("localechanged")) {
              var event_1 = {
                type: "localechanged",
                locale: value,
                target: this
              };
              this.events.dispatchImmediately("localechanged", event_1);
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns translations for a given locale.
       *
       * @ignore
       * @deprecated
       * @param locale  Locale
       * @return Translations
       */

      Language.prototype.getTranslations = function (locale) {
        return this.adapter.apply("translations", {
          translations: locale,
          locale: locale
        }).translations;
      };

      return Language;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"]); //# sourceMappingURL=Language.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js ***!
    \***********************************************************************/

  /*! exports provided: IndexedIterable, ListGrouper, ListDisposer, List, ListTemplate */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsListJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "IndexedIterable", function () {
      return IndexedIterable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ListGrouper", function () {
      return ListGrouper;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ListDisposer", function () {
      return ListDisposer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "List", function () {
      return List;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ListTemplate", function () {
      return ListTemplate;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Disposer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony import */


    var _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /**
     * @todo Description
     */


    var IndexedIterable =
    /** @class */
    function () {
      /**
       * Constructor.
       *
       * @param array  List items
       * @param start  Start index
       * @param end    End index
       */
      function IndexedIterable(array, start, end) {
        this._array = array;
        this._start = start;
        this._end = end;
      }
      /**
       * Returns a list item iterator.
       *
       * @return Iterator
       */


      IndexedIterable.prototype.iterator = function () {
        var _this = this;

        return function (push) {
          if (_this._start !== _this._end) {
            if (_this._start < _this._end) {
              for (var i = _this._start; i < _this._end; ++i) {
                if (!push(_this._array[i])) {
                  break;
                }
              }
            } else {
              for (var i = _this._start - 1; i >= _this._end; --i) {
                if (!push(_this._array[i])) {
                  break;
                }
              }
            }
          }
        };
      };
      /**
       * Returns an interable list sorted backwards than current list.
       *
       * @return List
       */


      IndexedIterable.prototype.backwards = function () {
        return new IndexedIterable(this._array, this._end, this._start);
      };
      /**
       * Returns a new list consisting only of specific range of items between
       * `start` and `end` indexes.
       *
       * @param start  Start index
       * @param end    End index
       * @return List
       */


      IndexedIterable.prototype.range = function (start, end) {
        if (start <= end) {
          if (this._start === this._end) {
            return this;
          } else if (this._start < this._end) {
            var diff = end - start;
            start = Math.max(this._start + start, this._start);
            end = Math.min(start + diff, this._end);
            return new IndexedIterable(this._array, start, end);
          } else {
            var diff = end - start;
            start = Math.max(this._start - start, this._end);
            end = Math.max(start - diff, this._end);
            return new IndexedIterable(this._array, start, end);
          }
        } else {
          throw new Error("Start index must be lower than end index");
        }
      };

      return IndexedIterable;
    }();
    /**
     * ListGrouper organizes [[List]] items into groups.
     *
     * @ignore Exclude from docs
     */


    var ListGrouper =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ListGrouper, _super);
      /**
       * Constructor.
       */

      function ListGrouper(list, getKey, sort) {
        var _this = _super.call(this, [list.events.on("inserted", function (x) {
          var value = x.newValue;

          var key = _this._getKey(value);

          var index = 0;

          _Iterator__WEBPACK_IMPORTED_MODULE_4__["eachContinue"](list.iterator(), function (x) {
            if (x === value) {
              return false;
            } else if (_this._getKey(x) === key) {
              ++index;
            }

            return true;
          });

          _this._insert(value, key, index);
        }, undefined, false), list.events.on("removed", function (x) {
          _this._remove(x.oldValue);
        }, undefined, false)]) || this;
        /**
         * Grouping keys.
         */


        _this._keys = [];
        /**
         * List item groups.
         */

        _this._groups = {};
        _this._getKey = getKey;
        _this._sort = sort;

        _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](list.iterator(), function (x) {
          _this._insert(x, getKey(x));
        });

        return _this;
      }
      /**
       * Inserts an item (`x`) to a specific group (`key`) and specific `index`.
       *
       * @param x      Item
       * @param key    Group name
       * @param index  Index
       */


      ListGrouper.prototype._insert = function (x, key, index) {
        if (this._groups[key] == null) {
          this._groups[key] = []; // TODO code duplication with SortedList

          var _a = _Array__WEBPACK_IMPORTED_MODULE_3__["getSortedIndex"](this._keys, this._sort, key),
              found = _a.found,
              index_1 = _a.index;

          if (found) {
            throw new Error("Key already exists: " + key);
          } else {
            _Array__WEBPACK_IMPORTED_MODULE_3__["insertIndex"](this._keys, index_1, key);
          }
        }

        if (index == null) {
          this._groups[key].push(x);
        } else {
          _Array__WEBPACK_IMPORTED_MODULE_3__["insertIndex"](this._groups[key], index, x);
        }
      };
      /**
       * Removes an item from the list.
       *
       * @param x Item to remove
       */


      ListGrouper.prototype._remove = function (x) {
        var key = this._getKey(x);

        var values = this._groups[key];

        if (values != null) {
          _Array__WEBPACK_IMPORTED_MODULE_3__["remove"](values, x);

          if (values.length === 0) {
            delete this._groups[key];

            var _a = _Array__WEBPACK_IMPORTED_MODULE_3__["getSortedIndex"](this._keys, this._sort, key),
                found = _a.found,
                index = _a.index;

            if (found) {
              _Array__WEBPACK_IMPORTED_MODULE_3__["removeIndex"](this._keys, index);
            } else {
              throw new Error("Key doesn't exist: " + key);
            }
          }
        }
      };
      /**
       * Returns an iterator for the list.
       *
       * The iterator will iterate through all items in all groups.
       *
       * @return Iterator
       */


      ListGrouper.prototype.iterator = function () {
        var _this = this;

        return _Iterator__WEBPACK_IMPORTED_MODULE_4__["flatten"](_Iterator__WEBPACK_IMPORTED_MODULE_4__["map"](_Iterator__WEBPACK_IMPORTED_MODULE_4__["fromArray"](this._keys), function (key) {
          return _Iterator__WEBPACK_IMPORTED_MODULE_4__["fromArray"](_this._groups[key]);
        }));
      };

      return ListGrouper;
    }(_Disposer__WEBPACK_IMPORTED_MODULE_1__["MultiDisposer"]);
    /**
     * A disposable list, which when disposed itself will call `dispose()` method
     * on all its items.
     */


    var ListDisposer =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ListDisposer, _super);

      function ListDisposer(list, disposeOnRemove) {
        if (disposeOnRemove === void 0) {
          disposeOnRemove = true;
        }

        var _this = this;

        if (disposeOnRemove) {
          var disposer_1 = list.events.on("removed", function (x) {
            x.oldValue.dispose();
          }, undefined, false);
          _this = _super.call(this, function () {
            disposer_1.dispose(); // TODO clear the list ?

            _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](list.iterator(), function (x) {
              x.dispose();
            });
          }) || this;
        } else {
          _this = _super.call(this, function () {
            // TODO clear the list ?
            _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](list.iterator(), function (x) {
              x.dispose();
            });
          }) || this;
        }

        return _this;
      }

      return ListDisposer;
    }(_Disposer__WEBPACK_IMPORTED_MODULE_1__["Disposer"]);
    /**
     * Checks if specific index fits into length.
     *
     * @param index  Index
     * @param len    Length
     */


    function checkBounds(index, len) {
      if (!(index >= 0 && index < len)) {
        throw new Error("Index out of bounds: " + index);
      }
    }
    /**
     * A List class is used to hold a number of indexed items of the same type.
     */


    var List =
    /** @class */
    function () {
      /**
       * Constructor
       *
       * @param initial  Inital list of values to add to list
       */
      function List(initial) {
        if (initial === void 0) {
          initial = [];
        }
        /**
         * Event dispatcher.
         */


        this.events = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__["EventDispatcher"]();
        this._values = initial;
      }

      Object.defineProperty(List.prototype, "values", {
        /**
         * An array of values in the list.
         *
         * Do not use this property to add values. Rather use dedicated methods, like
         * `push()`, `removeIndex()`, etc.
         *
         * @readonly
         * @return List values
         */
        get: function get() {
          return this._values;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if list contains specific item reference.
       *
       * @param item  Item to search for
       * @return `true` if found, `false` if not found
       */

      List.prototype.contains = function (value) {
        return this._values.indexOf(value) !== -1;
      };
      /**
       * Removes specific item from the list.
       *
       * @param item An item to remove
       */


      List.prototype.removeValue = function (value) {
        var i = 0;
        var length = this._values.length;

        while (i < length) {
          // TODO handle NaN
          if (this._values[i] === value) {
            this.removeIndex(i);
            --length;
          } else {
            ++i;
          }
        }
      };
      /**
       * Searches the list for specific item and returns its index.
       *
       * @param item  An item to search for
       * @return Index or -1 if not found
       */


      List.prototype.indexOf = function (value) {
        return _Array__WEBPACK_IMPORTED_MODULE_3__["indexOf"](this._values, value);
      };

      Object.defineProperty(List.prototype, "length", {
        /**
         * Number of items in list.
         *
         * @readonly
         * @return Number of items
         */
        get: function get() {
          return this._values.length;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if there's a value at specific index.
       *
       * @param index  Index
       * @return Value exists?
       */

      List.prototype.hasIndex = function (index) {
        return index >= 0 && index < this._values.length;
      };
      /**
       * Returns an item at specified index.
       *
       * @param index  Index
       * @return List item
       */


      List.prototype.getIndex = function (index) {
        return this._values[index];
      };
      /**
       * Sets value at specific index.
       *
       * If there's already a value at the index, it is overwritten.
       *
       * @param index  Index
       * @param value  New value
       * @return New value
       */


      List.prototype.setIndex = function (index, value) {
        checkBounds(index, this._values.length);
        var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same

        if (oldValue !== value) {
          this._values[index] = value;

          if (this.events.isEnabled("setIndex")) {
            this.events.dispatchImmediately("setIndex", {
              type: "setIndex",
              target: this,
              index: index,
              oldValue: oldValue,
              newValue: value
            });
          }

          if (this.events.isEnabled("removed")) {
            this.events.dispatchImmediately("removed", {
              type: "removed",
              target: this,
              oldValue: oldValue
            });
          }

          if (this.events.isEnabled("inserted")) {
            this.events.dispatchImmediately("inserted", {
              type: "inserted",
              target: this,
              newValue: value
            });
          }
        }

        return oldValue;
      };
      /**
       * Adds an item to the list at a specific index, which pushes all the other
       * items further down the list.
       *
       * @param index Index
       * @param item  An item to add
       */


      List.prototype.insertIndex = function (index, value) {
        checkBounds(index, this._values.length + 1);

        _Array__WEBPACK_IMPORTED_MODULE_3__["insertIndex"](this._values, index, value);

        if (this.events.isEnabled("insertIndex")) {
          this.events.dispatchImmediately("insertIndex", {
            type: "insertIndex",
            target: this,
            index: index,
            newValue: value
          });
        }

        if (this.events.isEnabled("inserted")) {
          this.events.dispatchImmediately("inserted", {
            type: "inserted",
            target: this,
            newValue: value
          });
        }
      };
      /**
       * [_sortQuicksort description]
       *
       * @todo Description
       * @param low    [description]
       * @param high   [description]
       * @param order  [description]
       */


      List.prototype._sortQuicksort = function (low, high, order) {
        if (low < high) {
          var p = this._sortPartition(low, high, order);

          this._sortQuicksort(low, p, order);

          this._sortQuicksort(p + 1, high, order);
        }
      };
      /**
       * [_sortPartition description]
       *
       * @todo Description
       * @param low    [description]
       * @param high   [description]
       * @param order  [description]
       * @return [description]
       */


      List.prototype._sortPartition = function (low, high, order) {
        var values = this._values;
        var pivot = values[low];
        var i = low - 1;
        var j = high + 1;

        for (;;) {
          do {
            ++i;
          } while (order(values[i], pivot) < 0);

          do {
            --j;
          } while (order(values[j], pivot) > 0);

          if (i >= j) {
            return j;
          } else {
            this.swap(i, j);
          }
        }
      };
      /**
       * Reorders list items according to specific ordering function.
       *
       * @param order  Ordering function
       */


      List.prototype.sort = function (order) {
        // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme
        // @todo faster implementation of this
        // @todo test this
        this._sortQuicksort(0, this._values.length - 1, order);
      };
      /**
       * Swaps indexes of two items in the list.
       *
       * @param a  Item 1
       * @param b  Item 2
       */


      List.prototype.swap = function (a, b) {
        var len = this._values.length;
        checkBounds(a, len);
        checkBounds(b, len);

        if (a !== b) {
          var value_a = this._values[a];
          var value_b = this._values[b];
          this._values[a] = value_b;

          if (this.events.isEnabled("setIndex")) {
            this.events.dispatchImmediately("setIndex", {
              type: "setIndex",
              target: this,
              index: a,
              oldValue: value_a,
              newValue: value_b
            });
          }

          this._values[b] = value_a;

          if (this.events.isEnabled("setIndex")) {
            this.events.dispatchImmediately("setIndex", {
              type: "setIndex",
              target: this,
              index: b,
              oldValue: value_b,
              newValue: value_a
            });
          }
        }
      };
      /**
       * Removes a value at specific index.
       *
       * @param index  Index of value to remove
       * @return Removed value
       */


      List.prototype.removeIndex = function (index) {
        checkBounds(index, this._values.length);
        var oldValue = this._values[index];

        _Array__WEBPACK_IMPORTED_MODULE_3__["removeIndex"](this._values, index);

        if (this.events.isEnabled("removeIndex")) {
          this.events.dispatchImmediately("removeIndex", {
            type: "removeIndex",
            target: this,
            index: index,
            oldValue: oldValue
          });
        }

        if (this.events.isEnabled("removed")) {
          this.events.dispatchImmediately("removed", {
            type: "removed",
            target: this,
            oldValue: oldValue
          });
        }

        return oldValue;
      };
      /**
       * Moves an item to a specific index within the list.
       *
       * If the index is not specified it will move the item to the end of the
       * list.
       *
       * @param value  Item to move
       * @param index  Index to place item at
       */


      List.prototype.moveValue = function (value, toIndex) {
        // TODO don't do anything if the desired index is the same as the current index
        var index = this.indexOf(value); // TODO remove all old values rather than only the first ?

        if (index !== -1) {
          var oldValue = this._values[index];

          _Array__WEBPACK_IMPORTED_MODULE_3__["removeIndex"](this._values, index);

          if (this.events.isEnabled("removeIndex")) {
            this.events.dispatchImmediately("removeIndex", {
              type: "removeIndex",
              target: this,
              index: index,
              oldValue: oldValue
            });
          }
        }

        if (toIndex == null) {
          toIndex = this._values.length;

          this._values.push(value);
        } else {
          _Array__WEBPACK_IMPORTED_MODULE_3__["insertIndex"](this._values, toIndex, value);
        }

        if (this.events.isEnabled("insertIndex")) {
          this.events.dispatchImmediately("insertIndex", {
            type: "insertIndex",
            target: this,
            index: toIndex,
            newValue: value
          });
        }

        if (index === -1) {
          if (this.events.isEnabled("inserted")) {
            this.events.dispatchImmediately("inserted", {
              type: "inserted",
              target: this,
              newValue: value
            });
          }
        }
      };
      /**
       * Adds an item to the end of the list.
       *
       * @param item  An item to add
       */


      List.prototype.push = function (value) {
        var index = this._values.push(value) - 1;

        if (this.events.isEnabled("insertIndex")) {
          this.events.dispatchImmediately("insertIndex", {
            type: "insertIndex",
            target: this,
            index: index,
            newValue: value
          });
        }

        if (this.events.isEnabled("inserted")) {
          this.events.dispatchImmediately("inserted", {
            type: "inserted",
            target: this,
            newValue: value
          });
        }

        return value;
      };
      /**
       * Adds an item as a first item in the list.
       *
       * @param item  An item to add
       */


      List.prototype.unshift = function (value) {
        this.insertIndex(0, value);
      };
      /**
       * Adds multiple items to the list.
       *
       * @param items  An Array of items to add
       */


      List.prototype.pushAll = function (values) {
        var _this = this;

        _Array__WEBPACK_IMPORTED_MODULE_3__["each"](values, function (value) {
          _this.push(value);
        });
      };
      /**
       * Copies and adds items from abother list.
       *
       * @param source  A list top copy items from
       */


      List.prototype.copyFrom = function (source) {
        this.pushAll(source._values);
      };
      /**
       * Returns the last item from the list, and removes it.
       *
       * @return Item
       */


      List.prototype.pop = function () {
        var index = this._values.length - 1;
        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
      };
      /**
       * Returns the first item from the list, and removes it.
       *
       * @return Item
       */


      List.prototype.shift = function () {
        return this._values.length ? this.removeIndex(0) : undefined;
      };
      /**
       * Sets multiple items to the list.
       *
       * All current items are removed.
       *
       * @param newArray  New items
       */


      List.prototype.setAll = function (newArray) {
        var _this = this; // @tod if a value exists in both the new and old arrays, don't send remove/insert events


        var oldArray = _Array__WEBPACK_IMPORTED_MODULE_3__["copy"](this._values);

        this._values.length = 0;

        _Array__WEBPACK_IMPORTED_MODULE_3__["each"](newArray, function (value) {
          _this._values.push(value);
        });

        if (this.events.isEnabled("setAll")) {
          this.events.dispatchImmediately("setAll", {
            type: "setAll",
            target: this,
            oldArray: oldArray,
            newArray: this._values // TODO make a copy ?

          });
        }

        if (this.events.isEnabled("removed")) {
          _Array__WEBPACK_IMPORTED_MODULE_3__["each"](oldArray, function (x) {
            _this.events.dispatchImmediately("removed", {
              type: "removed",
              target: _this,
              oldValue: x
            });
          });
        }

        if (this.events.isEnabled("inserted")) {
          _Array__WEBPACK_IMPORTED_MODULE_3__["each"](this._values, function (x) {
            _this.events.dispatchImmediately("inserted", {
              type: "inserted",
              target: _this,
              newValue: x
            });
          });
        }
      };
      /**
       * Removes all items from the list.
       */


      List.prototype.clear = function () {
        this.setAll([]);
      };
      /**
       * Returns a list iterator.
       *
       * @return Iterator
       */


      List.prototype.iterator = function () {
        return _Iterator__WEBPACK_IMPORTED_MODULE_4__["fromArray"](this._values);
      };
      /**
       * Returns an ES6 iterator for the list.
       */


      List.prototype[Symbol.iterator] = function () {
        var length, i;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              length = this._values.length;
              i = 0;
              _a.label = 1;

            case 1:
              if (!(i < length)) return [3
              /*break*/
              , 4];
              return [4
              /*yield*/
              , this._values[i]];

            case 2:
              _a.sent();

              _a.label = 3;

            case 3:
              ++i;
              return [3
              /*break*/
              , 1];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      };
      /**
       * Calls `f` for each element in the list.
       *
       * `f` should have at least one parameter defined which will get a current
       * item, with optional second argument - index.
       */


      List.prototype.each = function (f) {
        _Array__WEBPACK_IMPORTED_MODULE_3__["each"](this._values, f);
      };
      /**
       * Returns a specific range of list items, which can be iterated.
       *
       * @ignore Exclude from docs
       * @todo Code duplication with IndexedIterable
       * @param start  Start index
       * @param end    End index
       * @return Range
       */


      List.prototype.range = function (start, end) {
        if (start <= end) {
          var diff = end - start;
          start = Math.max(start, 0);
          end = Math.min(start + diff, this._values.length);
          return new IndexedIterable(this._values, start, end);
        } else {
          throw new Error("Start index must be lower than end index");
        }
      };
      /**
       * Returns an iterator that has list items sorted backwards.
       *
       * @ignore Exclude from docs
       * @return List
       */


      List.prototype.backwards = function () {
        return new IndexedIterable(this._values, this._values.length, 0);
      };

      return List;
    }();
    /**
     * A version of a [[List]] that has a "template".
     *
     * A template is an instance of an object, that can be used to create new
     * elements in the list without actually needing to create instances for those.
     *
     * When new element is created in the list, e.g. by calling its `create()`
     * method, an exact copy of the element is created (including properties and
     * other attributes), inserted into the list and returned.
     */


    var ListTemplate =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ListTemplate, _super);
      /**
       * Constructor
       *
       * @param t Template object
       */

      function ListTemplate(t) {
        var _this = _super.call(this) || this;

        _this.template = t;
        return _this;
      }

      Object.defineProperty(ListTemplate.prototype, "template", {
        /**
         * @return Template object
         */
        get: function get() {
          return this._template;
        },

        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param v  Template object
         */
        set: function set(v) {
          v.isTemplate = true;
          this._template = v;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all elements from other list.
       *
       * @param source  Source list
       */

      ListTemplate.prototype.copyFrom = function (source) {
        var _this = this;

        _Iterator__WEBPACK_IMPORTED_MODULE_4__["each"](source.iterator(), function (value) {
          _this.push(value.clone());
        });
      };

      ListTemplate.prototype.create = function (make) {
        var clone = make != null ? new make() : this.template.clone();
        this.push(clone);
        return clone;
      };
      /**
       * Creates an exact clone of the list, including its items and template.
       *
       * @return New list
       */


      ListTemplate.prototype.clone = function () {
        var out = new ListTemplate(this.template);
        var values = this.values;
        var length = values.length;

        for (var i = 0; i < length; ++i) {
          out.push(values[i].clone());
        }

        return out;
      };

      return ListTemplate;
    }(List); //# sourceMappingURL=List.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Log.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Log.js ***!
    \**********************************************************************/

  /*! exports provided: log, warn */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsLogJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "log", function () {
      return log;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "warn", function () {
      return warn;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /**
     * Outputs string to console if `verbose` is `true`.
     */


    function log() {
      var messages = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        messages[_i] = arguments[_i];
      }

      if (_Options__WEBPACK_IMPORTED_MODULE_1__["options"].verbose) {
        if (console) {
          console.log.apply(console, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(messages));
        }
      }
    }
    /**
     * Outputs a warning to the console.
     */


    function warn() {
      var messages = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        messages[_i] = arguments[_i];
      }

      if (console) {
        console.warn.apply(console, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(messages));
      }
    } //# sourceMappingURL=Log.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js ***!
    \***********************************************************************/

  /*! exports provided: PI, HALFPI, RADIANS, DEGREES, toNumberRange, round, ceil, stretch, fitToRange, sin, tan, cos, max, min, closest, intersect, invertRange, intersection, getDistance, getHorizontalDistance, getVerticalDistance, getCubicCurveDistance, getScale, getMidPoint, getRotation, getAngle, getCenterShift, getBBox, getCommonRectangle, getPointOnQuadraticCurve, getPointOnCubicCurve, getCubicControlPointA, getCubicControlPointB, adjustTension, normalizeAngle, fitAngleToRange, getArcRect, getArcPoint, isInRectangle, getLineIntersection */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsMathJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PI", function () {
      return PI;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HALFPI", function () {
      return HALFPI;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RADIANS", function () {
      return RADIANS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DEGREES", function () {
      return DEGREES;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toNumberRange", function () {
      return toNumberRange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "round", function () {
      return round;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ceil", function () {
      return ceil;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stretch", function () {
      return stretch;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fitToRange", function () {
      return fitToRange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sin", function () {
      return sin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "tan", function () {
      return tan;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cos", function () {
      return cos;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "max", function () {
      return max;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "min", function () {
      return min;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "closest", function () {
      return closest;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "intersect", function () {
      return intersect;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "invertRange", function () {
      return invertRange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "intersection", function () {
      return intersection;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getDistance", function () {
      return getDistance;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getHorizontalDistance", function () {
      return getHorizontalDistance;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getVerticalDistance", function () {
      return getVerticalDistance;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCubicCurveDistance", function () {
      return getCubicCurveDistance;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getScale", function () {
      return getScale;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getMidPoint", function () {
      return getMidPoint;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getRotation", function () {
      return getRotation;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getAngle", function () {
      return getAngle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCenterShift", function () {
      return getCenterShift;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getBBox", function () {
      return getBBox;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCommonRectangle", function () {
      return getCommonRectangle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getPointOnQuadraticCurve", function () {
      return getPointOnQuadraticCurve;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getPointOnCubicCurve", function () {
      return getPointOnCubicCurve;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCubicControlPointA", function () {
      return getCubicControlPointA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCubicControlPointB", function () {
      return getCubicControlPointB;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "adjustTension", function () {
      return adjustTension;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "normalizeAngle", function () {
      return normalizeAngle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fitAngleToRange", function () {
      return fitAngleToRange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getArcRect", function () {
      return getArcRect;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getArcPoint", function () {
      return getArcPoint;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isInRectangle", function () {
      return isInRectangle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLineIntersection", function () {
      return getLineIntersection;
    });
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * A collection of Math-related functions
     *
     * @todo Comment trigonometric functions?
     */

    /**
     * ============================================================================
     * CONSTANTS
     * ============================================================================
     * @hidden
     */


    var PI = Math.PI;
    var HALFPI = PI / 2;
    var RADIANS = PI / 180;
    var DEGREES = 180 / PI;
    /**
     * Converts any value and fits it into a specific value range.
     *
     * @param value  Source value
     * @param min    Minimum allowable value
     * @param max    Maximum allowable value
     * @return Number
     */

    function toNumberRange(value, min, max) {
      if (_Type__WEBPACK_IMPORTED_MODULE_0__["hasValue"](value)) {
        value = _Type__WEBPACK_IMPORTED_MODULE_0__["toNumber"](value);
        return fitToRange(value, min, max);
      }

      return value;
    }
    /**
     * Rounds the numeric value to whole number or specific precision of set.
     *
     * @param value      Value
     * @param precision  Precision (number of decimal points)
     * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.
     * @return Rounded value
     */


    function round(value, precision, floor) {
      if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](precision) || precision <= 0) {
        var rounded = Math.round(value);

        if (floor) {
          if (rounded - value == 0.5) {
            rounded--;
          }
        }

        return rounded;
      } else {
        var d = Math.pow(10, precision);
        return Math.round(value * d) / d;
      }
    }
    /**
     * Ceils the numeric value to whole number or specific precision of set.
     *
     * @param value      Value
     * @param precision  Precision (number of decimal points)
     * @return Rounded value
     */


    function ceil(value, precision) {
      if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](precision) || precision <= 0) {
        return Math.ceil(value);
      } else {
        var d = Math.pow(10, precision);
        return Math.ceil(value * d) / d;
      }
    }
    /**
     * Stretches `t` so that it will always be between `from` and `to`.
     *
     * @param t     Number from 0 to 1
     * @param from  Lowest possible value
     * @param to    Highest possible value
     * @return Adjusted value
     */


    function stretch(t, from, to) {
      return t * (to - from) + from;
    }
    /**
     * Adjust numeric value so it fits to specific value range.
     *
     * @param value     Value
     * @param minValue  Lowest possible value
     * @param maxValue  Highest possible value
     * @return Adjusted value
     */


    function fitToRange(value, minValue, maxValue) {
      if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](minValue)) {
        if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](maxValue) && maxValue < minValue) {
          var temp = maxValue;
          maxValue = minValue;
          minValue = temp;
        }

        if (value < minValue) {
          value = minValue;
        }
      }

      if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](maxValue)) {
        if (value > maxValue) {
          value = maxValue;
        }
      }

      return value;
    }
    /**
     * Returns sine of a number.
     *
     * @param value  Value
     * @return Sine
     */


    function sin(value) {
      return round(Math.sin(RADIANS * value), 10);
    }
    /**
     * Returns tan of a number.
     *
     * @param value  Value
     * @return Sine
     */


    function tan(value) {
      return round(Math.tan(RADIANS * value), 10);
    }
    /**
     * Returns cosine of a number.
     *
     * @param value  Value
     * @return Cosine
     */


    function cos(value) {
      return round(Math.cos(RADIANS * value), 10);
    }

    function max(left, right) {
      if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](left)) {
        if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](right)) {
          if (right > left) {
            return right;
          } else {
            return left;
          }
        } else {
          return left;
        }
      } else if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](right)) {
        return right;
      } else {
        return null;
      }
    }

    function min(left, right) {
      if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](left)) {
        if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](right)) {
          if (right < left) {
            return right;
          } else {
            return left;
          }
        } else {
          return left;
        }
      } else if (_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](right)) {
        return right;
      } else {
        return null;
      }
    }
    /**
     * Returns the closest value from the array of values to the reference value.
     *
     * @param values  Array of values
     * @param value   Reference value
     * @return Closes value from the array
     */


    function closest(values, referenceValue) {
      return values.reduce(function (prev, curr) {
        return Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev;
      });
    }
    /**
     * Checks whether two ranges of values intersect.
     *
     * @param range1  Range 1
     * @param range2  Range 2
     * @return Any intersecting numbers?
     */


    function intersect(range1, range2) {
      var start1 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range1.start);

      var start2 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range2.start);

      var end1 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range1.end);

      var end2 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range2.end);

      return Math.max(start1, start2) <= Math.min(end1, end2);
    }
    /**
     * Inverts the range of values.
     *
     * @param range  Range
     */


    function invertRange(range) {
      var start = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range.start);

      var end = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range.end);

      return {
        start: 1 - end,
        end: 1 - start
      };
    }
    /**
     * Returns an intersection range between two ranges of values.
     *
     * @param range1  Range 1
     * @param range2  Range 2
     * @return Intersecting value range
     */


    function intersection(range1, range2) {
      var start1 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range1.start);

      var start2 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range2.start);

      var end1 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range1.end);

      var end2 = _Type__WEBPACK_IMPORTED_MODULE_0__["getValue"](range2.end);

      var startMax = Math.max(start1, start2);
      var endMin = Math.min(end1, end2);

      if (endMin < startMax) {
        return undefined;
      } else {
        return {
          start: startMax,
          end: endMin
        };
      }
    }
    /**
     * Returns pixel "distance" between two points.
     *
     * If second point is not specified, distance from {x:0, y:0} point is
     * calculated.
     *
     * @param point1  Point 1
     * @param point2  Point 2
     * @return Distance in relative pixels
     */


    function getDistance(point1, point2) {
      if (!point1) {
        return 0;
      }

      if (!point2) {
        point2 = {
          x: 0,
          y: 0
        };
      }

      return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));
    }
    /**
     * Returns pixel "horizontal distance" between two points.
     *
     * If second point is not specified, distance from {x:0, y:0} point is
     * calculated.
     *
     * @param point1  Point 1
     * @param point2  Point 2
     * @return Distance in relative pixels
     */


    function getHorizontalDistance(point1, point2) {
      if (!point1) {
        return 0;
      }

      if (!point2) {
        point2 = {
          x: 0,
          y: 0
        };
      }

      return Math.abs(point1.x - point2.x);
    }
    /**
     * Returns pixel "vertical distance" between two points.
     *
     * If second point is not specified, distance from {x:0, y:0} point is
     * calculated.
     *
     * @param point1  Point 1
     * @param point2  Point 2
     * @return Distance in relative pixels
     */


    function getVerticalDistance(point1, point2) {
      if (!point1) {
        return 0;
      }

      if (!point2) {
        point2 = {
          x: 0,
          y: 0
        };
      }

      return Math.abs(point1.y - point2.y);
    }
    /**
     * Returns approximate pixel "distance" between two points of cubic curve
     *
     * If second point is not specified, distance from {x:0, y:0} point is
     * calculated.
     *
     * @param point1  Point 1
     * @param point2  Point 2
     * @param controlPointA  Control Point 1
     * @param controlPointB  Control Point 2
     * @param stepCount  number of steps (the more, the more accurate result)
     * @return Distance in relative pixels
     */


    function getCubicCurveDistance(point1, point2, controlPointA, controlPointB, stepCount) {
      if (!point1) {
        return 0;
      }

      if (!point2) {
        point2 = {
          x: 0,
          y: 0
        };
      }

      var distance = 0;
      var prevPoint = point1;

      if (stepCount > 0) {
        for (var s = 0; s <= stepCount; s++) {
          var point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);
          distance += getDistance(prevPoint, point);
          prevPoint = point;
        }
      }

      return distance;
    }
    /**
     * Returns scale based on original and end position of the two points.
     *
     * @param point1       Current position of point 1
     * @param startPoint1  Start position of point 1
     * @param point2       Current position of point 1
     * @param startPoint2  Start position of point 2
     * @return Scale        Calculated scale
     */


    function getScale(point1, startPoint1, point2, startPoint2) {
      var initialDistance = getDistance(startPoint1, startPoint2);
      var currentDistance = getDistance(point1, point2);
      return Math.abs(currentDistance / initialDistance);
    }
    /**
     * Returns an exact mid point between two points.
     *
     * @param point1     Position of point 1
     * @param point2     Position of point 2
     * @return Mid point  Position of mid-point
     */


    function getMidPoint(point1, point2, position) {
      if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](position)) {
        position = 0.5;
      }

      return {
        "x": point1.x + (point2.x - point1.x) * position,
        "y": point1.y + (point2.y - point1.y) * position
      };
    }
    /**
     * Returns difference in angles between starting and ending position of two
     * vectors.
     *
     * @param point1       Current position of point 1
     * @param startPoint1  Start position of point 1
     * @param point2       Current position of point 1
     * @param startPoint2  Start position of point 2
     * @return Angle difference in degrees
     */


    function getRotation(point1, startPoint1, point2, startPoint2) {
      // Get start and end angles
      var startAngle = getAngle(startPoint1, startPoint2);
      var angle = getAngle(point1, point2); // Calculate angle

      var diff = startAngle - angle;

      if (diff < 0) {
        diff += 360;
      }

      return diff;
    }
    /**
     * Calculates angle of the vector based on two or one point.
     *
     * @param point1  Point 1
     * @param point2  Point 2
     * @return Angle in degrees
     */


    function getAngle(point1, point2) {
      if (!point2) {
        point2 = {
          x: point1.x * 2,
          y: point1.y * 2
        };
      }

      var diffX = point2.x - point1.x;
      var diffY = point2.y - point1.y;
      var angle = Math.atan2(diffY, diffX) * DEGREES;

      if (angle < 0) {
        angle += 360;
      }

      return normalizeAngle(angle);
    }
    /**
     * Returns the shift in coordinates of the center when item is rotated, moved
     * and scaled at the same time.
     *
     * @param center       Current center
     * @param point1       Frst reference point
     * @param startPoint1  Original position of the first reference point
     * @param point2       Second reference point
     * @param startPoint2  Original position of the first reference point
     * @return Shift in center point coordinates
     */


    function getCenterShift(center, point1, startPoint1, point2, startPoint2) {
      // Get angle
      var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;

      if (angle < 0) {
        angle += 360;
      } // Get distance between new position


      var distance = getDistance(point1, point2); // Calculate new X

      var x = Math.cos(angle) / distance + point1.x;
      var y = Math.cos(angle) / distance + point1.y;
      var shift = {
        "x": x - center.x,
        "y": y - center.y
      };
      return shift;
    }
    /**
     * Converts an array of points into a bounding box rectangle.
     *
     * Array can contain any number of points.
     *
     * @param points  Points
     * @return Bounding box rectangle
     */


    function getBBox(points) {
      if (points) {
        var length_1 = points.length;

        if (length_1 !== 0) {
          var left = void 0;
          var right = void 0;
          var top_1;
          var bottom = void 0;

          for (var i = 0; i < length_1; i++) {
            var point = points[i];

            if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](right) || point.x > right) {
              right = point.x;
            }

            if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](left) || point.x < left) {
              left = point.x;
            }

            if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](top_1) || point.y < top_1) {
              top_1 = point.y;
            }

            if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](bottom) || point.y > bottom) {
              bottom = point.y;
            }
          }

          return {
            x: left,
            y: top_1,
            width: right - left,
            height: bottom - top_1
          };
        }
      }

      return {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    }
    /**
     * Returns a [[IRectangle]] object representing a common rectangle that fits
     * all passed in rectangles in it.
     *
     * @param rectangles  An array of rectangles
     * @return Common rectangle
     */


    function getCommonRectangle(rectangles) {
      var length = rectangles.length;

      if (length !== 0) {
        var minX = void 0;
        var minY = void 0;
        var maxX = void 0;
        var maxY = void 0;

        for (var i = 0; i < length; i++) {
          var rectangle = rectangles[i];
          minX = min(rectangle.x, minX);
          minY = min(rectangle.y, minY);
          maxX = max(rectangle.x + rectangle.width, maxX);
          maxY = max(rectangle.y + rectangle.height, maxY);
        }

        return {
          x: minX,
          y: minY,
          width: maxX - minX,
          height: maxY - minY
        };
      }
    }
    /**
     * [getPointOnQuadraticCurve description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param pointA        [description]
     * @param pointB        [description]
     * @param controlPoint  [description]
     * @param position      [description]
     * @return [description]
     */


    function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
      var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
      var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
      return {
        x: x,
        y: y
      };
    }
    /**
     * [getPointOnCubicCurve description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param pointA         [description]
     * @param pointB         [description]
     * @param controlPointA  [description]
     * @param controlPointB  [description]
     * @param position       [description]
     * @return [description]
     */


    function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {
      var point = {
        x: 0,
        y: 0
      };
      var mt1 = 1 - position;
      var mt2 = mt1 * mt1;
      var mt3 = mt2 * mt1;
      point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;
      point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;
      return point;
    }
    /**
     * [getCubicControlPointA description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param p0        [description]
     * @param p1        [description]
     * @param p2        [description]
     * @param p3        [description]
     * @param tensionX  [description]
     * @param tensionY  [description]
     * @return [description]
     */


    function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {
      tensionX = adjustTension(tensionX);
      tensionY = adjustTension(tensionY);
      return {
        x: (-p0.x + p1.x / tensionX + p2.x) * tensionX,
        y: (-p0.y + p1.y / tensionY + p2.y) * tensionY
      };
    }
    /**
     * [getCubicControlPointB description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param p0        [description]
     * @param p1        [description]
     * @param p2        [description]
     * @param p3        [description]
     * @param tensionX  [description]
     * @param tensionY  [description]
     * @return [description]
     */


    function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {
      tensionX = adjustTension(tensionX);
      tensionY = adjustTension(tensionY);
      return {
        x: (p1.x + p2.x / tensionX - p3.x) * tensionX,
        y: (p1.y + p2.y / tensionY - p3.y) * tensionY
      };
    }
    /**
     * [adjustTension description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param tension  [description]
     * @return [description]
     */


    function adjustTension(tension) {
      return 1 - tension + 0.00001;
    }
    /**
     * [normalizeAngle description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param value  [description]
     * @return [description]
     */


    function normalizeAngle(value) {
      if (value == 360) {
        return 360;
      }

      return value % 360;
    }
    /**
     * [normalizeAngleToRange description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @todo review this with various angles, can be tested on radar chart with custom start/end angles
     * @param value       [description]
     * @param startAngle  [description]
     * @param endAngle    [description]
     * @return [description]
     */


    function fitAngleToRange(value, startAngle, endAngle) {
      if (startAngle > endAngle) {
        var temp = startAngle;
        startAngle = endAngle;
        endAngle = temp;
      }

      value = normalizeAngle(value);
      var count = (startAngle - normalizeAngle(startAngle)) / 360;

      if (value < startAngle) {
        value += 360 * (count + 1);
      }

      var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
      var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;

      if (value > endAngle) {
        if (value - 360 > startAngle) {
          value -= 360;
        } else {
          if (value < maxEnd) {
            value = endAngle;
          } else {
            value = startAngle;
          }
        }
      }

      if (value < startAngle) {
        if (value > maxStart) {
          value = startAngle;
        } else {
          value = endAngle;
        }
      }

      return value;
    }
    /**
     * Returns [[IRectangle]] of an arc in relative values, assuming that the
     * center is at the circle center.
     *
     * Used to find out max radius of an arc.
     *
     * @ignore Exclude from docs
     * @param startAngle  Start angle
     * @param endAngle    End angle
     * @param radius    	 Relative radius
     * @return Rectangle
     */


    function getArcRect(startAngle, endAngle, radius) {
      var minX = Number.MAX_VALUE;
      var minY = Number.MAX_VALUE;
      var maxX = -Number.MAX_VALUE;
      var maxY = -Number.MAX_VALUE;
      var bpoints = [];

      if (!_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](radius)) {
        radius = 1;
      }

      bpoints.push(getArcPoint(radius, startAngle));
      bpoints.push(getArcPoint(radius, endAngle));
      var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);
      var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);

      for (var angle = fromAngle; angle <= toAngle; angle += 90) {
        if (angle >= startAngle && angle <= endAngle) {
          bpoints.push(getArcPoint(radius, angle));
        }
      }

      for (var i = 0; i < bpoints.length; i++) {
        var pt = bpoints[i];

        if (pt.x < minX) {
          minX = pt.x;
        }

        if (pt.y < minY) {
          minY = pt.y;
        }

        if (pt.x > maxX) {
          maxX = pt.x;
        }

        if (pt.y > maxY) {
          maxY = pt.y;
        }
      }

      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    /**
     * Returns point on arc
     *
     * @param center point
     * @param radius
     * @param arc
     * @return {boolean}
     */


    function getArcPoint(radius, arc) {
      return {
        x: radius * cos(arc),
        y: radius * sin(arc)
      };
    }
    /**
     * Returns true if a point is within rectangle
     *
     * @param point
     * @param rectangle
     * @return {boolean}
     */


    function isInRectangle(point, rectangle) {
      if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {
        return true;
      }

      return false;
    }

    function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {
      var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));
      var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));
      return {
        x: x,
        y: y
      };
    } //# sourceMappingURL=Math.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js ***!
    \**************************************************************************/

  /*! exports provided: Morpher */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsMorpherJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Morpher", function () {
      return Morpher;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_Animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Ease__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Morpher module contains functionality that allows morphing one polygon to
     * another.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Morpher can be used to morph one polygon to some other polygon.
     */


    var Morpher =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Morpher, _super);
      /**
       * Constructor.
       *
       * @param morphable An object to morph
       */

      function Morpher(morphable) {
        var _this = _super.call(this) || this;
        /**
         * A storage for measurements.
         */


        _this._bboxes = [];
        /**
         * Duration of the morphing animation in milliseconds.
         */

        _this.morphDuration = 800;
        /**
         * An easing function to use for morphing animation.
         *
         * @see {@link Ease}
         */

        _this.morphEasing = _utils_Ease__WEBPACK_IMPORTED_MODULE_4__["cubicOut"];
        /**
         * If set to `true`, all separate parts of the multi-part polygon will
         * morph into a single circle or polygon when using built-in methods
         * `morphToCircle()` or `morphToPolygon()`.
         *
         * Otherwise each separate part of polygon will morph to individual target
         * circle or polgyon.
         */

        _this.morphToSingle = true;
        /**
         * A ratio to scale morphed object in relation to the source object.
         */

        _this.scaleRatio = 1;
        _this.className = "Morpher";
        _this.morphable = morphable;

        _this.applyTheme();

        return _this;
      }
      /**
       * Morphs a polygon to another polygon.
       *
       * @param toPoints  Corner points of the target shape
       * @param duration  Duration in milliseconds
       * @param easing    Easing function
       * @return Animation
       */


      Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {
        var points = this.morphable.currentPoints;

        if (points && toPoints) {
          this.sortPoints(points);
          this.sortPoints(toPoints);
          this._morphFromPointsReal = [];
          this._morphToPointsReal = [];

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](duration)) {
            duration = this.morphDuration;
          }

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](easing)) {
            easing = this.morphEasing;
          }

          this._morphFromPointsReal = this.normalizePoints(toPoints, points);
          this._morphToPointsReal = this.normalizePoints(points, toPoints);
          this.morphable.currentPoints = this._morphFromPointsReal;
          var animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_2__["Animation"](this, {
            property: "morphProgress",
            from: 0,
            to: 1
          }, duration, easing);

          this._disposers.push(animation);

          animation.start();
          return animation;
        }
      };
      /**
       * [normalizePoints description]
       *
       * @ignore Exclude from docs
       * @todo Description
       * @param pointsA  Point A
       * @param pointsB  Point B
       * @return Normalized points
       */


      Morpher.prototype.normalizePoints = function (pointsA, pointsB) {
        for (var i = 0, len = pointsA.length; i < len; i++) {
          var surfaceA = pointsA[i][0];
          var holeA = pointsA[i][1];

          var bboxA = _utils_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getBBox"](surfaceA));

          var middleX = bboxA.x + bboxA.width;
          var middleY = bboxA.y + bboxA.height; // check if we have the same in PointsB

          if (!pointsB[i]) {
            pointsB[i] = [];
          } // check if we have surface in pointsB


          if (surfaceA && !pointsB[i][0]) {
            pointsB[i][0] = [{
              x: middleX,
              y: middleY
            }, {
              x: middleX,
              y: middleY
            }];
          }

          if (pointsB[i][0]) {
            pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);
            var distance = Infinity;
            var splitAt = 0;

            for (var a = 0; a < pointsB[i][0].length; a++) {
              var newDistance = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["getDistance"](pointsB[i][0][a], surfaceA[0]);

              if (newDistance < distance) {
                splitAt = a;
                distance = newDistance;
              }
            }

            var partA = pointsB[i][0].slice(0, splitAt);
            var partB = pointsB[i][0].slice(splitAt);
            pointsB[i][0] = partB.concat(partA);
          }

          if (holeA) {
            if (!pointsB[i][1]) {
              pointsB[i][1] = [{
                x: middleX,
                y: middleY
              }, {
                x: middleX,
                y: middleY
              }];
            }

            pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);
          }
        }

        return pointsB;
      };
      /**
       * [sortPoints description]
       *
       * @ignore Exclude from doc
       * @todo Description
       * @param points  [description]
       * @return                        common bbox of points
       */


      Morpher.prototype.sortPoints = function (points) {
        points.sort(function (a, b) {
          var bbox1 = _utils_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getBBox"](a[0]));

          var bbox2 = _utils_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getBBox"](b[0]));

          if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {
            return -1;
          } else {
            return 1;
          }
        });
        var bboxes = [];

        for (var i = 0, len = points.length; i < len; i++) {
          var surface = points[i][0];

          if (surface) {
            bboxes.push(_utils_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getBBox"](surface)));
          }
        }

        return _utils_Math__WEBPACK_IMPORTED_MODULE_3__["getCommonRectangle"](bboxes);
      };
      /**
       * Morphs polygon to a circle (it is actually a polygon which makes a circle).
       *
       * @param radius    Target circle radius (px)
       * @param duration  Duration (ms)
       * @param easing    Easing function
       * @return Animation
       */


      Morpher.prototype.morphToCircle = function (radius, duration, easing) {
        var points = this.morphable.points;
        var commonBBox = this.sortPoints(points);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](duration)) {
          duration = this.morphDuration;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](easing)) {
          easing = this.morphEasing;
        } // surface


        for (var i = 0, len = points.length; i < len; i++) {
          var surface = points[i][0];
          var hole = points[i][1];
          this._morphFromPointsReal[i] = [];
          this._morphToPointsReal[i] = [];

          if (surface) {
            var toPoints = surface;
            var fromPoints = surface;

            var bbox = _utils_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](_utils_Math__WEBPACK_IMPORTED_MODULE_3__["getBBox"](fromPoints)); // this._bboxes[i];


            if (this.morphToSingle) {
              bbox = _utils_Type__WEBPACK_IMPORTED_MODULE_5__["getValue"](commonBBox);
            }

            var middleX = bbox.x + bbox.width / 2;
            var middleY = bbox.y + bbox.height / 2;
            var realRadius = radius;

            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](realRadius)) {
              realRadius = Math.min(bbox.width / 2, bbox.height / 2);
            }

            toPoints = []; // find angle for the first point

            var startAngle = _utils_Math__WEBPACK_IMPORTED_MODULE_3__["getAngle"]({
              x: middleX,
              y: middleY
            }, surface[0]);

            var count = 100;

            if (surface.length > count) {
              count = surface.length;
            }

            fromPoints = this.addPoints(surface, count);
            count = fromPoints.length; // add Points might increase number a bit

            var angle = 360 / (count - 1);

            for (var a = 0; a < count; a++) {
              var realAngle = angle * a + startAngle;
              var pointOnCircle = {
                x: middleX + realRadius * _utils_Math__WEBPACK_IMPORTED_MODULE_3__["cos"](realAngle),
                y: middleY + realRadius * _utils_Math__WEBPACK_IMPORTED_MODULE_3__["sin"](realAngle)
              };
              toPoints[a] = pointOnCircle;
            }

            if (hole && hole.length > 0) {
              for (var i_1 = 0, hlen = hole.length; i_1 < hlen; i_1++) {
                toPoints.push({
                  x: middleX,
                  y: middleY
                });
              }
            }

            this._morphFromPointsReal[i][0] = fromPoints;
            this._morphToPointsReal[i][0] = toPoints;
          }
        }

        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_2__["Animation"](this, {
          property: "morphProgress",
          from: 0,
          to: 1
        }, duration, easing);

        this._disposers.push(animation);

        animation.start();
        return animation;
      };
      /**
       * [addPoints description]
       *
       * @ignore Exclude from doc
       * @todo Description
       * @param points         [description]
       * @param mustHaveCount  [description]
       * @return [description]
       */


      Morpher.prototype.addPoints = function (points, mustHaveCount) {
        var addToSegmentCount = Math.round(mustHaveCount / points.length);
        var newPoints = [];

        for (var i = 0, len = points.length; i < len; i++) {
          var point0 = points[i];
          var point1 = void 0;

          if (i == points.length - 1) {
            point1 = points[0];
          } else {
            point1 = points[i + 1];
          }

          newPoints.push(point0);

          for (var p = 1; p < addToSegmentCount; p++) {
            var percent = p / addToSegmentCount;
            var extraPoint = {
              x: point0.x + (point1.x - point0.x) * percent,
              y: point0.y + (point1.y - point0.y) * percent
            };
            newPoints.push(extraPoint);
          } // stop adding in case we already added more than left in original


          if (newPoints.length + points.length - i == mustHaveCount) {
            addToSegmentCount = 0;
          }
        }

        if (newPoints.length < mustHaveCount && points.length > 0) {
          var lastPoint = points[points.length - 1];

          for (var p = newPoints.length; p < mustHaveCount; p++) {
            // add same as last
            newPoints.push({
              x: lastPoint.x,
              y: lastPoint.y
            });
          }
        }

        return newPoints;
      };
      /**
       * Morphs polygon into a rectangular polygon.
       *
       * @param width     Width of the target rectangle (px)
       * @param height    Height of the target rectangle (px)
       * @param duration  Duration (ms)
       * @param easing    Easing function
       * @return Animation
       */


      Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {
        var points = this.morphable.points;
        this.sortPoints(points);
        this._morphFromPointsReal = [];
        this._morphToPointsReal = [];

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](duration)) {
          duration = this.morphDuration;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](easing)) {
          easing = this.morphEasing;
        } //		let biggestBBox: IRectangle = this._bboxes[this._biggestIndex];
        // surface


        for (var i = 0, len = points.length; i < len; i++) {
          var surface = points[i][0];
          var hole = points[i][1];
          this._morphFromPointsReal[i] = [];
          this._morphToPointsReal[i] = [];

          if (surface) {
            var toPoints = surface;
            var fromPoints = surface;
            var bbox = this._bboxes[i]; // we only work with first area. TODO: maybe we should find the biggest one?

            if (this.morphToSingle) {//if (i != this._biggestIndex) {
              //	bbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };
              //}
            }

            var x = bbox.x;
            var y = bbox.y;
            var realWidth = width;
            var realHeight = height;

            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](realWidth)) {
              realWidth = bbox.width;
            }

            if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["isNumber"](realHeight)) {
              realHeight = bbox.height;
            }

            toPoints = [{
              x: x,
              y: y
            }, {
              x: x + realWidth,
              y: y
            }, {
              x: x + realWidth,
              y: y + realHeight
            }, {
              x: x,
              y: y + realHeight
            }];
            toPoints = this.addPoints(toPoints, surface.length); // if polygon has less points then count, add

            if (surface.length < 4) {
              for (var i_2 = surface.length; i_2 < 4; i_2++) {
                toPoints.push({
                  x: surface[i_2].x,
                  y: surface[i_2].y
                });
              }
            }

            if (hole && hole.length > 0) {
              var middleX = bbox.x + bbox.width / 2;
              var middleY = bbox.y + bbox.height / 2;

              for (var i_3 = 0, hlen = hole.length; i_3 < hlen; i_3++) {
                toPoints.push({
                  x: middleX,
                  y: middleY
                });
              }
            }

            this._morphFromPointsReal[i][0] = fromPoints;
            this._morphToPointsReal[i][0] = toPoints;
          }
        }

        this.morphable.currentPoints = this._morphFromPointsReal;
        var animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_2__["Animation"](this, {
          property: "morphProgress",
          from: 0,
          to: 1
        }, duration, easing);

        this._disposers.push(animation);

        animation.start();
        return animation;
      };

      Object.defineProperty(Morpher.prototype, "morphProgress", {
        /**
         * Returns the progress of morph transition.
         *
         * @return Progress (0-1)
         */
        get: function get() {
          return this._morphProgress;
        },

        /**
         * Progress of the morph transition.
         *
         * Setting this will also trigger actual transformation.
         *
         * @param value  Progress (0-1)
         */
        set: function set(value) {
          this._morphProgress = value;
          var currentPoints = [];

          if (value != null) {
            var fromPoints = this._morphFromPointsReal;
            var toPoints = this._morphToPointsReal;

            if (fromPoints != null && toPoints != null) {
              for (var i = 0, len = fromPoints.length; i < len; i++) {
                var currentArea = [];
                currentPoints.push(currentArea);
                var surfaceFrom = fromPoints[i][0];
                var holeFrom = fromPoints[i][1];
                var surfaceTo = toPoints[i][0];
                var holeTo = toPoints[i][1];

                if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {
                  var currentSurface = [];

                  for (var i_4 = 0, slen = surfaceFrom.length; i_4 < slen; i_4++) {
                    var point0 = surfaceFrom[i_4];
                    var point1 = surfaceTo[i_4];
                    var currentPoint = {
                      x: point0.x + (point1.x * this.scaleRatio - point0.x) * value,
                      y: point0.y + (point1.y * this.scaleRatio - point0.y) * value
                    };
                    currentSurface.push(currentPoint);
                  }

                  currentArea[0] = currentSurface;
                }

                if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {
                  var currentHole = [];

                  for (var i_5 = 0, hlen = holeFrom.length; i_5 < hlen; i_5++) {
                    var point0 = holeFrom[i_5];
                    var point1 = holeTo[i_5];
                    var currentPoint = {
                      x: point0.x + (point1.x * this.scaleRatio - point0.x) * value,
                      y: point0.y + (point1.y * this.scaleRatio - point0.y) * value
                    };
                    currentHole.push(currentPoint);
                  }

                  currentArea[1] = currentHole;
                }
              }
            }
          }

          this.morphable.currentPoints = currentPoints;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Restores the polygon to its original appearance.
       *
       * @param duration  Duration (ms)
       * @param easing    Easing function
       * @return Animation
       */

      Morpher.prototype.morphBack = function (duration, easing) {
        this._morphToPointsReal = this._morphFromPointsReal;
        this._morphFromPointsReal = this.morphable.currentPoints;

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](duration)) {
          duration = this.morphDuration;
        }

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_5__["hasValue"](easing)) {
          easing = this.morphEasing;
        }

        var animation = new _utils_Animation__WEBPACK_IMPORTED_MODULE_2__["Animation"](this, {
          property: "morphProgress",
          from: 0,
          to: 1
        }, duration, easing);

        this._disposers.push(animation);

        animation.start();
        return animation;
      };

      Object.defineProperty(Morpher.prototype, "animations", {
        /**
         * Returns a list of morph animations currently being played.
         *
         * @return List of animations
         */
        get: function get() {
          if (!this._animations) {
            this._animations = [];

            this._disposers.push(new _utils_Animation__WEBPACK_IMPORTED_MODULE_2__["AnimationDisposer"](this._animations));
          }

          return this._animations;
        },
        enumerable: true,
        configurable: true
      });
      return Morpher;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]); //# sourceMappingURL=Morpher.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js ***!
    \**********************************************************************/

  /*! exports provided: load, readBlob */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsNetJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "load", function () {
      return load;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "readBlob", function () {
      return readBlob;
    });
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * A collection of network-related functions
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Loads an external file via its URL.
     *
     * Please note that this is an asynchronous function.
     *
     * It will not return the result, but rather a `Promise`.
     *
     * You can use the `await` notion, or `then()`.
     *
     * ```TypeScript
     * // Using await
     * let response = await Net.load( "http://www.my.com/data.json" );
     * console.log( response.response );
     *
     * // Using then()
     * Net.load( "http://www.my.com/data.json" ).then( ( response ) => {
     *   console.log( response.response );
     * } );
     * ```
     * ```JavaScript
     * // Using then()
     * Net.load( "http://www.my.com/data.json" ).then( function( response ) {
     *   console.log( response.response );
     * } );
     * ```
     *
     * @async
     * @param url      URL for the file to load
     * @param target   A target element that is requesting the net load
     * @param options  Request options
     * @return Result (Promise)
     */


    function load(url, target, options) {
      return new Promise(function (success, error) {
        // Is return type Blob?
        var isBlob = _Type__WEBPACK_IMPORTED_MODULE_0__["hasValue"](options) && options.responseType == "blob"; // Create request and set up handlers

        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          if (xhr.status === 200) {
            var response = void 0;
            var blob_1;

            if (isBlob) {
              blob_1 = xhr.response;
              readBlob(blob_1).then(function (response) {
                var output = {
                  xhr: xhr,
                  error: false,
                  response: response,
                  blob: blob_1,
                  type: xhr.getResponseHeader("Content-Type"),
                  target: target
                };
                success(output);
              });
              return;
            } else {
              response = xhr.responseText || xhr.response;
            }

            var output = {
              xhr: xhr,
              error: false,
              response: response,
              blob: blob_1,
              type: xhr.getResponseHeader("Content-Type"),
              target: target
            };
            success(output);
          } else {
            error({
              xhr: xhr,
              error: true,
              type: xhr.getResponseHeader("Content-Type"),
              target: target
            });
          }
        };

        xhr.onerror = function () {
          error({
            xhr: xhr,
            error: true,
            type: xhr.getResponseHeader("Content-Type"),
            target: target
          });
        }; // Open request


        xhr.open("GET", url, true);

        if (options && options.withCredentials) {
          xhr.withCredentials = true;
        } // Process options


        if (_Type__WEBPACK_IMPORTED_MODULE_0__["hasValue"](options)) {
          if (_Type__WEBPACK_IMPORTED_MODULE_0__["hasValue"](options.requestHeaders)) {
            for (var i = 0; i < options.requestHeaders.length; i++) {
              var header = options.requestHeaders[i];
              xhr.setRequestHeader(header.key, header.value);
            }
          }

          if (_Type__WEBPACK_IMPORTED_MODULE_0__["hasValue"](options.responseType)) {
            xhr.responseType = options.responseType;
          }
        } // Send request


        xhr.send();
      });
    }
    /**
     * Returns textual representation of a Blob object.
     *
     * @param   blob  Target blob
     * @return        Text promise
     */


    function readBlob(blob) {
      return new Promise(function (success, error) {
        var reader = new FileReader();

        reader.onload = function (event) {
          success(reader.result);
        };

        reader.onerror = function (e) {
          error(e);
        };

        reader.readAsText(blob);
      });
    } //# sourceMappingURL=Net.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Number.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Number.js ***!
    \*************************************************************************/

  /*! exports provided: order */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsNumberJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "order", function () {
      return order;
    });
    /**
     * ============================================================================
     * COMPARING FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Comparing function used for ordering.
     *
     * @ignore Exclude from docs
     * @param a  Number 1
     * @param b  Number 2
     * @return Result
     */


    function order(a, b) {
      if (a === b) {
        return 0;
      } else if (a < b) {
        return -1;
      } else {
        return 1;
      }
    } //# sourceMappingURL=Number.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js ***!
    \*************************************************************************/

  /*! exports provided: entries, keys, keysOrdered, hasKey, getKey, eachContinue, each, eachOrdered, copy, merge, copyProperties, softCopyProperties, forceCopyProperties, copyAllProperties */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsObjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "entries", function () {
      return entries;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "keys", function () {
      return keys;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "keysOrdered", function () {
      return keysOrdered;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hasKey", function () {
      return hasKey;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getKey", function () {
      return getKey;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "eachContinue", function () {
      return eachContinue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "each", function () {
      return each;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "eachOrdered", function () {
      return eachOrdered;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copy", function () {
      return copy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "merge", function () {
      return merge;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copyProperties", function () {
      return copyProperties;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "softCopyProperties", function () {
      return softCopyProperties;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forceCopyProperties", function () {
      return forceCopyProperties;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copyAllProperties", function () {
      return copyAllProperties;
    });
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * UTILITY FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Returns an iterator for all entries in object.
     *
     * Can be used to safely iterate through all properties of the object.
     *
     * @param object  Source object
     * @returns Iterator
     */


    function entries(object) {
      return function (push) {
        // TODO make this more efficient ?
        for (var key in object) {
          if (hasKey(object, key)) {
            if (!push([key, object[key]])) {
              break;
            }
          }
        }
      };
    }
    /**
     * Returns an array of object's property names.
     *
     * @param object  Source object
     * @returns Object property names
     */


    function keys(object) {
      var output = [];

      for (var key in object) {
        if (hasKey(object, key)) {
          output.push(key);
        }
      }

      return output;
    }
    /**
     * Returns an array of object's property names ordered using specific ordering
     * function.
     *
     * @param object  Source object
     * @param order   Ordering function
     * @returns Object property names
     */


    function keysOrdered(object, order) {
      return keys(object).sort(order);
    }
    /**
     * Checks if `object` has a specific `key`.
     *
     * @param object  Source object
     * @param key     Property name
     * @returns Has key?
     */


    function hasKey(object, key) {
      return {}.hasOwnProperty.call(object, key);
    }
    /**
     * Returns value of the specific `key`.
     *
     * @param object  Source object
     * @param key     Property name
     * @returns Key value
     */


    function getKey(object, key) {
      return object[key];
    }
    /**
     * Iterates through all properties of the object calling `fn` for each of them.
     *
     * If return value of the function evaluates to `false` further iteration is
     * cancelled.
     *
     * @param object  Source object
     * @param fn      Callback function
     */


    function eachContinue(object, fn) {
      for (var key in object) {
        if (hasKey(object, key)) {
          if (!fn(key, object[key])) {
            break;
          }
        }
      }
    }
    /**
     * Iterates through all properties of the object calling `fn` for each of them.
     *
     * @param object  Source object
     * @param fn      Callback function
     */


    function each(object, fn) {
      eachContinue(object, function (key, value) {
        fn(key, value);
        return true;
      });
    }
    /**
     * Orders object properties using custom `ord` function and iterates through
     * them calling `fn` for each of them.
     *
     * @param object  Source object
     * @param fn      Callback function
     * @param order   Ordering function
     */


    function eachOrdered(object, fn, ord) {
      _Array__WEBPACK_IMPORTED_MODULE_0__["each"](keysOrdered(object, ord), function (key) {
        fn(key, object[key]);
      });
    }
    /**
     * Returns a copy of the object.
     *
     * @param object  Source object
     * @returns Copy of the object
     */


    function copy(object) {
      return Object.assign({}, object);
    }
    /**
     * Merges two objects and returns a new object that contains properties from
     * both source objects.
     *
     * @param object1  Source object #1
     * @param object2  Source object #2
     * @returns Combined object
     */


    function merge(object1, object2) {
      return Object.assign({}, object1, object2);
    }
    /**
     * Copies a list of properties from one object to another.
     *
     * Will not copy empty properties.
     *
     * @param source  Source object
     * @param target    Target object
     * @param keys  List of keys to copy
     */


    function copyProperties(source, target, keys) {
      _Array__WEBPACK_IMPORTED_MODULE_0__["each"](keys, function (key) {
        if (_Type__WEBPACK_IMPORTED_MODULE_1__["hasValue"](source[key])) {
          target[key] = source[key];
        }
      });
    }
    /**
     * Copies a list of properties from one object to another only if target does't have value of the property set.
     *
     * Will not copy empty properties.
     *
     * @param source  Source object
     * @param target    Target object
     * @param keys  List of keys to copy
     */


    function softCopyProperties(source, target, keys) {
      _Array__WEBPACK_IMPORTED_MODULE_0__["each"](keys, function (key) {
        if (_Type__WEBPACK_IMPORTED_MODULE_1__["hasValue"](source[key]) && !_Type__WEBPACK_IMPORTED_MODULE_1__["hasValue"](target[key])) {
          target[key] = source[key];
        }
      });
    }
    /**
     * Copies a list of properties from one object to another.
     *
     * Will copy empty properties.
     *
     * @param source  Source object
     * @param target    Target object
     * @param keys  List of keys to copy
     */


    function forceCopyProperties(source, target, keys) {
      _Array__WEBPACK_IMPORTED_MODULE_0__["each"](keys, function (key) {
        target[key] = source[key];
      });
    }
    /**
     * Copies all properties from one object to another.
     *
     * @param from  Source object
     * @param to    Target object
     */


    function copyAllProperties(from, to) {
      copyProperties(from, to, keys(from));
    } //# sourceMappingURL=Object.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Order.js":
  /*!************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Order.js ***!
    \************************************************************************/

  /*! exports provided: reverse, or */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsOrderJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "reverse", function () {
      return reverse;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "or", function () {
      return or;
    });
    /**
     * A collection of functions for ordering.
     */

    /**
     * [reverse description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param a  [description]
     * @return [description]
     */


    function reverse(a) {
      switch (a) {
        case 0:
          return 0;

        case -1:
          return 1;

        case 1:
          return -1;
      }
    }
    /**
     * [or description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param a  Item 1
     * @param b  Item 2
     * @return [description]
     */


    function or(a, b) {
      if (a === 0) {
        return b;
      } else {
        return a;
      }
    } //# sourceMappingURL=Order.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/PatternSet.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/PatternSet.js ***!
    \*****************************************************************************/

  /*! exports provided: PatternSet */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsPatternSetJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PatternSet", function () {
      return PatternSet;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony import */


    var _InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony import */


    var _rendering_fills_LinePattern__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../rendering/fills/LinePattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js");
    /* harmony import */


    var _rendering_fills_RectPattern__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../rendering/fills/RectPattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RectPattern.js");
    /* harmony import */


    var _rendering_fills_CirclePattern__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../rendering/fills/CirclePattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/CirclePattern.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * This module contains PatternSet object definition
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * REQUISITES
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Defines an interable list of distinctive patterns that can be used in
     * conjunction to colors to generate various fill patterns.
     *
     * @important
     * @since 4.7.5
     * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info
     */


    var PatternSet =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PatternSet, _super);
      /**
       * Constructor
       */

      function PatternSet() {
        var _this = _super.call(this) || this;
        /**
         * Holds the list of the colors in this set. (preset or auto-generated)
         */


        _this._list = [];
        /**
         * Current step.
         */

        _this._currentStep = 0;
        /**
         * If set to non-zero value, the PatternSet will start iterating patterns from
         * that particular index, not the first pattern in the list.
         */

        _this._startIndex = 0;
        /**
         * Current pass in cycle. Once all patterns in the list are iterated,
         * iteration restarts from beginning and currentPass is incremented.
         */

        _this._currentPass = 0;
        /**
         * A base color. If there are no colors pre-set in the color list, ColorSet
         * will use this color as a base when generating new ones, applying
         * `stepOptions` and `passOptions` to this base color.
         */

        _this.baseColor = new _Color__WEBPACK_IMPORTED_MODULE_2__["Color"]({
          r: 103,
          g: 183,
          b: 220
        });
        _this.className = "PatternSet"; // Set base color to be used for pattern elements

        var interfaceColors = new _InterfaceColorSet__WEBPACK_IMPORTED_MODULE_3__["InterfaceColorSet"](); // Set default patterns

        _this.list = [_this.getLinePattern(1000, 45, 1, 6), _this.getRectPattern(10, 0, 4), _this.getLinePattern(1000, -45, 1, 6), _this.getCirclePattern(11, 2, true), _this.getLinePattern(6, 90, 1), _this.getRectPattern(12, 45, 6, true), _this.getLinePattern(6, 0, 1), _this.getRectPattern(7, 0, 4), _this.getLinePattern(1000, 45, 2, 3, "4,2"), _this.getCirclePattern(9, 3, false), _this.getLinePattern(1000, -45, 2, 3, "4,2"), _this.getRectPattern(10, 45, Math.sqrt(50)), _this.getLinePattern(1000, -45, 2, 1), _this.getRectPattern(10, 0, 9), _this.getLinePattern(1000, 45, 2, 1), _this.getLinePattern(1000, 0, 3, 1), _this.getRectPattern(10, 45, 10), _this.getLinePattern(1000, 90, 3, 1)];
        _this.baseColor = interfaceColors.getFor("stroke");

        _this.applyTheme();

        return _this;
      }

      PatternSet.prototype.getLinePattern = function (size, rotation, thickness, gap, strokeDashArray) {
        var pattern = new _rendering_fills_LinePattern__WEBPACK_IMPORTED_MODULE_4__["LinePattern"]();
        pattern.width = size;
        pattern.height = size;
        pattern.stroke = this.baseColor;
        pattern.gap = gap;
        pattern.strokeDasharray = strokeDashArray;
        pattern.strokeWidth = thickness;
        pattern.rotation = rotation;
        return pattern;
      };

      PatternSet.prototype.getRectPattern = function (size, rotation, thickness, outline) {
        var pattern = new _rendering_fills_RectPattern__WEBPACK_IMPORTED_MODULE_5__["RectPattern"]();
        pattern.width = size;
        pattern.height = size;
        pattern.rectWidth = thickness;
        pattern.rectHeight = thickness;

        if (outline) {
          pattern.stroke = this.baseColor;
          pattern.strokeWidth = 1;
          pattern.fillOpacity = 0;
        } else {
          pattern.fill = this.baseColor;
          pattern.strokeWidth = 0;
        }

        if (rotation != 0) {
          pattern.shapeRendering = "auto";
        }

        pattern.rotation = rotation;
        return pattern;
      };

      PatternSet.prototype.getCirclePattern = function (size, radius, outline) {
        var pattern = new _rendering_fills_CirclePattern__WEBPACK_IMPORTED_MODULE_6__["CirclePattern"]();
        pattern.width = size;
        pattern.height = size;
        pattern.shapeRendering = "auto";
        pattern.radius = radius;

        if (outline) {
          pattern.stroke = this.baseColor;
          pattern.strokeWidth = 1;
          pattern.fillOpacity = 0;
        } else {
          pattern.fill = this.baseColor;
          pattern.strokeWidth = 0;
        }

        return pattern;
      };

      Object.defineProperty(PatternSet.prototype, "list", {
        /**
         * @return Pattern list
         */
        get: function get() {
          return this._list;
        },

        /**
         * List of pre-defined patterns to be used in set.
         *
         * @param value Pattern list
         */
        set: function set(value) {
          this._list = value;
          this.reset();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns the next pattern in list.
       *
       * @return Pattern
       */

      PatternSet.prototype.next = function () {
        var pattern = this.getIndex(this.currentStep);
        this._currentStep++;
        return pattern;
      };
      /**
       * Returns a color at specific index in the list.
       *
       * @param  i  Index
       * @return Pattern
       */


      PatternSet.prototype.getIndex = function (i) {
        var pattern;

        while (this.list.length <= i) {
          this.generatePatterns();
        }

        pattern = this.list[i];
        return pattern.clone();
      };
      /**
       * Generates a new set of patterns.
       */


      PatternSet.prototype.generatePatterns = function () {
        var count = this.list.length / (this._currentPass + 1);
        this._currentPass++;

        for (var i = 0; i < count; i++) {
          this.list.push(this.list[i].clone());
        }
      };
      /**
       * Resets internal iterator.
       *
       * Calling `next()` after this will return the very first color in the color
       * list, even if it was already returned before.
       */


      PatternSet.prototype.reset = function () {
        this._currentStep = this._startIndex;
      };

      Object.defineProperty(PatternSet.prototype, "currentStep", {
        /**
         * @return Step
         */
        get: function get() {
          return this._currentStep;
        },

        /**
         * Sets current color iteration. You can use this property to skip some
         * colors from iteration. E.g. setting it to `10` will skip first ten
         * colors.
         *
         * Please note that the number is zero-based.
         *
         * @param value  Step
         */
        set: function set(value) {
          this._currentStep = value;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(PatternSet.prototype, "startIndex", {
        /**
         * @return Index
         */
        get: function get() {
          return this._startIndex;
        },

        /**
         * If set to non-zero value, the ColorSet will start iterating colors from
         * that particular index, not the first color in the list.
         *
         * @default 0
         * @param  value  Index
         */
        set: function set(value) {
          this._startIndex = value;
          this.reset();
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Processes JSON-based config before it is applied to the object.
       *
       * @ignore Exclude from docs
       * @param config  Config
       */

      PatternSet.prototype.processConfig = function (config) {
        // if (config) {
        // 	// Set up axis ranges
        // 	if ($type.hasValue(config.list) && $type.isArray(config.list)) {
        // 		for (let i = 0, len = config.list.length; i < len; i++) {
        // 			if (!(config.list[i] instanceof Color)) {
        // 				config.list[i] = color(config.list[i]);
        // 			}
        // 		}
        // 	}
        // }
        _super.prototype.processConfig.call(this, config);
      };

      return PatternSet;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"]);
    /**
     * Register class in system, so that it can be instantiated using its name from
     * anywhere.
     *
     * @ignore
     */


    _Registry__WEBPACK_IMPORTED_MODULE_7__["registry"].registeredClasses["PatternSet"] = PatternSet; //# sourceMappingURL=PatternSet.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js ***!
    \**************************************************************************/

  /*! exports provided: Percent, percent, isPercent */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsPercentJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Percent", function () {
      return Percent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "percent", function () {
      return percent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPercent", function () {
      return isPercent;
    });
    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Represents a relative value (percent).
     *
     * The Percent object, can be instantiated using two ways:
     *
     * * Via `new Percent(X)`.
     * * Via `am4core.percent(X)`.
     *
     * `Percent` type objects can be used in a number of dual-measuring or
     * positioning properties, like `width`. E.g.:
     *
     * ```TypeScript
     * chart.paddingRight = new Percent(10);
     * // or
     * chart.paddingRight = am4core.percent(10);
     * ```
     * ```JavaScript
     * chart.paddingRight = new Percent(10);
     * // or
     * chart.paddingRight = am4core.percent(10);
     * ```
     * ```JSON
     * {
     *   // ...
     *   "paddingRight": "10%"
     * }
     * ```
     */


    var Percent =
    /** @class */
    function () {
      /**
       * Constructor.
       *
       * @param percent  Percent value
       */
      function Percent(percent) {
        this._value = percent;
      }

      Object.defineProperty(Percent.prototype, "value", {
        /**
         * Relative value.
         *
         * E.g. 100% is 1, 50% is 0.5, etc.
         *
         * This is useful to apply transformations to other values. E.g.:
         *
         * ```TypeScript
         * let value = 256;
         * let percent = new am4core.Percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         * ```JavaScript
         * var value = 256;
         * var percent = new am4core.Percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         *
         * Alternatively, you can use `am4core.percent()` helper function:
         *
         * ```TypeScript
         * let value = 256;
         * let percent = am4core.percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         * ```JavaScript
         * var value = 256;
         * var percent = am4core.percent(50);
         * console.log(value * percent.value); // outputs 128
         * ```
         *
         * @readonly
         * @return Relative value
         */
        get: function get() {
          return this._value / 100;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Percent.prototype, "percent", {
        /**
         * Value in percent.
         *
         * @return Percent
         */
        get: function get() {
          return this._value;
        },
        enumerable: true,
        configurable: true
      });

      Percent.prototype.toString = function () {
        return "" + this._value + "%";
      };

      return Percent;
    }();
    /**
     * Converts numeric percent value to a proper [[Percent]] object.
     *
     * ```TypeScript
     * pieSeries.radius = am4core.percent(80);
     * ```
     * ```JavaScript
     * pieSeries.radius = am4core.percent(80);
     * ```
     *
     * @param value  Percent
     * @return Percent object
     */


    function percent(value) {
      return new Percent(value);
    }
    /**
     * Checks if value is a [[Percent]] object.
     *
     * @ignore Exclude from docs
     * @param value  Input value
     * @return Is percent?
     */


    function isPercent(value) {
      return value instanceof Percent;
    } //# sourceMappingURL=Percent.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Plugin.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Plugin.js ***!
    \*************************************************************************/

  /*! exports provided: Plugin */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsPluginJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Plugin", function () {
      return Plugin;
    });
    /**
     * A plugin base class.
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * This is a base class that provides core functionality for plugins.
     *
     * The easiest way to start off with a new plugin is to extend this class.
     *
     * It will provide all the mandatory functionality, such as disposers.
     *
     * @since 4.2.2
     */


    var Plugin =
    /** @class */
    function () {
      /**
       * Constructor
       */
      function Plugin() {
        /**
         * Is this object disposed?
         */
        this._disposed = false;
        /**
         * List of IDisposer which will be disposed when the BaseObject is disposed.
         *
         * @ignore Exclude from docs
         */

        this._disposers = []; // Nothing to do here
      }
      /**
       * Decorates series with required events and adapters used to hijack its
       * data.
       */


      Plugin.prototype.init = function () {// Does nothing
        // Override it
      };
      /**
       * Returns if this element is already disposed.
       *
       * @return Is disposed?
       */


      Plugin.prototype.isDisposed = function () {
        return this._disposed;
      };
      /**
       * Disposes this object and related stuff.
       */


      Plugin.prototype.dispose = function () {
        if (!this._disposed) {
          this._disposed = true;
          var a = this._disposers;
          this._disposers = null;

          while (a.length !== 0) {
            var disposer = a.shift();
            disposer.dispose();
          }
        }
      };

      return Plugin;
    }(); //# sourceMappingURL=Plugin.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Responsive.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Responsive.js ***!
    \*****************************************************************************/

  /*! exports provided: Responsive, defaultRules, ResponsiveBreakpoints */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsResponsiveJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Responsive", function () {
      return Responsive;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defaultRules", function () {
      return defaultRules;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ResponsiveBreakpoints", function () {
      return ResponsiveBreakpoints;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _utils_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony import */


    var _utils_Adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony import */


    var _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _utils_Array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Responsive functionality module.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */

    /**
     * Responsive is responsible for overriding certain properties when conditions
     * are met.
     *
     * This class is used to dynamically apply and change certain chart properties
     * based on the current values of properties.
     *
     * Mainly, this is used with [[Sprite]]'s dimensional properties, like
     * `pixelWidth` and `pixelHeight`. However, it can be used to dynamically
     * change any property, based on any other property's value.
     *
     * A default responsive rules are disabled.
     *
     * To enable, set `enabled = false`. E.g.:
     *
     * ```TypeScript
     * chart.responsive.enabled = true;
     * ```
     * ```JavaScript
     * chart.responsive.enabled = true;
     * ```
     *
     * @see {@link IResponsiveEvents} for a list of available events
     * @see {@link IResponsiveAdapters} for a list of available Adapters
     * @todo Add default rules
     * @todo Watch for rule modification
     * @important
     */


    var Responsive =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Responsive, _super);
      /**
       * Constructor
       */

      function Responsive() {
        var _this = // Init
        _super.call(this) || this;
        /**
         * Holds a list of responsive rules organized by object type.
         */


        _this._rules = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
        /**
         * Holds the list of the default responsive rules.
         * @deprecated
         */
        //protected _defaultRules = new List<IResponsiveRule>();

        /**
         * Holds the list of currently applied rules.
         */

        _this._appliedRules = {};
        /**
         * Used to keep track of objects that have rules applied at the moment.
         */

        _this._appliedTargets = [];
        /**
         * Use default rules in addition to the user-defined ones?
         */

        _this._useDefault = true;
        /**
         * Adapter.
         */

        _this.adapter = new _utils_Adapter__WEBPACK_IMPORTED_MODULE_3__["Adapter"](_this);
        /**
         * Indicates of responsive rules application is enabled.
         */

        _this._enabled = false;
        /**
         * Holds disposers for all events added by this class.
         */

        _this._responsiveDisposers = [];
        /**
         * Collection of objects and state ids that do not have any properties set.
         */

        _this._noStates = [];
        _this.className = "Responsive"; // Set up rules list events

        _this.rules.events.on("inserted", function () {
          _this.checkRules();
        }, true);

        _this.rules.events.on("removed", function () {
          _this.checkRules();
        }, true);

        _this._disposers.push(_this.rules.events); // Apply theme


        _this.applyTheme();

        return _this;
      }

      Object.defineProperty(Responsive.prototype, "component", {
        /**
         * @return Target object
         */
        get: function get() {
          return this._component;
        },

        /**
         * A target object that responsive rules will need to be applied to.
         *
         * @param value  Target object
         */
        set: function set(value) {
          var _this = this; // Check if it's the same


          if (value == this._component) {
            return;
          } // Check if we already have a set up component and remove its events


          this.disposeResponsiveHandlers(); // Set

          this._component = value; // Set up resize monitoring events

          this._responsiveDisposers.push(_utils_Type__WEBPACK_IMPORTED_MODULE_7__["getValue"](this.component).events.on("sizechanged", function () {
            _this.checkRules();
          }, this));

          this._responsiveDisposers.push(_utils_Type__WEBPACK_IMPORTED_MODULE_7__["getValue"](this.component).events.on("datavalidated", function () {
            if (_this._component.isReady()) {
              _this.checkRules(true);
            }
          }, this)); // Enable resoponsive


          this.enabled = true;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Responsive.prototype, "enabled", {
        /**
         * @return Apply responsive rules?
         */
        get: function get() {
          return this.adapter.apply("enabled", this._enabled);
        },

        /**
         * Should responsive rules be checked against and applied?
         *
         * @default false
         * @param value  Apply responsive rules?
         */
        set: function set(value) {
          if (this._enabled != value) {
            this._enabled = value; // Run `applyRules` so that any currently applied rules can be reset

            this.applyRules();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Responsive.prototype, "useDefault", {
        /**
         * @return Use default rules?
         */
        get: function get() {
          return this.adapter.apply("useDefault", this._useDefault);
        },

        /**
         * Should default responsive rules be applied in addition to user-defined
         * ones.
         *
         * User-defined rules will take precedence over default rules whenever they
         * produce conflicting settings.
         *
         * @default true
         * @param value  Use default rules?
         */
        set: function set(value) {
          if (this._useDefault != value) {
            this._useDefault = value; // Run `applyRules` so that any currently applied rules can be reset

            this.applyRules();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Responsive.prototype, "rules", {
        /**
         * @return User-defined rules
         */
        get: function get() {
          return this.adapter.apply("rules", this._rules);
        },

        /**
         * User-defined responsive rules.
         *
         * User-defined rules will take precedence over default rules whenever they
         * produce conflicting settings.
         *
         * Use `allRules` to get all applicable rules including default and
         * user-defined ones.
         *
         * @param value  User-defined rules
         */
        set: function set(value) {
          this._rules = value;
          this._enabled = true;
          this.applyRules();
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Responsive.prototype, "defaultRules", {
        /**
         * Default responsive rules.
         *
         * @readonly
         * @return List of responsive rules
         */
        get: function get() {
          return this.adapter.apply("defaultRules", defaultRules);
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Responsive.prototype, "allRules", {
        /**
         * Returns all rules: default rules (if not disabled) combined with
         * user-defined ones.
         *
         * @readonly
         * @return List of all applicable rules
         */
        get: function get() {
          // Create empty list
          var rules = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"](); // Add default rules if not disabled
          // A code, requesting `allRules` must ensure loading of default rules
          // by calling `loadDefaultRules()`

          if (this.useDefault) {
            rules.copyFrom(this.defaultRules);
          } // Add user-defined ones


          rules.copyFrom(this.rules);
          return this.adapter.apply("allRules", rules);
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Checks if rule by the particular id currently applied.
       *
       * @param ruleId  Rule ID
       * @return Is currently applied?
       */

      Responsive.prototype.isApplied = function (ruleId) {
        var rule = this._appliedRules[ruleId];
        return _utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](rule) ? rule : false;
      };
      /**
       * Checks which responsive rules currently satisfy their conditions and
       * should be applied, or unapplied.
       *
       * @ignore Exclude from docs
       */


      Responsive.prototype.checkRules = function (force) {
        var _this = this;

        if (force === void 0) {
          force = false;
        } // Check if there are any rules


        var rules = this.allRules;

        if (!rules || rules.length == 0) {
          return;
        } // Init a list of rules to be applied


        var rulesChanged = false;

        var component = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["getValue"](this.component); // Check which rules match


        _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["each"](rules.iterator(), function (rule) {
          // Check if rule has an id
          if (!rule.id) {
            rule.id = _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getUniqueId();
          } // Init indicator if this rule should be applied


          var apply = rule.relevant(component); // Let's check if this rule needs to be applied

          if (apply && !_this.isApplied(rule.id) || !apply && _this.isApplied(rule.id)) {
            rulesChanged = true;
          }

          _this._appliedRules[rule.id] = apply;
        });

        if (force) {
          rulesChanged = true;
        } // Check if we need to re-apply the rules


        if (rulesChanged) {
          if (!this.component.isReady()) {
            // The chart is not yet ready (built)
            // We will hide the chart and delay application of rules
            // until "ready" event kicks in
            //component.hide(0);
            component.hidden = true;
            component.events.once("ready", function (ev) {
              ev.target.show(0);

              _this.applyRules();
            });
            return;
          }

          this.dispatchImmediately("ruleschanged");
          this.applyRules();
        }
      };
      /**
       * Applies current rules to the object.
       *
       * @ignore Exclude from docs
       * @param target Target object
       * @todo Better type check
       */


      Responsive.prototype.applyRules = function (target) {
        var _this = this; // If no target supplied, we assume the top-level element


        var newTarget = _utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](target) ? target : _utils_Type__WEBPACK_IMPORTED_MODULE_7__["getValue"](this.component); // Check each rule

        var defaultStateApplied = false;

        if (this.enabled) {
          var isApplied_1 = false;

          _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["each"](this.allRules.iterator(), function (rule) {
            // Get relevant state
            var state = _this.getState(rule, newTarget); // If there's a state, it means it needs to be applied


            if (state) {
              // Check if default state was already applied to this element.
              // We don't want to go resetting default states to ALL element,
              // if they don't have responsive states.
              if (!defaultStateApplied) {
                // Nope, reset states (instantly).
                if (_utils_Array__WEBPACK_IMPORTED_MODULE_6__["indexOf"](_this._appliedTargets, newTarget.uid) !== -1) {
                  // But only if this element has any rules applied, otherwise no
                  // point in setting current state
                  newTarget.applyCurrentState(0);
                }

                defaultStateApplied = true;
              } // Is this rule currently applied?


              if (_this.isApplied(_utils_Type__WEBPACK_IMPORTED_MODULE_7__["getValue"](rule.id))) {
                // Yes. Apply the responsive state
                state.transitionDuration = 0;
                newTarget.setState(state);

                _this.dispatchImmediately("ruleapplied", {
                  rule: rule
                });

                isApplied_1 = true;
              }
            }
          });

          if (isApplied_1) {
            _utils_Array__WEBPACK_IMPORTED_MODULE_6__["replace"](this._appliedTargets, newTarget.uid);
          } else {
            _utils_Array__WEBPACK_IMPORTED_MODULE_6__["remove"](this._appliedTargets, newTarget.uid);
          }
        } // Apply rules to the children


        if (newTarget.children) {
          _utils_Iterator__WEBPACK_IMPORTED_MODULE_5__["each"](newTarget.children.iterator(), function (child) {
            _this.applyRules(child);
          });
        }
      };
      /**
       * Returns a relative state for the rule/target, or `undefined` if no state is
       * needed.
       *
       * @param rule    [description]
       * @param target  [description]
       * @return [description]
       */


      Responsive.prototype.getState = function (rule, target) {
        var stateId = "responsive-" + rule.id;
        var tmpId = target.uid + "_" + stateId;

        if (_utils_Array__WEBPACK_IMPORTED_MODULE_6__["indexOf"](this._noStates, tmpId) !== -1) {
          return;
        } else if (!target.states.hasKey(stateId)) {
          var state = rule.state(target, stateId);

          if (!state) {
            this._noStates.push(tmpId);
          }

          return state;
        } else {
          return target.states.getKey(stateId);
        }
      };
      /**
       * Gets a value from an element.
       *
       * @ignore Exclude from docs
       * @param target    Target object
       * @param property  Property
       * @return Property value
       */


      Responsive.prototype.getValue = function (target, property) {
        // This is a bit hacky, first we check if the property exist.
        // If it doesn't we try accessing target's property directly
        var value = target.getPropertyValue(property);

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](value) && _utils_Type__WEBPACK_IMPORTED_MODULE_7__["hasValue"](target[property])) {
          value = target[property];
        }

        return value;
      };
      /**
       * Disposes the object.
       */


      Responsive.prototype.dispose = function () {
        this.disposeResponsiveHandlers();

        _super.prototype.dispose.call(this);
      };
      /**
       * Disposes all event handlers.
       */


      Responsive.prototype.disposeResponsiveHandlers = function () {
        var disposer = this._responsiveDisposers.pop();

        while (disposer) {
          disposer.dispose();
          disposer = this._responsiveDisposers.pop();
        }
      };

      return Responsive;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"]);
    /**
     * [defaultRules description]
     *
     * @todo description
     */


    var defaultRules = new _utils_List__WEBPACK_IMPORTED_MODULE_2__["List"]();
    defaultRules.events.on("inserted", function (ev) {
      ev.newValue.id = _Registry__WEBPACK_IMPORTED_MODULE_4__["registry"].getUniqueId();
    });
    /**
     *
     * @todo description
     */

    var ResponsiveBreakpoints =
    /** @class */
    function () {
      function ResponsiveBreakpoints() {} // Breakpoint functions (for use in `relevant` clause of the responsive rules)


      ResponsiveBreakpoints.widthXXS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XXS;
      };

      ResponsiveBreakpoints.widthXS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XS;
      };

      ResponsiveBreakpoints.widthS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.S;
      };

      ResponsiveBreakpoints.widthM = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.M;
      };

      ResponsiveBreakpoints.widthL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.L;
      };

      ResponsiveBreakpoints.widthXL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XL;
      };

      ResponsiveBreakpoints.widthXXL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XXL;
      };

      ResponsiveBreakpoints.heightXXS = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.XXS;
      };

      ResponsiveBreakpoints.heightXS = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.XS;
      };

      ResponsiveBreakpoints.heightS = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.S;
      };

      ResponsiveBreakpoints.heightM = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.M;
      };

      ResponsiveBreakpoints.heightL = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.L;
      };

      ResponsiveBreakpoints.heightXL = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.XL;
      };

      ResponsiveBreakpoints.heightXXL = function (container) {
        return container.pixelHeight <= ResponsiveBreakpoints.XXL;
      };

      ResponsiveBreakpoints.isXXS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XXS && container.pixelHeight <= ResponsiveBreakpoints.XXS;
      };

      ResponsiveBreakpoints.isXS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XS && container.pixelHeight <= ResponsiveBreakpoints.XS;
      };

      ResponsiveBreakpoints.isS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.S && container.pixelHeight <= ResponsiveBreakpoints.S;
      };

      ResponsiveBreakpoints.isM = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.M && container.pixelHeight <= ResponsiveBreakpoints.M;
      };

      ResponsiveBreakpoints.isL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.L && container.pixelHeight <= ResponsiveBreakpoints.L;
      };

      ResponsiveBreakpoints.isXL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XL && container.pixelHeight <= ResponsiveBreakpoints.XL;
      };

      ResponsiveBreakpoints.isXXL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XXL && container.pixelHeight <= ResponsiveBreakpoints.XXL;
      };

      ResponsiveBreakpoints.maybeXXS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XXS || container.pixelHeight <= ResponsiveBreakpoints.XXS;
      };

      ResponsiveBreakpoints.maybeXS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XS || container.pixelHeight <= ResponsiveBreakpoints.XS;
      };

      ResponsiveBreakpoints.maybeS = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.S || container.pixelHeight <= ResponsiveBreakpoints.S;
      };

      ResponsiveBreakpoints.maybeM = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.M || container.pixelHeight <= ResponsiveBreakpoints.M;
      };

      ResponsiveBreakpoints.maybeL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.L || container.pixelHeight <= ResponsiveBreakpoints.L;
      };

      ResponsiveBreakpoints.maybeXL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XL || container.pixelHeight <= ResponsiveBreakpoints.XL;
      };

      ResponsiveBreakpoints.maybeXXL = function (container) {
        return container.pixelWidth <= ResponsiveBreakpoints.XXL || container.pixelHeight <= ResponsiveBreakpoints.XXL;
      }; // Named pixel breakpoints


      ResponsiveBreakpoints.XXS = 100;
      ResponsiveBreakpoints.XS = 200;
      ResponsiveBreakpoints.S = 300;
      ResponsiveBreakpoints.M = 400;
      ResponsiveBreakpoints.L = 600;
      ResponsiveBreakpoints.XL = 800;
      ResponsiveBreakpoints.XXL = 1000;
      return ResponsiveBreakpoints;
    }(); //# sourceMappingURL=Responsive.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js ***!
    \*****************************************************************************/

  /*! exports provided: OrderedList, SortedList, OrderedListTemplate, SortedListTemplate */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsSortedListJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OrderedList", function () {
      return OrderedList;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SortedList", function () {
      return SortedList;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OrderedListTemplate", function () {
      return OrderedListTemplate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SortedListTemplate", function () {
      return SortedListTemplate;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony import */


    var _Iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony import */


    var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * Ordered list contains values of any type in an indexed array.
     */


    var OrderedList =
    /** @class */
    function () {
      /**
       * Constructor
       *
       * @param initial  Inital list of values to add to list
       */
      function OrderedList(initial) {
        /**
         * Holds list values.
         */
        this._values = [];
        /**
         * Event dispatcher.
         */

        this.events = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__["EventDispatcher"]();

        if (initial != null) {
          this.setAll(initial);
        }
      }

      Object.defineProperty(OrderedList.prototype, "values", {
        /**
         * All items of the list.
         *
         * Do not modify the list directly. Rather use `insert()` and `remove()`
         * methods.
         *
         * @return List values
         */
        get: function get() {
          return this._values;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Inserts a value into list item array.
       *
       * @param value  Value
       */

      OrderedList.prototype._insert = function (value) {
        this._values.push(value);

        return this._values.length - 1;
      };

      Object.defineProperty(OrderedList.prototype, "length", {
        /**
         * Number of items in the list.
         *
         * @readonly
         * @return Length
         */
        get: function get() {
          return this._values.length;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Returns the index of the specific `value`.
       *
       * -1 if not found.
       *
       * @param value  Value
       * @return Index
       */

      OrderedList.prototype.indexOf = function (value) {
        return _Array__WEBPACK_IMPORTED_MODULE_2__["indexOf"](this._values, value);
      };
      /**
       * Checks if list contains the `value`.
       *
       * @param value  Value
       * @return In the list?
       */


      OrderedList.prototype.contains = function (value) {
        return this.indexOf(value) !== -1;
      };
      /**
       * Returns an item at specific `index`.
       *
       * @param index  Index
       * @return Item
       */


      OrderedList.prototype.getIndex = function (index) {
        return this._values[index];
      };

      Object.defineProperty(OrderedList.prototype, "first", {
        /**
         * First item in the list.
         *
         * @return Item
         */
        get: function get() {
          return this._values[0];
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(OrderedList.prototype, "last", {
        /**
         * Last item in the list.
         *
         * @return Item
         */
        get: function get() {
          return this._values[this._values.length - 1];
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Inserts a value into list.
       *
       * @param value  Value
       */

      OrderedList.prototype.insert = function (value) {
        var index = this._insert(value);

        if (this.events.isEnabled("inserted")) {
          this.events.dispatchImmediately("inserted", {
            type: "inserted",
            target: this,
            index: index,
            newValue: value
          });
        }
      };
      /**
       * Removes an item with the `value` from the list.
       *
       * @param value  Value
       */


      OrderedList.prototype.remove = function (value) {
        var index = this.indexOf(value);

        if (index !== -1) {
          var oldValue = this._values[index];

          _Array__WEBPACK_IMPORTED_MODULE_2__["removeIndex"](this._values, index);

          if (this.events.isEnabled("removed")) {
            this.events.dispatchImmediately("removed", {
              type: "removed",
              target: this,
              index: index,
              oldValue: oldValue
            });
          }
        }
      };
      /**
       * Sets multiple items to the list.
       *
       * All current items are removed.
       *
       * @param newArray  New items
       */


      OrderedList.prototype.setAll = function (newArray) {
        var _this = this;

        _Array__WEBPACK_IMPORTED_MODULE_2__["eachReverse"](this._values, function (x, i) {
          _this._values.pop();

          if (_this.events.isEnabled("removed")) {
            _this.events.dispatchImmediately("removed", {
              type: "removed",
              target: _this,
              index: i,
              oldValue: x
            });
          }
        });

        _Array__WEBPACK_IMPORTED_MODULE_2__["each"](newArray, function (value) {
          _this.insert(value);
        });
      };
      /**
       * Removes all items from the list.
       */


      OrderedList.prototype.clear = function () {
        this.setAll([]);
      };
      /**
       * Returns part of the list between `start` and `end` indexes, as a new
       * [[OrderedList]].
       *
       * @param start  Start index
       * @param end    End index
       * @return Items in range
       */


      OrderedList.prototype.slice = function (start, end) {
        var out = new OrderedList();
        out._values = this._values.slice(start, end);
        return out;
      };
      /**
       * Finds a closest available index to the `value` in specified direction.
       *
       * @ignore exclude from docs
       * @param value      value to search for
       * @param fn         A callback function that returns value of the item
       * @param direction  Direciton
       * @return Index
       */


      OrderedList.prototype.findClosestIndex = function (value, fn, direction) {
        if (direction === void 0) {
          direction = "any";
        } // Init temporary values


        var closestIndex = -1;
        var closestValue;
        var closestDifference;
        var i = 0;

        _Iterator__WEBPACK_IMPORTED_MODULE_3__["eachContinue"](this.iterator(), function (element) {
          var item = fn(element); // Calc difference

          if (direction === "any") {
            // Exact match?
            if (item === value) {
              // Found exact value - don't bother searching further
              closestIndex = i;
              return false;
            }

            var difference = Math.abs(value - item);

            if (!_Type__WEBPACK_IMPORTED_MODULE_4__["hasValue"](closestDifference) || closestDifference > difference) {
              closestIndex = i;
              closestValue = item;
              closestDifference = difference;
            }
          } else if (direction === "left" && item < value) {
            if (!_Type__WEBPACK_IMPORTED_MODULE_4__["hasValue"](closestValue) || closestValue < item) {
              closestIndex = i;
              closestValue = item;
            }
          } else if (direction === "right" && item >= value) {
            if (!_Type__WEBPACK_IMPORTED_MODULE_4__["hasValue"](closestValue) || closestValue >= item) {
              closestIndex = i;
              closestValue = item;
            }
          }

          ++i;
          return true;
        }); // Found nothing?


        if (closestIndex === -1) {
          if (direction === "left") {
            // Use First one
            closestIndex = 0;
          } else if (direction === "right") {
            // Use last item
            closestIndex = this.length - 1;
          }
        }

        return closestIndex;
      };
      /**
       * Returns a list iterator.
       *
       * @return Iterator
       */


      OrderedList.prototype.iterator = function () {
        return _Iterator__WEBPACK_IMPORTED_MODULE_3__["fromArray"](this._values);
      };
      /**
       * Returns an ES6 iterator for the list.
       */


      OrderedList.prototype[Symbol.iterator] = function () {
        var length, i;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              length = this._values.length;
              i = 0;
              _a.label = 1;

            case 1:
              if (!(i < length)) return [3
              /*break*/
              , 4];
              return [4
              /*yield*/
              , this._values[i]];

            case 2:
              _a.sent();

              _a.label = 3;

            case 3:
              ++i;
              return [3
              /*break*/
              , 1];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      };
      /**
       * Calls `f` for each element in the list.
       */


      OrderedList.prototype.each = function (f) {
        _Array__WEBPACK_IMPORTED_MODULE_2__["each"](this._values, f);
      };

      return OrderedList;
    }();
    /**
     * A list where all items are ordered according to specific ordering function,
     * which is passed in via constructor parameter, when creating an instance of
     * [[SortedList]].
     */


    var SortedList =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SortedList, _super);
      /**
       * Constructor.
       *
       * @param sort  Ordering function
       */

      function SortedList(sort) {
        var _this = _super.call(this) || this;

        _this._ordering = sort;
        return _this;
      }
      /**
       * Inserts item into the list.
       *
       * @param value  Item
       */


      SortedList.prototype._insert = function (value) {
        var index = _Array__WEBPACK_IMPORTED_MODULE_2__["getSortedIndex"](this._values, this._ordering, value).index;

        _Array__WEBPACK_IMPORTED_MODULE_2__["insertIndex"](this._values, index, value);

        return index;
      };
      /**
       * Returns index of the item in list if found.
       *
       * -1 if item is not in the list.
       *
       * @param value  Item to search for
       * @return Index
       */


      SortedList.prototype.indexOf = function (value) {
        var _a = _Array__WEBPACK_IMPORTED_MODULE_2__["getSortedIndex"](this._values, this._ordering, value),
            found = _a.found,
            index = _a.index;

        if (found) {
          return index;
        } else {
          return -1;
        }
      };
      /**
       * [udpate description]
       *
       * @ignore Exclude from docs
       * @todo Description
       * @param value [description]
       */


      SortedList.prototype.update = function (value) {
        // @todo test this
        var index = _Array__WEBPACK_IMPORTED_MODULE_2__["indexOf"](this._values, value); // @todo throw an error if it doesn't exist ?


        if (index !== -1) {
          var last = this._values.length - 1; // Check if the current ordering is correct

          if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) && (index === last || this._ordering(value, this._values[index + 1]) < 0))) {
            // TODO send remove/insert/move events
            _Array__WEBPACK_IMPORTED_MODULE_2__["removeIndex"](this._values, index);

            this._insert(value);
          }
        }
      };

      return SortedList;
    }(OrderedList);
    /**
     * A version of a [[OrderedList]] that has a "template".
     *
     * A template is an instance of an object, that can be used to create new
     * elements in the list without actually needing to create instances for those.
     *
     * When new element is created in the list, e.g. by calling its `create()`
     * method, an exact copy of the element is created (including properties and
     * other attributes), inserted into the list and returned.
     */


    var OrderedListTemplate =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(OrderedListTemplate, _super);
      /**
       * Constructor
       *
       * @param t Template object
       */

      function OrderedListTemplate(t) {
        var _this = _super.call(this) || this;

        _this.template = t;
        return _this;
      }

      Object.defineProperty(OrderedListTemplate.prototype, "template", {
        /**
         * @return Template object
         */
        get: function get() {
          return this._template;
        },

        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param v  Template object
         */
        set: function set(v) {
          v.isTemplate = true;
          this._template = v;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all elements from other list.
       *
       * @param source  Source list
       */

      OrderedListTemplate.prototype.copyFrom = function (source) {
        var _this = this;

        _Iterator__WEBPACK_IMPORTED_MODULE_3__["each"](source.iterator(), function (value) {
          _this.insert(value.clone());
        });
      };
      /**
       * Returns part of the list, starting at `start` and ending at `end` indexes,
       * as a new [[OrderedListTemplate]].
       *
       * @param start  Start index
       * @param end    End index
       * @return New list
       */


      OrderedListTemplate.prototype.slice = function (start, end) {
        var out = new OrderedListTemplate(this.template);
        out._values = this._values.slice(start, end);
        return out;
      };

      OrderedListTemplate.prototype.create = function (make) {
        var clone = make != null ? new make() : this.template.clone();
        this.insert(clone);
        return clone;
      };

      return OrderedListTemplate;
    }(OrderedList);
    /**
     * A version of a [[SortedList]] that has a "template".
     *
     * A template is an instance of an object, that can be used to create new
     * elements in the list without actually needing to create instances for those.
     *
     * When new element is created in the list, e.g. by calling its `create()`
     * method, an exact copy of the element is created (including properties and
     * other attributes), inserted into the list and returned.
     */


    var SortedListTemplate =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SortedListTemplate, _super);
      /**
       * Constructor
       *
       * @param t     Template object
       * @param sort  Ordering function
       */

      function SortedListTemplate(t, sort) {
        var _this = _super.call(this, sort) || this;

        _this.template = t;
        return _this;
      }

      Object.defineProperty(SortedListTemplate.prototype, "template", {
        /**
         * @return Template object
         */
        get: function get() {
          return this._template;
        },

        /**
         * A "template" object to copy all properties from when creating new list
         * items.
         *
         * @param v  Template object
         */
        set: function set(v) {
          v.isTemplate = true;
          this._template = v;
        },
        enumerable: true,
        configurable: true
      });
      /**
       * Copies all elements from other list.
       *
       * @param source  Source list
       */

      SortedListTemplate.prototype.copyFrom = function (source) {
        var _this = this;

        _Iterator__WEBPACK_IMPORTED_MODULE_3__["each"](source.iterator(), function (value) {
          _this.insert(value.clone());
        });
      };

      SortedListTemplate.prototype.create = function (make) {
        var clone = make != null ? new make() : this.template.clone();
        this.insert(clone);
        return clone;
      };

      return SortedListTemplate;
    }(SortedList); //# sourceMappingURL=SortedList.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js ***!
    \*************************************************************************/

  /*! exports provided: order, repeat, random */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsStringJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "order", function () {
      return order;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "repeat", function () {
      return repeat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "random", function () {
      return random;
    });
    /**
     * ============================================================================
     * COMPARING FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Comparing function used for ordering.
     *
     * @ignore Exclude from docs
     * @todo Use localeCompare
     * @param a  Item 1
     * @param b  Item 2
     * @return Result
     */


    function order(a, b) {
      if (a === b) {
        return 0;
      } else if (a < b) {
        return -1;
      } else {
        return 1;
      }
    }
    /**
     * ============================================================================
     * OTHER FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Repeats a `string` number of times as set in `amount`.
     *
     * @ignore Exclude from docs
     * @todo Make this faster
     * @param string  Source string
     * @param amount  Number of times to repeat string
     * @return New string
     */


    function repeat(string, amount) {
      return new Array(amount + 1).join(string);
    }
    /**
     * Generates a random string `characters` length.
     *
     * @param chars  Number of characters
     * @return Random string
     */


    function random(chars) {
      var res = "";
      var choice = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

      for (var i = 0; i < chars; i++) {
        res += choice.charAt(Math.floor(Math.random() * choice.length));
      }

      return res;
    } //# sourceMappingURL=String.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js ***!
    \**************************************************************************/

  /*! exports provided: PX, STRING, NUMBER, DATE, DURATION, PLACEHOLDER, PLACEHOLDER2 */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsStringsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PX", function () {
      return PX;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "STRING", function () {
      return STRING;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMBER", function () {
      return NUMBER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DATE", function () {
      return DATE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DURATION", function () {
      return DURATION;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PLACEHOLDER", function () {
      return PLACEHOLDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PLACEHOLDER2", function () {
      return PLACEHOLDER2;
    });
    /**
     * A collection of String-based constants.
     * @hidden
     * @ignore Exclude from docs
     */

    /**
     * @ignore Exclude from docs
     */


    var PX = "px";
    /**
     * @ignore Exclude from docs
     */

    var STRING = "string";
    /**
     * @ignore Exclude from docs
     */

    var NUMBER = "number";
    /**
     * @ignore Exclude from docs
     */

    var DATE = "date";
    /**
     * @ignore Exclude from docs
     */

    var DURATION = "duration";
    /**
     * @ignore Exclude from docs
     */

    var PLACEHOLDER = "__§§§__";
    /**
     * @ignore Exclude from docs
     */

    var PLACEHOLDER2 = "__§§§§__"; //# sourceMappingURL=Strings.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js ***!
    \***********************************************************************/

  /*! exports provided: timeUnitDurations, getNextUnit, getDuration, now, getTime, copy, checkChange, add, round */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "timeUnitDurations", function () {
      return timeUnitDurations;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getNextUnit", function () {
      return getNextUnit;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getDuration", function () {
      return getDuration;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "now", function () {
      return now;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getTime", function () {
      return getTime;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copy", function () {
      return copy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkChange", function () {
      return checkChange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "add", function () {
      return add;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "round", function () {
      return round;
    });
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /**
     * Maps time period names to their numeric representations in milliseconds.
     *
     * @ignore Exclude from docs
     */


    var timeUnitDurations = {
      millisecond: 1,
      second: 1000,
      minute: 60000,
      hour: 3600000,
      day: 86400000,
      week: 604800000,
      month: 2592000000,
      year: 31536000000
    };
    /**
     * Returns the next time unit that goes after source `unit`.
     *
     * E.g. "hour" is the next unit after "minute", etc.
     *
     * @ignore Exclude from docs
     * @param unit  Source time unit
     * @return Next time unit
     */

    function getNextUnit(unit) {
      switch (unit) {
        case "year":
          return;

        case "month":
          return "year";

        case "week":
          return "month";

        case "day":
          return "month";
        // not a mistake

        case "hour":
          return "day";

        case "minute":
          return "hour";

        case "second":
          return "minute";

        case "millisecond":
          return "second";
      }
    }
    /**
     * Returns number of milliseconds in the `count` of time `unit`.
     *
     * Available units: "millisecond", "second", "minute", "hour", "day", "week",
     * "month", and "year".
     *
     * @ignore Exclude from docs
     * @param unit   Time unit
     * @param count  Number of units
     * @return Milliseconds
     */


    function getDuration(unit, count) {
      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_0__["hasValue"](count)) {
        count = 1;
      }

      return timeUnitDurations[unit] * count;
    }
    /**
     * Returns current `Date` object.
     *
     * @return Current date
     */


    function now() {
      return new Date();
    }
    /**
     * Returns current timestamp.
     *
     * @return Current timestamp
     */


    function getTime() {
      return now().getTime();
    }
    /**
     * Returns a copy of the `Date` object.
     *
     * @ignore Exclude from docs
     * @param date  Source date
     * @return Copy
     */


    function copy(date) {
      return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
    }
    /**
     * Checks if the `unit` part of two `Date` objects do not match. Two dates
     * represent a "range" of time, rather the same time date.
     *
     * @ignore Exclude from docs
     * @param dateOne  Date 1
     * @param dateTwo  Date 2
     * @param unit     Time unit to check
     * @return Range?
     */


    function checkChange(dateOne, dateTwo, unit, utc) {
      dateOne = new Date(dateOne.getTime());
      dateTwo = new Date(dateTwo.getTime());
      var timeZoneOffset1 = 0;
      var timeZoneOffset2 = 0;

      if (!utc && unit != "millisecond") {
        timeZoneOffset1 = dateOne.getTimezoneOffset();
        dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);
        timeZoneOffset2 = dateTwo.getTimezoneOffset();
        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);
      }

      var changed = false;

      switch (unit) {
        case "year":
          if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
            changed = true;
          }

          break;

        case "month":
          if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
            changed = true;
          } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
            changed = true;
          }

          break;

        case "day":
          if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
            changed = true;
          } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {
            changed = true;
          }

          break;

        case "hour":
          if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {
            changed = true;
          }

          break;

        case "minute":
          if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {
            changed = true;
          }

          break;

        case "second":
          if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {
            changed = true;
          }

          break;

        case "millisecond":
          if (dateOne.getTime() != dateTwo.getTime()) {
            changed = true;
          }

          break;
      }

      if (changed) {
        return true;
      }

      var nextUnit = getNextUnit(unit);

      if (nextUnit) {
        dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);
        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);
        return checkChange(dateOne, dateTwo, nextUnit, utc);
      } else {
        return false;
      }
    }
    /**
     * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.
     *
     * @ignore Exclude from docs
     * @param date   Source date
     * @param unit   Time unit
     * @param count  Number of units to add
     * @return Modified date
     */


    function add(date, unit, count, utc) {
      var timeZoneOffset = 0;

      if (!utc && unit != "millisecond") {
        timeZoneOffset = date.getTimezoneOffset();
        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
      }

      switch (unit) {
        case "day":
          var day = date.getUTCDate();
          date.setUTCDate(day + count);
          break;

        case "second":
          var seconds = date.getUTCSeconds();
          date.setUTCSeconds(seconds + count);
          break;

        case "millisecond":
          var milliseconds = date.getUTCMilliseconds();
          date.setUTCMilliseconds(milliseconds + count);
          break;

        case "hour":
          var hours = date.getUTCHours();
          date.setUTCHours(hours + count);
          break;

        case "minute":
          var minutes = date.getUTCMinutes();
          date.setUTCMinutes(minutes + count);
          break;

        case "year":
          var year = date.getUTCFullYear();
          date.setUTCFullYear(year + count);
          break;

        case "month":
          var month = date.getUTCMonth();
          date.setUTCMonth(month + count);
          break;

        case "week":
          var wday = date.getUTCDate();
          date.setUTCDate(wday + count * 7);
          break;
      }

      if (!utc && unit != "millisecond") {
        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);

        if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
          var newTimeZoneOffset = date.getTimezoneOffset();

          if (newTimeZoneOffset != timeZoneOffset) {
            var diff = newTimeZoneOffset - timeZoneOffset;
            date.setUTCMinutes(date.getUTCMinutes() + diff); // solves issues if newe time falls back to old time zone

            if (date.getTimezoneOffset() != newTimeZoneOffset) {
              date.setUTCMinutes(date.getUTCMinutes() - diff);
            }
          }
        }
      }

      return date;
    }
    /**
     * "Rounds" the date to specific time unit.
     *
     * @ignore Exclude from docs
     * @param date             Source date
     * @param unit             Time unit
     * @param count            Number of units to round to
     * @param firstDateOfWeek  First day of week
     * @return New date
     */


    function round(date, unit, count, firstDateOfWeek, utc, firstDate) {
      if (!_utils_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](count)) {
        count = 1;
      }

      var timeZoneOffset = 0;

      if (!utc && unit != "millisecond") {
        timeZoneOffset = date.getTimezoneOffset();
        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
      }

      switch (unit) {
        case "day":
          var day = date.getUTCDate();

          if (count > 1) {
            //	day = Math.floor(day / count) * count;
            if (firstDate) {
              firstDate = round(firstDate, "day", 1);
              var difference = date.getTime() - firstDate.getTime();
              var unitCount = Math.floor(difference / getDuration("day") / count);
              var duration = getDuration("day", unitCount * count);
              date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
            }
          } else {
            date.setUTCDate(day);
          }

          date.setUTCHours(0, 0, 0, 0);
          break;

        case "second":
          var seconds = date.getUTCSeconds();

          if (count > 1) {
            seconds = Math.floor(seconds / count) * count;
          }

          date.setUTCSeconds(seconds, 0);
          break;

        case "millisecond":
          if (count == 1) {
            return date; // much better for perf!
          }

          var milliseconds = date.getUTCMilliseconds();
          milliseconds = Math.floor(milliseconds / count) * count;
          date.setUTCMilliseconds(milliseconds);
          break;

        case "hour":
          var hours = date.getUTCHours();

          if (count > 1) {
            hours = Math.floor(hours / count) * count;
          }

          date.setUTCHours(hours, 0, 0, 0);
          break;

        case "minute":
          var minutes = date.getUTCMinutes();
          milliseconds = date.getUTCMilliseconds();

          if (count > 1) {
            minutes = Math.floor(minutes / count) * count;
          }

          date.setUTCMinutes(minutes, 0, 0);
          break;

        case "month":
          var month = date.getUTCMonth();

          if (count > 1) {
            month = Math.floor(month / count) * count;
          }

          date.setUTCMonth(month, 1);
          date.setUTCHours(0, 0, 0, 0);
          break;

        case "year":
          var year = date.getUTCFullYear();

          if (count > 1) {
            year = Math.floor(year / count) * count;
          }

          date.setUTCFullYear(year, 0, 1);
          date.setUTCHours(0, 0, 0, 0); //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
          //timeZoneOffset = nonUTCDateY.getTimezoneOffset();

          break;

        case "week":
          var wday = date.getUTCDate();
          var weekDay = date.getUTCDay();

          if (!_utils_Type__WEBPACK_IMPORTED_MODULE_0__["isNumber"](firstDateOfWeek)) {
            firstDateOfWeek = 1;
          } // todo: rounding when count is not 1


          if (weekDay >= firstDateOfWeek) {
            wday = wday - weekDay + firstDateOfWeek;
          } else {
            wday = wday - (7 + weekDay) + firstDateOfWeek;
          }

          date.setUTCDate(wday);
          date.setUTCHours(0, 0, 0, 0);
          break;
      }

      if (!utc && unit != "millisecond") {
        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);

        if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
          var newTimeZoneOffset = date.getTimezoneOffset();

          if (newTimeZoneOffset != timeZoneOffset) {
            var diff = newTimeZoneOffset - timeZoneOffset;
            date.setUTCMinutes(date.getUTCMinutes() + diff);
          }
        }
      }

      return date;
    } //# sourceMappingURL=Time.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js ***!
    \***********************************************************************/

  /*! exports provided: isNaN, getType, getDefault, checkString, checkBoolean, checkNumber, checkObject, checkArray, checkDate, castString, castNumber, toBoolean, toNumber, toText, toNumberOrPercent, hasValue, getValue, getValueDefault, isDate, isString, isNumber, isObject, isArray */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsTypeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isNaN", function () {
      return isNaN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getType", function () {
      return getType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getDefault", function () {
      return getDefault;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkString", function () {
      return checkString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkBoolean", function () {
      return checkBoolean;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkNumber", function () {
      return checkNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkObject", function () {
      return checkObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkArray", function () {
      return checkArray;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "checkDate", function () {
      return checkDate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "castString", function () {
      return castString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "castNumber", function () {
      return castNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toBoolean", function () {
      return toBoolean;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toNumber", function () {
      return toNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toText", function () {
      return toText;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toNumberOrPercent", function () {
      return toNumberOrPercent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hasValue", function () {
      return hasValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getValue", function () {
      return getValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getValueDefault", function () {
      return getValueDefault;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isDate", function () {
      return isDate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isString", function () {
      return isString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isNumber", function () {
      return isNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isObject", function () {
      return isObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isArray", function () {
      return isArray;
    });
    /* harmony import */


    var _Percent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /**
     * A collection of utility functions for various type checks and conversion
     * @todo Review unused functions for removal
     * @hidden
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * ============================================================================
     * TYPE CHECK
     * ============================================================================
     * @hidden
     */

    /**
     * Returns `true` if value is not a number (NaN).
     *
     * @param value Input value
     * @return Is NaN?
     * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere
     */


    function isNaN(value) {
      return Number(value) !== value;
    }
    /**
     * Returns a type of the value.
     *
     * @param value  Input value
     * @return Type of the value
     */


    function getType(value) {
      return {}.toString.call(value);
    }
    /**
     * Returns a default value if the passed in value is empty.
     *
     * @param value     Input value
     * @param optional  Default value
     * @return Value or default value whichever is available
     * @deprecated Not used anywhere
     */


    function getDefault(value, optional) {
      return value || optional;
    }
    /**
     * Checks if the passed in value is a string.
     *
     * @param value  Value
     * @return Is string?
     * @throws {Error}
     * @deprecated Not used anywhere
     */


    function checkString(value) {
      if (typeof value === "string") {
        return true;
      } else {
        throw new Error("Expected a string but got " + getType(value));
      }
    }
    /**
     * Checks if the passed in value is a boolean.
     *
     * @param value  Value
     * @return Is boolean?
     * @throws {Error}
     * @deprecated Not used anywhere
     */


    function checkBoolean(value) {
      if (typeof value === "boolean") {
        return true;
      } else {
        throw new Error("Expected a boolean but got " + getType(value));
      }
    }
    /**
     * Checks if the passed in value is a number.
     *
     * @param value  Value
     * @return Is number?
     * @throws {Error}
     */


    function checkNumber(value) {
      if (typeof value === "number") {
        if (isNaN(value)) {
          throw new Error("Expected a number but got NaN");
        }
      } else {
        throw new Error("Expected a number but got " + getType(value));
      }

      return true;
    }
    /**
     * Checks if the passed in value is an object.
     *
     * @param value  Value
     * @return Is object?
     * @throws {Error}
     * @todo Is the input type correct?
     * @deprecated Not used anywhere
     */


    function checkObject(value) {
      var t = getType(value);

      if (t === "[object Object]") {
        return true;
      } else {
        throw new Error("Expected an object but got " + t);
      }
    }
    /**
     * Checks if the passed in value is an array.
     *
     * @param value  Value
     * @return Is array?
     * @throws {Error}
     * @deprecated Not used anywhere
     */


    function checkArray(value) {
      if (Array.isArray(value)) {
        return true;
      } else {
        throw new Error("Expected an array but got " + getType(value));
      }
    }
    /**
     * Checks if the passed in value is a Date object.
     *
     * @param value  Value
     * @return Is Date object?
     * @throws {Error}
     * @deprecated Not used anywhere
     */


    function checkDate(value) {
      var t = getType(value);

      if (t === "[object Date]") {
        return true;
      } else {
        throw new Error("Expected a date but got " + t);
      }
    }
    /**
     * ============================================================================
     * TYPE CASTING
     * ============================================================================
     * @hidden
     */

    /**
     * Casts string or a number into string.
     *
     * @param value  Input
     * @return String value
     * @deprecated Not used anywhere
     */


    function castString(value) {
      if (typeof value === "string") {
        return value;
      } else if (typeof value === "number") {
        return "" + value;
      } else {
        throw new Error("Expected a string or number but got " + getType(value));
      }
    }
    /**
     * Casts string or a number into a number.
     *
     * @param value   Input value
     * @return Number  value
     * @throws {Error}
     */


    function castNumber(value) {
      if (typeof value === "string") {
        var number = +value;

        if (isNaN(number)) {
          throw new Error("Cannot cast string " + JSON.stringify(value) + " to a number");
        } else {
          return number;
        }
      } else if (typeof value === "number") {
        if (isNaN(value)) {
          throw new Error("Expected a number but got NaN");
        } else {
          return value;
        }
      } else {
        var t = getType(value);

        if (t === "[object Date]") {
          return value.getTime();
        } else {
          throw new Error("Expected a string, number, or date but got " + t);
        }
      }
    }
    /**
     * Casts number, string or Date into a Date object.
     *
     * @param value  Input value
     * @return Date object
     * @deprecated Not used anywhere
     * @throws {Error}
     * @hidden
     * @deprecated
     */

    /*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {
        if (typeof value === "string") {
            if (formatter) {
                return formatter.parse(value);
            }
            return new Date(value);
    
        } else if (typeof value === "number") {
            return new Date(value);
    
        } else {
            const t = getType(value);
    
            if (t === "[object Date]") {
                return value;
    
            } else {
                throw new Error("Expected a string, number, or date but got " + t);
            }
        }
    }*/

    /**
     * ============================================================================
     * QUICK CONVERSION
     * ============================================================================
     * @hidden
     */

    /**
     * Converts any value into `boolean`.
     *
     * @param value  Source value
     * @return `true` or `false`
     */


    function toBoolean(value) {
      return value ? true : false;
    }
    /**
     * Converts any value into a `number`.
     *
     * @param value  Source value
     * @return Number representation of value
     */


    function toNumber(value) {
      if (hasValue(value) && !isNumber(value)) {
        var converted = Number(value);

        if (isNaN(converted) && isString(value) && value != "") {
          return toNumber(value.replace(/[^0-9.\-]+/g, ''));
        }

        return converted;
      }

      return value;
    }
    /**
     * Converts any value into a string (text).
     *
     * @param value  Source value
     * @return String representation of the input
     */


    function toText(value) {
      if (hasValue(value) && !isString(value)) {
        if (isNumber(value)) {
          return castString(value);
        } else if (isObject(value)) {
          return value.toString();
        }
      }

      return value;
    }
    /**
     * Converts any value to a number or [[Percent]].
     *
     * If the parameter is a string and contains "%", it will
     * convert it into a [[Percent]].
     *
     * Otherwise, it will convert into a number.
     *
     * @param value  Number or percent
     * @return Percent object
     */


    function toNumberOrPercent(value) {
      if (!hasValue(value) || isNumber(value) || Object(_Percent__WEBPACK_IMPORTED_MODULE_0__["isPercent"])(value)) {
        return value;
      }

      if (isString(value) && value.indexOf("%") != -1) {
        return Object(_Percent__WEBPACK_IMPORTED_MODULE_0__["percent"])(toNumber(value));
      }

      return toNumber(value);
    }
    /**
     * Checks if a variable has a value.
     *
     * @param a  Input value
     * @returns                        Has value?
     */


    function hasValue(a) {
      return a != null;
    }
    /**
     * Returns a value or throws an {Error} exception if the variable has not
     * value.
     *
     * @param a  Input value
     * @returns                        Value
     */


    function getValue(a) {
      if (hasValue(a)) {
        return a;
      } else {
        throw new Error("Value doesn't exist");
      }
    }
    /**
     * Returns a value, or returns the default value if it doesn't have a value.
     *
     * @param a  Input value
     * @returns                        Value
     */


    function getValueDefault(a, defaultValue) {
      if (hasValue(a)) {
        return a;
      } else {
        return defaultValue;
      }
    }
    /**
     * ============================================================================
     * TYPE CHECK
     * ============================================================================
     * @hidden
     */

    /**
     * Checks if parameter is `Date`.
     *
     * @param value  Input value
     * @return Is Date?
     */


    function isDate(value) {
      return getType(value) === "[object Date]";
    }
    /**
     * Checks if parameter is `string`.
     *
     * @param value  Input value
     * @return Is string?
     */


    function isString(value) {
      return typeof value === "string";
    }
    /**
     * Checks if parameter is `number`.
     *
     * @param value  Input value
     * @return Is number?
     */


    function isNumber(value) {
      return typeof value === "number" && Number(value) == value;
    }
    /**
     * Checks if parameter is `object`.
     *
     * @param value  Input value
     * @return Is object?
     */


    function isObject(value) {
      return typeof value === "object" && value != null;
    }
    /**
     * Checks if parameter is `Array`.
     *
     * @param value  Input value
     * @return Is Array?
     */


    function isArray(value) {
      return Array.isArray(value);
    } //# sourceMappingURL=Type.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js":
  /*!************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js ***!
    \************************************************************************/

  /*! exports provided: used, copyProperties, stripHash, getBaseURI, softCopyProperties, copy, isNotEmpty, relativeToValue, relativeRadiusToValue, valueToRelative, getPixelRatio, camelToDashed, capitalize, stringify, escapeForRgex, splitTextByCharCount, truncateWithEllipsis, trim, rtrim, ltrim, reverseString, unquote, padString, getFormat, cleanFormat, stripTags, plainText, numberToString, anyToDate, anyToNumber, getYearDay, getWeek, getMonthWeek, getDayFromWeek, get12Hours, getTimeZone, random, fitNumber, fitNumberRelative, svgPointToSprite, spritePointToSvg, spritePointToSprite, svgRectToSprite, spriteRectToSvg, documentPointToSvg, svgPointToDocument, documentPointToSprite, spritePointToDocument, width, height, decimalPlaces, parseUrl, serializeUrl, joinUrl, isIE */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsUtilsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "used", function () {
      return used;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copyProperties", function () {
      return copyProperties;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stripHash", function () {
      return stripHash;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getBaseURI", function () {
      return getBaseURI;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "softCopyProperties", function () {
      return softCopyProperties;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copy", function () {
      return copy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isNotEmpty", function () {
      return isNotEmpty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "relativeToValue", function () {
      return relativeToValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "relativeRadiusToValue", function () {
      return relativeRadiusToValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "valueToRelative", function () {
      return valueToRelative;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getPixelRatio", function () {
      return getPixelRatio;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "camelToDashed", function () {
      return camelToDashed;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "capitalize", function () {
      return capitalize;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stringify", function () {
      return stringify;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "escapeForRgex", function () {
      return escapeForRgex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "splitTextByCharCount", function () {
      return splitTextByCharCount;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "truncateWithEllipsis", function () {
      return truncateWithEllipsis;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "trim", function () {
      return trim;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rtrim", function () {
      return rtrim;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ltrim", function () {
      return ltrim;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "reverseString", function () {
      return reverseString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "unquote", function () {
      return unquote;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "padString", function () {
      return padString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getFormat", function () {
      return getFormat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "cleanFormat", function () {
      return cleanFormat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stripTags", function () {
      return stripTags;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "plainText", function () {
      return plainText;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "numberToString", function () {
      return numberToString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "anyToDate", function () {
      return anyToDate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "anyToNumber", function () {
      return anyToNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getYearDay", function () {
      return getYearDay;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getWeek", function () {
      return getWeek;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getMonthWeek", function () {
      return getMonthWeek;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getDayFromWeek", function () {
      return getDayFromWeek;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "get12Hours", function () {
      return get12Hours;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getTimeZone", function () {
      return getTimeZone;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "random", function () {
      return random;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fitNumber", function () {
      return fitNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fitNumberRelative", function () {
      return fitNumberRelative;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "svgPointToSprite", function () {
      return svgPointToSprite;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "spritePointToSvg", function () {
      return spritePointToSvg;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "spritePointToSprite", function () {
      return spritePointToSprite;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "svgRectToSprite", function () {
      return svgRectToSprite;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "spriteRectToSvg", function () {
      return spriteRectToSvg;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "documentPointToSvg", function () {
      return documentPointToSvg;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "svgPointToDocument", function () {
      return svgPointToDocument;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "documentPointToSprite", function () {
      return documentPointToSprite;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "spritePointToDocument", function () {
      return spritePointToDocument;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "width", function () {
      return width;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "height", function () {
      return height;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "decimalPlaces", function () {
      return decimalPlaces;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "parseUrl", function () {
      return parseUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "serializeUrl", function () {
      return serializeUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "joinUrl", function () {
      return joinUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isIE", function () {
      return isIE;
    });
    /* harmony import */


    var _Percent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony import */


    var _Browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Browser */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Browser.js");
    /* harmony import */


    var _utils_Math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony import */


    var _utils_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony import */


    var _String__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./String */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js");
    /* harmony import */


    var _Strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony import */


    var _Object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony import */


    var _Array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /**
     * A collection of universal utility functions.
     */

    /**
     * ============================================================================
     * MISC FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Marks a value as being used (e.g. because the value has side effects).
     */


    function used(value) {}
    /**
     * Copies all properties of one object to the other, omitting undefined.
     *
     * @param fromObject  Source object
     * @param toObject    Target object
     * @return Updated target object
     * @todo Maybe consolidate with utils.copy?
     */


    function copyProperties(source, target) {
      _Object__WEBPACK_IMPORTED_MODULE_6__["each"](source, function (key, value) {
        // only if value is set
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](value)) {
          target[key] = value;
        }
      });

      return target;
    }
    /**
     * Removes target from url
     */


    function stripHash(url) {
      return /^[^#]*/.exec(url)[0];
    }

    function getBaseURI() {
      var url = "#"; // Needed until https://bugs.webkit.org/show_bug.cgi?id=189499 is fixed

      if (Object(_Browser__WEBPACK_IMPORTED_MODULE_1__["isSafari"])()) {
        var baseURI = document.baseURI;

        if (baseURI) {
          baseURI = stripHash(baseURI);
          var loc = stripHash(location.href);

          if (baseURI !== loc) {
            url = loc + url;
          }
        }
      }

      return url;
    }
    /**
     * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.
     *
     * @param fromObject  Source object
     * @param toObject    Target object
     * @return Updated target object
     * @todo Maybe consolidate with utils.copy?
     */


    function softCopyProperties(source, target) {
      _Object__WEBPACK_IMPORTED_MODULE_6__["each"](source, function (key, value) {
        // only if value is set
        if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](value) && !_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](target[key])) {
          target[key] = value;
        }
      });

      return target;
    }
    /**
     * Copies all properties of one object to the other.
     *
     * @param source     Source object
     * @param recipient  Target object
     * @return Updated target object
     */


    function copy(source, target) {
      _Object__WEBPACK_IMPORTED_MODULE_6__["each"](source, function (key, value) {
        target[key] = value;
      });

      return target;
    }
    /**
     * Checks if value is not empty (undefined or zero-length string).
     *
     * @param value  Value to check
     * @return `true` if value is not "empty"
     */


    function isNotEmpty(value) {
      return _utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](value) && value.toString() !== "";
    }
    /**
     * [relativeToValue description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param percent  [description]
     * @param full     [description]
     * @return [description]
     */


    function relativeToValue(percent, full) {
      if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](percent)) {
        return percent;
      } else if (percent != null && _utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](percent.value) && _utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](full)) {
        return full * percent.value;
      } else {
        return 0;
      }
    }
    /**
     * [relativeRadiusToValue description]
     *
     * Differs from relativeToValue so that if a value is negative, it subtracts
     * it from full value.
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param percent             [description]
     * @param full                [description]
     * @param subtractIfNegative  [description]
     * @return [description]
     */


    function relativeRadiusToValue(percent, full, subtractIfNegative) {
      var value;

      if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](percent)) {
        value = percent;

        if (value < 0) {
          if (subtractIfNegative) {
            value = full + value;
          } else {
            value = full - value;
          }
        }
      } else if (percent != null && _utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](percent.value)) {
        value = full * percent.value;
      }

      return value;
    }
    /**
     * [valueToRelative description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param value  [description]
     * @param full   [description]
     * @return [description]
     */


    function valueToRelative(value, full) {
      if (value instanceof _Percent__WEBPACK_IMPORTED_MODULE_0__["Percent"]) {
        return value.value;
      } else {
        return value / full;
      }
    }
    /**
     * Returns pixel ratio of the current screen (used on retina displays).
     *
     * @return Pixel ratio
     */


    function getPixelRatio() {
      var ratio = window.devicePixelRatio || 1;
      return ratio;
    }
    /**
     * ============================================================================
     * STRING FORMATTING FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Converts camelCased text to dashed version:
     * ("thisIsString" > "this-is-string")
     *
     * @param str  Input
     * @return Output
     */


    function camelToDashed(str) {
      return str.replace(/\W+/g, '-').replace(/([a-z\d])([A-Z])/g, '$1-$2').toLowerCase();
    }
    /**
     * Converts tring to uppercase.
     *
     * @param str  String to convert
     * @return uppercased string
     * @todo Maybe make it better
     */


    function capitalize(str) {
      var arr = str.split("");
      arr[0] = arr[0].toUpperCase();
      return arr.join("");
    }
    /**
     * Converts any value into its string representation.
     *
     * @param value  Value
     * @return String represantation of the value
     */


    function stringify(value) {
      return JSON.stringify(value);
    }
    /**
     * Escapes string so it can safely be used in a Regex.
     *
     * @param value  Unsescaped string
     * @return Escaped string
     */


    function escapeForRgex(value) {
      return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    /**
     * Splits the text into multiple lines, respecting maximum character count.
     * Prioretizes splitting on spaces and punctuation. Falls back on splitting
     * mid-word if there's no other option.
     *
     * @param text      Text
     * @param maxChars  Maximum number of characters per line
     * @return An array of split text
     */


    function splitTextByCharCount(text, maxChars, fullWords, rtl) {
      // Maybe the text fits?
      if (text.length <= maxChars) {
        return [text];
      } // Init result


      var res = []; // Split by words or by charts

      if (fullWords) {
        // Split by words first
        // Split by spacing
        var currentIndex = -1;
        var tmpText = text.replace(/([,;:!?\\\/\.]+[\s]+|[\s])/g, _Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"] + "$1" + _Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]);
        var words = tmpText.split(_Strings__WEBPACK_IMPORTED_MODULE_5__["PLACEHOLDER"]); // Process each word

        for (var i = 0; i < words.length; i++) {
          // Get word and symbol count
          var word = words[i];
          var wordLength = word.length; // Ignore empty words

          if (wordLength === 0) {
            continue;
          } // Check word length
          //if ((wordLength > maxChars) && fullWords !== true) {


          if (wordLength > maxChars) {
            // A single word is longer than allowed symbol count
            // Break it up
            if (rtl) {
              word = reverseString(word);
            }

            var parts = word.match(new RegExp(".{1," + maxChars + "}", "g")); // TODO is this correct ?

            if (parts) {
              if (rtl) {
                for (var x = 0; x < parts.length; x++) {
                  parts[x] = reverseString(parts[x]);
                } //parts.reverse();

              }

              res = res.concat(parts);
            }
          } else {
            // Init current line
            if (currentIndex === -1) {
              res.push("");
              currentIndex = 0;
            } // Check if we need to break into another line


            if (res[currentIndex].length + wordLength + 1 > maxChars && res[currentIndex] !== "") {
              res.push("");
              currentIndex++;
            } // Add word


            res[currentIndex] += word;
          } // Update index


          currentIndex = res.length - 1;
        }
      } else {
        // Splitting by anywhere (living la vida facil)
        var parts = text.match(new RegExp(".{1," + maxChars + "}", "g"));

        if (parts) {
          if (rtl) {
            for (var x = 0; x < parts.length; x++) {
              parts[x] = reverseString(parts[x]);
            }
          }

          res = parts;
        }
      } // Do we have only one word that does not fit?
      // Since fullWords is set and we can't split the word, we end up with empty
      // set.


      if (res.length == 1 && fullWords && res[0].length > maxChars) {
        res = [];
      }

      return res;
    }
    /**
     * Truncates the text to certain character count.
     *
     * Will add ellipsis if the string is truncated. Optionally, can truncate on
     * full words only.
     *
     * For RTL support, pass in the fifth parameter as `true`.
     *
     * @param text       Input text
     * @param maxChars   Maximum character count of output
     * @param ellipsis   Ellipsis string, i.e. "..."
     * @param fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`
     * @param rtl        Is this an RTL text?
     * @return Truncated text
     */


    function truncateWithEllipsis(text, maxChars, ellipsis, fullWords, rtl) {
      if (text.length <= maxChars) {
        return text;
      } // Calc max chars


      maxChars -= ellipsis.length;

      if (maxChars < 1) {
        maxChars = 1; //ellipsis = "";
      } // Get lines


      var lines = splitTextByCharCount(text, maxChars, fullWords, rtl); // Use first line

      return (lines[0] || "") + ellipsis;
    }
    /**
     * Removes whitespace from beginning and end of the string.
     *
     * @param str  Input
     * @return Output
     */


    function trim(str) {
      return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    }

    ;
    /**
     * Removes whitespace from end of the string.
     *
     * @param str  Input
     * @return Output
     */

    function rtrim(str) {
      return str.replace(/[\s\uFEFF\xA0]+$/g, "");
    }

    ;
    /**
     * Removes whitespace from beginning of the string.
     *
     * @param str  Input
     * @return Output
     */

    function ltrim(str) {
      return str.replace(/^[\s\uFEFF\xA0]+/g, "");
    }

    ;
    /**
     * Reverses string.
     *
     * @param str  Input
     * @return Output
     */

    function reverseString(str) {
      return str.split("").reverse().join("");
    }
    /**
     * Removes quotes from the string.
     *
     * @param str  Input
     * @return Output
     */


    function unquote(str) {
      var res = str.trim();
      res = str.replace(/^'(.*)'$/, "$1");

      if (res == str) {
        res = str.replace(/^"(.*)"$/, "$1");
      }

      return res;
    }
    /**
     * Pads a string with additional characters to certain length.
     *
     * @param value  A numeric value
     * @param len    Result string length in characters
     * @param char   A character to use for padding
     * @return Padded value as string
     */


    function padString(value, len, char) {
      if (len === void 0) {
        len = 0;
      }

      if (char === void 0) {
        char = "0";
      }

      if (typeof value !== "string") {
        value = value.toString();
      }

      return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
    }
    /**
     * Tries to determine format type.
     *
     * @ignore Exclude from docs
     * @param format  Format string
     * @return Format type ("string" | "number" | "date" | "duration")
     */


    function getFormat(format) {
      // Undefined?
      if (typeof format === "undefined") {
        return _Strings__WEBPACK_IMPORTED_MODULE_5__["STRING"];
      } // Cleanup and lowercase format


      format = format.toLowerCase().replace(/^\[[^\]]*\]/, ""); // Remove style tags

      format = format.replace(/\[[^\]]+\]/, ""); // Trim

      format = format.trim(); // Check for any explicit format hints (i.e. /Date)

      var hints = format.match(/\/(date|number|duration)$/);

      if (hints) {
        return hints[1];
      } // Check for explicit hints


      if (format === _Strings__WEBPACK_IMPORTED_MODULE_5__["NUMBER"]) {
        return _Strings__WEBPACK_IMPORTED_MODULE_5__["NUMBER"];
      }

      if (format === _Strings__WEBPACK_IMPORTED_MODULE_5__["DATE"]) {
        return _Strings__WEBPACK_IMPORTED_MODULE_5__["DATE"];
      }

      if (format === _Strings__WEBPACK_IMPORTED_MODULE_5__["DURATION"]) {
        return _Strings__WEBPACK_IMPORTED_MODULE_5__["DURATION"];
      } // Detect number formatting symbols


      if (format.match(/[#0]/)) {
        return _Strings__WEBPACK_IMPORTED_MODULE_5__["NUMBER"];
      } // Detect date formatting symbols


      if (format.match(/[ymwdhnsqaxkzgtei]/)) {
        return _Strings__WEBPACK_IMPORTED_MODULE_5__["DATE"];
      } // Nothing? Let's display as string


      return _Strings__WEBPACK_IMPORTED_MODULE_5__["STRING"];
    }
    /**
     * Cleans up format:
     * * Strips out formatter hints
     *
     * @ignore Exclude from docs
     * @param format  Format
     * @return Cleaned format
     */


    function cleanFormat(format) {
      return format.replace(/\/(date|number|duration)$/i, "");
    }
    /**
     * Strips all tags from the string.
     *
     * @param text  Source string
     * @return String without tags
     */


    function stripTags(text) {
      return text ? text.replace(/<[^>]*>/g, "") : text;
    }
    /**
     * Removes new lines and tags from a string.
     *
     * @param text  String to conver
     * @return Converted string
     */


    function plainText(text) {
      return text ? stripTags(text.replace(/[\n\r]+/g, ". ")) : text;
    }
    /**
     * ============================================================================
     * TYPE CONVERSION FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Converts numeric value into string. Deals with large or small numbers that
     * would otherwise use exponents.
     *
     * @param value  Numeric value
     * @return Numeric value as string
     */


    function numberToString(value) {
      // TODO handle Infinity and -Infinity
      if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNaN"](value)) {
        return "NaN";
      }

      if (value === Infinity) {
        return "Infinity";
      }

      if (value === -Infinity) {
        return "-Infinity";
      } // Negative 0


      if (value === 0 && 1 / value === -Infinity) {
        return "-0";
      } // Preserve negative and deal with absoute values


      var negative = value < 0;
      value = Math.abs(value); // TODO test this

      var parsed = _utils_Type__WEBPACK_IMPORTED_MODULE_3__["getValue"](/^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value));

      var digits = parsed[1];
      var decimals = parsed[2] || "";
      var res; // Leave the nummber as it is if it does not use exponents

      if (parsed[3] == null) {
        res = decimals === "" ? digits : digits + "." + decimals;
      } else {
        var exponent = +parsed[3]; // Deal with decimals

        if (value < 1) {
          var zeros = exponent - 1;
          res = "0." + _String__WEBPACK_IMPORTED_MODULE_4__["repeat"]("0", zeros) + digits + decimals; // Deal with integers
        } else {
          var zeros = exponent - decimals.length;

          if (zeros === 0) {
            res = digits + decimals;
          } else if (zeros < 0) {
            res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
          } else {
            res = digits + decimals + _String__WEBPACK_IMPORTED_MODULE_4__["repeat"]("0", zeros);
          }
        }
      }

      return negative ? "-" + res : res;
    }
    /**
     * Converts anything to Date object.
     *
     * @param value  A value of any type
     * @return Date object representing a value
     */


    function anyToDate(value) {
      if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isDate"](value)) {
        // TODO maybe don't create a new Date ?
        return new Date(value);
      } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](value)) {
        return new Date(value);
      } else {
        // Try converting to number (assuming timestamp)
        var num = Number(value);

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](num)) {
          return new Date(value);
        } else {
          return new Date(num);
        }
      }
    }
    /**
     * Tries converting any value to a number.
     *
     * @param value  Source value
     * @return Number
     */


    function anyToNumber(value) {
      if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isDate"](value)) {
        return value.getTime();
      } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](value)) {
        return value;
      } else if (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isString"](value)) {
        // Try converting to number (assuming timestamp)
        var num = Number(value);

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](num)) {
          // Failing
          return undefined;
        } else {
          return num;
        }
      }
    }
    /**
     * ============================================================================
     * DATE-RELATED FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Returns a year day.
     *
     * @param date  Date
     * @param utc   Assume UTC dates?
     * @return Year day
     * @todo Account for UTC
     */


    function getYearDay(date, utc) {
      if (utc === void 0) {
        utc = false;
      }

      var first = new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);
      return Math.floor((date.getTime() - first.getTime()) / 86400000) + 1;
    }
    /**
     * Returns week number for a given date.
     *
     * @param date  Date
     * @param utc   Assume UTC dates?
     * @return Week number
     * @todo Account for UTC
     */


    function getWeek(date, utc) {
      if (utc === void 0) {
        utc = false;
      }

      var day = getYearDay(date, utc) - 1;
      var week = Math.floor((day - (date.getDay() || 7) + 10) / 7);

      if (week === 0) {
        week = 53;
      } else if (week === 53) {
        week = 1;
      }

      return week;
    }
    /**
     * Returns a week number in the month.
     *
     * @param date  Source Date
     * @param utc   Assume UTC dates?
     * @return Week number in month
     */


    function getMonthWeek(date, utc) {
      if (utc === void 0) {
        utc = false;
      }

      var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);
      var currentWeek = getWeek(date, utc);

      if (currentWeek == 1) {
        currentWeek = 53;
      }

      return currentWeek - firstWeek + 1;
    }
    /**
     * Returns a year day out of the given week number.
     *
     * @param week     Week
     * @param year     Year
     * @param weekday  Weekday
     * @param utc      Assume UTC dates
     * @return Day in a year
     */


    function getDayFromWeek(week, year, weekday, utc) {
      if (weekday === void 0) {
        weekday = 1;
      }

      if (utc === void 0) {
        utc = false;
      }

      var date = new Date(year, 0, 4, 0, 0, 0, 0);

      if (utc) {
        date.setUTCFullYear(year);
      }

      var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
      return day;
    }
    /**
     * Returns 12-hour representation out of the 24-hour hours.
     *
     * @param hours  24-hour number
     * @return 12-hour number
     */


    function get12Hours(hours, base) {
      if (hours > 12) {
        hours -= 12;
      } else if (hours === 0) {
        hours = 12;
      }

      return _utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](base) ? hours + (base - 1) : hours;
    }
    /**
     * Returns a string name of the tome zone.
     *
     * @param date     Date object
     * @param long     Should return long ("Pacific Standard Time") or short abbreviation ("PST")
     * @param savings  Include information if it's in daylight savings mode
     * @param utc      Assume UTC dates
     * @return Time zone name
     */


    function getTimeZone(date, long, savings, utc) {
      if (long === void 0) {
        long = false;
      }

      if (savings === void 0) {
        savings = false;
      }

      if (utc === void 0) {
        utc = false;
      }

      if (utc) {
        return long ? "Coordinated Universal Time" : "UTC";
      }

      var wotz = date.toLocaleString("UTC");
      var wtz = date.toLocaleString("UTC", {
        timeZoneName: long ? "long" : "short"
      }).substr(wotz.length); //wtz = wtz.replace(/[+-]+[0-9]+$/, "");

      if (savings === false) {
        wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
      }

      return wtz;
    }
    /**
     * ============================================================================
     * NUMBER-RELATED FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Returns a random number between `from` and `to`.
     *
     * @param from  From number
     * @param to    To number
     * @return Random number
     */


    function random(from, to) {
      return Math.floor(Math.random() * to) + from;
    }
    /**
     * Fits the number into specific `min` and `max` bounds.
     *
     * @param value  Input value
     * @param min    Minimum value
     * @param max    Maximum value
     * @return Possibly adjusted value
     */


    function fitNumber(value, min, max) {
      if (value > max) {
        return max;
      } else if (value < min) {
        return min;
      }

      return value;
    }
    /**
     * Fits the number into specific `min` and `max` bounds.
     *
     * If the value is does not fit withing specified range, it "wraps" around the
     * values.
     *
     * For example, if we have input value 10 with min set at 1 and max set at 8,
     * the value will not fit. The remainder that does not fit (2) will be added
     * to `min`, resulting in 3.
     *
     * The output of regular `fitNumber()` would return 8 instead.
     *
     * @param value  Input value
     * @param min    Minimum value
     * @param max    Maximum value
     * @return Possibly adjusted value
     */


    function fitNumberRelative(value, min, max) {
      var gap = max - min;

      if (value > max) {
        value = min + (value - gap * Math.floor(value / gap));
      } else if (value < min) {
        value = min + (value - gap * Math.floor(value / gap));
      }

      return value;
    }
    /**
     * ============================================================================
     * SPRITE-RELATED FUNCTIONS
     * ============================================================================
     * @hidden
     */

    /**
     * Converts SVG element coordinates to coordinates within specific [[Sprite]].
     *
     * @param point   SVG coordinates
     * @param sprite  Sprite
     * @return Sprite coordinates
     */


    function svgPointToSprite(point, sprite) {
      var x = point.x;
      var y = point.y;
      var sprites = [];

      if (sprite) {
        while (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](sprite.parent)) {
          sprites.push(sprite);
          sprite = sprite.parent;
        }

        sprites.reverse();

        for (var i = 0; i < sprites.length; i++) {
          var sprite_1 = sprites[i];
          var angle = sprite_1.rotation;
          var relativeX = x - sprite_1.pixelX - sprite_1.ex;
          var relativeY = y - sprite_1.pixelY - sprite_1.ey;

          if (sprite_1.dx) {
            x -= sprite_1.dx;
          }

          if (sprite_1.dy) {
            y -= sprite_1.dy;
          }

          var scale = sprite_1.scale; // this handles nonscaling

          if (sprite_1.group) {
            scale = sprite_1.group.scale;
          }

          x = (_utils_Math__WEBPACK_IMPORTED_MODULE_2__["cos"](-angle) * relativeX - _utils_Math__WEBPACK_IMPORTED_MODULE_2__["sin"](-angle) * relativeY) / scale - sprite_1.pixelPaddingLeft;
          y = (_utils_Math__WEBPACK_IMPORTED_MODULE_2__["cos"](-angle) * relativeY + _utils_Math__WEBPACK_IMPORTED_MODULE_2__["sin"](-angle) * relativeX) / scale - sprite_1.pixelPaddingTop;
        }
      }

      return {
        x: x,
        y: y
      };
    }
    /**
     * Converts coordinates within [[Sprite]] to coordinates relative to the whole
     * SVG element.
     *
     * @param point   Sprite coordinates
     * @param sprite  Sprite
     * @return SVG coordinates
     */


    function spritePointToSvg(point, sprite) {
      var x = point.x;
      var y = point.y;

      if (sprite) {
        while (_utils_Type__WEBPACK_IMPORTED_MODULE_3__["hasValue"](sprite.parent)) {
          var angle = sprite.rotation;
          x += sprite.pixelPaddingLeft + sprite.ex;
          y += sprite.pixelPaddingTop + sprite.ey;
          var scale = sprite.scale; // this handles nonscaling

          if (sprite.group) {
            scale = sprite.group.scale;
          }

          var relativeX = sprite.pixelX + (x * _utils_Math__WEBPACK_IMPORTED_MODULE_2__["cos"](angle) - y * _utils_Math__WEBPACK_IMPORTED_MODULE_2__["sin"](angle)) * scale;
          var relativeY = sprite.pixelY + (x * _utils_Math__WEBPACK_IMPORTED_MODULE_2__["sin"](angle) + y * _utils_Math__WEBPACK_IMPORTED_MODULE_2__["cos"](angle)) * scale;

          if (sprite.dx) {
            relativeX += sprite.dx;
          }

          if (sprite.dy) {
            relativeY += sprite.dy;
          }

          x = relativeX;
          y = relativeY;
          sprite = sprite.parent;
        }
      }

      return {
        x: x,
        y: y
      };
    }
    /**
     * Converts coordinates of one sprite to another.
     *
     * @param point   Sprite coordinates
     * @param sprite  Sprite
     * @param toSprite  Sprite
     * @return converted coordinates
     */


    function spritePointToSprite(point, sprite, toSprite) {
      return svgPointToSprite(spritePointToSvg(point, sprite), toSprite);
    }
    /**
     * Converts a rectangle expressed in SVG element coordinates to coordinates
     * within specific [[Sprite]].
     *
     * @param rect    SVG rectangle
     * @param sprite  Sprite
     * @return Sprite rectangle
     */


    function svgRectToSprite(rect, sprite) {
      var p1 = svgPointToSprite(rect, sprite);
      var p2 = svgPointToSprite({
        x: rect.x + rect.width,
        y: rect.y + rect.height
      }, sprite);
      return {
        x: p1.x,
        y: p1.y,
        width: p2.x - p1.x,
        height: p2.y - p1.y
      };
    }
    /**
     * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.
     *
     * @param rect    Sprite rectangle
     * @param sprite  Sprite
     * @return SVG rectangle
     */


    function spriteRectToSvg(rect, sprite) {
      var p1 = spritePointToSvg(rect, sprite);
      var p2 = spritePointToSvg({
        x: rect.x + rect.width,
        y: rect.y + rect.height
      }, sprite);
      return {
        x: p1.x,
        y: p1.y,
        width: p2.x - p1.x,
        height: p2.y - p1.y
      };
    }
    /**
     * Converts global document-wide coordinates to coordinates within SVG element.
     *
     * @param point         Global coordinates
     * @param svgContainer  SVG element
     * @return SVG coordinates
     */


    function documentPointToSvg(point, svgContainer, cssScale) {
      try {
        var bbox = svgContainer.getBoundingClientRect();

        if (!_utils_Type__WEBPACK_IMPORTED_MODULE_3__["isNumber"](cssScale)) {
          cssScale = 1;
        }

        return {
          "x": (point.x - bbox.left) / cssScale,
          "y": (point.y - bbox.top) / cssScale
        };
      } catch (e) {
        return point;
      }
    }
    /**
     * Converts SVG coordinates to global document-wide coordinates.
     *
     * @param point         SVG coordinates
     * @param svgContainer  SVG element
     * @return Global coordinates
     */


    function svgPointToDocument(point, svgContainer) {
      try {
        var bbox = svgContainer.getBoundingClientRect();
        return {
          "x": point.x + bbox.left,
          "y": point.y + bbox.top
        };
      } catch (e) {
        return point;
      }
    }
    /**
     * Converts document-wide global coordinates to coordinates within specific
     * [[Sprite]].
     *
     * @param point   Global coordinates
     * @param sprite  Sprite
     * @return Sprite coordinates
     */


    function documentPointToSprite(point, sprite) {
      if (sprite && sprite.htmlContainer) {
        var svgPoint = documentPointToSvg(point, _utils_Type__WEBPACK_IMPORTED_MODULE_3__["getValue"](sprite.htmlContainer), sprite.svgContainer.cssScale);
        return svgPointToSprite(svgPoint, sprite);
      } else {
        return point;
      }
    }
    /**
     * Converts coordinates within [[Sprite]] to global document coordinates.
     *
     * @param point   Sprite coordinates
     * @param sprite  Sprite
     * @return Global coordinates
     */


    function spritePointToDocument(point, sprite) {
      if (sprite && sprite.htmlContainer) {
        var svgPoint = spritePointToSvg(point, sprite);
        return svgPointToDocument(svgPoint, _utils_Type__WEBPACK_IMPORTED_MODULE_3__["getValue"](sprite.htmlContainer));
      } else {
        return point;
      }
    }
    /**
     * ============================================================================
     * DEPRECATED FUNCTIONS
     * @todo Review and remove
     * ============================================================================
     * @hidden
     */

    /**
     * Returns element's width.
     *
     * @ignore Exclude from docs
     * @param element  Element
     * @return Width (px)
     * @deprecated Not used anywhere
     */


    function width(element) {
      var cs = getComputedStyle(element);
      var paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);
      var borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);
      return element.clientWidth - paddingX - borderX;
    }
    /**
     * Returns element's height.
     *
     * @ignore Exclude from docs
     * @param element  Element
     * @return Height (px)
     * @deprecated Not used anywhere
     */


    function height(element) {
      var cs = getComputedStyle(element);
      var paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);
      var borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);
      return element.clientHeight - paddingY - borderY;
    }
    /**
     * Returns number of decimals
     *
     * @ignore Exclude from docs
     * @param number  Input number
     * @return Number of decimals
     */


    function decimalPlaces(number) {
      var match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);

      if (!match) {
        return 0;
      }

      return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
    }

    var urlRegexp = /^([a-zA-Z][a-zA-Z0-9\+\.\-]*:)?(?:(\/\/)([^\@]+\@)?([^\/\?\#\:]*)(\:[0-9]+)?)?([^\?\#]*)(\?[^\#]*)?(\#.*)?$/;
    /**
     * Parses a URL
     *
     * @ignore Exclude from docs
     */
    // TODO test this

    function parseUrl(url) {
      var match = urlRegexp.exec(url);
      return {
        protocol: match && match[1] || "",
        separator: match && match[2] || "",
        authority: match && match[3] || "",
        domain: match && match[4] || "",
        port: match && match[5] || "",
        path: match && match[6] || "",
        query: match && match[7] || "",
        hash: match && match[8] || ""
      };
    }
    /**
     * Serializes a Url into a string
     *
     * @ignore Exclude from docs
     */


    function serializeUrl(url) {
      return url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;
    }
    /**
     * Checks whether a Url is relative or not
     *
     * @ignore Exclude from docs
     */
    // TODO is this correct ?


    function isRelativeUrl(url) {
      return url.protocol === "" && url.separator === "" && url.authority === "" && url.domain === "" && url.port === "";
    }
    /**
     * Joins together two URLs, resolving relative URLs correctly
     *
     * @ignore Exclude from docs
     */
    // TODO test this


    function joinUrl(left, right) {
      var parsedLeft = parseUrl(left);
      var parsedRight = parseUrl(right);

      if (isRelativeUrl(parsedLeft)) {
        throw new Error("Left URL is not absolute");
      }

      if (isRelativeUrl(parsedRight)) {
        // TODO is this correct ?
        if (parsedRight.path !== "") {
          if (parsedRight.path[0] === "/") {
            parsedLeft.path = parsedRight.path; // TODO is this correct ?
          } else {
            var leftPath = parsedLeft.path.split(/\//);
            var rightPath = parsedRight.path.split(/\//); // TODO is this correct ?

            if (leftPath.length === 0) {
              if (rightPath.length !== 0) {
                leftPath.push("");
              }
            } else if (leftPath.length > 1) {
              leftPath.pop();
            }

            _Array__WEBPACK_IMPORTED_MODULE_7__["pushAll"](leftPath, rightPath);

            parsedLeft.path = leftPath.join("/");

            if (parsedLeft.path !== "" && parsedLeft.path[0] !== "/") {
              throw new Error("URL path must start with /");
            }
          }
        } // TODO is this correct ?


        parsedLeft.query = parsedRight.query;
        parsedLeft.hash = parsedRight.hash;
        return serializeUrl(parsedLeft);
      } else {
        return serializeUrl(parsedRight);
      }
    }
    /**
     * Detects MSIE.
     *
     * @return Is IE?
     */


    function isIE() {
      return !!window.MSInputMethodContext && !!document.documentMode;
    } //# sourceMappingURL=Utils.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/core/utils/Validatable.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/core/utils/Validatable.js ***!
    \******************************************************************************/

  /*! exports provided: Validatable */

  /***/
  function node_modulesAmchartsAmcharts4InternalCoreUtilsValidatableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Validatable", function () {
      return Validatable;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony import */


    var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /**
     * This module defines a [[Validatable]] class which can be used by all
     * non-[[Sprite]] classes to use system beats to revalidate themselves.
     */

    /**
     * ============================================================================
     * IMPORTS
     * ============================================================================
     * @hidden
     */

    /**
     * This module defines a [[Validatable]] class which can be used by all
     * non-[[Sprite]] classes to use system update cycle to revalidate themselves.
     *
     * @ignore Exclude from docs
     */


    var Validatable =
    /** @class */
    function (_super) {
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Validatable, _super);

      function Validatable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Is invalid and should be revalidated?
         */


        _this._validateDisposer = null;
        return _this;
      }
      /**
       * Invalidates the element, so that it can re-validate/redraw itself in the
       * next cycle.
       *
       * @ignore Exclude from docs
       */


      Validatable.prototype.invalidate = function () {
        if (this._validateDisposer === null) {
          this._validateDisposer = _Registry__WEBPACK_IMPORTED_MODULE_2__["registry"].events.on("exitframe", this.validate, this);
        }
      };
      /**
       * Validates itself.
       *
       * Most probably the extending class will have an overriding `validate()`
       * method which will do actual work, as well as call this method using
       * `super.validate()`.
       *
       * @ignore Exclude from docs
       */


      Validatable.prototype.validate = function () {
        if (this._validateDisposer !== null) {
          this._validateDisposer.dispose();

          this._validateDisposer = null;
        }
      };

      Validatable.prototype.dispose = function () {
        if (this._validateDisposer !== null) {
          this._validateDisposer.dispose();

          this._validateDisposer = null;
        }

        _super.prototype.dispose.call(this);
      };

      return Validatable;
    }(_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"]); //# sourceMappingURL=Validatable.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/.internal/themes/animated.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/.internal/themes/animated.js ***!
    \***********************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesAmchartsAmcharts4InternalThemesAnimatedJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _core_Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../core/Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");

    var theme = function theme(object) {
      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "SpriteState")) {
        object.transitionDuration = 400;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Component")) {
        object.rangeChangeDuration = 500;
        object.interpolationDuration = 500;
        object.sequencedInterpolation = false;

        if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "SankeyDiagram")) {
          object.sequencedInterpolation = true;
        }

        if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "FunnelSeries")) {
          object.sequencedInterpolation = true;
        }
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Chart")) {
        object.defaultState.transitionDuration = 2000;
        object.hiddenState.transitionDuration = 1000;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Tooltip")) {
        object.animationDuration = 400;
        object.defaultState.transitionDuration = 400;
        object.hiddenState.transitionDuration = 400;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Scrollbar")) {
        object.animationDuration = 500;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Series")) {
        object.defaultState.transitionDuration = 1000;
        object.hiddenState.transitionDuration = 700;
        object.hiddenState.properties.opacity = 1;
        object.showOnInit = true;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "MapSeries")) {
        object.hiddenState.properties.opacity = 0;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "PercentSeries")) {
        object.hiddenState.properties.opacity = 0;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "FunnelSlice")) {
        object.defaultState.transitionDuration = 800;
        object.hiddenState.transitionDuration = 1000;
        object.hiddenState.properties.opacity = 1;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Slice")) {
        object.defaultState.transitionDuration = 700;
        object.hiddenState.transitionDuration = 1000;
        object.hiddenState.properties.opacity = 1;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Preloader")) {
        object.hiddenState.transitionDuration = 2000;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Column")) {
        object.defaultState.transitionDuration = 700;
        object.hiddenState.transitionDuration = 1000;
        object.hiddenState.properties.opacity = 1;
      }

      if (Object(_core_Registry__WEBPACK_IMPORTED_MODULE_0__["is"])(object, "Column3D")) {
        object.hiddenState.properties.opacity = 0;
      }
    };
    /* harmony default export */


    __webpack_exports__["default"] = theme; //# sourceMappingURL=animated.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/core.js":
  /*!**************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/core.js ***!
    \**************************************************/

  /*! exports provided: System, system, BaseObject, BaseObjectEvents, Component, Container, DataItem, Sprite, SpriteEventDispatcher, SpriteState, registry, Registry, is, options, CSVParser, DataLoader, dataLoader, DataParser, DataSource, JSONParser, SVGDefaults, Button, Circle, Ellipse, Image, Label, Line, Popup, Modal, PointedRectangle, PointedShape, Polyarc, Polygon, Polyline, Polyspline, Preloader, Rectangle, ResizeButton, CloseButton, SwitchButton, RoundedRectangle, Scrollbar, Slider, Slice, TextLink, Tooltip, Trapezoid, Triangle, WavedCircle, WavedLine, WavedRectangle, ZoomOutButton, PlayButton, Cone, Rectangle3D, Slice3D, Export, ExportMenu, DateFormatter, DurationFormatter, NumberFormatter, TextFormatter, getTextFormatter, Inertia, Interaction, getInteraction, InteractionKeyboardObject, InteractionObject, InteractionObjectEventDispatcher, MouseCursorStyle, AMElement, Group, Paper, Tension, Basis, SVGContainer, ColorModifier, LinearGradient, LinearGradientModifier, RadialGradientModifier, LinePattern, CirclePattern, Pattern, RadialGradient, RectPattern, ColorizeFilter, DesaturateFilter, DropShadowFilter, BlurFilter, Filter, FocusFilter, LightenFilter, GlobalAdapter, globalAdapter, Adapter, Animation, animate, nextFrame, readFrame, writeFrame, whenIdle, triggerIdle, Cache, cache, Color, color, isColor, castColor, ColorSet, PatternSet, InterfaceColorSet, DictionaryDisposer, Dictionary, DictionaryTemplate, Disposer, MultiDisposer, MutableValueDisposer, CounterDisposer, StyleRule, StyleClass, getElement, addClass, removeClass, blur, focus, outerHTML, isElement, copyAttributes, fixPixelPerfect, ready, EventDispatcher, TargetedEventDispatcher, ListIterator, min, max, join, Keyboard, keyboard, Language, IndexedIterable, ListGrouper, ListDisposer, List, ListTemplate, Morpher, reverse, or, Percent, percent, isPercent, Plugin, Responsive, ResponsiveBreakpoints, defaultRules, OrderedList, SortedList, OrderedListTemplate, SortedListTemplate, PX, STRING, NUMBER, DATE, DURATION, PLACEHOLDER, PLACEHOLDER2, isNaN, checkString, checkBoolean, checkNumber, checkObject, castString, castNumber, isString, isNumber, isObject, isArray, Validatable, path, colors, ease, math, array, number, object, string, time, utils, iter, type, create, createFromConfig, disposeAllCharts, useTheme, unuseTheme, unuseAllThemes, addLicense */

  /***/
  function node_modulesAmchartsAmcharts4CoreJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _internal_core_System__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./.internal/core/System */
    "./node_modules/@amcharts/amcharts4/.internal/core/System.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "System", function () {
      return _internal_core_System__WEBPACK_IMPORTED_MODULE_0__["System"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "system", function () {
      return _internal_core_System__WEBPACK_IMPORTED_MODULE_0__["system"];
    });
    /* harmony import */


    var _internal_core_Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./.internal/core/Base */
    "./node_modules/@amcharts/amcharts4/.internal/core/Base.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "BaseObject", function () {
      return _internal_core_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObject"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "BaseObjectEvents", function () {
      return _internal_core_Base__WEBPACK_IMPORTED_MODULE_1__["BaseObjectEvents"];
    });
    /* harmony import */


    var _internal_core_Component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./.internal/core/Component */
    "./node_modules/@amcharts/amcharts4/.internal/core/Component.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Component", function () {
      return _internal_core_Component__WEBPACK_IMPORTED_MODULE_2__["Component"];
    });
    /* harmony import */


    var _internal_core_Container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./.internal/core/Container */
    "./node_modules/@amcharts/amcharts4/.internal/core/Container.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Container", function () {
      return _internal_core_Container__WEBPACK_IMPORTED_MODULE_3__["Container"];
    });
    /* harmony import */


    var _internal_core_DataItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./.internal/core/DataItem */
    "./node_modules/@amcharts/amcharts4/.internal/core/DataItem.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DataItem", function () {
      return _internal_core_DataItem__WEBPACK_IMPORTED_MODULE_4__["DataItem"];
    });
    /* harmony import */


    var _internal_core_Sprite__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./.internal/core/Sprite */
    "./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Sprite", function () {
      return _internal_core_Sprite__WEBPACK_IMPORTED_MODULE_5__["Sprite"];
    });
    /* harmony import */


    var _internal_core_SpriteEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./.internal/core/SpriteEvents */
    "./node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SpriteEventDispatcher", function () {
      return _internal_core_SpriteEvents__WEBPACK_IMPORTED_MODULE_6__["SpriteEventDispatcher"];
    });
    /* harmony import */


    var _internal_core_SpriteState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./.internal/core/SpriteState */
    "./node_modules/@amcharts/amcharts4/.internal/core/SpriteState.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SpriteState", function () {
      return _internal_core_SpriteState__WEBPACK_IMPORTED_MODULE_7__["SpriteState"];
    });
    /* harmony import */


    var _internal_core_Registry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./.internal/core/Registry */
    "./node_modules/@amcharts/amcharts4/.internal/core/Registry.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "registry", function () {
      return _internal_core_Registry__WEBPACK_IMPORTED_MODULE_8__["registry"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Registry", function () {
      return _internal_core_Registry__WEBPACK_IMPORTED_MODULE_8__["Registry"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "is", function () {
      return _internal_core_Registry__WEBPACK_IMPORTED_MODULE_8__["is"];
    });
    /* harmony import */


    var _internal_core_Options__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./.internal/core/Options */
    "./node_modules/@amcharts/amcharts4/.internal/core/Options.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "options", function () {
      return _internal_core_Options__WEBPACK_IMPORTED_MODULE_9__["options"];
    });
    /* harmony import */


    var _internal_core_data_CSVParser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./.internal/core/data/CSVParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/CSVParser.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "CSVParser", function () {
      return _internal_core_data_CSVParser__WEBPACK_IMPORTED_MODULE_10__["CSVParser"];
    });
    /* harmony import */


    var _internal_core_data_DataLoader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./.internal/core/data/DataLoader */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DataLoader", function () {
      return _internal_core_data_DataLoader__WEBPACK_IMPORTED_MODULE_11__["DataLoader"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "dataLoader", function () {
      return _internal_core_data_DataLoader__WEBPACK_IMPORTED_MODULE_11__["dataLoader"];
    });
    /* harmony import */


    var _internal_core_data_DataParser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./.internal/core/data/DataParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DataParser", function () {
      return _internal_core_data_DataParser__WEBPACK_IMPORTED_MODULE_12__["DataParser"];
    });
    /* harmony import */


    var _internal_core_data_DataSource__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./.internal/core/data/DataSource */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DataSource", function () {
      return _internal_core_data_DataSource__WEBPACK_IMPORTED_MODULE_13__["DataSource"];
    });
    /* harmony import */


    var _internal_core_data_JSONParser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./.internal/core/data/JSONParser */
    "./node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "JSONParser", function () {
      return _internal_core_data_JSONParser__WEBPACK_IMPORTED_MODULE_14__["JSONParser"];
    });
    /* harmony import */


    var _internal_core_defs_SVGDefaults__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./.internal/core/defs/SVGDefaults */
    "./node_modules/@amcharts/amcharts4/.internal/core/defs/SVGDefaults.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SVGDefaults", function () {
      return _internal_core_defs_SVGDefaults__WEBPACK_IMPORTED_MODULE_15__["SVGDefaults"];
    });
    /* harmony import */


    var _internal_core_elements_Button__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ./.internal/core/elements/Button */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Button", function () {
      return _internal_core_elements_Button__WEBPACK_IMPORTED_MODULE_16__["Button"];
    });
    /* harmony import */


    var _internal_core_elements_Circle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ./.internal/core/elements/Circle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Circle", function () {
      return _internal_core_elements_Circle__WEBPACK_IMPORTED_MODULE_17__["Circle"];
    });
    /* harmony import */


    var _internal_core_elements_Ellipse__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ./.internal/core/elements/Ellipse */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Ellipse", function () {
      return _internal_core_elements_Ellipse__WEBPACK_IMPORTED_MODULE_18__["Ellipse"];
    });
    /* harmony import */


    var _internal_core_elements_Image__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! ./.internal/core/elements/Image */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Image.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Image", function () {
      return _internal_core_elements_Image__WEBPACK_IMPORTED_MODULE_19__["Image"];
    });
    /* harmony import */


    var _internal_core_elements_Label__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! ./.internal/core/elements/Label */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Label", function () {
      return _internal_core_elements_Label__WEBPACK_IMPORTED_MODULE_20__["Label"];
    });
    /* harmony import */


    var _internal_core_elements_Line__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! ./.internal/core/elements/Line */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Line", function () {
      return _internal_core_elements_Line__WEBPACK_IMPORTED_MODULE_21__["Line"];
    });
    /* harmony import */


    var _internal_core_elements_Popup__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! ./.internal/core/elements/Popup */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Popup.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Popup", function () {
      return _internal_core_elements_Popup__WEBPACK_IMPORTED_MODULE_22__["Popup"];
    });
    /* harmony import */


    var _internal_core_elements_Modal__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! ./.internal/core/elements/Modal */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Modal.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Modal", function () {
      return _internal_core_elements_Modal__WEBPACK_IMPORTED_MODULE_23__["Modal"];
    });
    /* harmony import */


    var _internal_core_elements_PointedRectangle__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! ./.internal/core/elements/PointedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedRectangle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PointedRectangle", function () {
      return _internal_core_elements_PointedRectangle__WEBPACK_IMPORTED_MODULE_24__["PointedRectangle"];
    });
    /* harmony import */


    var _internal_core_elements_PointedShape__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! ./.internal/core/elements/PointedShape */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedShape.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PointedShape", function () {
      return _internal_core_elements_PointedShape__WEBPACK_IMPORTED_MODULE_25__["PointedShape"];
    });
    /* harmony import */


    var _internal_core_elements_Polyarc__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! ./.internal/core/elements/Polyarc */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Polyarc", function () {
      return _internal_core_elements_Polyarc__WEBPACK_IMPORTED_MODULE_26__["Polyarc"];
    });
    /* harmony import */


    var _internal_core_elements_Polygon__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! ./.internal/core/elements/Polygon */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polygon.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Polygon", function () {
      return _internal_core_elements_Polygon__WEBPACK_IMPORTED_MODULE_27__["Polygon"];
    });
    /* harmony import */


    var _internal_core_elements_Polyline__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! ./.internal/core/elements/Polyline */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Polyline", function () {
      return _internal_core_elements_Polyline__WEBPACK_IMPORTED_MODULE_28__["Polyline"];
    });
    /* harmony import */


    var _internal_core_elements_Polyspline__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! ./.internal/core/elements/Polyspline */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Polyspline", function () {
      return _internal_core_elements_Polyspline__WEBPACK_IMPORTED_MODULE_29__["Polyspline"];
    });
    /* harmony import */


    var _internal_core_elements_Preloader__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! ./.internal/core/elements/Preloader */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Preloader.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Preloader", function () {
      return _internal_core_elements_Preloader__WEBPACK_IMPORTED_MODULE_30__["Preloader"];
    });
    /* harmony import */


    var _internal_core_elements_Rectangle__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! ./.internal/core/elements/Rectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Rectangle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Rectangle", function () {
      return _internal_core_elements_Rectangle__WEBPACK_IMPORTED_MODULE_31__["Rectangle"];
    });
    /* harmony import */


    var _internal_core_elements_ResizeButton__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! ./.internal/core/elements/ResizeButton */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/ResizeButton.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ResizeButton", function () {
      return _internal_core_elements_ResizeButton__WEBPACK_IMPORTED_MODULE_32__["ResizeButton"];
    });
    /* harmony import */


    var _internal_core_elements_CloseButton__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! ./.internal/core/elements/CloseButton */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/CloseButton.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "CloseButton", function () {
      return _internal_core_elements_CloseButton__WEBPACK_IMPORTED_MODULE_33__["CloseButton"];
    });
    /* harmony import */


    var _internal_core_elements_SwitchButton__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
    /*! ./.internal/core/elements/SwitchButton */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/SwitchButton.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SwitchButton", function () {
      return _internal_core_elements_SwitchButton__WEBPACK_IMPORTED_MODULE_34__["SwitchButton"];
    });
    /* harmony import */


    var _internal_core_elements_RoundedRectangle__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
    /*! ./.internal/core/elements/RoundedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "RoundedRectangle", function () {
      return _internal_core_elements_RoundedRectangle__WEBPACK_IMPORTED_MODULE_35__["RoundedRectangle"];
    });
    /* harmony import */


    var _internal_core_elements_Scrollbar__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
    /*! ./.internal/core/elements/Scrollbar */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Scrollbar", function () {
      return _internal_core_elements_Scrollbar__WEBPACK_IMPORTED_MODULE_36__["Scrollbar"];
    });
    /* harmony import */


    var _internal_core_elements_Slider__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
    /*! ./.internal/core/elements/Slider */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Slider.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Slider", function () {
      return _internal_core_elements_Slider__WEBPACK_IMPORTED_MODULE_37__["Slider"];
    });
    /* harmony import */


    var _internal_core_elements_Slice__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
    /*! ./.internal/core/elements/Slice */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Slice", function () {
      return _internal_core_elements_Slice__WEBPACK_IMPORTED_MODULE_38__["Slice"];
    });
    /* harmony import */


    var _internal_core_elements_TextLink__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
    /*! ./.internal/core/elements/TextLink */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/TextLink.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "TextLink", function () {
      return _internal_core_elements_TextLink__WEBPACK_IMPORTED_MODULE_39__["TextLink"];
    });
    /* harmony import */


    var _internal_core_elements_Tooltip__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
    /*! ./.internal/core/elements/Tooltip */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Tooltip", function () {
      return _internal_core_elements_Tooltip__WEBPACK_IMPORTED_MODULE_40__["Tooltip"];
    });
    /* harmony import */


    var _internal_core_elements_Trapezoid__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
    /*! ./.internal/core/elements/Trapezoid */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Trapezoid.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Trapezoid", function () {
      return _internal_core_elements_Trapezoid__WEBPACK_IMPORTED_MODULE_41__["Trapezoid"];
    });
    /* harmony import */


    var _internal_core_elements_Triangle__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
    /*! ./.internal/core/elements/Triangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Triangle", function () {
      return _internal_core_elements_Triangle__WEBPACK_IMPORTED_MODULE_42__["Triangle"];
    });
    /* harmony import */


    var _internal_core_elements_WavedCircle__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
    /*! ./.internal/core/elements/WavedCircle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "WavedCircle", function () {
      return _internal_core_elements_WavedCircle__WEBPACK_IMPORTED_MODULE_43__["WavedCircle"];
    });
    /* harmony import */


    var _internal_core_elements_WavedLine__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
    /*! ./.internal/core/elements/WavedLine */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedLine.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "WavedLine", function () {
      return _internal_core_elements_WavedLine__WEBPACK_IMPORTED_MODULE_44__["WavedLine"];
    });
    /* harmony import */


    var _internal_core_elements_WavedRectangle__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
    /*! ./.internal/core/elements/WavedRectangle */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedRectangle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "WavedRectangle", function () {
      return _internal_core_elements_WavedRectangle__WEBPACK_IMPORTED_MODULE_45__["WavedRectangle"];
    });
    /* harmony import */


    var _internal_core_elements_ZoomOutButton__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
    /*! ./.internal/core/elements/ZoomOutButton */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/ZoomOutButton.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ZoomOutButton", function () {
      return _internal_core_elements_ZoomOutButton__WEBPACK_IMPORTED_MODULE_46__["ZoomOutButton"];
    });
    /* harmony import */


    var _internal_core_elements_PlayButton__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
    /*! ./.internal/core/elements/PlayButton */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/PlayButton.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PlayButton", function () {
      return _internal_core_elements_PlayButton__WEBPACK_IMPORTED_MODULE_47__["PlayButton"];
    });
    /* harmony import */


    var _internal_core_elements_3d_Cone__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
    /*! ./.internal/core/elements/3d/Cone */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Cone.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Cone", function () {
      return _internal_core_elements_3d_Cone__WEBPACK_IMPORTED_MODULE_48__["Cone"];
    });
    /* harmony import */


    var _internal_core_elements_3d_Rectangle3D__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
    /*! ./.internal/core/elements/3d/Rectangle3D */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Rectangle3D.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Rectangle3D", function () {
      return _internal_core_elements_3d_Rectangle3D__WEBPACK_IMPORTED_MODULE_49__["Rectangle3D"];
    });
    /* harmony import */


    var _internal_core_elements_3d_Slice3D__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
    /*! ./.internal/core/elements/3d/Slice3D */
    "./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Slice3D.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Slice3D", function () {
      return _internal_core_elements_3d_Slice3D__WEBPACK_IMPORTED_MODULE_50__["Slice3D"];
    });
    /* harmony import */


    var _internal_core_export_Export__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
    /*! ./.internal/core/export/Export */
    "./node_modules/@amcharts/amcharts4/.internal/core/export/Export.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Export", function () {
      return _internal_core_export_Export__WEBPACK_IMPORTED_MODULE_51__["Export"];
    });
    /* harmony import */


    var _internal_core_export_ExportMenu__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
    /*! ./.internal/core/export/ExportMenu */
    "./node_modules/@amcharts/amcharts4/.internal/core/export/ExportMenu.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ExportMenu", function () {
      return _internal_core_export_ExportMenu__WEBPACK_IMPORTED_MODULE_52__["ExportMenu"];
    });
    /* harmony import */


    var _internal_core_formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
    /*! ./.internal/core/formatters/DateFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DateFormatter", function () {
      return _internal_core_formatters_DateFormatter__WEBPACK_IMPORTED_MODULE_53__["DateFormatter"];
    });
    /* harmony import */


    var _internal_core_formatters_DurationFormatter__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
    /*! ./.internal/core/formatters/DurationFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DurationFormatter", function () {
      return _internal_core_formatters_DurationFormatter__WEBPACK_IMPORTED_MODULE_54__["DurationFormatter"];
    });
    /* harmony import */


    var _internal_core_formatters_NumberFormatter__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(
    /*! ./.internal/core/formatters/NumberFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "NumberFormatter", function () {
      return _internal_core_formatters_NumberFormatter__WEBPACK_IMPORTED_MODULE_55__["NumberFormatter"];
    });
    /* harmony import */


    var _internal_core_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(
    /*! ./.internal/core/formatters/TextFormatter */
    "./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "TextFormatter", function () {
      return _internal_core_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_56__["TextFormatter"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "getTextFormatter", function () {
      return _internal_core_formatters_TextFormatter__WEBPACK_IMPORTED_MODULE_56__["getTextFormatter"];
    });
    /* harmony import */


    var _internal_core_interaction_Inertia__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(
    /*! ./.internal/core/interaction/Inertia */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Inertia", function () {
      return _internal_core_interaction_Inertia__WEBPACK_IMPORTED_MODULE_57__["Inertia"];
    });
    /* harmony import */


    var _internal_core_interaction_Interaction__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(
    /*! ./.internal/core/interaction/Interaction */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Interaction", function () {
      return _internal_core_interaction_Interaction__WEBPACK_IMPORTED_MODULE_58__["Interaction"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "getInteraction", function () {
      return _internal_core_interaction_Interaction__WEBPACK_IMPORTED_MODULE_58__["getInteraction"];
    });
    /* harmony import */


    var _internal_core_interaction_InteractionKeyboardObject__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(
    /*! ./.internal/core/interaction/InteractionKeyboardObject */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionKeyboardObject.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "InteractionKeyboardObject", function () {
      return _internal_core_interaction_InteractionKeyboardObject__WEBPACK_IMPORTED_MODULE_59__["InteractionKeyboardObject"];
    });
    /* harmony import */


    var _internal_core_interaction_InteractionObject__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(
    /*! ./.internal/core/interaction/InteractionObject */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "InteractionObject", function () {
      return _internal_core_interaction_InteractionObject__WEBPACK_IMPORTED_MODULE_60__["InteractionObject"];
    });
    /* harmony import */


    var _internal_core_interaction_InteractionObjectEvents__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(
    /*! ./.internal/core/interaction/InteractionObjectEvents */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObjectEvents.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "InteractionObjectEventDispatcher", function () {
      return _internal_core_interaction_InteractionObjectEvents__WEBPACK_IMPORTED_MODULE_61__["InteractionObjectEventDispatcher"];
    });
    /* harmony import */


    var _internal_core_interaction_Mouse__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(
    /*! ./.internal/core/interaction/Mouse */
    "./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "MouseCursorStyle", function () {
      return _internal_core_interaction_Mouse__WEBPACK_IMPORTED_MODULE_62__["MouseCursorStyle"];
    });
    /* harmony import */


    var _internal_core_rendering_AMElement__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(
    /*! ./.internal/core/rendering/AMElement */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "AMElement", function () {
      return _internal_core_rendering_AMElement__WEBPACK_IMPORTED_MODULE_63__["AMElement"];
    });
    /* harmony import */


    var _internal_core_rendering_Group__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(
    /*! ./.internal/core/rendering/Group */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Group", function () {
      return _internal_core_rendering_Group__WEBPACK_IMPORTED_MODULE_64__["Group"];
    });
    /* harmony import */


    var _internal_core_rendering_Paper__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(
    /*! ./.internal/core/rendering/Paper */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Paper", function () {
      return _internal_core_rendering_Paper__WEBPACK_IMPORTED_MODULE_65__["Paper"];
    });
    /* harmony import */


    var _internal_core_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(
    /*! ./.internal/core/rendering/Smoothing */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Tension", function () {
      return _internal_core_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_66__["Tension"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Basis", function () {
      return _internal_core_rendering_Smoothing__WEBPACK_IMPORTED_MODULE_66__["Basis"];
    });
    /* harmony import */


    var _internal_core_rendering_SVGContainer__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(
    /*! ./.internal/core/rendering/SVGContainer */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SVGContainer", function () {
      return _internal_core_rendering_SVGContainer__WEBPACK_IMPORTED_MODULE_67__["SVGContainer"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_ColorModifier__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/ColorModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/ColorModifier.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ColorModifier", function () {
      return _internal_core_rendering_fills_ColorModifier__WEBPACK_IMPORTED_MODULE_68__["ColorModifier"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/LinearGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "LinearGradient", function () {
      return _internal_core_rendering_fills_LinearGradient__WEBPACK_IMPORTED_MODULE_69__["LinearGradient"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_LinearGradientModifier__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/LinearGradientModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradientModifier.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "LinearGradientModifier", function () {
      return _internal_core_rendering_fills_LinearGradientModifier__WEBPACK_IMPORTED_MODULE_70__["LinearGradientModifier"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_RadialGradientModifier__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/RadialGradientModifier */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradientModifier.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "RadialGradientModifier", function () {
      return _internal_core_rendering_fills_RadialGradientModifier__WEBPACK_IMPORTED_MODULE_71__["RadialGradientModifier"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_LinePattern__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/LinePattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "LinePattern", function () {
      return _internal_core_rendering_fills_LinePattern__WEBPACK_IMPORTED_MODULE_72__["LinePattern"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_CirclePattern__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/CirclePattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/CirclePattern.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "CirclePattern", function () {
      return _internal_core_rendering_fills_CirclePattern__WEBPACK_IMPORTED_MODULE_73__["CirclePattern"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_Pattern__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/Pattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Pattern", function () {
      return _internal_core_rendering_fills_Pattern__WEBPACK_IMPORTED_MODULE_74__["Pattern"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/RadialGradient */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "RadialGradient", function () {
      return _internal_core_rendering_fills_RadialGradient__WEBPACK_IMPORTED_MODULE_75__["RadialGradient"];
    });
    /* harmony import */


    var _internal_core_rendering_fills_RectPattern__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(
    /*! ./.internal/core/rendering/fills/RectPattern */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RectPattern.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "RectPattern", function () {
      return _internal_core_rendering_fills_RectPattern__WEBPACK_IMPORTED_MODULE_76__["RectPattern"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_ColorizeFilter__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/ColorizeFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/ColorizeFilter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ColorizeFilter", function () {
      return _internal_core_rendering_filters_ColorizeFilter__WEBPACK_IMPORTED_MODULE_77__["ColorizeFilter"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_DesaturateFilter__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/DesaturateFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DesaturateFilter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DesaturateFilter", function () {
      return _internal_core_rendering_filters_DesaturateFilter__WEBPACK_IMPORTED_MODULE_78__["DesaturateFilter"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_DropShadowFilter__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/DropShadowFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DropShadowFilter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DropShadowFilter", function () {
      return _internal_core_rendering_filters_DropShadowFilter__WEBPACK_IMPORTED_MODULE_79__["DropShadowFilter"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_BlurFilter__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/BlurFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/BlurFilter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "BlurFilter", function () {
      return _internal_core_rendering_filters_BlurFilter__WEBPACK_IMPORTED_MODULE_80__["BlurFilter"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_Filter__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/Filter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Filter", function () {
      return _internal_core_rendering_filters_Filter__WEBPACK_IMPORTED_MODULE_81__["Filter"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_FocusFilter__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/FocusFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/FocusFilter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "FocusFilter", function () {
      return _internal_core_rendering_filters_FocusFilter__WEBPACK_IMPORTED_MODULE_82__["FocusFilter"];
    });
    /* harmony import */


    var _internal_core_rendering_filters_LightenFilter__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(
    /*! ./.internal/core/rendering/filters/LightenFilter */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "LightenFilter", function () {
      return _internal_core_rendering_filters_LightenFilter__WEBPACK_IMPORTED_MODULE_83__["LightenFilter"];
    });
    /* harmony import */


    var _internal_core_utils_Adapter__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(
    /*! ./.internal/core/utils/Adapter */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "GlobalAdapter", function () {
      return _internal_core_utils_Adapter__WEBPACK_IMPORTED_MODULE_84__["GlobalAdapter"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "globalAdapter", function () {
      return _internal_core_utils_Adapter__WEBPACK_IMPORTED_MODULE_84__["globalAdapter"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Adapter", function () {
      return _internal_core_utils_Adapter__WEBPACK_IMPORTED_MODULE_84__["Adapter"];
    });
    /* harmony import */


    var _internal_core_utils_Animation__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(
    /*! ./.internal/core/utils/Animation */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Animation", function () {
      return _internal_core_utils_Animation__WEBPACK_IMPORTED_MODULE_85__["Animation"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "animate", function () {
      return _internal_core_utils_Animation__WEBPACK_IMPORTED_MODULE_85__["animate"];
    });
    /* harmony import */


    var _internal_core_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(
    /*! ./.internal/core/utils/AsyncPending */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "nextFrame", function () {
      return _internal_core_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_86__["nextFrame"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "readFrame", function () {
      return _internal_core_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_86__["readFrame"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "writeFrame", function () {
      return _internal_core_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_86__["writeFrame"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "whenIdle", function () {
      return _internal_core_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_86__["whenIdle"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "triggerIdle", function () {
      return _internal_core_utils_AsyncPending__WEBPACK_IMPORTED_MODULE_86__["triggerIdle"];
    });
    /* harmony import */


    var _internal_core_utils_Cache__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(
    /*! ./.internal/core/utils/Cache */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Cache", function () {
      return _internal_core_utils_Cache__WEBPACK_IMPORTED_MODULE_87__["Cache"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "cache", function () {
      return _internal_core_utils_Cache__WEBPACK_IMPORTED_MODULE_87__["cache"];
    });
    /* harmony import */


    var _internal_core_utils_Color__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(
    /*! ./.internal/core/utils/Color */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Color", function () {
      return _internal_core_utils_Color__WEBPACK_IMPORTED_MODULE_88__["Color"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "color", function () {
      return _internal_core_utils_Color__WEBPACK_IMPORTED_MODULE_88__["color"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isColor", function () {
      return _internal_core_utils_Color__WEBPACK_IMPORTED_MODULE_88__["isColor"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "castColor", function () {
      return _internal_core_utils_Color__WEBPACK_IMPORTED_MODULE_88__["castColor"];
    });
    /* harmony import */


    var _internal_core_utils_ColorSet__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(
    /*! ./.internal/core/utils/ColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/ColorSet.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ColorSet", function () {
      return _internal_core_utils_ColorSet__WEBPACK_IMPORTED_MODULE_89__["ColorSet"];
    });
    /* harmony import */


    var _internal_core_utils_PatternSet__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(
    /*! ./.internal/core/utils/PatternSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/PatternSet.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PatternSet", function () {
      return _internal_core_utils_PatternSet__WEBPACK_IMPORTED_MODULE_90__["PatternSet"];
    });
    /* harmony import */


    var _internal_core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(
    /*! ./.internal/core/utils/InterfaceColorSet */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "InterfaceColorSet", function () {
      return _internal_core_utils_InterfaceColorSet__WEBPACK_IMPORTED_MODULE_91__["InterfaceColorSet"];
    });
    /* harmony import */


    var _internal_core_utils_Dictionary__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(
    /*! ./.internal/core/utils/Dictionary */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DictionaryDisposer", function () {
      return _internal_core_utils_Dictionary__WEBPACK_IMPORTED_MODULE_92__["DictionaryDisposer"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Dictionary", function () {
      return _internal_core_utils_Dictionary__WEBPACK_IMPORTED_MODULE_92__["Dictionary"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DictionaryTemplate", function () {
      return _internal_core_utils_Dictionary__WEBPACK_IMPORTED_MODULE_92__["DictionaryTemplate"];
    });
    /* harmony import */


    var _internal_core_utils_Disposer__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(
    /*! ./.internal/core/utils/Disposer */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Disposer", function () {
      return _internal_core_utils_Disposer__WEBPACK_IMPORTED_MODULE_93__["Disposer"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "MultiDisposer", function () {
      return _internal_core_utils_Disposer__WEBPACK_IMPORTED_MODULE_93__["MultiDisposer"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "MutableValueDisposer", function () {
      return _internal_core_utils_Disposer__WEBPACK_IMPORTED_MODULE_93__["MutableValueDisposer"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "CounterDisposer", function () {
      return _internal_core_utils_Disposer__WEBPACK_IMPORTED_MODULE_93__["CounterDisposer"];
    });
    /* harmony import */


    var _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(
    /*! ./.internal/core/utils/DOM */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "StyleRule", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["StyleRule"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "StyleClass", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["StyleClass"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "getElement", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["getElement"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "addClass", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["addClass"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "removeClass", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["removeClass"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "blur", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["blur"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "focus", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["focus"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "outerHTML", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["outerHTML"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isElement", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["isElement"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "copyAttributes", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["copyAttributes"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "fixPixelPerfect", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["fixPixelPerfect"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ready", function () {
      return _internal_core_utils_DOM__WEBPACK_IMPORTED_MODULE_94__["ready"];
    });
    /* harmony import */


    var _internal_core_utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(
    /*! ./.internal/core/utils/EventDispatcher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "EventDispatcher", function () {
      return _internal_core_utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_95__["EventDispatcher"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "TargetedEventDispatcher", function () {
      return _internal_core_utils_EventDispatcher__WEBPACK_IMPORTED_MODULE_95__["TargetedEventDispatcher"];
    });
    /* harmony import */


    var _internal_core_utils_Iterator__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(
    /*! ./.internal/core/utils/Iterator */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ListIterator", function () {
      return _internal_core_utils_Iterator__WEBPACK_IMPORTED_MODULE_96__["ListIterator"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "min", function () {
      return _internal_core_utils_Iterator__WEBPACK_IMPORTED_MODULE_96__["min"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "max", function () {
      return _internal_core_utils_Iterator__WEBPACK_IMPORTED_MODULE_96__["max"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "join", function () {
      return _internal_core_utils_Iterator__WEBPACK_IMPORTED_MODULE_96__["join"];
    });
    /* harmony import */


    var _internal_core_utils_Keyboard__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(
    /*! ./.internal/core/utils/Keyboard */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Keyboard", function () {
      return _internal_core_utils_Keyboard__WEBPACK_IMPORTED_MODULE_97__["Keyboard"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "keyboard", function () {
      return _internal_core_utils_Keyboard__WEBPACK_IMPORTED_MODULE_97__["keyboard"];
    });
    /* harmony import */


    var _internal_core_utils_Language__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(
    /*! ./.internal/core/utils/Language */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Language", function () {
      return _internal_core_utils_Language__WEBPACK_IMPORTED_MODULE_98__["Language"];
    });
    /* harmony import */


    var _internal_core_utils_List__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(
    /*! ./.internal/core/utils/List */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "IndexedIterable", function () {
      return _internal_core_utils_List__WEBPACK_IMPORTED_MODULE_99__["IndexedIterable"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ListGrouper", function () {
      return _internal_core_utils_List__WEBPACK_IMPORTED_MODULE_99__["ListGrouper"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ListDisposer", function () {
      return _internal_core_utils_List__WEBPACK_IMPORTED_MODULE_99__["ListDisposer"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "List", function () {
      return _internal_core_utils_List__WEBPACK_IMPORTED_MODULE_99__["List"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ListTemplate", function () {
      return _internal_core_utils_List__WEBPACK_IMPORTED_MODULE_99__["ListTemplate"];
    });
    /* harmony import */


    var _internal_core_utils_Morpher__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(
    /*! ./.internal/core/utils/Morpher */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Morpher", function () {
      return _internal_core_utils_Morpher__WEBPACK_IMPORTED_MODULE_100__["Morpher"];
    });
    /* harmony import */


    var _internal_core_utils_Order__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(
    /*! ./.internal/core/utils/Order */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Order.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "reverse", function () {
      return _internal_core_utils_Order__WEBPACK_IMPORTED_MODULE_101__["reverse"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "or", function () {
      return _internal_core_utils_Order__WEBPACK_IMPORTED_MODULE_101__["or"];
    });
    /* harmony import */


    var _internal_core_utils_Percent__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(
    /*! ./.internal/core/utils/Percent */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Percent", function () {
      return _internal_core_utils_Percent__WEBPACK_IMPORTED_MODULE_102__["Percent"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "percent", function () {
      return _internal_core_utils_Percent__WEBPACK_IMPORTED_MODULE_102__["percent"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isPercent", function () {
      return _internal_core_utils_Percent__WEBPACK_IMPORTED_MODULE_102__["isPercent"];
    });
    /* harmony import */


    var _internal_core_utils_Plugin__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(
    /*! ./.internal/core/utils/Plugin */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Plugin.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Plugin", function () {
      return _internal_core_utils_Plugin__WEBPACK_IMPORTED_MODULE_103__["Plugin"];
    });
    /* harmony import */


    var _internal_core_utils_Responsive__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(
    /*! ./.internal/core/utils/Responsive */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Responsive.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Responsive", function () {
      return _internal_core_utils_Responsive__WEBPACK_IMPORTED_MODULE_104__["Responsive"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ResponsiveBreakpoints", function () {
      return _internal_core_utils_Responsive__WEBPACK_IMPORTED_MODULE_104__["ResponsiveBreakpoints"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "defaultRules", function () {
      return _internal_core_utils_Responsive__WEBPACK_IMPORTED_MODULE_104__["defaultRules"];
    });
    /* harmony import */


    var _internal_core_utils_SortedList__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(
    /*! ./.internal/core/utils/SortedList */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "OrderedList", function () {
      return _internal_core_utils_SortedList__WEBPACK_IMPORTED_MODULE_105__["OrderedList"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SortedList", function () {
      return _internal_core_utils_SortedList__WEBPACK_IMPORTED_MODULE_105__["SortedList"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "OrderedListTemplate", function () {
      return _internal_core_utils_SortedList__WEBPACK_IMPORTED_MODULE_105__["OrderedListTemplate"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "SortedListTemplate", function () {
      return _internal_core_utils_SortedList__WEBPACK_IMPORTED_MODULE_105__["SortedListTemplate"];
    });
    /* harmony import */


    var _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(
    /*! ./.internal/core/utils/Strings */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PX", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["PX"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "STRING", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["STRING"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "NUMBER", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["NUMBER"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DATE", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["DATE"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "DURATION", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["DURATION"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PLACEHOLDER", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["PLACEHOLDER"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "PLACEHOLDER2", function () {
      return _internal_core_utils_Strings__WEBPACK_IMPORTED_MODULE_106__["PLACEHOLDER2"];
    });
    /* harmony import */


    var _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(
    /*! ./.internal/core/utils/Type */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isNaN", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["isNaN"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "checkString", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["checkString"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "checkBoolean", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["checkBoolean"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "checkNumber", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["checkNumber"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "checkObject", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["checkObject"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "castString", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["castString"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "castNumber", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["castNumber"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isString", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["isString"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isNumber", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["isNumber"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isObject", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["isObject"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isArray", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__["isArray"];
    });
    /* harmony import */


    var _internal_core_utils_Validatable__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(
    /*! ./.internal/core/utils/Validatable */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Validatable.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Validatable", function () {
      return _internal_core_utils_Validatable__WEBPACK_IMPORTED_MODULE_108__["Validatable"];
    });
    /* harmony import */


    var _internal_core_rendering_Path__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(
    /*! ./.internal/core/rendering/Path */
    "./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "path", function () {
      return _internal_core_rendering_Path__WEBPACK_IMPORTED_MODULE_109__;
    });
    /* harmony import */


    var _internal_core_utils_Colors__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(
    /*! ./.internal/core/utils/Colors */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "colors", function () {
      return _internal_core_utils_Colors__WEBPACK_IMPORTED_MODULE_110__;
    });
    /* harmony import */


    var _internal_core_utils_Ease__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(
    /*! ./.internal/core/utils/Ease */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "ease", function () {
      return _internal_core_utils_Ease__WEBPACK_IMPORTED_MODULE_111__;
    });
    /* harmony import */


    var _internal_core_utils_Math__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(
    /*! ./.internal/core/utils/Math */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "math", function () {
      return _internal_core_utils_Math__WEBPACK_IMPORTED_MODULE_112__;
    });
    /* harmony import */


    var _internal_core_utils_Array__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(
    /*! ./.internal/core/utils/Array */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "array", function () {
      return _internal_core_utils_Array__WEBPACK_IMPORTED_MODULE_113__;
    });
    /* harmony import */


    var _internal_core_utils_Number__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(
    /*! ./.internal/core/utils/Number */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Number.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "number", function () {
      return _internal_core_utils_Number__WEBPACK_IMPORTED_MODULE_114__;
    });
    /* harmony import */


    var _internal_core_utils_Object__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(
    /*! ./.internal/core/utils/Object */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "object", function () {
      return _internal_core_utils_Object__WEBPACK_IMPORTED_MODULE_115__;
    });
    /* harmony import */


    var _internal_core_utils_String__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(
    /*! ./.internal/core/utils/String */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "string", function () {
      return _internal_core_utils_String__WEBPACK_IMPORTED_MODULE_116__;
    });
    /* harmony import */


    var _internal_core_utils_Time__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(
    /*! ./.internal/core/utils/Time */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "time", function () {
      return _internal_core_utils_Time__WEBPACK_IMPORTED_MODULE_117__;
    });
    /* harmony import */


    var _internal_core_utils_Utils__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(
    /*! ./.internal/core/utils/Utils */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js");
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "utils", function () {
      return _internal_core_utils_Utils__WEBPACK_IMPORTED_MODULE_118__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "iter", function () {
      return _internal_core_utils_Iterator__WEBPACK_IMPORTED_MODULE_96__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "type", function () {
      return _internal_core_utils_Type__WEBPACK_IMPORTED_MODULE_107__;
    });
    /* harmony import */


    var _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(
    /*! ./.internal/core/utils/Instance */
    "./node_modules/@amcharts/amcharts4/.internal/core/utils/Instance.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "create", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["create"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "createFromConfig", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["createFromConfig"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "disposeAllCharts", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["disposeAllCharts"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "useTheme", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["useTheme"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "unuseTheme", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["unuseTheme"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "unuseAllThemes", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["unuseAllThemes"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "addLicense", function () {
      return _internal_core_utils_Instance__WEBPACK_IMPORTED_MODULE_119__["addLicense"];
    });
    /**
     * This module houses all core/framework functionality and is required for
     * all charting components to work
     */

    /**
     * Elements: core
     */

    /**
     * Elements: data
     */

    /**
     * Elements: elements
     */

    /**
     * Elements: 3d
     */

    /**
     * Elements: export
     */

    /**
     * Elements: formatters
     */

    /**
     * Elements: interaction
     */

    /**
     * Elements: rendering
     */

    /**
     * Elements: fills
     */

    /**
     * Elements: filters
     */

    /**
     * Elements: utils
     */

    /**
     * Functions: rendering
     */

    /**
     * Functions: utils
     */
    //# sourceMappingURL=core.js.map

    /***/

  },

  /***/
  "./node_modules/@amcharts/amcharts4/lang/en.js":
  /*!*****************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/lang/en.js ***!
    \*****************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesAmchartsAmcharts4LangEnJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /**
     * amCharts 4 locale
     *
     * Locale: en
     * Language: International English
     * Author: Martynas Majeris
     *
     * Follow instructions in [on this page](https://www.amcharts.com/docs/v4/tutorials/creating-translations/) to make corrections or add new translations.
     *
     * ---
     * Edit but leave the header section above this line. You can remove any
     * subsequent comment sections.
     * ---
     *
     * Use this file as a template to create translations. Leave the key part in
     * English intact. Fill the value with a translation.
     *
     * Empty string means no translation, so default "International English"
     * will be used.
     *
     * If you need the translation to literally be an empty string, use `null`
     * instead.
     *
     * IMPORTANT:
     * When translating make good effort to keep the translation length
     * at least the same chartcount as the English, especially for short prompts.
     *
     * Having significantly longer prompts may distort the actual charts.
     *
     * NOTE:
     * Some prompts - like months or weekdays - come in two versions: full and
     * shortened.
     *
     * If there's no official shortened version of these in your language, and it
     * would not be possible to invent such short versions that don't seem weird
     * to native speakers of that language, fill those with the same as full
     * version.
     *
     * PLACEHOLDERS:
     * Some prompts have placeholders like "%1". Those will be replaced by actual
     * values during translation and should be retained in the translated prompts.
     *
     * Placeholder positions may be changed to better suit structure of the
     * sentence.
     *
     * For example "From %1 to %2", when actually used will replace "%1" with an
     * actual value representing range start, and "%2" will be replaced by end
     * value.
     *
     * E.g. in a Scrollbar for Value axis "From %1 to %2" will become
     * "From 100 to 200". You may translate "From" and "to", as well as re-arrange
     * the order of the prompt itself, but make sure the "%1" and "%2" remain, in
     * places where they will make sense.
     *
     * Save the file as language_LOCALE, i.e. `en_GB.ts`, `fr_FR.ts`, etc.
     */

    /* harmony default export */


    __webpack_exports__["default"] = {
      // Number formatting options.
      // 
      // Please check with the local standards which separator is accepted to be
      // used for separating decimals, and which for thousands.
      "_decimalSeparator": ".",
      "_thousandSeparator": ",",
      // Suffixes for numbers
      // When formatting numbers, big or small numers might be reformatted to
      // shorter version, by applying a suffix.
      // 
      // For example, 1000000 might become "1m".
      // Or 1024 might become "1KB" if we're formatting byte numbers.
      // 
      // This section defines such suffixes for all such cases.
      "_big_number_suffix_3": "k",
      "_big_number_suffix_6": "M",
      "_big_number_suffix_9": "G",
      "_big_number_suffix_12": "T",
      "_big_number_suffix_15": "P",
      "_big_number_suffix_18": "E",
      "_big_number_suffix_21": "Z",
      "_big_number_suffix_24": "Y",
      "_small_number_suffix_3": "m",
      "_small_number_suffix_6": "μ",
      "_small_number_suffix_9": "n",
      "_small_number_suffix_12": "p",
      "_small_number_suffix_15": "f",
      "_small_number_suffix_18": "a",
      "_small_number_suffix_21": "z",
      "_small_number_suffix_24": "y",
      "_byte_suffix_B": "B",
      "_byte_suffix_KB": "KB",
      "_byte_suffix_MB": "MB",
      "_byte_suffix_GB": "GB",
      "_byte_suffix_TB": "TB",
      "_byte_suffix_PB": "PB",
      // Default date formats for various periods.
      // 
      // This should reflect official or de facto formatting universally accepted
      // in the country translation is being made for
      // Available format codes here:
      // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Format_codes
      // 
      // This will be used when formatting date/time for particular granularity,
      // e.g. "_date_hour" will be shown whenever we need to show time as hours.
      // 
      // "date" is used as in default date format when showing standalone dates.
      "_date": "yyyy-MM-dd",
      "_date_millisecond": "mm:ss SSS",
      "_date_second": "HH:mm:ss",
      "_date_minute": "HH:mm",
      "_date_hour": "HH:mm",
      "_date_day": "MMM dd",
      "_date_week": "ww",
      "_date_month": "MMM",
      "_date_year": "yyyy",
      // Default duration formats for various base units.
      // 
      // This will be used by DurationFormatter to format numeric values into
      // duration.
      // 
      // Notice how each duration unit comes in several versions. This is to ensure
      // that each base unit is shown correctly.
      // 
      // For example, if we have baseUnit set to "second", meaning our duration is
      // in seconds.
      // 
      // If we pass in `50` to formatter, it will know that we have just 50 seconds
      // (less than a minute) so it will use format in `"_duration_second"` ("ss"),
      // and the formatted result will be in like `"50"`.
      // 
      // If we pass in `70`, which is more than a minute, the formatter will switch
      // to `"_duration_second_minute"` ("mm:ss"), resulting in "01:10" formatted
      // text.
      // 
      // Available codes here:
      // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/#Available_Codes
      "_duration_millisecond": "SSS",
      "_duration_millisecond_second": "ss.SSS",
      "_duration_millisecond_minute": "mm:ss SSS",
      "_duration_millisecond_hour": "hh:mm:ss SSS",
      "_duration_millisecond_day": "d'd' mm:ss SSS",
      "_duration_millisecond_week": "d'd' mm:ss SSS",
      "_duration_millisecond_month": "M'm' dd'd' mm:ss SSS",
      "_duration_millisecond_year": "y'y' MM'm' dd'd' mm:ss SSS",
      "_duration_second": "ss",
      "_duration_second_minute": "mm:ss",
      "_duration_second_hour": "hh:mm:ss",
      "_duration_second_day": "d'd' hh:mm:ss",
      "_duration_second_week": "d'd' hh:mm:ss",
      "_duration_second_month": "M'm' dd'd' hh:mm:ss",
      "_duration_second_year": "y'y' MM'm' dd'd' hh:mm:ss",
      "_duration_minute": "mm",
      "_duration_minute_hour": "hh:mm",
      "_duration_minute_day": "d'd' hh:mm",
      "_duration_minute_week": "d'd' hh:mm",
      "_duration_minute_month": "M'm' dd'd' hh:mm",
      "_duration_minute_year": "y'y' MM'm' dd'd' hh:mm",
      "_duration_hour": "hh'h'",
      "_duration_hour_day": "d'd' hh'h'",
      "_duration_hour_week": "d'd' hh'h'",
      "_duration_hour_month": "M'm' dd'd' hh'h'",
      "_duration_hour_year": "y'y' MM'm' dd'd' hh'h'",
      "_duration_day": "d'd'",
      "_duration_day_week": "d'd'",
      "_duration_day_month": "M'm' dd'd'",
      "_duration_day_year": "y'y' MM'm' dd'd'",
      "_duration_week": "w'w'",
      "_duration_week_month": "w'w'",
      "_duration_week_year": "w'w'",
      "_duration_month": "M'm'",
      "_duration_month_year": "y'y' MM'm'",
      "_duration_year": "y'y'",
      // Era translations
      "_era_ad": "AD",
      "_era_bc": "BC",
      // Day part, used in 12-hour formats, e.g. 5 P.M.
      // Please note that these come in 3 variants:
      // * one letter (e.g. "A")
      // * two letters (e.g. "AM")
      // * two letters with dots (e.g. "A.M.")
      // 
      // All three need to to be translated even if they are all the same. Some
      // users might use one, some the other.
      "A": "",
      "P": "",
      "AM": "",
      "PM": "",
      "A.M.": "",
      "P.M.": "",
      // Date-related stuff.
      // 
      // When translating months, if there's a difference, use the form which is
      // best for a full date, e.g. as you would use it in "2018 January 1".
      // 
      // Note that May is listed twice. This is because in English May is the same
      // in both long and short forms, while in other languages it may not be the
      // case. Translate "May" to full word, while "May(short)" to shortened
      // version.
      // 
      // Should month names and weekdays be capitalized or not?
      // 
      // Rule of thumb is this: if the names should always be capitalized,
      // regardless of name position within date ("January", "21st January 2018",
      // etc.) use capitalized names. Otherwise enter all lowercase.
      // 
      // The date formatter will automatically capitalize names if they are the
      // first (or only) word in resulting date.
      "January": "",
      "February": "",
      "March": "",
      "April": "",
      "May": "",
      "June": "",
      "July": "",
      "August": "",
      "September": "",
      "October": "",
      "November": "",
      "December": "",
      "Jan": "",
      "Feb": "",
      "Mar": "",
      "Apr": "",
      "May(short)": "May",
      "Jun": "",
      "Jul": "",
      "Aug": "",
      "Sep": "",
      "Oct": "",
      "Nov": "",
      "Dec": "",
      // Weekdays.
      "Sunday": "",
      "Monday": "",
      "Tuesday": "",
      "Wednesday": "",
      "Thursday": "",
      "Friday": "",
      "Saturday": "",
      "Sun": "",
      "Mon": "",
      "Tue": "",
      "Wed": "",
      "Thu": "",
      "Fri": "",
      "Sat": "",
      // Date ordinal function.
      // 
      // This is used when adding number ordinal when formatting days in dates.
      // 
      // E.g. "January 1st", "February 2nd".
      // 
      // The function accepts day number, and returns a string to be added to the
      // day, like in default English translation, if we pass in 2, we will receive
      // "nd" back.
      "_dateOrd": function _dateOrd(day) {
        var res = "th";

        if (day < 11 || day > 13) {
          switch (day % 10) {
            case 1:
              res = "st";
              break;

            case 2:
              res = "nd";
              break;

            case 3:
              res = "rd";
              break;
          }
        }

        return res;
      },
      // Various chart controls.
      // Shown as a tooltip on zoom out button.
      "Zoom Out": "",
      // Timeline buttons
      "Play": "",
      "Stop": "",
      // Chart's Legend screen reader title.
      "Legend": "",
      // Legend's item screen reader indicator.
      "Click, tap or press ENTER to toggle": "",
      // Shown when the chart is busy loading something.
      "Loading": "",
      // Shown as the first button in the breadcrumb navigation, e.g.:
      // Home > First level > ...
      "Home": "",
      // Chart types.
      // Those are used as default screen reader titles for the main chart element
      // unless developer has set some more descriptive title.
      "Chart": "",
      "Serial chart": "",
      "X/Y chart": "",
      "Pie chart": "",
      "Gauge chart": "",
      "Radar chart": "",
      "Sankey diagram": "",
      "Flow diagram": "",
      "Chord diagram": "",
      "TreeMap chart": "",
      "Force directed tree": "",
      "Sliced chart": "",
      // Series types.
      // Used to name series by type for screen readers if they do not have their
      // name set.
      "Series": "",
      "Candlestick Series": "",
      "OHLC Series": "",
      "Column Series": "",
      "Line Series": "",
      "Pie Slice Series": "",
      "Funnel Series": "",
      "Pyramid Series": "",
      "X/Y Series": "",
      // Map-related stuff.
      "Map": "",
      "Press ENTER to zoom in": "",
      "Press ENTER to zoom out": "",
      "Use arrow keys to zoom in and out": "",
      "Use plus and minus keys on your keyboard to zoom in and out": "",
      // Export-related stuff.
      // These prompts are used in Export menu labels.
      // 
      // "Export" is the top-level menu item.
      // 
      // "Image", "Data", "Print" as second-level indicating type of export
      // operation.
      // 
      // Leave actual format untranslated, unless you absolutely know that they
      // would convey more meaning in some other way.
      "Export": "",
      "Image": "",
      "Data": "",
      "Print": "",
      "Click, tap or press ENTER to open": "",
      "Click, tap or press ENTER to print.": "",
      "Click, tap or press ENTER to export as %1.": "",
      'To save the image, right-click this link and choose "Save picture as..."': "",
      'To save the image, right-click thumbnail on the left and choose "Save picture as..."': "",
      "(Press ESC to close this message)": "",
      "Image Export Complete": "",
      "Export operation took longer than expected. Something might have gone wrong.": "",
      "Saved from": "",
      "PNG": "",
      "JPG": "",
      "GIF": "",
      "SVG": "",
      "PDF": "",
      "JSON": "",
      "CSV": "",
      "XLSX": "",
      // Scrollbar-related stuff.
      // 
      // Scrollbar is a control which can zoom and pan the axes on the chart.
      // 
      // Each scrollbar has two grips: left or right (for horizontal scrollbar) or
      // upper and lower (for vertical one).
      // 
      // Prompts change in relation to whether Scrollbar is vertical or horizontal.
      // 
      // The final section is used to indicate the current range of selection.
      "Use TAB to select grip buttons or left and right arrows to change selection": "",
      "Use left and right arrows to move selection": "",
      "Use left and right arrows to move left selection": "",
      "Use left and right arrows to move right selection": "",
      "Use TAB select grip buttons or up and down arrows to change selection": "",
      "Use up and down arrows to move selection": "",
      "Use up and down arrows to move lower selection": "",
      "Use up and down arrows to move upper selection": "",
      "From %1 to %2": "",
      "From %1": "",
      "To %1": "",
      // Data loader-related.
      "No parser available for file: %1": "",
      "Error parsing file: %1": "",
      "Unable to load file: %1": "",
      "Invalid date": "",
      // Common actions
      "Close": "",
      "Minimize": ""
    }; //# sourceMappingURL=en.js.map

    /***/
  },

  /***/
  "./node_modules/@amcharts/amcharts4/themes/animated.js":
  /*!*************************************************************!*\
    !*** ./node_modules/@amcharts/amcharts4/themes/animated.js ***!
    \*************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesAmchartsAmcharts4ThemesAnimatedJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _internal_themes_animated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../.internal/themes/animated */
    "./node_modules/@amcharts/amcharts4/.internal/themes/animated.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "default", function () {
      return _internal_themes_animated__WEBPACK_IMPORTED_MODULE_0__["default"];
    }); //# sourceMappingURL=animated.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/cdk/esm2015/a11y.js":
  /*!***************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/a11y.js ***!
    \***************************************************/

  /*! exports provided: ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_DEFAULT_OPTIONS, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule */

  /***/
  function node_modulesAngularCdkEsm2015A11yJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ARIA_DESCRIBER_PROVIDER_FACTORY", function () {
      return ARIA_DESCRIBER_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MESSAGES_CONTAINER_ID", function () {
      return MESSAGES_CONTAINER_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_ID_PREFIX", function () {
      return CDK_DESCRIBEDBY_ID_PREFIX;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", function () {
      return CDK_DESCRIBEDBY_HOST_ATTRIBUTE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AriaDescriber", function () {
      return AriaDescriber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ARIA_DESCRIBER_PROVIDER", function () {
      return ARIA_DESCRIBER_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ActiveDescendantKeyManager", function () {
      return ActiveDescendantKeyManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FocusKeyManager", function () {
      return FocusKeyManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ListKeyManager", function () {
      return ListKeyManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FocusTrap", function () {
      return FocusTrap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FocusTrapFactory", function () {
      return FocusTrapFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkTrapFocus", function () {
      return CdkTrapFocus;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InteractivityChecker", function () {
      return InteractivityChecker;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_PROVIDER_FACTORY", function () {
      return LIVE_ANNOUNCER_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LiveAnnouncer", function () {
      return LiveAnnouncer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkAriaLive", function () {
      return CdkAriaLive;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_PROVIDER", function () {
      return LIVE_ANNOUNCER_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", function () {
      return LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_ELEMENT_TOKEN", function () {
      return LIVE_ANNOUNCER_ELEMENT_TOKEN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LIVE_ANNOUNCER_DEFAULT_OPTIONS", function () {
      return LIVE_ANNOUNCER_DEFAULT_OPTIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_PROVIDER_FACTORY", function () {
      return FOCUS_MONITOR_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TOUCH_BUFFER_MS", function () {
      return TOUCH_BUFFER_MS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FocusMonitor", function () {
      return FocusMonitor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkMonitorFocus", function () {
      return CdkMonitorFocus;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FOCUS_MONITOR_PROVIDER", function () {
      return FOCUS_MONITOR_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isFakeMousedownFromScreenReader", function () {
      return isFakeMousedownFromScreenReader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "A11yModule", function () {
      return A11yModule;
    });
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/cdk/keycodes */
    "./node_modules/@angular/cdk/esm2015/keycodes.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @angular/cdk/platform */
    "./node_modules/@angular/cdk/esm2015/platform.js");
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /* harmony import */


    var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! @angular/cdk/observers */
    "./node_modules/@angular/cdk/esm2015/observers.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * IDs are deliminated by an empty space, as per the spec.
     * @type {?}
     */


    const ID_DELIMINATOR = ' ';
    /**
     * Adds the given ID to the specified ARIA attribute on an element.
     * Used for attributes such as aria-labelledby, aria-owns, etc.
     * @param {?} el
     * @param {?} attr
     * @param {?} id
     * @return {?}
     */

    function addAriaReferencedId(el, attr, id) {
      /** @type {?} */
      const ids = getAriaReferenceIds(el, attr);

      if (ids.some(
      /**
      * @param {?} existingId
      * @return {?}
      */
      existingId => existingId.trim() == id.trim())) {
        return;
      }

      ids.push(id.trim());
      el.setAttribute(attr, ids.join(ID_DELIMINATOR));
    }
    /**
     * Removes the given ID from the specified ARIA attribute on an element.
     * Used for attributes such as aria-labelledby, aria-owns, etc.
     * @param {?} el
     * @param {?} attr
     * @param {?} id
     * @return {?}
     */


    function removeAriaReferencedId(el, attr, id) {
      /** @type {?} */
      const ids = getAriaReferenceIds(el, attr);
      /** @type {?} */

      const filteredIds = ids.filter(
      /**
      * @param {?} val
      * @return {?}
      */
      val => val != id.trim());

      if (filteredIds.length) {
        el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));
      } else {
        el.removeAttribute(attr);
      }
    }
    /**
     * Gets the list of IDs referenced by the given ARIA attribute on an element.
     * Used for attributes such as aria-labelledby, aria-owns, etc.
     * @param {?} el
     * @param {?} attr
     * @return {?}
     */


    function getAriaReferenceIds(el, attr) {
      // Get string array of all individual ids (whitespace deliminated) in the attribute value
      return (el.getAttribute(attr) || '').match(/\S+/g) || [];
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * ID used for the body container where all messages are appended.
     * @type {?}
     */


    const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
    /**
     * ID prefix used for each created message element.
     * @type {?}
     */

    const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
    /**
     * Attribute given to each host element that is described by a message element.
     * @type {?}
     */

    const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
    /**
     * Global incremental identifier for each registered message element.
     * @type {?}
     */

    let nextId = 0;
    /**
     * Global map of all registered message elements that have been placed into the document.
     * @type {?}
     */

    const messageRegistry = new Map();
    /**
     * Container for all registered messages.
     * @type {?}
     */

    let messagesContainer = null;
    /**
     * Utility that creates visually hidden elements with a message content. Useful for elements that
     * want to use aria-describedby to further describe themselves without adding additional visual
     * content.
     */

    class AriaDescriber {
      /**
       * @param {?} _document
       */
      constructor(_document) {
        this._document = _document;
      }
      /**
       * Adds to the host element an aria-describedby reference to a hidden element that contains
       * the message. If the same message has already been registered, then it will reuse the created
       * message element.
       * @param {?} hostElement
       * @param {?} message
       * @return {?}
       */


      describe(hostElement, message) {
        if (!this._canBeDescribed(hostElement, message)) {
          return;
        }

        if (typeof message !== 'string') {
          // We need to ensure that the element has an ID.
          this._setMessageId(message);

          messageRegistry.set(message, {
            messageElement: message,
            referenceCount: 0
          });
        } else if (!messageRegistry.has(message)) {
          this._createMessageElement(message);
        }

        if (!this._isElementDescribedByMessage(hostElement, message)) {
          this._addMessageReference(hostElement, message);
        }
      }
      /**
       * Removes the host element's aria-describedby reference to the message element.
       * @param {?} hostElement
       * @param {?} message
       * @return {?}
       */


      removeDescription(hostElement, message) {
        if (!this._isElementNode(hostElement)) {
          return;
        }

        if (this._isElementDescribedByMessage(hostElement, message)) {
          this._removeMessageReference(hostElement, message);
        } // If the message is a string, it means that it's one that we created for the
        // consumer so we can remove it safely, otherwise we should leave it in place.


        if (typeof message === 'string') {
          /** @type {?} */
          const registeredMessage = messageRegistry.get(message);

          if (registeredMessage && registeredMessage.referenceCount === 0) {
            this._deleteMessageElement(message);
          }
        }

        if (messagesContainer && messagesContainer.childNodes.length === 0) {
          this._deleteMessagesContainer();
        }
      }
      /**
       * Unregisters all created message elements and removes the message container.
       * @return {?}
       */


      ngOnDestroy() {
        /** @type {?} */
        const describedElements = this._document.querySelectorAll("[".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, "]"));

        for (let i = 0; i < describedElements.length; i++) {
          this._removeCdkDescribedByReferenceIds(describedElements[i]);

          describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
        }

        if (messagesContainer) {
          this._deleteMessagesContainer();
        }

        messageRegistry.clear();
      }
      /**
       * Creates a new element in the visually hidden message container element with the message
       * as its content and adds it to the message registry.
       * @private
       * @param {?} message
       * @return {?}
       */


      _createMessageElement(message) {
        /** @type {?} */
        const messageElement = this._document.createElement('div');

        this._setMessageId(messageElement);

        messageElement.textContent = message;

        this._createMessagesContainer();

        /** @type {?} */
        messagesContainer.appendChild(messageElement);
        messageRegistry.set(message, {
          messageElement,
          referenceCount: 0
        });
      }
      /**
       * Assigns a unique ID to an element, if it doesn't have one already.
       * @private
       * @param {?} element
       * @return {?}
       */


      _setMessageId(element) {
        if (!element.id) {
          element.id = "".concat(CDK_DESCRIBEDBY_ID_PREFIX, "-").concat(nextId++);
        }
      }
      /**
       * Deletes the message element from the global messages container.
       * @private
       * @param {?} message
       * @return {?}
       */


      _deleteMessageElement(message) {
        /** @type {?} */
        const registeredMessage = messageRegistry.get(message);
        /** @type {?} */

        const messageElement = registeredMessage && registeredMessage.messageElement;

        if (messagesContainer && messageElement) {
          messagesContainer.removeChild(messageElement);
        }

        messageRegistry.delete(message);
      }
      /**
       * Creates the global container for all aria-describedby messages.
       * @private
       * @return {?}
       */


      _createMessagesContainer() {
        if (!messagesContainer) {
          /** @type {?} */
          const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's
          // already a container on the page, but we don't have a reference to it. Clear the
          // old container so we don't get duplicates. Doing this, instead of emptying the previous
          // container, should be slightly faster.


          if (preExistingContainer) {
            /** @type {?} */
            preExistingContainer.parentNode.removeChild(preExistingContainer);
          }

          messagesContainer = this._document.createElement('div');
          messagesContainer.id = MESSAGES_CONTAINER_ID;
          messagesContainer.setAttribute('aria-hidden', 'true');
          messagesContainer.style.display = 'none';

          this._document.body.appendChild(messagesContainer);
        }
      }
      /**
       * Deletes the global messages container.
       * @private
       * @return {?}
       */


      _deleteMessagesContainer() {
        if (messagesContainer && messagesContainer.parentNode) {
          messagesContainer.parentNode.removeChild(messagesContainer);
          messagesContainer = null;
        }
      }
      /**
       * Removes all cdk-describedby messages that are hosted through the element.
       * @private
       * @param {?} element
       * @return {?}
       */


      _removeCdkDescribedByReferenceIds(element) {
        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX

        /** @type {?} */
        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(
        /**
        * @param {?} id
        * @return {?}
        */
        id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);
        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
      }
      /**
       * Adds a message reference to the element using aria-describedby and increments the registered
       * message's reference count.
       * @private
       * @param {?} element
       * @param {?} message
       * @return {?}
       */


      _addMessageReference(element, message) {
        /** @type {?} */
        const registeredMessage =
        /** @type {?} */
        messageRegistry.get(message); // Add the aria-describedby reference and set the
        // describedby_host attribute to mark the element.

        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');
        registeredMessage.referenceCount++;
      }
      /**
       * Removes a message reference from the element using aria-describedby
       * and decrements the registered message's reference count.
       * @private
       * @param {?} element
       * @param {?} message
       * @return {?}
       */


      _removeMessageReference(element, message) {
        /** @type {?} */
        const registeredMessage =
        /** @type {?} */
        messageRegistry.get(message);
        registeredMessage.referenceCount--;
        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
      }
      /**
       * Returns true if the element has been described by the provided message ID.
       * @private
       * @param {?} element
       * @param {?} message
       * @return {?}
       */


      _isElementDescribedByMessage(element, message) {
        /** @type {?} */
        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');
        /** @type {?} */

        const registeredMessage = messageRegistry.get(message);
        /** @type {?} */

        const messageId = registeredMessage && registeredMessage.messageElement.id;
        return !!messageId && referenceIds.indexOf(messageId) != -1;
      }
      /**
       * Determines whether a message can be described on a particular element.
       * @private
       * @param {?} element
       * @param {?} message
       * @return {?}
       */


      _canBeDescribed(element, message) {
        if (!this._isElementNode(element)) {
          return false;
        }

        if (message && typeof message === 'object') {
          // We'd have to make some assumptions about the description element's text, if the consumer
          // passed in an element. Assume that if an element is passed in, the consumer has verified
          // that it can be used as a description.
          return true;
        }
        /** @type {?} */


        const trimmedMessage = message == null ? '' : "".concat(message).trim();
        /** @type {?} */

        const ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
        // element, because screen readers will end up reading out the same text twice in a row.

        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
      }
      /**
       * Checks whether a node is an Element node.
       * @private
       * @param {?} element
       * @return {?}
       */


      _isElementNode(element) {
        return element.nodeType === this._document.ELEMENT_NODE;
      }

    }

    AriaDescriber.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    AriaDescriber.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }]
    }];
    /** @nocollapse */


    AriaDescriber.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function AriaDescriber_Factory() {
        return new AriaDescriber(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      },
      token: AriaDescriber,
      providedIn: "root"
    });
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} parentDispatcher
     * @param {?} _document
     * @return {?}
     */

    function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {
      return parentDispatcher || new AriaDescriber(_document);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const ARIA_DESCRIBER_PROVIDER = {
      // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.
      provide: AriaDescriber,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), AriaDescriber],
      /** @type {?} */
      _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]],
      useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * This class manages keyboard events for selectable lists. If you pass it a query list
     * of items, it will set the active item correctly when arrow events occur.
     * @template T
     */

    class ListKeyManager {
      /**
       * @param {?} _items
       */
      constructor(_items) {
        this._items = _items;
        this._activeItemIndex = -1;
        this._activeItem = null;
        this._wrap = false;
        this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        this._vertical = true;
        this._allowedModifierKeys = [];
        /**
         * Predicate function that can be used to check whether an item should be skipped
         * by the key manager. By default, disabled items are skipped.
         */

        this._skipPredicateFn =
        /**
        * @param {?} item
        * @return {?}
        */
        item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.


        this._pressedLetters = [];
        /**
         * Stream that emits any time the TAB key is pressed, so components can react
         * when focus is shifted off of the list.
         */

        this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * Stream that emits whenever the active item of the list manager changes.
         */

        this.change = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"](); // We allow for the items to be an array because, in some cases, the consumer may
        // not have access to a QueryList of the items they want to manage (e.g. when the
        // items aren't being collected via `ViewChildren` or `ContentChildren`).

        if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]) {
          _items.changes.subscribe(
          /**
          * @param {?} newItems
          * @return {?}
          */
          newItems => {
            if (this._activeItem) {
              /** @type {?} */
              const itemArray = newItems.toArray();
              /** @type {?} */

              const newIndex = itemArray.indexOf(this._activeItem);

              if (newIndex > -1 && newIndex !== this._activeItemIndex) {
                this._activeItemIndex = newIndex;
              }
            }
          });
        }
      }
      /**
       * Sets the predicate function that determines which items should be skipped by the
       * list key manager.
       * @template THIS
       * @this {THIS}
       * @param {?} predicate Function that determines whether the given item should be skipped.
       * @return {THIS}
       */


      skipPredicate(predicate) {
        /** @type {?} */
        this._skipPredicateFn = predicate;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Configures wrapping mode, which determines whether the active item will wrap to
       * the other end of list when there are no more items in the given direction.
       * @template THIS
       * @this {THIS}
       * @param {?=} shouldWrap Whether the list should wrap when reaching the end.
       * @return {THIS}
       */


      withWrap(shouldWrap = true) {
        /** @type {?} */
        this._wrap = shouldWrap;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Configures whether the key manager should be able to move the selection vertically.
       * @template THIS
       * @this {THIS}
       * @param {?=} enabled Whether vertical selection should be enabled.
       * @return {THIS}
       */


      withVerticalOrientation(enabled = true) {
        /** @type {?} */
        this._vertical = enabled;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Configures the key manager to move the selection horizontally.
       * Passing in `null` will disable horizontal movement.
       * @template THIS
       * @this {THIS}
       * @param {?} direction Direction in which the selection can be moved.
       * @return {THIS}
       */


      withHorizontalOrientation(direction) {
        /** @type {?} */
        this._horizontal = direction;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Modifier keys which are allowed to be held down and whose default actions will be prevented
       * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
       * @template THIS
       * @this {THIS}
       * @param {?} keys
       * @return {THIS}
       */


      withAllowedModifierKeys(keys) {
        /** @type {?} */
        this._allowedModifierKeys = keys;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Turns on typeahead mode which allows users to set the active item by typing.
       * @template THIS
       * @this {THIS}
       * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.
       * @return {THIS}
       */


      withTypeAhead(debounceInterval = 200) {
        if (
        /** @type {?} */
        this._items.length &&
        /** @type {?} */
        this._items.some(
        /**
        * @param {?} item
        * @return {?}
        */
        item => typeof item.getLabel !== 'function')) {
          throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
        }

        /** @type {?} */
        this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
        // and convert those letters back into a string. Afterwards find the first item that starts
        // with that string and select it.


        /** @type {?} */
        this._typeaheadSubscription =
        /** @type {?} */
        this._letterKeyStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["tap"])(
        /**
        * @param {?} keyCode
        * @return {?}
        */
        keyCode =>
        /** @type {?} */
        this._pressedLetters.push(keyCode)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["debounceTime"])(debounceInterval), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["filter"])(
        /**
        * @return {?}
        */
        () =>
        /** @type {?} */
        this._pressedLetters.length > 0), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(
        /**
        * @return {?}
        */
        () =>
        /** @type {?} */
        this._pressedLetters.join(''))).subscribe(
        /**
        * @param {?} inputString
        * @return {?}
        */
        inputString => {
          /** @type {?} */
          const items =
          /** @type {?} */
          this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately
          // following the current active item.


          for (let i = 1; i < items.length + 1; i++) {
            /** @type {?} */
            const index = (
            /** @type {?} */
            this._activeItemIndex + i) % items.length;
            /** @type {?} */

            const item = items[index];

            if (!
            /** @type {?} */
            this._skipPredicateFn(item) &&
            /** @type {?} */
            item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {
              /** @type {?} */
              this.setActiveItem(index);
              break;
            }
          }

          /** @type {?} */
          this._pressedLetters = [];
        });
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * @param {?} item
       * @return {?}
       */


      setActiveItem(item) {
        /** @type {?} */
        const previousIndex = this._activeItemIndex;
        this.updateActiveItem(item);

        if (this._activeItemIndex !== previousIndex) {
          this.change.next(this._activeItemIndex);
        }
      }
      /**
       * Sets the active item depending on the key event passed in.
       * @param {?} event Keyboard event to be used for determining which element should be active.
       * @return {?}
       */


      onKeydown(event) {
        /** @type {?} */
        const keyCode = event.keyCode;
        /** @type {?} */

        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
        /** @type {?} */

        const isModifierAllowed = modifiers.every(
        /**
        * @param {?} modifier
        * @return {?}
        */
        modifier => {
          return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;
        });

        switch (keyCode) {
          case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["TAB"]:
            this.tabOut.next();
            return;

          case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
            if (this._vertical && isModifierAllowed) {
              this.setNextItemActive();
              break;
            } else {
              return;
            }

          case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
            if (this._vertical && isModifierAllowed) {
              this.setPreviousItemActive();
              break;
            } else {
              return;
            }

          case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
            if (this._horizontal && isModifierAllowed) {
              this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
              break;
            } else {
              return;
            }

          case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
            if (this._horizontal && isModifierAllowed) {
              this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
              break;
            } else {
              return;
            }

          default:
            if (isModifierAllowed || Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["hasModifierKey"])(event, 'shiftKey')) {
              // Attempt to use the `event.key` which also maps it to the user's keyboard language,
              // otherwise fall back to resolving alphanumeric characters via the keyCode.
              if (event.key && event.key.length === 1) {
                this._letterKeyStream.next(event.key.toLocaleUpperCase());
              } else if (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["A"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["Z"] || keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ZERO"] && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["NINE"]) {
                this._letterKeyStream.next(String.fromCharCode(keyCode));
              }
            } // Note that we return here, in order to avoid preventing
            // the default action of non-navigational keys.


            return;
        }

        this._pressedLetters = [];
        event.preventDefault();
      }
      /**
       * Index of the currently active item.
       * @return {?}
       */


      get activeItemIndex() {
        return this._activeItemIndex;
      }
      /**
       * The active item.
       * @return {?}
       */


      get activeItem() {
        return this._activeItem;
      }
      /**
       * Sets the active item to the first enabled item in the list.
       * @return {?}
       */


      setFirstItemActive() {
        this._setActiveItemByIndex(0, 1);
      }
      /**
       * Sets the active item to the last enabled item in the list.
       * @return {?}
       */


      setLastItemActive() {
        this._setActiveItemByIndex(this._items.length - 1, -1);
      }
      /**
       * Sets the active item to the next enabled item in the list.
       * @return {?}
       */


      setNextItemActive() {
        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
      }
      /**
       * Sets the active item to a previous enabled item in the list.
       * @return {?}
       */


      setPreviousItemActive() {
        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);
      }
      /**
       * @param {?} item
       * @return {?}
       */


      updateActiveItem(item) {
        /** @type {?} */
        const itemArray = this._getItemsArray();
        /** @type {?} */


        const index = typeof item === 'number' ? item : itemArray.indexOf(item);
        /** @type {?} */

        const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.

        this._activeItem = activeItem == null ? null : activeItem;
        this._activeItemIndex = index;
      }
      /**
       * Allows setting of the activeItemIndex without any other effects.
       * @deprecated Use `updateActiveItem` instead.
       * \@breaking-change 8.0.0
       * @param {?} index The new activeItemIndex.
       * @return {?}
       */


      updateActiveItemIndex(index) {
        this.updateActiveItem(index);
      }
      /**
       * This method sets the active item, given a list of items and the delta between the
       * currently active item and the new active item. It will calculate differently
       * depending on whether wrap mode is turned on.
       * @private
       * @param {?} delta
       * @return {?}
       */


      _setActiveItemByDelta(delta) {
        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
      }
      /**
       * Sets the active item properly given "wrap" mode. In other words, it will continue to move
       * down the list until it finds an item that is not disabled, and it will wrap if it
       * encounters either end of the list.
       * @private
       * @param {?} delta
       * @return {?}
       */


      _setActiveInWrapMode(delta) {
        /** @type {?} */
        const items = this._getItemsArray();

        for (let i = 1; i <= items.length; i++) {
          /** @type {?} */
          const index = (this._activeItemIndex + delta * i + items.length) % items.length;
          /** @type {?} */

          const item = items[index];

          if (!this._skipPredicateFn(item)) {
            this.setActiveItem(index);
            return;
          }
        }
      }
      /**
       * Sets the active item properly given the default mode. In other words, it will
       * continue to move down the list until it finds an item that is not disabled. If
       * it encounters either end of the list, it will stop and not wrap.
       * @private
       * @param {?} delta
       * @return {?}
       */


      _setActiveInDefaultMode(delta) {
        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
      }
      /**
       * Sets the active item to the first enabled item starting at the index specified. If the
       * item is disabled, it will move in the fallbackDelta direction until it either
       * finds an enabled item or encounters the end of the list.
       * @private
       * @param {?} index
       * @param {?} fallbackDelta
       * @return {?}
       */


      _setActiveItemByIndex(index, fallbackDelta) {
        /** @type {?} */
        const items = this._getItemsArray();

        if (!items[index]) {
          return;
        }

        while (this._skipPredicateFn(items[index])) {
          index += fallbackDelta;

          if (!items[index]) {
            return;
          }
        }

        this.setActiveItem(index);
      }
      /**
       * Returns the items as an array.
       * @private
       * @return {?}
       */


      _getItemsArray() {
        return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"] ? this._items.toArray() : this._items;
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @template T
     */


    class ActiveDescendantKeyManager extends ListKeyManager {
      /**
       * @param {?} index
       * @return {?}
       */
      setActiveItem(index) {
        if (this.activeItem) {
          this.activeItem.setInactiveStyles();
        }

        super.setActiveItem(index);

        if (this.activeItem) {
          this.activeItem.setActiveStyles();
        }
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @template T
     */


    class FocusKeyManager extends ListKeyManager {
      constructor() {
        super(...arguments);
        this._origin = 'program';
      }
      /**
       * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
       * @template THIS
       * @this {THIS}
       * @param {?} origin Focus origin to be used when focusing items.
       * @return {THIS}
       */


      setFocusOrigin(origin) {
        /** @type {?} */
        this._origin = origin;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * @param {?} item
       * @return {?}
       */


      setActiveItem(item) {
        super.setActiveItem(item);

        if (this.activeItem) {
          this.activeItem.focus(this._origin);
        }
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // The InteractivityChecker leans heavily on the ally.js accessibility utilities.
    // Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
    // supported.

    /**
     * Utility for checking the interactivity of an element, such as whether is is focusable or
     * tabbable.
     */


    class InteractivityChecker {
      /**
       * @param {?} _platform
       */
      constructor(_platform) {
        this._platform = _platform;
      }
      /**
       * Gets whether an element is disabled.
       *
       * @param {?} element Element to be checked.
       * @return {?} Whether the element is disabled.
       */


      isDisabled(element) {
        // This does not capture some cases, such as a non-form control with a disabled attribute or
        // a form control inside of a disabled form, but should capture the most common cases.
        return element.hasAttribute('disabled');
      }
      /**
       * Gets whether an element is visible for the purposes of interactivity.
       *
       * This will capture states like `display: none` and `visibility: hidden`, but not things like
       * being clipped by an `overflow: hidden` parent or being outside the viewport.
       *
       * @param {?} element
       * @return {?} Whether the element is visible.
       */


      isVisible(element) {
        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
      }
      /**
       * Gets whether an element can be reached via Tab key.
       * Assumes that the element has already been checked with isFocusable.
       *
       * @param {?} element Element to be checked.
       * @return {?} Whether the element is tabbable.
       */


      isTabbable(element) {
        // Nothing is tabbable on the server 😎
        if (!this._platform.isBrowser) {
          return false;
        }
        /** @type {?} */


        const frameElement = getFrameElement(getWindow(element));

        if (frameElement) {
          /** @type {?} */
          const frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.

          if (getTabIndexValue(frameElement) === -1) {
            return false;
          } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.


          if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
            return false;
          } // Webkit and Blink disable tabbing to an element inside of an invisible frame.


          if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
            return false;
          }
        }
        /** @type {?} */


        let nodeName = element.nodeName.toLowerCase();
        /** @type {?} */

        let tabIndexValue = getTabIndexValue(element);

        if (element.hasAttribute('contenteditable')) {
          return tabIndexValue !== -1;
        }

        if (nodeName === 'iframe') {
          // The frames may be tabbable depending on content, but it's not possibly to reliably
          // investigate the content of the frames.
          return false;
        }

        if (nodeName === 'audio') {
          if (!element.hasAttribute('controls')) {
            // By default an <audio> element without the controls enabled is not tabbable.
            return false;
          } else if (this._platform.BLINK) {
            // In Blink <audio controls> elements are always tabbable.
            return true;
          }
        }

        if (nodeName === 'video') {
          if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
            // In Trident a <video> element without the controls enabled is not tabbable.
            return false;
          } else if (this._platform.BLINK || this._platform.FIREFOX) {
            // In Chrome and Firefox <video controls> elements are always tabbable.
            return true;
          }
        }

        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
          // In all Blink and WebKit based browsers <object> elements are never tabbable.
          return false;
        } // In iOS the browser only considers some specific elements as tabbable.


        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
          return false;
        }

        return element.tabIndex >= 0;
      }
      /**
       * Gets whether an element can be focused by the user.
       *
       * @param {?} element Element to be checked.
       * @return {?} Whether the element is focusable.
       */


      isFocusable(element) {
        // Perform checks in order of left to most expensive.
        // Again, naive approach that does not capture many edge cases and browser quirks.
        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
      }

    }

    InteractivityChecker.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    InteractivityChecker.ctorParameters = () => [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]
    }];
    /** @nocollapse */


    InteractivityChecker.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function InteractivityChecker_Factory() {
        return new InteractivityChecker(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]));
      },
      token: InteractivityChecker,
      providedIn: "root"
    });
    /**
     * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
     * the frameElement property is being accessed from a different host address, this property
     * should be accessed carefully.
     * @param {?} window
     * @return {?}
     */

    function getFrameElement(window) {
      try {
        return (
          /** @type {?} */
          window.frameElement
        );
      } catch (_a) {
        return null;
      }
    }
    /**
     * Checks whether the specified element has any geometry / rectangles.
     * @param {?} element
     * @return {?}
     */


    function hasGeometry(element) {
      // Use logic from jQuery to check for an invisible element.
      // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
      return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);
    }
    /**
     * Gets whether an element's
     * @param {?} element
     * @return {?}
     */


    function isNativeFormElement(element) {
      /** @type {?} */
      let nodeName = element.nodeName.toLowerCase();
      return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';
    }
    /**
     * Gets whether an element is an `<input type="hidden">`.
     * @param {?} element
     * @return {?}
     */


    function isHiddenInput(element) {
      return isInputElement(element) && element.type == 'hidden';
    }
    /**
     * Gets whether an element is an anchor that has an href attribute.
     * @param {?} element
     * @return {?}
     */


    function isAnchorWithHref(element) {
      return isAnchorElement(element) && element.hasAttribute('href');
    }
    /**
     * Gets whether an element is an input element.
     * @param {?} element
     * @return {?}
     */


    function isInputElement(element) {
      return element.nodeName.toLowerCase() == 'input';
    }
    /**
     * Gets whether an element is an anchor element.
     * @param {?} element
     * @return {?}
     */


    function isAnchorElement(element) {
      return element.nodeName.toLowerCase() == 'a';
    }
    /**
     * Gets whether an element has a valid tabindex.
     * @param {?} element
     * @return {?}
     */


    function hasValidTabIndex(element) {
      if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
        return false;
      }
      /** @type {?} */


      let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex="" as the value "-32768"

      if (tabIndex == '-32768') {
        return false;
      }

      return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
    }
    /**
     * Returns the parsed tabindex from the element attributes instead of returning the
     * evaluated tabindex from the browsers defaults.
     * @param {?} element
     * @return {?}
     */


    function getTabIndexValue(element) {
      if (!hasValidTabIndex(element)) {
        return null;
      } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054

      /** @type {?} */


      const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
      return isNaN(tabIndex) ? -1 : tabIndex;
    }
    /**
     * Checks whether the specified element is potentially tabbable on iOS
     * @param {?} element
     * @return {?}
     */


    function isPotentiallyTabbableIOS(element) {
      /** @type {?} */
      let nodeName = element.nodeName.toLowerCase();
      /** @type {?} */

      let inputType = nodeName === 'input' &&
      /** @type {?} */
      element.type;
      return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';
    }
    /**
     * Gets whether an element is potentially focusable without taking current visible/disabled state
     * into account.
     * @param {?} element
     * @return {?}
     */


    function isPotentiallyFocusable(element) {
      // Inputs are potentially focusable *unless* they're type="hidden".
      if (isHiddenInput(element)) {
        return false;
      }

      return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);
    }
    /**
     * Gets the parent window of a DOM node with regards of being inside of an iframe.
     * @param {?} node
     * @return {?}
     */


    function getWindow(node) {
      // ownerDocument is null if `node` itself *is* a document.
      return node.ownerDocument && node.ownerDocument.defaultView || window;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Class that allows for trapping focus within a DOM element.
     *
     * This class currently uses a relatively simple approach to focus trapping.
     * It assumes that the tab order is the same as DOM order, which is not necessarily true.
     * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.
     */


    class FocusTrap {
      /**
       * @param {?} _element
       * @param {?} _checker
       * @param {?} _ngZone
       * @param {?} _document
       * @param {?=} deferAnchors
       */
      constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {
        this._element = _element;
        this._checker = _checker;
        this._ngZone = _ngZone;
        this._document = _document;
        this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.

        this.startAnchorListener =
        /**
        * @return {?}
        */
        () => this.focusLastTabbableElement();

        this.endAnchorListener =
        /**
        * @return {?}
        */
        () => this.focusFirstTabbableElement();

        this._enabled = true;

        if (!deferAnchors) {
          this.attachAnchors();
        }
      }
      /**
       * Whether the focus trap is active.
       * @return {?}
       */


      get enabled() {
        return this._enabled;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set enabled(value) {
        this._enabled = value;

        if (this._startAnchor && this._endAnchor) {
          this._toggleAnchorTabIndex(value, this._startAnchor);

          this._toggleAnchorTabIndex(value, this._endAnchor);
        }
      }
      /**
       * Destroys the focus trap by cleaning up the anchors.
       * @return {?}
       */


      destroy() {
        /** @type {?} */
        const startAnchor = this._startAnchor;
        /** @type {?} */

        const endAnchor = this._endAnchor;

        if (startAnchor) {
          startAnchor.removeEventListener('focus', this.startAnchorListener);

          if (startAnchor.parentNode) {
            startAnchor.parentNode.removeChild(startAnchor);
          }
        }

        if (endAnchor) {
          endAnchor.removeEventListener('focus', this.endAnchorListener);

          if (endAnchor.parentNode) {
            endAnchor.parentNode.removeChild(endAnchor);
          }
        }

        this._startAnchor = this._endAnchor = null;
      }
      /**
       * Inserts the anchors into the DOM. This is usually done automatically
       * in the constructor, but can be deferred for cases like directives with `*ngIf`.
       * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case
       * if the target element isn't currently in the DOM.
       */


      attachAnchors() {
        // If we're not on the browser, there can be no focus to trap.
        if (this._hasAttached) {
          return true;
        }

        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          if (!this._startAnchor) {
            this._startAnchor = this._createAnchor();

            /** @type {?} */
            this._startAnchor.addEventListener('focus', this.startAnchorListener);
          }

          if (!this._endAnchor) {
            this._endAnchor = this._createAnchor();

            /** @type {?} */
            this._endAnchor.addEventListener('focus', this.endAnchorListener);
          }
        });

        if (this._element.parentNode) {
          this._element.parentNode.insertBefore(
          /** @type {?} */
          this._startAnchor, this._element);

          this._element.parentNode.insertBefore(
          /** @type {?} */
          this._endAnchor, this._element.nextSibling);

          this._hasAttached = true;
        }

        return this._hasAttached;
      }
      /**
       * Waits for the zone to stabilize, then either focuses the first element that the
       * user specified, or the first tabbable element.
       * @return {?} Returns a promise that resolves with a boolean, depending
       * on whether focus was moved successfuly.
       */


      focusInitialElementWhenReady() {
        return new Promise(
        /**
        * @param {?} resolve
        * @return {?}
        */
        resolve => {
          this._executeOnStable(
          /**
          * @return {?}
          */
          () => resolve(this.focusInitialElement()));
        });
      }
      /**
       * Waits for the zone to stabilize, then focuses
       * the first tabbable element within the focus trap region.
       * @return {?} Returns a promise that resolves with a boolean, depending
       * on whether focus was moved successfuly.
       */


      focusFirstTabbableElementWhenReady() {
        return new Promise(
        /**
        * @param {?} resolve
        * @return {?}
        */
        resolve => {
          this._executeOnStable(
          /**
          * @return {?}
          */
          () => resolve(this.focusFirstTabbableElement()));
        });
      }
      /**
       * Waits for the zone to stabilize, then focuses
       * the last tabbable element within the focus trap region.
       * @return {?} Returns a promise that resolves with a boolean, depending
       * on whether focus was moved successfuly.
       */


      focusLastTabbableElementWhenReady() {
        return new Promise(
        /**
        * @param {?} resolve
        * @return {?}
        */
        resolve => {
          this._executeOnStable(
          /**
          * @return {?}
          */
          () => resolve(this.focusLastTabbableElement()));
        });
      }
      /**
       * Get the specified boundary element of the trapped region.
       * @private
       * @param {?} bound The boundary to get (start or end of trapped region).
       * @return {?} The boundary element.
       */


      _getRegionBoundary(bound) {
        // Contains the deprecated version of selector, for temporary backwards comparability.

        /** @type {?} */
        let markers =
        /** @type {?} */
        this._element.querySelectorAll("[cdk-focus-region-".concat(bound, "], ") + "[cdkFocusRegion".concat(bound, "], ") + "[cdk-focus-".concat(bound, "]"));

        for (let i = 0; i < markers.length; i++) {
          // @breaking-change 8.0.0
          if (markers[i].hasAttribute("cdk-focus-".concat(bound))) {
            console.warn("Found use of deprecated attribute 'cdk-focus-".concat(bound, "', ") + "use 'cdkFocusRegion".concat(bound, "' instead. The deprecated ") + "attribute will be removed in 8.0.0.", markers[i]);
          } else if (markers[i].hasAttribute("cdk-focus-region-".concat(bound))) {
            console.warn("Found use of deprecated attribute 'cdk-focus-region-".concat(bound, "', ") + "use 'cdkFocusRegion".concat(bound, "' instead. The deprecated attribute ") + "will be removed in 8.0.0.", markers[i]);
          }
        }

        if (bound == 'start') {
          return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
        }

        return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
      }
      /**
       * Focuses the element that should be focused when the focus trap is initialized.
       * @return {?} Whether focus was moved successfuly.
       */


      focusInitialElement() {
        // Contains the deprecated version of selector, for temporary backwards comparability.

        /** @type {?} */
        const redirectToElement =
        /** @type {?} */
        this._element.querySelector("[cdk-focus-initial], " + "[cdkFocusInitial]");

        if (redirectToElement) {
          // @breaking-change 8.0.0
          if (redirectToElement.hasAttribute("cdk-focus-initial")) {
            console.warn("Found use of deprecated attribute 'cdk-focus-initial', " + "use 'cdkFocusInitial' instead. The deprecated attribute " + "will be removed in 8.0.0", redirectToElement);
          } // Warn the consumer if the element they've pointed to
          // isn't focusable, when not in production mode.


          if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && !this._checker.isFocusable(redirectToElement)) {
            console.warn("Element matching '[cdkFocusInitial]' is not focusable.", redirectToElement);
          }

          redirectToElement.focus();
          return true;
        }

        return this.focusFirstTabbableElement();
      }
      /**
       * Focuses the first tabbable element within the focus trap region.
       * @return {?} Whether focus was moved successfuly.
       */


      focusFirstTabbableElement() {
        /** @type {?} */
        const redirectToElement = this._getRegionBoundary('start');

        if (redirectToElement) {
          redirectToElement.focus();
        }

        return !!redirectToElement;
      }
      /**
       * Focuses the last tabbable element within the focus trap region.
       * @return {?} Whether focus was moved successfuly.
       */


      focusLastTabbableElement() {
        /** @type {?} */
        const redirectToElement = this._getRegionBoundary('end');

        if (redirectToElement) {
          redirectToElement.focus();
        }

        return !!redirectToElement;
      }
      /**
       * Checks whether the focus trap has successfuly been attached.
       * @return {?}
       */


      hasAttached() {
        return this._hasAttached;
      }
      /**
       * Get the first tabbable element from a DOM subtree (inclusive).
       * @private
       * @param {?} root
       * @return {?}
       */


      _getFirstTabbableElement(root) {
        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
          return root;
        } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall
        // back to `childNodes` which includes text nodes, comments etc.

        /** @type {?} */


        let children = root.children || root.childNodes;

        for (let i = 0; i < children.length; i++) {
          /** @type {?} */
          let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(
          /** @type {?} */
          children[i]) : null;

          if (tabbableChild) {
            return tabbableChild;
          }
        }

        return null;
      }
      /**
       * Get the last tabbable element from a DOM subtree (inclusive).
       * @private
       * @param {?} root
       * @return {?}
       */


      _getLastTabbableElement(root) {
        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
          return root;
        } // Iterate in reverse DOM order.

        /** @type {?} */


        let children = root.children || root.childNodes;

        for (let i = children.length - 1; i >= 0; i--) {
          /** @type {?} */
          let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(
          /** @type {?} */
          children[i]) : null;

          if (tabbableChild) {
            return tabbableChild;
          }
        }

        return null;
      }
      /**
       * Creates an anchor element.
       * @private
       * @return {?}
       */


      _createAnchor() {
        /** @type {?} */
        const anchor = this._document.createElement('div');

        this._toggleAnchorTabIndex(this._enabled, anchor);

        anchor.classList.add('cdk-visually-hidden');
        anchor.classList.add('cdk-focus-trap-anchor');
        anchor.setAttribute('aria-hidden', 'true');
        return anchor;
      }
      /**
       * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
       * @private
       * @param {?} isEnabled Whether the focus trap is enabled.
       * @param {?} anchor Anchor on which to toggle the tabindex.
       * @return {?}
       */


      _toggleAnchorTabIndex(isEnabled, anchor) {
        // Remove the tabindex completely, rather than setting it to -1, because if the
        // element has a tabindex, the user might still hit it when navigating with the arrow keys.
        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
      }
      /**
       * Executes a function when the zone is stable.
       * @private
       * @param {?} fn
       * @return {?}
       */


      _executeOnStable(fn) {
        if (this._ngZone.isStable) {
          fn();
        } else {
          this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["take"])(1)).subscribe(fn);
        }
      }

    }
    /**
     * Factory that allows easy instantiation of focus traps.
     */


    class FocusTrapFactory {
      /**
       * @param {?} _checker
       * @param {?} _ngZone
       * @param {?} _document
       */
      constructor(_checker, _ngZone, _document) {
        this._checker = _checker;
        this._ngZone = _ngZone;
        this._document = _document;
      }
      /**
       * Creates a focus-trapped region around the given element.
       * @param {?} element The element around which focus will be trapped.
       * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done
       *     manually by the user.
       * @return {?} The created focus trap instance.
       */


      create(element, deferCaptureElements = false) {
        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
      }

    }

    FocusTrapFactory.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    FocusTrapFactory.ctorParameters = () => [{
      type: InteractivityChecker
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }]
    }];
    /** @nocollapse */


    FocusTrapFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function FocusTrapFactory_Factory() {
        return new FocusTrapFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(InteractivityChecker), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      },
      token: FocusTrapFactory,
      providedIn: "root"
    });
    /**
     * Directive for trapping focus within a region.
     */

    class CdkTrapFocus {
      /**
       * @param {?} _elementRef
       * @param {?} _focusTrapFactory
       * @param {?} _document
       */
      constructor(_elementRef, _focusTrapFactory, _document) {
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        /**
         * Previously focused element to restore focus to upon destroy when using autoCapture.
         */

        this._previouslyFocusedElement = null;
        this._document = _document;
        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
      }
      /**
       * Whether the focus trap is active.
       * @return {?}
       */


      get enabled() {
        return this.focusTrap.enabled;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set enabled(value) {
        this.focusTrap.enabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value);
      }
      /**
       * Whether the directive should automatially move focus into the trapped region upon
       * initialization and return focus to the previous activeElement upon destruction.
       * @return {?}
       */


      get autoCapture() {
        return this._autoCapture;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set autoCapture(value) {
        this._autoCapture = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value);
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that
        // element now that the trapped region is being destroyed.

        if (this._previouslyFocusedElement) {
          this._previouslyFocusedElement.focus();

          this._previouslyFocusedElement = null;
        }
      }
      /**
       * @return {?}
       */


      ngAfterContentInit() {
        this.focusTrap.attachAnchors();

        if (this.autoCapture) {
          this._previouslyFocusedElement =
          /** @type {?} */
          this._document.activeElement;
          this.focusTrap.focusInitialElementWhenReady();
        }
      }
      /**
       * @return {?}
       */


      ngDoCheck() {
        if (!this.focusTrap.hasAttached()) {
          this.focusTrap.attachAnchors();
        }
      }

    }

    CdkTrapFocus.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
      args: [{
        selector: '[cdkTrapFocus]',
        exportAs: 'cdkTrapFocus'
      }]
    }];
    /** @nocollapse */

    CdkTrapFocus.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
    }, {
      type: FocusTrapFactory
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }]
    }];

    CdkTrapFocus.propDecorators = {
      enabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
        args: ['cdkTrapFocus']
      }],
      autoCapture: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
        args: ['cdkTrapFocusAutoCapture']
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */

    const LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('liveAnnouncerElement', {
      providedIn: 'root',
      factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
    });
    /**
     * \@docs-private
     * @return {?}
     */

    function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
      return null;
    }
    /**
     * Injection token that can be used to configure the default options for the LiveAnnouncer.
     * @type {?}
     */


    const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('LIVE_ANNOUNCER_DEFAULT_OPTIONS');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class LiveAnnouncer {
      /**
       * @param {?} elementToken
       * @param {?} _ngZone
       * @param {?} _document
       * @param {?=} _defaultOptions
       */
      constructor(elementToken, _ngZone, _document, _defaultOptions) {
        this._ngZone = _ngZone;
        this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot
        // reference browser globals (HTMLElement, Document) on non-browser environments, since having
        // a class decorator causes TypeScript to preserve the constructor signature types.

        this._document = _document;
        this._liveElement = elementToken || this._createLiveElement();
      }
      /**
       * @param {?} message
       * @param {...?} args
       * @return {?}
       */


      announce(message, ...args) {
        /** @type {?} */
        const defaultOptions = this._defaultOptions;
        /** @type {?} */

        let politeness;
        /** @type {?} */

        let duration;

        if (args.length === 1 && typeof args[0] === 'number') {
          duration = args[0];
        } else {
          [politeness, duration] = args;
        }

        this.clear();
        clearTimeout(this._previousTimeout);

        if (!politeness) {
          politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';
        }

        if (duration == null && defaultOptions) {
          duration = defaultOptions.duration;
        } // TODO: ensure changing the politeness works on all environments we support.


        this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:
        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
        //   second time without clearing and then using a non-zero delay.
        // (using JAWS 17 at time of this writing).


        return this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          return new Promise(
          /**
          * @param {?} resolve
          * @return {?}
          */
          resolve => {
            clearTimeout(this._previousTimeout);
            this._previousTimeout = setTimeout(
            /**
            * @return {?}
            */
            () => {
              this._liveElement.textContent = message;
              resolve();

              if (typeof duration === 'number') {
                this._previousTimeout = setTimeout(
                /**
                * @return {?}
                */
                () => this.clear(), duration);
              }
            }, 100);
          });
        });
      }
      /**
       * Clears the current text from the announcer element. Can be used to prevent
       * screen readers from reading the text out again while the user is going
       * through the page landmarks.
       * @return {?}
       */


      clear() {
        if (this._liveElement) {
          this._liveElement.textContent = '';
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        clearTimeout(this._previousTimeout);

        if (this._liveElement && this._liveElement.parentNode) {
          this._liveElement.parentNode.removeChild(this._liveElement);

          this._liveElement =
          /** @type {?} */
          null;
        }
      }
      /**
       * @private
       * @return {?}
       */


      _createLiveElement() {
        /** @type {?} */
        const elementClass = 'cdk-live-announcer-element';
        /** @type {?} */

        const previousElements = this._document.getElementsByClassName(elementClass);
        /** @type {?} */


        const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.


        for (let i = 0; i < previousElements.length; i++) {
          /** @type {?} */
          previousElements[i].parentNode.removeChild(previousElements[i]);
        }

        liveEl.classList.add(elementClass);
        liveEl.classList.add('cdk-visually-hidden');
        liveEl.setAttribute('aria-atomic', 'true');
        liveEl.setAttribute('aria-live', 'polite');

        this._document.body.appendChild(liveEl);

        return liveEl;
      }

    }

    LiveAnnouncer.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    LiveAnnouncer.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]
      }]
    }];
    /** @nocollapse */


    LiveAnnouncer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function LiveAnnouncer_Factory() {
        return new LiveAnnouncer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
      },
      token: LiveAnnouncer,
      providedIn: "root"
    });
    /**
     * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
     * with a wider range of browsers and screen readers.
     */

    class CdkAriaLive {
      /**
       * @param {?} _elementRef
       * @param {?} _liveAnnouncer
       * @param {?} _contentObserver
       * @param {?} _ngZone
       */
      constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
        this._elementRef = _elementRef;
        this._liveAnnouncer = _liveAnnouncer;
        this._contentObserver = _contentObserver;
        this._ngZone = _ngZone;
        this._politeness = 'off';
      }
      /**
       * The aria-live politeness level to use when announcing messages.
       * @return {?}
       */


      get politeness() {
        return this._politeness;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set politeness(value) {
        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';

        if (this._politeness === 'off') {
          if (this._subscription) {
            this._subscription.unsubscribe();

            this._subscription = null;
          }
        } else if (!this._subscription) {
          this._subscription = this._ngZone.runOutsideAngular(
          /**
          * @return {?}
          */
          () => {
            return this._contentObserver.observe(this._elementRef).subscribe(
            /**
            * @return {?}
            */
            () => {
              // Note that we use textContent here, rather than innerText, in order to avoid a reflow.

              /** @type {?} */
              const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute
              // changes which we don't want to announce.

              if (elementText !== this._previousAnnouncedText) {
                this._liveAnnouncer.announce(elementText, this._politeness);

                this._previousAnnouncedText = elementText;
              }
            });
          });
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        if (this._subscription) {
          this._subscription.unsubscribe();
        }
      }

    }

    CdkAriaLive.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
      args: [{
        selector: '[cdkAriaLive]',
        exportAs: 'cdkAriaLive'
      }]
    }];
    /** @nocollapse */

    CdkAriaLive.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
    }, {
      type: LiveAnnouncer
    }, {
      type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ContentObserver"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    CdkAriaLive.propDecorators = {
      politeness: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
        args: ['cdkAriaLive']
      }]
    };
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} parentAnnouncer
     * @param {?} liveElement
     * @param {?} _document
     * @param {?} ngZone
     * @return {?}
     */

    function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {
      return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const LIVE_ANNOUNCER_PROVIDER = {
      // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.
      provide: LiveAnnouncer,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), LiveAnnouncer], [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"](LIVE_ANNOUNCER_ELEMENT_TOKEN)], _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]],
      useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
    // that a value of around 650ms seems appropriate.

    /** @type {?} */

    const TOUCH_BUFFER_MS = 650;
    /**
     * Event listener options that enable capturing and also
     * mark the listener as passive if the browser supports it.
     * @type {?}
     */

    const captureEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["normalizePassiveListenerOptions"])({
      passive: true,
      capture: true
    });
    /**
     * Monitors mouse and keyboard events to determine the cause of focus events.
     */

    class FocusMonitor {
      /**
       * @param {?} _ngZone
       * @param {?} _platform
       */
      constructor(_ngZone, _platform) {
        this._ngZone = _ngZone;
        this._platform = _platform;
        /**
         * The focus origin that the next focus event is a result of.
         */

        this._origin = null;
        /**
         * Whether the window has just been focused.
         */

        this._windowFocused = false;
        /**
         * Map of elements being monitored to their info.
         */

        this._elementInfo = new Map();
        /**
         * The number of elements currently being monitored.
         */

        this._monitoredElementCount = 0;
        /**
         * Event listener for `keydown` events on the document.
         * Needs to be an arrow function in order to preserve the context when it gets bound.
         */

        this._documentKeydownListener =
        /**
        * @return {?}
        */
        () => {
          // On keydown record the origin and clear any touch event that may be in progress.
          this._lastTouchTarget = null;

          this._setOriginForCurrentEventQueue('keyboard');
        };
        /**
         * Event listener for `mousedown` events on the document.
         * Needs to be an arrow function in order to preserve the context when it gets bound.
         */


        this._documentMousedownListener =
        /**
        * @return {?}
        */
        () => {
          // On mousedown record the origin only if there is not touch
          // target, since a mousedown can happen as a result of a touch event.
          if (!this._lastTouchTarget) {
            this._setOriginForCurrentEventQueue('mouse');
          }
        };
        /**
         * Event listener for `touchstart` events on the document.
         * Needs to be an arrow function in order to preserve the context when it gets bound.
         */


        this._documentTouchstartListener =
        /**
        * @param {?} event
        * @return {?}
        */
        event => {
          // When the touchstart event fires the focus event is not yet in the event queue. This means
          // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to
          // see if a focus happens.
          if (this._touchTimeoutId != null) {
            clearTimeout(this._touchTimeoutId);
          } // Since this listener is bound on the `document` level, any events coming from the shadow DOM
          // will have their `target` set to the shadow root. If available, use `composedPath` to
          // figure out the event target.


          this._lastTouchTarget = event.composedPath ? event.composedPath()[0] : event.target;
          this._touchTimeoutId = setTimeout(
          /**
          * @return {?}
          */
          () => this._lastTouchTarget = null, TOUCH_BUFFER_MS);
        };
        /**
         * Event listener for `focus` events on the window.
         * Needs to be an arrow function in order to preserve the context when it gets bound.
         */


        this._windowFocusListener =
        /**
        * @return {?}
        */
        () => {
          // Make a note of when the window regains focus, so we can
          // restore the origin info for the focused element.
          this._windowFocused = true;
          this._windowFocusTimeoutId = setTimeout(
          /**
          * @return {?}
          */
          () => this._windowFocused = false);
        };
      }
      /**
       * @param {?} element
       * @param {?=} checkChildren
       * @return {?}
       */


      monitor(element, checkChildren = false) {
        // Do nothing if we're not on the browser platform.
        if (!this._platform.isBrowser) {
          return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null);
        }
        /** @type {?} */


        const nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element); // Check if we're already monitoring this element.

        if (this._elementInfo.has(nativeElement)) {
          /** @type {?} */
          let cachedInfo = this._elementInfo.get(nativeElement);

          /** @type {?} */
          cachedInfo.checkChildren = checkChildren;
          return (
            /** @type {?} */
            cachedInfo.subject.asObservable()
          );
        } // Create monitored element info.

        /** @type {?} */


        let info = {
          unlisten:
          /**
          * @return {?}
          */
          () => {},
          checkChildren: checkChildren,
          subject: new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]()
        };

        this._elementInfo.set(nativeElement, info);

        this._incrementMonitoredElementCount(); // Start listening. We need to listen in capture phase since focus events don't bubble.

        /** @type {?} */


        let focusListener =
        /**
        * @param {?} event
        * @return {?}
        */
        event => this._onFocus(event, nativeElement);
        /** @type {?} */


        let blurListener =
        /**
        * @param {?} event
        * @return {?}
        */
        event => this._onBlur(event, nativeElement);

        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          nativeElement.addEventListener('focus', focusListener, true);
          nativeElement.addEventListener('blur', blurListener, true);
        }); // Create an unlisten function for later.


        info.unlisten =
        /**
        * @return {?}
        */
        () => {
          nativeElement.removeEventListener('focus', focusListener, true);
          nativeElement.removeEventListener('blur', blurListener, true);
        };

        return info.subject.asObservable();
      }
      /**
       * @param {?} element
       * @return {?}
       */


      stopMonitoring(element) {
        /** @type {?} */
        const nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);
        /** @type {?} */

        const elementInfo = this._elementInfo.get(nativeElement);

        if (elementInfo) {
          elementInfo.unlisten();
          elementInfo.subject.complete();

          this._setClasses(nativeElement);

          this._elementInfo.delete(nativeElement);

          this._decrementMonitoredElementCount();
        }
      }
      /**
       * @param {?} element
       * @param {?} origin
       * @param {?=} options
       * @return {?}
       */


      focusVia(element, origin, options) {
        /** @type {?} */
        const nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceElement"])(element);

        this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server


        if (typeof nativeElement.focus === 'function') {
          // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.

          /** @type {?} */
          nativeElement.focus(options);
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._elementInfo.forEach(
        /**
        * @param {?} _info
        * @param {?} element
        * @return {?}
        */
        (_info, element) => this.stopMonitoring(element));
      }
      /**
       * @private
       * @param {?} element
       * @param {?} className
       * @param {?} shouldSet
       * @return {?}
       */


      _toggleClass(element, className, shouldSet) {
        if (shouldSet) {
          element.classList.add(className);
        } else {
          element.classList.remove(className);
        }
      }
      /**
       * Sets the focus classes on the element based on the given focus origin.
       * @private
       * @param {?} element The element to update the classes on.
       * @param {?=} origin The focus origin.
       * @return {?}
       */


      _setClasses(element, origin) {
        /** @type {?} */
        const elementInfo = this._elementInfo.get(element);

        if (elementInfo) {
          this._toggleClass(element, 'cdk-focused', !!origin);

          this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');

          this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');

          this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');

          this._toggleClass(element, 'cdk-program-focused', origin === 'program');
        }
      }
      /**
       * Sets the origin and schedules an async function to clear it at the end of the event queue.
       * @private
       * @param {?} origin The origin to set.
       * @return {?}
       */


      _setOriginForCurrentEventQueue(origin) {
        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          this._origin = origin; // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*
          // tick after the interaction event fired. To ensure the focus origin is always correct,
          // the focus origin will be determined at the beginning of the next tick.

          this._originTimeoutId = setTimeout(
          /**
          * @return {?}
          */
          () => this._origin = null, 1);
        });
      }
      /**
       * Checks whether the given focus event was caused by a touchstart event.
       * @private
       * @param {?} event The focus event to check.
       * @return {?} Whether the event was caused by a touch.
       */


      _wasCausedByTouch(event) {
        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
        // Consider the following dom structure:
        //
        // <div #parent tabindex="0" cdkFocusClasses>
        //   <div #child (click)="#parent.focus()"></div>
        // </div>
        //
        // If the user touches the #child element and the #parent is programmatically focused as a
        // result, this code will still consider it to have been caused by the touch event and will
        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
        // relatively small edge-case that can be worked around by using
        // focusVia(parentEl, 'program') to focus the parent element.
        //
        // If we decide that we absolutely must handle this case correctly, we can do so by listening
        // for the first focus event after the touchstart, and then the first blur event after that
        // focus event. When that blur event fires we know that whatever follows is not a result of the
        // touchstart.

        /** @type {?} */
        let focusTarget = event.target;
        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
      }
      /**
       * Handles focus events on a registered element.
       * @private
       * @param {?} event The focus event.
       * @param {?} element The monitored element.
       * @return {?}
       */


      _onFocus(event, element) {
        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
        // focus event affecting the monitored element. If we want to use the origin of the first event
        // instead we should check for the cdk-focused class here and return if the element already has
        // it. (This only matters for elements that have includesChildren = true).
        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
        // focus event affecting the monitored element. If we want to use the origin of the first event
        // instead we should check for the cdk-focused class here and return if the element already has
        // it. (This only matters for elements that have includesChildren = true).
        // If we are not counting child-element-focus as focused, make sure that the event target is the
        // monitored element itself.

        /** @type {?} */
        const elementInfo = this._elementInfo.get(element);

        if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {
          return;
        } // If we couldn't detect a cause for the focus event, it's due to one of three reasons:
        // 1) The window has just regained focus, in which case we want to restore the focused state of
        //    the element from before the window blurred.
        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
        // 3) The element was programmatically focused, in which case we should mark the origin as
        //    'program'.

        /** @type {?} */


        let origin = this._origin;

        if (!origin) {
          if (this._windowFocused && this._lastFocusOrigin) {
            origin = this._lastFocusOrigin;
          } else if (this._wasCausedByTouch(event)) {
            origin = 'touch';
          } else {
            origin = 'program';
          }
        }

        this._setClasses(element, origin);

        this._emitOrigin(elementInfo.subject, origin);

        this._lastFocusOrigin = origin;
      }
      /**
       * Handles blur events on a registered element.
       * @param {?} event The blur event.
       * @param {?} element The monitored element.
       * @return {?}
       */


      _onBlur(event, element) {
        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
        // order to focus another child of the monitored element.

        /** @type {?} */
        const elementInfo = this._elementInfo.get(element);

        if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
          return;
        }

        this._setClasses(element);

        this._emitOrigin(elementInfo.subject, null);
      }
      /**
       * @private
       * @param {?} subject
       * @param {?} origin
       * @return {?}
       */


      _emitOrigin(subject, origin) {
        this._ngZone.run(
        /**
        * @return {?}
        */
        () => subject.next(origin));
      }
      /**
       * @private
       * @return {?}
       */


      _incrementMonitoredElementCount() {
        // Register global listeners when first element is monitored.
        if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {
          // Note: we listen to events in the capture phase so we
          // can detect them even if the user stops propagation.
          this._ngZone.runOutsideAngular(
          /**
          * @return {?}
          */
          () => {
            document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);
            document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);
            document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);
            window.addEventListener('focus', this._windowFocusListener);
          });
        }
      }
      /**
       * @private
       * @return {?}
       */


      _decrementMonitoredElementCount() {
        // Unregister global listeners when last element is unmonitored.
        if (! --this._monitoredElementCount) {
          document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);
          document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);
          document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);
          window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.

          clearTimeout(this._windowFocusTimeoutId);
          clearTimeout(this._touchTimeoutId);
          clearTimeout(this._originTimeoutId);
        }
      }

    }

    FocusMonitor.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    FocusMonitor.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]
    }];
    /** @nocollapse */


    FocusMonitor.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function FocusMonitor_Factory() {
        return new FocusMonitor(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]));
      },
      token: FocusMonitor,
      providedIn: "root"
    });
    /**
     * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
     * programmatically) and adds corresponding classes to the element.
     *
     * There are two variants of this directive:
     * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
     *    focused.
     * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
     */

    class CdkMonitorFocus {
      /**
       * @param {?} _elementRef
       * @param {?} _focusMonitor
       */
      constructor(_elementRef, _focusMonitor) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(
        /**
        * @param {?} origin
        * @return {?}
        */
        origin => this.cdkFocusChange.emit(origin));
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);

        this._monitorSubscription.unsubscribe();
      }

    }

    CdkMonitorFocus.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
      args: [{
        selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'
      }]
    }];
    /** @nocollapse */

    CdkMonitorFocus.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
    }, {
      type: FocusMonitor
    }];

    CdkMonitorFocus.propDecorators = {
      cdkFocusChange: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
      }]
    };
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} parentDispatcher
     * @param {?} ngZone
     * @param {?} platform
     * @return {?}
     */

    function FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
      return parentDispatcher || new FocusMonitor(ngZone, platform);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const FOCUS_MONITOR_PROVIDER = {
      // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.
      provide: FocusMonitor,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), FocusMonitor], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"]],
      useFactory: FOCUS_MONITOR_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Screenreaders will often fire fake mousedown events when a focusable element
     * is activated using the keyboard. We can typically distinguish between these faked
     * mousedown events and real mousedown events using the "buttons" property. While
     * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
     * the left mouse button), faked mousedowns will usually set the property value to 0.
     * @param {?} event
     * @return {?}
     */

    function isFakeMousedownFromScreenReader(event) {
      return event.buttons === 0;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    class A11yModule {}

    A11yModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
      args: [{
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__["PlatformModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]],
        declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
        exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=a11y.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/bidi.js":
  /*!***************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/bidi.js ***!
    \***************************************************/

  /*! exports provided: Directionality, DIR_DOCUMENT, Dir, BidiModule, ɵa */

  /***/
  function node_modulesAngularCdkEsm2015BidiJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Directionality", function () {
      return Directionality;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DIR_DOCUMENT", function () {
      return DIR_DOCUMENT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Dir", function () {
      return Dir;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BidiModule", function () {
      return BidiModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵa", function () {
      return DIR_DOCUMENT_FACTORY;
    });
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Injection token used to inject the document into Directionality.
     * This is used so that the value can be faked in tests.
     *
     * We can't use the real document in tests because changing the real `dir` causes geometry-based
     * tests in Safari to fail.
     *
     * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
     * themselves use things like `querySelector` in test code.
     *
     * This token is defined in a separate file from Directionality as a workaround for
     * https://github.com/angular/angular/issues/22559
     *
     * \@docs-private
     * @type {?}
     */


    const DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('cdk-dir-doc', {
      providedIn: 'root',
      factory: DIR_DOCUMENT_FACTORY
    });
    /**
     * \@docs-private
     * @return {?}
     */

    function DIR_DOCUMENT_FACTORY() {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["inject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]);
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * The directionality (LTR / RTL) context for the application (or a subtree of it).
     * Exposes the current direction and a stream of direction changes.
     */


    class Directionality {
      /**
       * @param {?=} _document
       */
      constructor(_document) {
        /**
         * The current 'ltr' or 'rtl' value.
         */
        this.value = 'ltr';
        /**
         * Stream that emits whenever the 'ltr' / 'rtl' state changes.
         */

        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();

        if (_document) {
          // TODO: handle 'auto' value -
          // We still need to account for dir="auto".
          // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
          // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now

          /** @type {?} */
          const bodyDir = _document.body ? _document.body.dir : null;
          /** @type {?} */

          const htmlDir = _document.documentElement ? _document.documentElement.dir : null;
          /** @type {?} */

          const value = bodyDir || htmlDir;
          this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this.change.complete();
      }

    }

    Directionality.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    Directionality.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
        args: [DIR_DOCUMENT]
      }]
    }];
    /** @nocollapse */


    Directionality.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function Directionality_Factory() {
        return new Directionality(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DIR_DOCUMENT, 8));
      },
      token: Directionality,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Directive to listen for changes of direction of part of the DOM.
     *
     * Provides itself as Directionality such that descendant directives only need to ever inject
     * Directionality to get the closest direction.
     */

    class Dir {
      constructor() {
        /**
         * Normalized direction that accounts for invalid/unsupported values.
         */
        this._dir = 'ltr';
        /**
         * Whether the `value` has been set to its initial value.
         */

        this._isInitialized = false;
        /**
         * Event emitted when the direction changes.
         */

        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
      }
      /**
       * \@docs-private
       * @return {?}
       */


      get dir() {
        return this._dir;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set dir(value) {
        /** @type {?} */
        const old = this._dir;
        /** @type {?} */

        const normalizedValue = value ? value.toLowerCase() : value;
        this._rawDir = value;
        this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';

        if (old !== this._dir && this._isInitialized) {
          this.change.emit(this._dir);
        }
      }
      /**
       * Current layout direction of the element.
       * @return {?}
       */


      get value() {
        return this.dir;
      }
      /**
       * Initialize once default value has been set.
       * @return {?}
       */


      ngAfterContentInit() {
        this._isInitialized = true;
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this.change.complete();
      }

    }

    Dir.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
      args: [{
        selector: '[dir]',
        providers: [{
          provide: Directionality,
          useExisting: Dir
        }],
        host: {
          '[attr.dir]': '_rawDir'
        },
        exportAs: 'dir'
      }]
    }];
    Dir.propDecorators = {
      change: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
        args: ['dirChange']
      }],
      dir: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class BidiModule {}

    BidiModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
      args: [{
        exports: [Dir],
        declarations: [Dir]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=bidi.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/cdk.js":
  /*!**************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/cdk.js ***!
    \**************************************************/

  /*! exports provided: VERSION */

  /***/
  function node_modulesAngularCdkEsm2015CdkJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Current version of the Angular Component Development Kit.
     * @type {?}
     */


    const VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.3');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=cdk.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/coercion.js":
  /*!*******************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/coercion.js ***!
    \*******************************************************/

  /*! exports provided: coerceBooleanProperty, coerceNumberProperty, _isNumberValue, coerceArray, coerceCssPixelValue, coerceElement */

  /***/
  function node_modulesAngularCdkEsm2015CoercionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "coerceBooleanProperty", function () {
      return coerceBooleanProperty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "coerceNumberProperty", function () {
      return coerceNumberProperty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "_isNumberValue", function () {
      return _isNumberValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "coerceArray", function () {
      return coerceArray;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "coerceCssPixelValue", function () {
      return coerceCssPixelValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "coerceElement", function () {
      return coerceElement;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Coerces a data-bound value (typically a string) to a boolean.
     * @param {?} value
     * @return {?}
     */


    function coerceBooleanProperty(value) {
      return value != null && "".concat(value) !== 'false';
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @param {?} value
     * @param {?=} fallbackValue
     * @return {?}
     */


    function coerceNumberProperty(value, fallbackValue = 0) {
      return _isNumberValue(value) ? Number(value) : fallbackValue;
    }
    /**
     * Whether the provided value is considered a number.
     * \@docs-private
     * @param {?} value
     * @return {?}
     */


    function _isNumberValue(value) {
      // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
      // and other non-number values as NaN, where Number just uses 0) but it considers the string
      // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
      return !isNaN(parseFloat(
      /** @type {?} */
      value)) && !isNaN(Number(value));
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Wraps the provided value in an array, unless the provided value is an array.
     * @template T
     * @param {?} value
     * @return {?}
     */


    function coerceArray(value) {
      return Array.isArray(value) ? value : [value];
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Coerces a value to a CSS pixel value.
     * @param {?} value
     * @return {?}
     */


    function coerceCssPixelValue(value) {
      if (value == null) {
        return '';
      }

      return typeof value === 'string' ? value : "".concat(value, "px");
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Coerces an ElementRef or an Element into an element.
     * Useful for APIs that can accept either a ref or the native element itself.
     * @template T
     * @param {?} elementOrRef
     * @return {?}
     */


    function coerceElement(elementOrRef) {
      return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] ? elementOrRef.nativeElement : elementOrRef;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=coercion.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/cdk/esm2015/collections.js":
  /*!**********************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/collections.js ***!
    \**********************************************************/

  /*! exports provided: UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel */

  /***/
  function node_modulesAngularCdkEsm2015CollectionsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "UniqueSelectionDispatcher", function () {
      return UniqueSelectionDispatcher;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ArrayDataSource", function () {
      return ArrayDataSource;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isDataSource", function () {
      return isDataSource;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataSource", function () {
      return DataSource;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getMultipleValuesInSingleSelectionError", function () {
      return getMultipleValuesInSingleSelectionError;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SelectionModel", function () {
      return SelectionModel;
    });
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @abstract
     * @template T
     */


    class DataSource {}
    /**
     * Checks whether an object is a data source.
     * @param {?} value
     * @return {?}
     */


    function isDataSource(value) {
      // Check if the value is a DataSource by observing if it has a connect function. Cannot
      // be checked as an `instanceof DataSource` since people could create their own sources
      // that match the interface, but don't extend DataSource.
      return value && typeof value.connect === 'function';
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * DataSource wrapper for a native array.
     * @template T
     */


    class ArrayDataSource extends DataSource {
      /**
       * @param {?} _data
       */
      constructor(_data) {
        super();
        this._data = _data;
      }
      /**
       * @return {?}
       */


      connect() {
        return this._data instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"] ? this._data : Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["of"])(this._data);
      }
      /**
       * @return {?}
       */


      disconnect() {}

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Class to be used to power selecting one or more options from a list.
     * @template T
     */


    class SelectionModel {
      /**
       * @param {?=} _multiple
       * @param {?=} initiallySelectedValues
       * @param {?=} _emitChanges
       */
      constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {
        this._multiple = _multiple;
        this._emitChanges = _emitChanges;
        /**
         * Currently-selected values.
         */

        this._selection = new Set();
        /**
         * Keeps track of the deselected options that haven't been emitted by the change event.
         */

        this._deselectedToEmit = [];
        /**
         * Keeps track of the selected options that haven't been emitted by the change event.
         */

        this._selectedToEmit = [];
        /**
         * Event emitted when the value has changed.
         */

        this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        /**
         * Event emitted when the value has changed.
         * @deprecated Use `changed` instead.
         * \@breaking-change 8.0.0 To be changed to `changed`
         */

        this.onChange = this.changed;

        if (initiallySelectedValues && initiallySelectedValues.length) {
          if (_multiple) {
            initiallySelectedValues.forEach(
            /**
            * @param {?} value
            * @return {?}
            */
            value => this._markSelected(value));
          } else {
            this._markSelected(initiallySelectedValues[0]);
          } // Clear the array in order to avoid firing the change event for preselected values.


          this._selectedToEmit.length = 0;
        }
      }
      /**
       * Selected values.
       * @return {?}
       */


      get selected() {
        if (!this._selected) {
          this._selected = Array.from(this._selection.values());
        }

        return this._selected;
      }
      /**
       * Selects a value or an array of values.
       * @param {...?} values
       * @return {?}
       */


      select(...values) {
        this._verifyValueAssignment(values);

        values.forEach(
        /**
        * @param {?} value
        * @return {?}
        */
        value => this._markSelected(value));

        this._emitChangeEvent();
      }
      /**
       * Deselects a value or an array of values.
       * @param {...?} values
       * @return {?}
       */


      deselect(...values) {
        this._verifyValueAssignment(values);

        values.forEach(
        /**
        * @param {?} value
        * @return {?}
        */
        value => this._unmarkSelected(value));

        this._emitChangeEvent();
      }
      /**
       * Toggles a value between selected and deselected.
       * @param {?} value
       * @return {?}
       */


      toggle(value) {
        this.isSelected(value) ? this.deselect(value) : this.select(value);
      }
      /**
       * Clears all of the selected values.
       * @return {?}
       */


      clear() {
        this._unmarkAll();

        this._emitChangeEvent();
      }
      /**
       * Determines whether a value is selected.
       * @param {?} value
       * @return {?}
       */


      isSelected(value) {
        return this._selection.has(value);
      }
      /**
       * Determines whether the model does not have a value.
       * @return {?}
       */


      isEmpty() {
        return this._selection.size === 0;
      }
      /**
       * Determines whether the model has a value.
       * @return {?}
       */


      hasValue() {
        return !this.isEmpty();
      }
      /**
       * Sorts the selected values based on a predicate function.
       * @param {?=} predicate
       * @return {?}
       */


      sort(predicate) {
        if (this._multiple && this.selected) {
          /** @type {?} */
          this._selected.sort(predicate);
        }
      }
      /**
       * Gets whether multiple values can be selected.
       * @return {?}
       */


      isMultipleSelection() {
        return this._multiple;
      }
      /**
       * Emits a change event and clears the records of selected and deselected values.
       * @private
       * @return {?}
       */


      _emitChangeEvent() {
        // Clear the selected values so they can be re-cached.
        this._selected = null;

        if (this._selectedToEmit.length || this._deselectedToEmit.length) {
          this.changed.next({
            source: this,
            added: this._selectedToEmit,
            removed: this._deselectedToEmit
          });
          this._deselectedToEmit = [];
          this._selectedToEmit = [];
        }
      }
      /**
       * Selects a value.
       * @private
       * @param {?} value
       * @return {?}
       */


      _markSelected(value) {
        if (!this.isSelected(value)) {
          if (!this._multiple) {
            this._unmarkAll();
          }

          this._selection.add(value);

          if (this._emitChanges) {
            this._selectedToEmit.push(value);
          }
        }
      }
      /**
       * Deselects a value.
       * @private
       * @param {?} value
       * @return {?}
       */


      _unmarkSelected(value) {
        if (this.isSelected(value)) {
          this._selection.delete(value);

          if (this._emitChanges) {
            this._deselectedToEmit.push(value);
          }
        }
      }
      /**
       * Clears out the selected values.
       * @private
       * @return {?}
       */


      _unmarkAll() {
        if (!this.isEmpty()) {
          this._selection.forEach(
          /**
          * @param {?} value
          * @return {?}
          */
          value => this._unmarkSelected(value));
        }
      }
      /**
       * Verifies the value assignment and throws an error if the specified value array is
       * including multiple values while the selection model is not supporting multiple values.
       * @private
       * @param {?} values
       * @return {?}
       */


      _verifyValueAssignment(values) {
        if (values.length > 1 && !this._multiple) {
          throw getMultipleValuesInSingleSelectionError();
        }
      }

    }
    /**
     * Returns an error that reports that multiple values are passed into a selection model
     * with a single value.
     * \@docs-private
     * @return {?}
     */


    function getMultipleValuesInSingleSelectionError() {
      return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Class to coordinate unique selection based on name.
     * Intended to be consumed as an Angular service.
     * This service is needed because native radio change events are only fired on the item currently
     * being selected, and we still need to uncheck the previous selection.
     *
     * This service does not *store* any IDs and names because they may change at any time, so it is
     * less error-prone if they are simply passed through when the events occur.
     */


    class UniqueSelectionDispatcher {
      constructor() {
        this._listeners = [];
      }
      /**
       * Notify other items that selection for the given name has been set.
       * @param {?} id ID of the item.
       * @param {?} name Name of the item.
       * @return {?}
       */


      notify(id, name) {
        for (let listener of this._listeners) {
          listener(id, name);
        }
      }
      /**
       * Listen for future changes to item selection.
       * @param {?} listener
       * @return {?} Function used to deregister listener
       */


      listen(listener) {
        this._listeners.push(listener);

        return (
          /**
          * @return {?}
          */
          () => {
            this._listeners = this._listeners.filter(
            /**
            * @param {?} registered
            * @return {?}
            */
            registered => {
              return listener !== registered;
            });
          }
        );
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._listeners = [];
      }

    }

    UniqueSelectionDispatcher.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    UniqueSelectionDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function UniqueSelectionDispatcher_Factory() {
        return new UniqueSelectionDispatcher();
      },
      token: UniqueSelectionDispatcher,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=collections.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/keycodes.js":
  /*!*******************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/keycodes.js ***!
    \*******************************************************/

  /*! exports provided: MAC_ENTER, BACKSPACE, TAB, NUM_CENTER, ENTER, SHIFT, CONTROL, ALT, PAUSE, CAPS_LOCK, ESCAPE, SPACE, PAGE_UP, PAGE_DOWN, END, HOME, LEFT_ARROW, UP_ARROW, RIGHT_ARROW, DOWN_ARROW, PLUS_SIGN, PRINT_SCREEN, INSERT, DELETE, ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, FF_SEMICOLON, FF_EQUALS, QUESTION_MARK, AT_SIGN, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, CONTEXT_MENU, NUMPAD_ZERO, NUMPAD_ONE, NUMPAD_TWO, NUMPAD_THREE, NUMPAD_FOUR, NUMPAD_FIVE, NUMPAD_SIX, NUMPAD_SEVEN, NUMPAD_EIGHT, NUMPAD_NINE, NUMPAD_MULTIPLY, NUMPAD_PLUS, NUMPAD_MINUS, NUMPAD_PERIOD, NUMPAD_DIVIDE, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, NUM_LOCK, SCROLL_LOCK, FIRST_MEDIA, FF_MINUS, MUTE, VOLUME_DOWN, VOLUME_UP, FF_MUTE, FF_VOLUME_DOWN, LAST_MEDIA, FF_VOLUME_UP, SEMICOLON, EQUALS, COMMA, DASH, SLASH, APOSTROPHE, TILDE, OPEN_SQUARE_BRACKET, BACKSLASH, CLOSE_SQUARE_BRACKET, SINGLE_QUOTE, MAC_META, hasModifierKey */

  /***/
  function node_modulesAngularCdkEsm2015KeycodesJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAC_ENTER", function () {
      return MAC_ENTER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BACKSPACE", function () {
      return BACKSPACE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TAB", function () {
      return TAB;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUM_CENTER", function () {
      return NUM_CENTER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ENTER", function () {
      return ENTER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SHIFT", function () {
      return SHIFT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CONTROL", function () {
      return CONTROL;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ALT", function () {
      return ALT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PAUSE", function () {
      return PAUSE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CAPS_LOCK", function () {
      return CAPS_LOCK;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ESCAPE", function () {
      return ESCAPE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SPACE", function () {
      return SPACE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PAGE_UP", function () {
      return PAGE_UP;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PAGE_DOWN", function () {
      return PAGE_DOWN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "END", function () {
      return END;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HOME", function () {
      return HOME;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LEFT_ARROW", function () {
      return LEFT_ARROW;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "UP_ARROW", function () {
      return UP_ARROW;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RIGHT_ARROW", function () {
      return RIGHT_ARROW;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DOWN_ARROW", function () {
      return DOWN_ARROW;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PLUS_SIGN", function () {
      return PLUS_SIGN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PRINT_SCREEN", function () {
      return PRINT_SCREEN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "INSERT", function () {
      return INSERT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DELETE", function () {
      return DELETE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ZERO", function () {
      return ZERO;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ONE", function () {
      return ONE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TWO", function () {
      return TWO;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "THREE", function () {
      return THREE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FOUR", function () {
      return FOUR;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FIVE", function () {
      return FIVE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SIX", function () {
      return SIX;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SEVEN", function () {
      return SEVEN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EIGHT", function () {
      return EIGHT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NINE", function () {
      return NINE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FF_SEMICOLON", function () {
      return FF_SEMICOLON;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FF_EQUALS", function () {
      return FF_EQUALS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "QUESTION_MARK", function () {
      return QUESTION_MARK;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AT_SIGN", function () {
      return AT_SIGN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "A", function () {
      return A;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "B", function () {
      return B;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "C", function () {
      return C;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "D", function () {
      return D;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "E", function () {
      return E;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F", function () {
      return F;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "G", function () {
      return G;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "H", function () {
      return H;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "I", function () {
      return I;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "J", function () {
      return J;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "K", function () {
      return K;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "L", function () {
      return L;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "M", function () {
      return M;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "N", function () {
      return N;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "O", function () {
      return O;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "P", function () {
      return P;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Q", function () {
      return Q;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "R", function () {
      return R;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "S", function () {
      return S;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "T", function () {
      return T;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "U", function () {
      return U;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "V", function () {
      return V;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "W", function () {
      return W;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "X", function () {
      return X;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Y", function () {
      return Y;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Z", function () {
      return Z;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "META", function () {
      return META;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_LEFT", function () {
      return MAC_WK_CMD_LEFT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAC_WK_CMD_RIGHT", function () {
      return MAC_WK_CMD_RIGHT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CONTEXT_MENU", function () {
      return CONTEXT_MENU;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_ZERO", function () {
      return NUMPAD_ZERO;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_ONE", function () {
      return NUMPAD_ONE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_TWO", function () {
      return NUMPAD_TWO;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_THREE", function () {
      return NUMPAD_THREE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_FOUR", function () {
      return NUMPAD_FOUR;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_FIVE", function () {
      return NUMPAD_FIVE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_SIX", function () {
      return NUMPAD_SIX;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_SEVEN", function () {
      return NUMPAD_SEVEN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_EIGHT", function () {
      return NUMPAD_EIGHT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_NINE", function () {
      return NUMPAD_NINE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_MULTIPLY", function () {
      return NUMPAD_MULTIPLY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_PLUS", function () {
      return NUMPAD_PLUS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_MINUS", function () {
      return NUMPAD_MINUS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_PERIOD", function () {
      return NUMPAD_PERIOD;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUMPAD_DIVIDE", function () {
      return NUMPAD_DIVIDE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F1", function () {
      return F1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F2", function () {
      return F2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F3", function () {
      return F3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F4", function () {
      return F4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F5", function () {
      return F5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F6", function () {
      return F6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F7", function () {
      return F7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F8", function () {
      return F8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F9", function () {
      return F9;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F10", function () {
      return F10;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F11", function () {
      return F11;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "F12", function () {
      return F12;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NUM_LOCK", function () {
      return NUM_LOCK;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SCROLL_LOCK", function () {
      return SCROLL_LOCK;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FIRST_MEDIA", function () {
      return FIRST_MEDIA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FF_MINUS", function () {
      return FF_MINUS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MUTE", function () {
      return MUTE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VOLUME_DOWN", function () {
      return VOLUME_DOWN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VOLUME_UP", function () {
      return VOLUME_UP;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FF_MUTE", function () {
      return FF_MUTE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FF_VOLUME_DOWN", function () {
      return FF_VOLUME_DOWN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LAST_MEDIA", function () {
      return LAST_MEDIA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FF_VOLUME_UP", function () {
      return FF_VOLUME_UP;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SEMICOLON", function () {
      return SEMICOLON;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EQUALS", function () {
      return EQUALS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "COMMA", function () {
      return COMMA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DASH", function () {
      return DASH;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SLASH", function () {
      return SLASH;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "APOSTROPHE", function () {
      return APOSTROPHE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TILDE", function () {
      return TILDE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OPEN_SQUARE_BRACKET", function () {
      return OPEN_SQUARE_BRACKET;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BACKSLASH", function () {
      return BACKSLASH;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CLOSE_SQUARE_BRACKET", function () {
      return CLOSE_SQUARE_BRACKET;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTE", function () {
      return SINGLE_QUOTE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAC_META", function () {
      return MAC_META;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hasModifierKey", function () {
      return hasModifierKey;
    });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */


    const MAC_ENTER = 3;
    /** @type {?} */

    const BACKSPACE = 8;
    /** @type {?} */

    const TAB = 9;
    /** @type {?} */

    const NUM_CENTER = 12;
    /** @type {?} */

    const ENTER = 13;
    /** @type {?} */

    const SHIFT = 16;
    /** @type {?} */

    const CONTROL = 17;
    /** @type {?} */

    const ALT = 18;
    /** @type {?} */

    const PAUSE = 19;
    /** @type {?} */

    const CAPS_LOCK = 20;
    /** @type {?} */

    const ESCAPE = 27;
    /** @type {?} */

    const SPACE = 32;
    /** @type {?} */

    const PAGE_UP = 33;
    /** @type {?} */

    const PAGE_DOWN = 34;
    /** @type {?} */

    const END = 35;
    /** @type {?} */

    const HOME = 36;
    /** @type {?} */

    const LEFT_ARROW = 37;
    /** @type {?} */

    const UP_ARROW = 38;
    /** @type {?} */

    const RIGHT_ARROW = 39;
    /** @type {?} */

    const DOWN_ARROW = 40;
    /** @type {?} */

    const PLUS_SIGN = 43;
    /** @type {?} */

    const PRINT_SCREEN = 44;
    /** @type {?} */

    const INSERT = 45;
    /** @type {?} */

    const DELETE = 46;
    /** @type {?} */

    const ZERO = 48;
    /** @type {?} */

    const ONE = 49;
    /** @type {?} */

    const TWO = 50;
    /** @type {?} */

    const THREE = 51;
    /** @type {?} */

    const FOUR = 52;
    /** @type {?} */

    const FIVE = 53;
    /** @type {?} */

    const SIX = 54;
    /** @type {?} */

    const SEVEN = 55;
    /** @type {?} */

    const EIGHT = 56;
    /** @type {?} */

    const NINE = 57;
    /** @type {?} */

    const FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186

    /** @type {?} */

    const FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187

    /** @type {?} */

    const QUESTION_MARK = 63;
    /** @type {?} */

    const AT_SIGN = 64;
    /** @type {?} */

    const A = 65;
    /** @type {?} */

    const B = 66;
    /** @type {?} */

    const C = 67;
    /** @type {?} */

    const D = 68;
    /** @type {?} */

    const E = 69;
    /** @type {?} */

    const F = 70;
    /** @type {?} */

    const G = 71;
    /** @type {?} */

    const H = 72;
    /** @type {?} */

    const I = 73;
    /** @type {?} */

    const J = 74;
    /** @type {?} */

    const K = 75;
    /** @type {?} */

    const L = 76;
    /** @type {?} */

    const M = 77;
    /** @type {?} */

    const N = 78;
    /** @type {?} */

    const O = 79;
    /** @type {?} */

    const P = 80;
    /** @type {?} */

    const Q = 81;
    /** @type {?} */

    const R = 82;
    /** @type {?} */

    const S = 83;
    /** @type {?} */

    const T = 84;
    /** @type {?} */

    const U = 85;
    /** @type {?} */

    const V = 86;
    /** @type {?} */

    const W = 87;
    /** @type {?} */

    const X = 88;
    /** @type {?} */

    const Y = 89;
    /** @type {?} */

    const Z = 90;
    /** @type {?} */

    const META = 91; // WIN_KEY_LEFT

    /** @type {?} */

    const MAC_WK_CMD_LEFT = 91;
    /** @type {?} */

    const MAC_WK_CMD_RIGHT = 93;
    /** @type {?} */

    const CONTEXT_MENU = 93;
    /** @type {?} */

    const NUMPAD_ZERO = 96;
    /** @type {?} */

    const NUMPAD_ONE = 97;
    /** @type {?} */

    const NUMPAD_TWO = 98;
    /** @type {?} */

    const NUMPAD_THREE = 99;
    /** @type {?} */

    const NUMPAD_FOUR = 100;
    /** @type {?} */

    const NUMPAD_FIVE = 101;
    /** @type {?} */

    const NUMPAD_SIX = 102;
    /** @type {?} */

    const NUMPAD_SEVEN = 103;
    /** @type {?} */

    const NUMPAD_EIGHT = 104;
    /** @type {?} */

    const NUMPAD_NINE = 105;
    /** @type {?} */

    const NUMPAD_MULTIPLY = 106;
    /** @type {?} */

    const NUMPAD_PLUS = 107;
    /** @type {?} */

    const NUMPAD_MINUS = 109;
    /** @type {?} */

    const NUMPAD_PERIOD = 110;
    /** @type {?} */

    const NUMPAD_DIVIDE = 111;
    /** @type {?} */

    const F1 = 112;
    /** @type {?} */

    const F2 = 113;
    /** @type {?} */

    const F3 = 114;
    /** @type {?} */

    const F4 = 115;
    /** @type {?} */

    const F5 = 116;
    /** @type {?} */

    const F6 = 117;
    /** @type {?} */

    const F7 = 118;
    /** @type {?} */

    const F8 = 119;
    /** @type {?} */

    const F9 = 120;
    /** @type {?} */

    const F10 = 121;
    /** @type {?} */

    const F11 = 122;
    /** @type {?} */

    const F12 = 123;
    /** @type {?} */

    const NUM_LOCK = 144;
    /** @type {?} */

    const SCROLL_LOCK = 145;
    /** @type {?} */

    const FIRST_MEDIA = 166;
    /** @type {?} */

    const FF_MINUS = 173;
    /** @type {?} */

    const MUTE = 173; // Firefox (Gecko) fires 181 for MUTE

    /** @type {?} */

    const VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN

    /** @type {?} */

    const VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP

    /** @type {?} */

    const FF_MUTE = 181;
    /** @type {?} */

    const FF_VOLUME_DOWN = 182;
    /** @type {?} */

    const LAST_MEDIA = 183;
    /** @type {?} */

    const FF_VOLUME_UP = 183;
    /** @type {?} */

    const SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON

    /** @type {?} */

    const EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS

    /** @type {?} */

    const COMMA = 188;
    /** @type {?} */

    const DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS

    /** @type {?} */

    const SLASH = 191;
    /** @type {?} */

    const APOSTROPHE = 192;
    /** @type {?} */

    const TILDE = 192;
    /** @type {?} */

    const OPEN_SQUARE_BRACKET = 219;
    /** @type {?} */

    const BACKSLASH = 220;
    /** @type {?} */

    const CLOSE_SQUARE_BRACKET = 221;
    /** @type {?} */

    const SINGLE_QUOTE = 222;
    /** @type {?} */

    const MAC_META = 224;
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Checks whether a modifier key is pressed.
     * @param {?} event Event to be checked.
     * @param {...?} modifiers
     * @return {?}
     */

    function hasModifierKey(event, ...modifiers) {
      if (modifiers.length) {
        return modifiers.some(
        /**
        * @param {?} modifier
        * @return {?}
        */
        modifier => event[modifier]);
      }

      return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=keycodes.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/cdk/esm2015/layout.js":
  /*!*****************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/layout.js ***!
    \*****************************************************/

  /*! exports provided: LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher */

  /***/
  function node_modulesAngularCdkEsm2015LayoutJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LayoutModule", function () {
      return LayoutModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BreakpointObserver", function () {
      return BreakpointObserver;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Breakpoints", function () {
      return Breakpoints;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MediaMatcher", function () {
      return MediaMatcher;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/cdk/platform */
    "./node_modules/@angular/cdk/esm2015/platform.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    class LayoutModule {}

    LayoutModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{}]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Global registry for all dynamically-created, injected media queries.
     * @type {?}
     */

    const mediaQueriesForWebkitCompatibility = new Set();
    /**
     * Style tag that holds all of the dynamically-created media queries.
     * @type {?}
     */

    let mediaQueryStyleNode;
    /**
     * A utility for calling matchMedia queries.
     */

    class MediaMatcher {
      /**
       * @param {?} _platform
       */
      constructor(_platform) {
        this._platform = _platform;
        this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
        // call it from a different scope.
        window.matchMedia.bind(window) : noopMatchMedia;
      }
      /**
       * Evaluates the given media query and returns the native MediaQueryList from which results
       * can be retrieved.
       * Confirms the layout engine will trigger for the selector query provided and returns the
       * MediaQueryList for the query provided.
       * @param {?} query
       * @return {?}
       */


      matchMedia(query) {
        if (this._platform.WEBKIT) {
          createEmptyStyleRule(query);
        }

        return this._matchMedia(query);
      }

    }

    MediaMatcher.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    MediaMatcher.ctorParameters = () => [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["Platform"]
    }];
    /** @nocollapse */


    MediaMatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
      factory: function MediaMatcher_Factory() {
        return new MediaMatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__["Platform"]));
      },
      token: MediaMatcher,
      providedIn: "root"
    });
    /**
     * For Webkit engines that only trigger the MediaQueryListListener when
     * there is at least one CSS selector for the respective media query.
     * @param {?} query
     * @return {?}
     */

    function createEmptyStyleRule(query) {
      if (mediaQueriesForWebkitCompatibility.has(query)) {
        return;
      }

      try {
        if (!mediaQueryStyleNode) {
          mediaQueryStyleNode = document.createElement('style');
          mediaQueryStyleNode.setAttribute('type', 'text/css');

          /** @type {?} */
          document.head.appendChild(mediaQueryStyleNode);
        }

        if (mediaQueryStyleNode.sheet) {
          /** @type {?} */
          mediaQueryStyleNode.sheet.insertRule("@media ".concat(query, " {.fx-query-test{ }}"), 0);
          mediaQueriesForWebkitCompatibility.add(query);
        }
      } catch (e) {
        console.error(e);
      }
    }
    /**
     * No-op matchMedia replacement for non-browser platforms.
     * @param {?} query
     * @return {?}
     */


    function noopMatchMedia(query) {
      // Use `as any` here to avoid adding additional necessary properties for
      // the noop matcher.
      return (
        /** @type {?} */
        {
          matches: query === 'all' || query === '',
          media: query,
          addListener:
          /**
          * @return {?}
          */
          () => {},
          removeListener:
          /**
          * @return {?}
          */
          () => {}
        }
      );
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Utility for checking the matching state of \@media queries.
     */


    class BreakpointObserver {
      /**
       * @param {?} _mediaMatcher
       * @param {?} _zone
       */
      constructor(_mediaMatcher, _zone) {
        this._mediaMatcher = _mediaMatcher;
        this._zone = _zone;
        /**
         * A map of all media queries currently being listened for.
         */

        this._queries = new Map();
        /**
         * A subject for all other observables to takeUntil based on.
         */

        this._destroySubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
      }
      /**
       * Completes the active subject, signalling to all other observables to complete.
       * @return {?}
       */


      ngOnDestroy() {
        this._destroySubject.next();

        this._destroySubject.complete();
      }
      /**
       * Whether one or more media queries match the current viewport size.
       * @param {?} value One or more media queries to check.
       * @return {?} Whether any of the media queries match.
       */


      isMatched(value) {
        /** @type {?} */
        const queries = splitQueries(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceArray"])(value));
        return queries.some(
        /**
        * @param {?} mediaQuery
        * @return {?}
        */
        mediaQuery => this._registerQuery(mediaQuery).mql.matches);
      }
      /**
       * Gets an observable of results for the given queries that will emit new results for any changes
       * in matching of the given queries.
       * @param {?} value One or more media queries to check.
       * @return {?} A stream of matches for the given queries.
       */


      observe(value) {
        /** @type {?} */
        const queries = splitQueries(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceArray"])(value));
        /** @type {?} */

        const observables = queries.map(
        /**
        * @param {?} query
        * @return {?}
        */
        query => this._registerQuery(query).observable);
        /** @type {?} */

        let stateObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["combineLatest"])(observables); // Emit the first state immediately, and then debounce the subsequent emissions.

        stateObservable = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["concat"])(stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1)), stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["skip"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(0)));
        return stateObservable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
        /**
        * @param {?} breakpointStates
        * @return {?}
        */
        breakpointStates => {
          /** @type {?} */
          const response = {
            matches: false,
            breakpoints: {}
          };
          breakpointStates.forEach(
          /**
          * @param {?} state
          * @return {?}
          */
          state => {
            response.matches = response.matches || state.matches;
            response.breakpoints[state.query] = state.matches;
          });
          return response;
        }));
      }
      /**
       * Registers a specific query to be listened for.
       * @private
       * @param {?} query
       * @return {?}
       */


      _registerQuery(query) {
        // Only set up a new MediaQueryList if it is not already being listened for.
        if (this._queries.has(query)) {
          return (
            /** @type {?} */
            this._queries.get(query)
          );
        }
        /** @type {?} */


        const mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.

        /** @type {?} */


        const queryObservable = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](
        /**
        * @param {?} observer
        * @return {?}
        */
        observer => {
          // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed
          // back into the zone because matchMedia is only included in Zone.js by loading the
          // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not
          // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js
          // patches it.

          /** @type {?} */
          const handler =
          /**
          * @param {?} e
          * @return {?}
          */
          e => this._zone.run(
          /**
          * @return {?}
          */
          () => observer.next(e));

          mql.addListener(handler);
          return (
            /**
            * @return {?}
            */
            () => {
              mql.removeListener(handler);
            }
          );
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(mql), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(
        /**
        * @param {?} nextMql
        * @return {?}
        */
        nextMql => ({
          query,
          matches: nextMql.matches
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroySubject)); // Add the MediaQueryList to the set of queries.

        /** @type {?} */

        const output = {
          observable: queryObservable,
          mql
        };

        this._queries.set(query, output);

        return output;
      }

    }

    BreakpointObserver.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    BreakpointObserver.ctorParameters = () => [{
      type: MediaMatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }];
    /** @nocollapse */


    BreakpointObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
      factory: function BreakpointObserver_Factory() {
        return new BreakpointObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(MediaMatcher), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
      },
      token: BreakpointObserver,
      providedIn: "root"
    });
    /**
     * Split each query string into separate query strings if two queries are provided as comma
     * separated.
     * @param {?} queries
     * @return {?}
     */

    function splitQueries(queries) {
      return queries.map(
      /**
      * @param {?} query
      * @return {?}
      */
      query => query.split(',')).reduce(
      /**
      * @param {?} a1
      * @param {?} a2
      * @return {?}
      */
      (a1, a2) => a1.concat(a2)).map(
      /**
      * @param {?} query
      * @return {?}
      */
      query => query.trim());
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // PascalCase is being used as Breakpoints is used like an enum.
    // tslint:disable-next-line:variable-name

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     * @type {?}
     */


    const Breakpoints = {
      XSmall: '(max-width: 599.99px)',
      Small: '(min-width: 600px) and (max-width: 959.99px)',
      Medium: '(min-width: 960px) and (max-width: 1279.99px)',
      Large: '(min-width: 1280px) and (max-width: 1919.99px)',
      XLarge: '(min-width: 1920px)',
      Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',
      Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
      Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',
      HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',
      TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',
      WebPortrait: '(min-width: 840px) and (orientation: portrait)',
      HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',
      TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',
      WebLandscape: '(min-width: 1280px) and (orientation: landscape)'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=layout.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/observers.js":
  /*!********************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/observers.js ***!
    \********************************************************/

  /*! exports provided: MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule */

  /***/
  function node_modulesAngularCdkEsm2015ObserversJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MutationObserverFactory", function () {
      return MutationObserverFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ContentObserver", function () {
      return ContentObserver;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkObserveContent", function () {
      return CdkObserveContent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ObserversModule", function () {
      return ObserversModule;
    });
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
     * \@docs-private
     */


    class MutationObserverFactory {
      /**
       * @param {?} callback
       * @return {?}
       */
      create(callback) {
        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
      }

    }

    MutationObserverFactory.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    MutationObserverFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function MutationObserverFactory_Factory() {
        return new MutationObserverFactory();
      },
      token: MutationObserverFactory,
      providedIn: "root"
    });
    /**
     * An injectable service that allows watching elements for changes to their content.
     */

    class ContentObserver {
      /**
       * @param {?} _mutationObserverFactory
       */
      constructor(_mutationObserverFactory) {
        this._mutationObserverFactory = _mutationObserverFactory;
        /**
         * Keeps track of the existing MutationObservers so they can be reused.
         */

        this._observedElements = new Map();
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._observedElements.forEach(
        /**
        * @param {?} _
        * @param {?} element
        * @return {?}
        */
        (_, element) => this._cleanupObserver(element));
      }
      /**
       * @param {?} elementOrRef
       * @return {?}
       */


      observe(elementOrRef) {
        /** @type {?} */
        const element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceElement"])(elementOrRef);
        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](
        /**
        * @param {?} observer
        * @return {?}
        */
        observer => {
          /** @type {?} */
          const stream = this._observeElement(element);
          /** @type {?} */


          const subscription = stream.subscribe(observer);
          return (
            /**
            * @return {?}
            */
            () => {
              subscription.unsubscribe();

              this._unobserveElement(element);
            }
          );
        });
      }
      /**
       * Observes the given element by using the existing MutationObserver if available, or creating a
       * new one if not.
       * @private
       * @param {?} element
       * @return {?}
       */


      _observeElement(element) {
        if (!this._observedElements.has(element)) {
          /** @type {?} */
          const stream = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          /** @type {?} */

          const observer = this._mutationObserverFactory.create(
          /**
          * @param {?} mutations
          * @return {?}
          */
          mutations => stream.next(mutations));

          if (observer) {
            observer.observe(element, {
              characterData: true,
              childList: true,
              subtree: true
            });
          }

          this._observedElements.set(element, {
            observer,
            stream,
            count: 1
          });
        } else {
          /** @type {?} */this._observedElements.get(element).count++;
        }

        return (
          /** @type {?} */
          this._observedElements.get(element).stream
        );
      }
      /**
       * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
       * observing this element.
       * @private
       * @param {?} element
       * @return {?}
       */


      _unobserveElement(element) {
        if (this._observedElements.has(element)) {
          /** @type {?} */this._observedElements.get(element).count--;

          if (!
          /** @type {?} */
          this._observedElements.get(element).count) {
            this._cleanupObserver(element);
          }
        }
      }
      /**
       * Clean up the underlying MutationObserver for the specified element.
       * @private
       * @param {?} element
       * @return {?}
       */


      _cleanupObserver(element) {
        if (this._observedElements.has(element)) {
          const {
            observer,
            stream
          } =
          /** @type {?} */
          this._observedElements.get(element);

          if (observer) {
            observer.disconnect();
          }

          stream.complete();

          this._observedElements.delete(element);
        }
      }

    }

    ContentObserver.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    ContentObserver.ctorParameters = () => [{
      type: MutationObserverFactory
    }];
    /** @nocollapse */


    ContentObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
      factory: function ContentObserver_Factory() {
        return new ContentObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(MutationObserverFactory));
      },
      token: ContentObserver,
      providedIn: "root"
    });
    /**
     * Directive that triggers a callback whenever the content of
     * its associated element has changed.
     */

    class CdkObserveContent {
      /**
       * @param {?} _contentObserver
       * @param {?} _elementRef
       * @param {?} _ngZone
       */
      constructor(_contentObserver, _elementRef, _ngZone) {
        this._contentObserver = _contentObserver;
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        /**
         * Event emitted for each change in the element's content.
         */

        this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._disabled = false;
        this._currentSubscription = null;
      }
      /**
       * Whether observing content is disabled. This option can be used
       * to disconnect the underlying MutationObserver until it is needed.
       * @return {?}
       */


      get disabled() {
        return this._disabled;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
      }
      /**
       * Debounce interval for emitting the changes.
       * @return {?}
       */


      get debounce() {
        return this._debounce;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set debounce(value) {
        this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(value);

        this._subscribe();
      }
      /**
       * @return {?}
       */


      ngAfterContentInit() {
        if (!this._currentSubscription && !this.disabled) {
          this._subscribe();
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._unsubscribe();
      }
      /**
       * @private
       * @return {?}
       */


      _subscribe() {
        this._unsubscribe();
        /** @type {?} */


        const stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
        // Consider brining it back inside the zone next time we're making breaking changes.
        // Bringing it back inside can cause things like infinite change detection loops and changed
        // after checked errors if people's code isn't handling it properly.


        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          this._currentSubscription = (this.debounce ? stream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(this.debounce)) : stream).subscribe(this.event);
        });
      }
      /**
       * @private
       * @return {?}
       */


      _unsubscribe() {
        if (this._currentSubscription) {
          this._currentSubscription.unsubscribe();
        }
      }

    }

    CdkObserveContent.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
      args: [{
        selector: '[cdkObserveContent]',
        exportAs: 'cdkObserveContent'
      }]
    }];
    /** @nocollapse */

    CdkObserveContent.ctorParameters = () => [{
      type: ContentObserver
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
    }];

    CdkObserveContent.propDecorators = {
      event: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
        args: ['cdkObserveContent']
      }],
      disabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
        args: ['cdkObserveContentDisabled']
      }],
      debounce: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }]
    };

    class ObserversModule {}

    ObserversModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
      args: [{
        exports: [CdkObserveContent],
        declarations: [CdkObserveContent],
        providers: [MutationObserverFactory]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=observers.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/overlay.js":
  /*!******************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/overlay.js ***!
    \******************************************************/

  /*! exports provided: ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher, Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, ɵg, ɵf, ɵb, ɵa, ɵc, ɵe, ɵd */

  /***/
  function node_modulesAngularCdkEsm2015OverlayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Overlay", function () {
      return Overlay;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OverlayContainer", function () {
      return OverlayContainer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkOverlayOrigin", function () {
      return CdkOverlayOrigin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkConnectedOverlay", function () {
      return CdkConnectedOverlay;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FullscreenOverlayContainer", function () {
      return FullscreenOverlayContainer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OverlayRef", function () {
      return OverlayRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OverlayKeyboardDispatcher", function () {
      return OverlayKeyboardDispatcher;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OverlayPositionBuilder", function () {
      return OverlayPositionBuilder;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GlobalPositionStrategy", function () {
      return GlobalPositionStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ConnectedPositionStrategy", function () {
      return ConnectedPositionStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FlexibleConnectedPositionStrategy", function () {
      return FlexibleConnectedPositionStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OverlayConfig", function () {
      return OverlayConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "validateVerticalPosition", function () {
      return validateVerticalPosition;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "validateHorizontalPosition", function () {
      return validateHorizontalPosition;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ConnectionPositionPair", function () {
      return ConnectionPositionPair;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollingVisibility", function () {
      return ScrollingVisibility;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ConnectedOverlayPositionChange", function () {
      return ConnectedOverlayPositionChange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollStrategyOptions", function () {
      return ScrollStrategyOptions;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RepositionScrollStrategy", function () {
      return RepositionScrollStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CloseScrollStrategy", function () {
      return CloseScrollStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NoopScrollStrategy", function () {
      return NoopScrollStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BlockScrollStrategy", function () {
      return BlockScrollStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OverlayModule", function () {
      return OverlayModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OVERLAY_PROVIDERS", function () {
      return OVERLAY_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵg", function () {
      return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵf", function () {
      return OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵb", function () {
      return OVERLAY_CONTAINER_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵa", function () {
      return OVERLAY_CONTAINER_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵc", function () {
      return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵe", function () {
      return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵd", function () {
      return CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;
    });
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /* harmony import */


    var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/cdk/scrolling */
    "./node_modules/@angular/cdk/esm2015/scrolling.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ViewportRuler", function () {
      return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function () {
      return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["VIEWPORT_RULER_PROVIDER"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "CdkScrollable", function () {
      return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["CdkScrollable"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function () {
      return _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"];
    });
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/cdk/platform */
    "./node_modules/@angular/cdk/esm2015/platform.js");
    /* harmony import */


    var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! @angular/cdk/bidi */
    "./node_modules/@angular/cdk/esm2015/bidi.js");
    /* harmony import */


    var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! @angular/cdk/portal */
    "./node_modules/@angular/cdk/esm2015/portal.js");
    /* harmony import */


    var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! @angular/cdk/keycodes */
    "./node_modules/@angular/cdk/esm2015/keycodes.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Strategy that will prevent the user from scrolling while the overlay is visible.
     */


    class BlockScrollStrategy {
      /**
       * @param {?} _viewportRuler
       * @param {?} document
       */
      constructor(_viewportRuler, document) {
        this._viewportRuler = _viewportRuler;
        this._previousHTMLStyles = {
          top: '',
          left: ''
        };
        this._isEnabled = false;
        this._document = document;
      }
      /**
       * Attaches this scroll strategy to an overlay.
       * @return {?}
       */


      attach() {}
      /**
       * Blocks page-level scroll while the attached overlay is open.
       * @return {?}
       */


      enable() {
        if (this._canBeEnabled()) {
          /** @type {?} */
          const root =
          /** @type {?} */
          this._document.documentElement;
          this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.

          this._previousHTMLStyles.left = root.style.left || '';
          this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may
          // have the user agent margin, whereas the `html` is guaranteed not to have one.

          root.style.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(-this._previousScrollPosition.left);
          root.style.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(-this._previousScrollPosition.top);
          root.classList.add('cdk-global-scrollblock');
          this._isEnabled = true;
        }
      }
      /**
       * Unblocks page-level scroll while the attached overlay is open.
       * @return {?}
       */


      disable() {
        if (this._isEnabled) {
          /** @type {?} */
          const html =
          /** @type {?} */
          this._document.documentElement;
          /** @type {?} */

          const body =
          /** @type {?} */
          this._document.body;
          /** @type {?} */

          const htmlStyle =
          /** @type {?} */
          html.style;
          /** @type {?} */

          const bodyStyle =
          /** @type {?} */
          body.style;
          /** @type {?} */

          const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';
          /** @type {?} */

          const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';
          this._isEnabled = false;
          htmlStyle.left = this._previousHTMLStyles.left;
          htmlStyle.top = this._previousHTMLStyles.top;
          html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
          // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior

          htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';
          window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
          htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
          bodyStyle.scrollBehavior = previousBodyScrollBehavior;
        }
      }
      /**
       * @private
       * @return {?}
       */


      _canBeEnabled() {
        // Since the scroll strategies can't be singletons, we have to use a global CSS class
        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
        // scrolling multiple times.

        /** @type {?} */
        const html =
        /** @type {?} */
        this._document.documentElement;

        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
          return false;
        }
        /** @type {?} */


        const body = this._document.body;
        /** @type {?} */

        const viewport = this._viewportRuler.getViewportSize();

        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
     * @return {?}
     */


    function getMatScrollStrategyAlreadyAttachedError() {
      return Error("Scroll strategy has already been attached.");
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Strategy that will close the overlay as soon as the user starts scrolling.
     */


    class CloseScrollStrategy {
      /**
       * @param {?} _scrollDispatcher
       * @param {?} _ngZone
       * @param {?} _viewportRuler
       * @param {?=} _config
       */
      constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
        this._scrollDispatcher = _scrollDispatcher;
        this._ngZone = _ngZone;
        this._viewportRuler = _viewportRuler;
        this._config = _config;
        this._scrollSubscription = null;
        /**
         * Detaches the overlay ref and disables the scroll strategy.
         */

        this._detach =
        /**
        * @return {?}
        */
        () => {
          this.disable();

          if (this._overlayRef.hasAttached()) {
            this._ngZone.run(
            /**
            * @return {?}
            */
            () => this._overlayRef.detach());
          }
        };
      }
      /**
       * Attaches this scroll strategy to an overlay.
       * @param {?} overlayRef
       * @return {?}
       */


      attach(overlayRef) {
        if (this._overlayRef) {
          throw getMatScrollStrategyAlreadyAttachedError();
        }

        this._overlayRef = overlayRef;
      }
      /**
       * Enables the closing of the attached overlay on scroll.
       * @return {?}
       */


      enable() {
        if (this._scrollSubscription) {
          return;
        }
        /** @type {?} */


        const stream = this._scrollDispatcher.scrolled(0);

        if (this._config && this._config.threshold && this._config.threshold > 1) {
          this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
          this._scrollSubscription = stream.subscribe(
          /**
          * @return {?}
          */
          () => {
            /** @type {?} */
            const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;

            if (Math.abs(scrollPosition - this._initialScrollPosition) >
            /** @type {?} */

            /** @type {?} */
            this._config.threshold) {
              this._detach();
            } else {
              this._overlayRef.updatePosition();
            }
          });
        } else {
          this._scrollSubscription = stream.subscribe(this._detach);
        }
      }
      /**
       * Disables the closing the attached overlay on scroll.
       * @return {?}
       */


      disable() {
        if (this._scrollSubscription) {
          this._scrollSubscription.unsubscribe();

          this._scrollSubscription = null;
        }
      }
      /**
       * @return {?}
       */


      detach() {
        this.disable();
        this._overlayRef =
        /** @type {?} */
        null;
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Scroll strategy that doesn't do anything.
     */


    class NoopScrollStrategy {
      /**
       * Does nothing, as this scroll strategy is a no-op.
       * @return {?}
       */
      enable() {}
      /**
       * Does nothing, as this scroll strategy is a no-op.
       * @return {?}
       */


      disable() {}
      /**
       * Does nothing, as this scroll strategy is a no-op.
       * @return {?}
       */


      attach() {}

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO(jelbourn): move this to live with the rest of the scrolling code
    // TODO(jelbourn): someday replace this with IntersectionObservers

    /**
     * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
     * \@docs-private
     * @param {?} element Dimensions of the element (from getBoundingClientRect)
     * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
     * @return {?} Whether the element is scrolled out of view
     */


    function isElementScrolledOutsideView(element, scrollContainers) {
      return scrollContainers.some(
      /**
      * @param {?} containerBounds
      * @return {?}
      */
      containerBounds => {
        /** @type {?} */
        const outsideAbove = element.bottom < containerBounds.top;
        /** @type {?} */

        const outsideBelow = element.top > containerBounds.bottom;
        /** @type {?} */

        const outsideLeft = element.right < containerBounds.left;
        /** @type {?} */

        const outsideRight = element.left > containerBounds.right;
        return outsideAbove || outsideBelow || outsideLeft || outsideRight;
      });
    }
    /**
     * Gets whether an element is clipped by any of its scrolling containers.
     * \@docs-private
     * @param {?} element Dimensions of the element (from getBoundingClientRect)
     * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
     * @return {?} Whether the element is clipped
     */


    function isElementClippedByScrolling(element, scrollContainers) {
      return scrollContainers.some(
      /**
      * @param {?} scrollContainerRect
      * @return {?}
      */
      scrollContainerRect => {
        /** @type {?} */
        const clippedAbove = element.top < scrollContainerRect.top;
        /** @type {?} */

        const clippedBelow = element.bottom > scrollContainerRect.bottom;
        /** @type {?} */

        const clippedLeft = element.left < scrollContainerRect.left;
        /** @type {?} */

        const clippedRight = element.right > scrollContainerRect.right;
        return clippedAbove || clippedBelow || clippedLeft || clippedRight;
      });
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Strategy that will update the element position as the user is scrolling.
     */


    class RepositionScrollStrategy {
      /**
       * @param {?} _scrollDispatcher
       * @param {?} _viewportRuler
       * @param {?} _ngZone
       * @param {?=} _config
       */
      constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
        this._scrollDispatcher = _scrollDispatcher;
        this._viewportRuler = _viewportRuler;
        this._ngZone = _ngZone;
        this._config = _config;
        this._scrollSubscription = null;
      }
      /**
       * Attaches this scroll strategy to an overlay.
       * @param {?} overlayRef
       * @return {?}
       */


      attach(overlayRef) {
        if (this._overlayRef) {
          throw getMatScrollStrategyAlreadyAttachedError();
        }

        this._overlayRef = overlayRef;
      }
      /**
       * Enables repositioning of the attached overlay on scroll.
       * @return {?}
       */


      enable() {
        if (!this._scrollSubscription) {
          /** @type {?} */
          const throttle = this._config ? this._config.scrollThrottle : 0;
          this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(
          /**
          * @return {?}
          */
          () => {
            this._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.


            if (this._config && this._config.autoClose) {
              /** @type {?} */
              const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();

              const {
                width,
                height
              } = this._viewportRuler.getViewportSize(); // TODO(crisbeto): include all ancestor scroll containers here once
              // we have a way of exposing the trigger element to the scroll strategy.

              /** @type {?} */


              const parentRects = [{
                width,
                height,
                bottom: height,
                right: width,
                top: 0,
                left: 0
              }];

              if (isElementScrolledOutsideView(overlayRect, parentRects)) {
                this.disable();

                this._ngZone.run(
                /**
                * @return {?}
                */
                () => this._overlayRef.detach());
              }
            }
          });
        }
      }
      /**
       * Disables repositioning of the attached overlay on scroll.
       * @return {?}
       */


      disable() {
        if (this._scrollSubscription) {
          this._scrollSubscription.unsubscribe();

          this._scrollSubscription = null;
        }
      }
      /**
       * @return {?}
       */


      detach() {
        this.disable();
        this._overlayRef =
        /** @type {?} */
        null;
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Options for how an overlay will handle scrolling.
     *
     * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
     * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
     */


    class ScrollStrategyOptions {
      /**
       * @param {?} _scrollDispatcher
       * @param {?} _viewportRuler
       * @param {?} _ngZone
       * @param {?} document
       */
      constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {
        this._scrollDispatcher = _scrollDispatcher;
        this._viewportRuler = _viewportRuler;
        this._ngZone = _ngZone;
        /**
         * Do nothing on scroll.
         */

        this.noop =
        /**
        * @return {?}
        */
        () => new NoopScrollStrategy();
        /**
         * Close the overlay as soon as the user scrolls.
         * @param config Configuration to be used inside the scroll strategy.
         */


        this.close =
        /**
        * @param {?=} config
        * @return {?}
        */
        config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);
        /**
         * Block scrolling.
         */


        this.block =
        /**
        * @return {?}
        */
        () => new BlockScrollStrategy(this._viewportRuler, this._document);
        /**
         * Update the overlay's position on scroll.
         * @param config Configuration to be used inside the scroll strategy.
         * Allows debouncing the reposition calls.
         */


        this.reposition =
        /**
        * @param {?=} config
        * @return {?}
        */
        config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);

        this._document = document;
      }

    }

    ScrollStrategyOptions.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    ScrollStrategyOptions.ctorParameters = () => [{
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]
    }, {
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
      }]
    }];
    /** @nocollapse */


    ScrollStrategyOptions.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({
      factory: function ScrollStrategyOptions_Factory() {
        return new ScrollStrategyOptions(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollDispatcher"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
      },
      token: ScrollStrategyOptions,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Initial configuration used when creating an overlay.
     */

    class OverlayConfig {
      /**
       * @param {?=} config
       */
      constructor(config) {
        /**
         * Strategy to be used when handling scroll events while the overlay is open.
         */
        this.scrollStrategy = new NoopScrollStrategy();
        /**
         * Custom class to add to the overlay pane.
         */

        this.panelClass = '';
        /**
         * Whether the overlay has a backdrop.
         */

        this.hasBackdrop = false;
        /**
         * Custom class to add to the backdrop
         */

        this.backdropClass = 'cdk-overlay-dark-backdrop';
        /**
         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */

        this.disposeOnNavigation = false;

        if (config) {
          /** @type {?} */
          const configKeys =
          /** @type {?} */
          Object.keys(config);

          for (const key of configKeys) {
            if (config[key] !== undefined) {
              // TypeScript, as of version 3.5, sees the left-hand-side of this expression
              // as "I don't know *which* key this is, so the only valid value is the intersection
              // of all the posible values." In this case, that happens to be `undefined`. TypeScript
              // is not smart enough to see that the right-hand-side is actually an access of the same
              // exact type with the same exact key, meaning that the value type must be identical.
              // So we use `any` to work around this.
              this[key] =
              /** @type {?} */
              config[key];
            }
          }
        }
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * The points of the origin element and the overlay element to connect.
     */


    class ConnectionPositionPair {
      /**
       * @param {?} origin
       * @param {?} overlay
       * @param {?=} offsetX
       * @param {?=} offsetY
       * @param {?=} panelClass
       */
      constructor(origin, overlay, offsetX, offsetY, panelClass) {
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.panelClass = panelClass;
        this.originX = origin.originX;
        this.originY = origin.originY;
        this.overlayX = overlay.overlayX;
        this.overlayY = overlay.overlayY;
      }

    }
    /**
     * Set of properties regarding the position of the origin and overlay relative to the viewport
     * with respect to the containing Scrollable elements.
     *
     * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
     * bounds of any one of the strategy's Scrollable's bounding client rectangle.
     *
     * The overlay and origin are outside view if there is no overlap between their bounding client
     * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
     *
     *       -----------                    -----------
     *       | outside |                    | clipped |
     *       |  view   |              --------------------------
     *       |         |              |     |         |        |
     *       ----------               |     -----------        |
     *  --------------------------    |                        |
     *  |                        |    |      Scrollable        |
     *  |                        |    |                        |
     *  |                        |     --------------------------
     *  |      Scrollable        |
     *  |                        |
     *  --------------------------
     *
     * \@docs-private
     */


    class ScrollingVisibility {}
    /**
     * The change event emitted by the strategy when a fallback position is used.
     */


    class ConnectedOverlayPositionChange {
      /**
       * @param {?} connectionPair
       * @param {?} scrollableViewProperties
       */
      constructor(connectionPair, scrollableViewProperties) {
        this.connectionPair = connectionPair;
        this.scrollableViewProperties = scrollableViewProperties;
      }

    }
    /** @nocollapse */


    ConnectedOverlayPositionChange.ctorParameters = () => [{
      type: ConnectionPositionPair
    }, {
      type: ScrollingVisibility,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
      }]
    }];
    /**
     * Validates whether a vertical position property matches the expected values.
     * \@docs-private
     * @param {?} property Name of the property being validated.
     * @param {?} value Value of the property being validated.
     * @return {?}
     */


    function validateVerticalPosition(property, value) {
      if (value !== 'top' && value !== 'bottom' && value !== 'center') {
        throw Error("ConnectedPosition: Invalid ".concat(property, " \"").concat(value, "\". ") + "Expected \"top\", \"bottom\" or \"center\".");
      }
    }
    /**
     * Validates whether a horizontal position property matches the expected values.
     * \@docs-private
     * @param {?} property Name of the property being validated.
     * @param {?} value Value of the property being validated.
     * @return {?}
     */


    function validateHorizontalPosition(property, value) {
      if (value !== 'start' && value !== 'end' && value !== 'center') {
        throw Error("ConnectedPosition: Invalid ".concat(property, " \"").concat(value, "\". ") + "Expected \"start\", \"end\" or \"center\".");
      }
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
     * if any. It maintains a list of attached overlays to determine best suited overlay based
     * on event target and order of overlay opens.
     */


    class OverlayKeyboardDispatcher {
      /**
       * @param {?} document
       */
      constructor(document) {
        /**
         * Currently attached overlays in the order they were attached.
         */
        this._attachedOverlays = [];
        /**
         * Keyboard event listener that will be attached to the body.
         */

        this._keydownListener =
        /**
        * @param {?} event
        * @return {?}
        */
        event => {
          /** @type {?} */
          const overlays = this._attachedOverlays;

          for (let i = overlays.length - 1; i > -1; i--) {
            // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.
            // We want to target the most recent overlay, rather than trying to match where the event came
            // from, because some components might open an overlay, but keep focus on a trigger element
            // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,
            // because we don't want overlays that don't handle keyboard events to block the ones below
            // them that do.
            if (overlays[i]._keydownEventSubscriptions > 0) {
              overlays[i]._keydownEvents.next(event);

              break;
            }
          }
        };

        this._document = document;
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._detach();
      }
      /**
       * Add a new overlay to the list of attached overlay refs.
       * @param {?} overlayRef
       * @return {?}
       */


      add(overlayRef) {
        // Ensure that we don't get the same overlay multiple times.
        this.remove(overlayRef); // Lazily start dispatcher once first overlay is added

        if (!this._isAttached) {
          this._document.body.addEventListener('keydown', this._keydownListener);

          this._isAttached = true;
        }

        this._attachedOverlays.push(overlayRef);
      }
      /**
       * Remove an overlay from the list of attached overlay refs.
       * @param {?} overlayRef
       * @return {?}
       */


      remove(overlayRef) {
        /** @type {?} */
        const index = this._attachedOverlays.indexOf(overlayRef);

        if (index > -1) {
          this._attachedOverlays.splice(index, 1);
        } // Remove the global listener once there are no more overlays.


        if (this._attachedOverlays.length === 0) {
          this._detach();
        }
      }
      /**
       * Detaches the global keyboard event listener.
       * @private
       * @return {?}
       */


      _detach() {
        if (this._isAttached) {
          this._document.body.removeEventListener('keydown', this._keydownListener);

          this._isAttached = false;
        }
      }

    }

    OverlayKeyboardDispatcher.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    OverlayKeyboardDispatcher.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
      }]
    }];
    /** @nocollapse */


    OverlayKeyboardDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({
      factory: function OverlayKeyboardDispatcher_Factory() {
        return new OverlayKeyboardDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
      },
      token: OverlayKeyboardDispatcher,
      providedIn: "root"
    });
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} dispatcher
     * @param {?} _document
     * @return {?}
     */

    function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {
      return dispatcher || new OverlayKeyboardDispatcher(_document);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {
      // If there is already an OverlayKeyboardDispatcher available, use that.
      // Otherwise, provide a new one.
      provide: OverlayKeyboardDispatcher,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"](), OverlayKeyboardDispatcher],
      /** @type {?} */
      // Coerce to `InjectionToken` so that the `deps` match the "shape"
      // of the type expected by Angular
      _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]],
      useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Container inside which all overlays will render.
     */

    class OverlayContainer {
      /**
       * @param {?} document
       */
      constructor(document) {
        this._document = document;
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        if (this._containerElement && this._containerElement.parentNode) {
          this._containerElement.parentNode.removeChild(this._containerElement);
        }
      }
      /**
       * This method returns the overlay container element. It will lazily
       * create the element the first time  it is called to facilitate using
       * the container in non-browser environments.
       * @return {?} the container element
       */


      getContainerElement() {
        if (!this._containerElement) {
          this._createContainer();
        }

        return this._containerElement;
      }
      /**
       * Create the overlay container element, which is simply a div
       * with the 'cdk-overlay-container' class on the document body.
       * @protected
       * @return {?}
       */


      _createContainer() {
        /** @type {?} */
        const containerClass = 'cdk-overlay-container';
        /** @type {?} */

        const previousContainers = this._document.getElementsByClassName(containerClass); // Remove any old containers. This can happen when transitioning from the server to the client.


        for (let i = 0; i < previousContainers.length; i++) {
          /** @type {?} */
          previousContainers[i].parentNode.removeChild(previousContainers[i]);
        }
        /** @type {?} */


        const container = this._document.createElement('div');

        container.classList.add(containerClass);

        this._document.body.appendChild(container);

        this._containerElement = container;
      }

    }

    OverlayContainer.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    OverlayContainer.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
      }]
    }];
    /** @nocollapse */


    OverlayContainer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({
      factory: function OverlayContainer_Factory() {
        return new OverlayContainer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
      },
      token: OverlayContainer,
      providedIn: "root"
    });
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} parentContainer
     * @param {?} _document
     * @return {?}
     */

    function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {
      return parentContainer || new OverlayContainer(_document);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const OVERLAY_CONTAINER_PROVIDER = {
      // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
      provide: OverlayContainer,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_3__["SkipSelf"](), OverlayContainer],
      /** @type {?} */
      _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]],
      useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Reference to an overlay that has been created with the Overlay service.
     * Used to manipulate or dispose of said overlay.
     */

    class OverlayRef {
      /**
       * @param {?} _portalOutlet
       * @param {?} _host
       * @param {?} _pane
       * @param {?} _config
       * @param {?} _ngZone
       * @param {?} _keyboardDispatcher
       * @param {?} _document
       * @param {?=} _location
       */
      constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {
        this._portalOutlet = _portalOutlet;
        this._host = _host;
        this._pane = _pane;
        this._config = _config;
        this._ngZone = _ngZone;
        this._keyboardDispatcher = _keyboardDispatcher;
        this._document = _document;
        this._location = _location;
        this._backdropElement = null;
        this._backdropClick = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        this._attachments = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        this._detachments = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;

        this._backdropClickHandler =
        /**
        * @param {?} event
        * @return {?}
        */
        event => this._backdropClick.next(event);

        this._keydownEventsObservable = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Observable"](
        /**
        * @param {?} observer
        * @return {?}
        */
        observer => {
          /** @type {?} */
          const subscription = this._keydownEvents.subscribe(observer);

          this._keydownEventSubscriptions++;
          return (
            /**
            * @return {?}
            */
            () => {
              subscription.unsubscribe();
              this._keydownEventSubscriptions--;
            }
          );
        });
        /**
         * Stream of keydown events dispatched to this overlay.
         */

        this._keydownEvents = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        /**
         * Amount of subscriptions to the keydown events.
         */

        this._keydownEventSubscriptions = 0;

        if (_config.scrollStrategy) {
          this._scrollStrategy = _config.scrollStrategy;

          this._scrollStrategy.attach(this);
        }

        this._positionStrategy = _config.positionStrategy;
      }
      /**
       * The overlay's HTML element
       * @return {?}
       */


      get overlayElement() {
        return this._pane;
      }
      /**
       * The overlay's backdrop HTML element.
       * @return {?}
       */


      get backdropElement() {
        return this._backdropElement;
      }
      /**
       * Wrapper around the panel element. Can be used for advanced
       * positioning where a wrapper with specific styling is
       * required around the overlay pane.
       * @return {?}
       */


      get hostElement() {
        return this._host;
      }
      /**
       * Attaches content, given via a Portal, to the overlay.
       * If the overlay is configured to have a backdrop, it will be created.
       *
       * @param {?} portal Portal instance to which to attach the overlay.
       * @return {?} The portal attachment result.
       */


      attach(portal) {
        /** @type {?} */
        let attachResult = this._portalOutlet.attach(portal);

        if (this._positionStrategy) {
          this._positionStrategy.attach(this);
        } // Update the pane element with the given configuration.


        if (!this._host.parentElement && this._previousHostParent) {
          this._previousHostParent.appendChild(this._host);
        }

        this._updateStackingOrder();

        this._updateElementSize();

        this._updateElementDirection();

        if (this._scrollStrategy) {
          this._scrollStrategy.enable();
        } // Update the position once the zone is stable so that the overlay will be fully rendered
        // before attempting to position it, as the position may depend on the size of the rendered
        // content.


        this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["take"])(1)).subscribe(
        /**
        * @return {?}
        */
        () => {
          // The overlay could've been detached before the zone has stabilized.
          if (this.hasAttached()) {
            this.updatePosition();
          }
        }); // Enable pointer events for the overlay pane element.


        this._togglePointerEvents(true);

        if (this._config.hasBackdrop) {
          this._attachBackdrop();
        }

        if (this._config.panelClass) {
          this._toggleClasses(this._pane, this._config.panelClass, true);
        } // Only emit the `attachments` event once all other setup is done.


        this._attachments.next(); // Track this overlay by the keyboard dispatcher


        this._keyboardDispatcher.add(this); // @breaking-change 8.0.0 remove the null check for `_location`
        // once the constructor parameter is made required.


        if (this._config.disposeOnNavigation && this._location) {
          this._locationChanges = this._location.subscribe(
          /**
          * @return {?}
          */
          () => this.dispose());
        }

        return attachResult;
      }
      /**
       * Detaches an overlay from a portal.
       * @return {?} The portal detachment result.
       */


      detach() {
        if (!this.hasAttached()) {
          return;
        }

        this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.
        // This is necessary because otherwise the pane element will cover the page and disable
        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.

        this._togglePointerEvents(false);

        if (this._positionStrategy && this._positionStrategy.detach) {
          this._positionStrategy.detach();
        }

        if (this._scrollStrategy) {
          this._scrollStrategy.disable();
        }
        /** @type {?} */


        const detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.


        this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.


        this._keyboardDispatcher.remove(this); // Keeping the host element in DOM the can cause scroll jank, because it still gets
        // rendered, even though it's transparent and unclickable which is why we remove it.


        this._detachContentWhenStable(); // Stop listening for location changes.


        this._locationChanges.unsubscribe();

        return detachmentResult;
      }
      /**
       * Cleans up the overlay from the DOM.
       * @return {?}
       */


      dispose() {
        /** @type {?} */
        const isAttached = this.hasAttached();

        if (this._positionStrategy) {
          this._positionStrategy.dispose();
        }

        this._disposeScrollStrategy();

        this.detachBackdrop();

        this._locationChanges.unsubscribe();

        this._keyboardDispatcher.remove(this);

        this._portalOutlet.dispose();

        this._attachments.complete();

        this._backdropClick.complete();

        this._keydownEvents.complete();

        if (this._host && this._host.parentNode) {
          this._host.parentNode.removeChild(this._host);

          this._host =
          /** @type {?} */
          null;
        }

        this._previousHostParent = this._pane =
        /** @type {?} */
        null;

        if (isAttached) {
          this._detachments.next();
        }

        this._detachments.complete();
      }
      /**
       * Whether the overlay has attached content.
       * @return {?}
       */


      hasAttached() {
        return this._portalOutlet.hasAttached();
      }
      /**
       * Gets an observable that emits when the backdrop has been clicked.
       * @return {?}
       */


      backdropClick() {
        return this._backdropClick.asObservable();
      }
      /**
       * Gets an observable that emits when the overlay has been attached.
       * @return {?}
       */


      attachments() {
        return this._attachments.asObservable();
      }
      /**
       * Gets an observable that emits when the overlay has been detached.
       * @return {?}
       */


      detachments() {
        return this._detachments.asObservable();
      }
      /**
       * Gets an observable of keydown events targeted to this overlay.
       * @return {?}
       */


      keydownEvents() {
        return this._keydownEventsObservable;
      }
      /**
       * Gets the current overlay configuration, which is immutable.
       * @return {?}
       */


      getConfig() {
        return this._config;
      }
      /**
       * Updates the position of the overlay based on the position strategy.
       * @return {?}
       */


      updatePosition() {
        if (this._positionStrategy) {
          this._positionStrategy.apply();
        }
      }
      /**
       * Switches to a new position strategy and updates the overlay position.
       * @param {?} strategy
       * @return {?}
       */


      updatePositionStrategy(strategy) {
        if (strategy === this._positionStrategy) {
          return;
        }

        if (this._positionStrategy) {
          this._positionStrategy.dispose();
        }

        this._positionStrategy = strategy;

        if (this.hasAttached()) {
          strategy.attach(this);
          this.updatePosition();
        }
      }
      /**
       * Update the size properties of the overlay.
       * @param {?} sizeConfig
       * @return {?}
       */


      updateSize(sizeConfig) {
        this._config = Object.assign({}, this._config, sizeConfig);

        this._updateElementSize();
      }
      /**
       * Sets the LTR/RTL direction for the overlay.
       * @param {?} dir
       * @return {?}
       */


      setDirection(dir) {
        this._config = Object.assign({}, this._config, {
          direction: dir
        });

        this._updateElementDirection();
      }
      /**
       * Add a CSS class or an array of classes to the overlay pane.
       * @param {?} classes
       * @return {?}
       */


      addPanelClass(classes) {
        if (this._pane) {
          this._toggleClasses(this._pane, classes, true);
        }
      }
      /**
       * Remove a CSS class or an array of classes from the overlay pane.
       * @param {?} classes
       * @return {?}
       */


      removePanelClass(classes) {
        if (this._pane) {
          this._toggleClasses(this._pane, classes, false);
        }
      }
      /**
       * Returns the layout direction of the overlay panel.
       * @return {?}
       */


      getDirection() {
        /** @type {?} */
        const direction = this._config.direction;

        if (!direction) {
          return 'ltr';
        }

        return typeof direction === 'string' ? direction : direction.value;
      }
      /**
       * Switches to a new scroll strategy.
       * @param {?} strategy
       * @return {?}
       */


      updateScrollStrategy(strategy) {
        if (strategy === this._scrollStrategy) {
          return;
        }

        this._disposeScrollStrategy();

        this._scrollStrategy = strategy;

        if (this.hasAttached()) {
          strategy.attach(this);
          strategy.enable();
        }
      }
      /**
       * Updates the text direction of the overlay panel.
       * @private
       * @return {?}
       */


      _updateElementDirection() {
        this._host.setAttribute('dir', this.getDirection());
      }
      /**
       * Updates the size of the overlay element based on the overlay config.
       * @private
       * @return {?}
       */


      _updateElementSize() {
        if (!this._pane) {
          return;
        }
        /** @type {?} */


        const style = this._pane.style;
        style.width = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.width);
        style.height = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.height);
        style.minWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.minWidth);
        style.minHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.minHeight);
        style.maxWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.maxWidth);
        style.maxHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(this._config.maxHeight);
      }
      /**
       * Toggles the pointer events for the overlay pane element.
       * @private
       * @param {?} enablePointer
       * @return {?}
       */


      _togglePointerEvents(enablePointer) {
        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
      }
      /**
       * Attaches a backdrop for this overlay.
       * @private
       * @return {?}
       */


      _attachBackdrop() {
        /** @type {?} */
        const showingClass = 'cdk-overlay-backdrop-showing';
        this._backdropElement = this._document.createElement('div');

        this._backdropElement.classList.add('cdk-overlay-backdrop');

        if (this._config.backdropClass) {
          this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
        } // Insert the backdrop before the pane in the DOM order,
        // in order to handle stacked overlays properly.


        /** @type {?} */
        this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever
        // action desired when such a click occurs (usually closing the overlay).


        this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.


        if (typeof requestAnimationFrame !== 'undefined') {
          this._ngZone.runOutsideAngular(
          /**
          * @return {?}
          */
          () => {
            requestAnimationFrame(
            /**
            * @return {?}
            */
            () => {
              if (this._backdropElement) {
                this._backdropElement.classList.add(showingClass);
              }
            });
          });
        } else {
          this._backdropElement.classList.add(showingClass);
        }
      }
      /**
       * Updates the stacking order of the element, moving it to the top if necessary.
       * This is required in cases where one overlay was detached, while another one,
       * that should be behind it, was destroyed. The next time both of them are opened,
       * the stacking will be wrong, because the detached element's pane will still be
       * in its original DOM position.
       * @private
       * @return {?}
       */


      _updateStackingOrder() {
        if (this._host.nextSibling) {
          /** @type {?} */
          this._host.parentNode.appendChild(this._host);
        }
      }
      /**
       * Detaches the backdrop (if any) associated with the overlay.
       * @return {?}
       */


      detachBackdrop() {
        /** @type {?} */
        let backdropToDetach = this._backdropElement;

        if (!backdropToDetach) {
          return;
        }
        /** @type {?} */


        let timeoutId;
        /** @type {?} */

        let finishDetach =
        /**
        * @return {?}
        */
        () => {
          // It may not be attached to anything in certain cases (e.g. unit tests).
          if (backdropToDetach) {
            backdropToDetach.removeEventListener('click', this._backdropClickHandler);
            backdropToDetach.removeEventListener('transitionend', finishDetach);

            if (backdropToDetach.parentNode) {
              backdropToDetach.parentNode.removeChild(backdropToDetach);
            }
          } // It is possible that a new portal has been attached to this overlay since we started
          // removing the backdrop. If that is the case, only clear the backdrop reference if it
          // is still the same instance that we started to remove.


          if (this._backdropElement == backdropToDetach) {
            this._backdropElement = null;
          }

          if (this._config.backdropClass) {
            this._toggleClasses(
            /** @type {?} */
            backdropToDetach, this._config.backdropClass, false);
          }

          clearTimeout(timeoutId);
        };

        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');

        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          /** @type {?} */
          backdropToDetach.addEventListener('transitionend', finishDetach);
        }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
        // In this case we make it unclickable and we try to remove it after a delay.


        backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.
        // If it were to run inside the Angular zone, every test that used Overlay would have to be
        // either async or fakeAsync.

        timeoutId = this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => setTimeout(finishDetach, 500));
      }
      /**
       * Toggles a single CSS class or an array of classes on an element.
       * @private
       * @param {?} element
       * @param {?} cssClasses
       * @param {?} isAdd
       * @return {?}
       */


      _toggleClasses(element, cssClasses, isAdd) {
        /** @type {?} */
        const classList = element.classList;
        Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceArray"])(cssClasses).forEach(
        /**
        * @param {?} cssClass
        * @return {?}
        */
        cssClass => {
          // We can't do a spread here, because IE doesn't support setting multiple classes.
          // Also trying to add an empty string to a DOMTokenList will throw.
          if (cssClass) {
            isAdd ? classList.add(cssClass) : classList.remove(cssClass);
          }
        });
      }
      /**
       * Detaches the overlay content next time the zone stabilizes.
       * @private
       * @return {?}
       */


      _detachContentWhenStable() {
        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will
        // be patched to run inside the zone, which will throw us into an infinite loop.
        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          // We can't remove the host here immediately, because the overlay pane's content
          // might still be animating. This stream helps us avoid interrupting the animation
          // by waiting for the pane to become empty.

          /** @type {?} */
          const subscription = this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(this._attachments, this._detachments))).subscribe(
          /**
          * @return {?}
          */
          () => {
            // Needs a couple of checks for the pane and host, because
            // they may have been removed by the time the zone stabilizes.
            if (!this._pane || !this._host || this._pane.children.length === 0) {
              if (this._pane && this._config.panelClass) {
                this._toggleClasses(this._pane, this._config.panelClass, false);
              }

              if (this._host && this._host.parentElement) {
                this._previousHostParent = this._host.parentElement;

                this._previousHostParent.removeChild(this._host);
              }

              subscription.unsubscribe();
            }
          });
        });
      }
      /**
       * Disposes of a scroll strategy.
       * @private
       * @return {?}
       */


      _disposeScrollStrategy() {
        /** @type {?} */
        const scrollStrategy = this._scrollStrategy;

        if (scrollStrategy) {
          scrollStrategy.disable();

          if (scrollStrategy.detach) {
            scrollStrategy.detach();
          }
        }
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO: refactor clipping detection into a separate thing (part of scrolling module)
    // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.

    /**
     * Class to be added to the overlay bounding box.
     * @type {?}
     */


    const boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';
    /**
     * A strategy for positioning overlays. Using this strategy, an overlay is given an
     * implicit position relative some origin element. The relative position is defined in terms of
     * a point on the origin element that is connected to a point on the overlay element. For example,
     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
     * of the overlay.
     */

    class FlexibleConnectedPositionStrategy {
      /**
       * @param {?} connectedTo
       * @param {?} _viewportRuler
       * @param {?} _document
       * @param {?} _platform
       * @param {?} _overlayContainer
       */
      constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
        this._viewportRuler = _viewportRuler;
        this._document = _document;
        this._platform = _platform;
        this._overlayContainer = _overlayContainer;
        /**
         * Last size used for the bounding box. Used to avoid resizing the overlay after open.
         */

        this._lastBoundingBoxSize = {
          width: 0,
          height: 0
        };
        /**
         * Whether the overlay was pushed in a previous positioning.
         */

        this._isPushed = false;
        /**
         * Whether the overlay can be pushed on-screen on the initial open.
         */

        this._canPush = true;
        /**
         * Whether the overlay can grow via flexible width/height after the initial open.
         */

        this._growAfterOpen = false;
        /**
         * Whether the overlay's width and height can be constrained to fit within the viewport.
         */

        this._hasFlexibleDimensions = true;
        /**
         * Whether the overlay position is locked.
         */

        this._positionLocked = false;
        /**
         * Amount of space that must be maintained between the overlay and the edge of the viewport.
         */

        this._viewportMargin = 0;
        /**
         * The Scrollable containers used to check scrollable view properties on position change.
         */

        this._scrollables = [];
        /**
         * Ordered list of preferred positions, from most to least desirable.
         */

        this._preferredPositions = [];
        /**
         * Subject that emits whenever the position changes.
         */

        this._positionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        /**
         * Subscription to viewport size changes.
         */

        this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
        /**
         * Default offset for the overlay along the x axis.
         */

        this._offsetX = 0;
        /**
         * Default offset for the overlay along the y axis.
         */

        this._offsetY = 0;
        /**
         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.
         */

        this._appliedPanelClasses = [];
        /**
         * Observable sequence of position changes.
         */

        this.positionChanges = this._positionChanges.asObservable();
        this.setOrigin(connectedTo);
      }
      /**
       * Ordered list of preferred positions, from most to least desirable.
       * @return {?}
       */


      get positions() {
        return this._preferredPositions;
      }
      /**
       * Attaches this position strategy to an overlay.
       * @param {?} overlayRef
       * @return {?}
       */


      attach(overlayRef) {
        if (this._overlayRef && overlayRef !== this._overlayRef) {
          throw Error('This position strategy is already attached to an overlay');
        }

        this._validatePositions();

        overlayRef.hostElement.classList.add(boundingBoxClass);
        this._overlayRef = overlayRef;
        this._boundingBox = overlayRef.hostElement;
        this._pane = overlayRef.overlayElement;
        this._isDisposed = false;
        this._isInitialRender = true;
        this._lastPosition = null;

        this._resizeSubscription.unsubscribe();

        this._resizeSubscription = this._viewportRuler.change().subscribe(
        /**
        * @return {?}
        */
        () => {
          // When the window is resized, we want to trigger the next reposition as if it
          // was an initial render, in order for the strategy to pick a new optimal position,
          // otherwise position locking will cause it to stay at the old one.
          this._isInitialRender = true;
          this.apply();
        });
      }
      /**
       * Updates the position of the overlay element, using whichever preferred position relative
       * to the origin best fits on-screen.
       *
       * The selection of a position goes as follows:
       *  - If any positions fit completely within the viewport as-is,
       *      choose the first position that does so.
       *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,
       *      choose the position with the greatest available size modified by the positions' weight.
       *  - If pushing is enabled, take the position that went off-screen the least and push it
       *      on-screen.
       *  - If none of the previous criteria were met, use the position that goes off-screen the least.
       * \@docs-private
       * @return {?}
       */


      apply() {
        // We shouldn't do anything if the strategy was disposed or we're on the server.
        if (this._isDisposed || !this._platform.isBrowser) {
          return;
        } // If the position has been applied already (e.g. when the overlay was opened) and the
        // consumer opted into locking in the position, re-use the old position, in order to
        // prevent the overlay from jumping around.


        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
          this.reapplyLastPosition();
          return;
        }

        this._clearPanelClasses();

        this._resetOverlayElementStyles();

        this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position
        // the overlay relative to the origin.
        // We use the viewport rect to determine whether a position would go off-screen.


        this._viewportRect = this._getNarrowedViewportRect();
        this._originRect = this._getOriginRect();
        this._overlayRect = this._pane.getBoundingClientRect();
        /** @type {?} */

        const originRect = this._originRect;
        /** @type {?} */

        const overlayRect = this._overlayRect;
        /** @type {?} */

        const viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.

        /** @type {?} */

        const flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.

        /** @type {?} */

        let fallback; // Go through each of the preferred positions looking for a good fit.
        // If a good fit is found, it will be applied immediately.

        for (let pos of this._preferredPositions) {
          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.

          /** @type {?} */
          let originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the
          // overlay in this position. We use the top-left corner for calculations and later translate
          // this into an appropriate (top, left, bottom, right) style.

          /** @type {?} */


          let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.

          /** @type {?} */


          let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.


          if (overlayFit.isCompletelyWithinViewport) {
            this._isPushed = false;

            this._applyPosition(pos, originPoint);

            return;
          } // If the overlay has flexible dimensions, we can use this position
          // so long as there's enough space for the minimum dimensions.


          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
            // Save positions where the overlay will fit with flexible dimensions. We will use these
            // if none of the positions fit *without* flexible dimensions.
            flexibleFits.push({
              position: pos,
              origin: originPoint,
              overlayRect,
              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
            });
            continue;
          } // If the current preferred position does not fit on the screen, remember the position
          // if it has more visible area on-screen than we've seen and move onto the next preferred
          // position.


          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
            fallback = {
              overlayFit,
              overlayPoint,
              originPoint,
              position: pos,
              overlayRect
            };
          }
        } // If there are any positions where the overlay would fit with flexible dimensions, choose the
        // one that has the greatest area available modified by the position's weight


        if (flexibleFits.length) {
          /** @type {?} */
          let bestFit = null;
          /** @type {?} */

          let bestScore = -1;

          for (const fit of flexibleFits) {
            /** @type {?} */
            const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);

            if (score > bestScore) {
              bestScore = score;
              bestFit = fit;
            }
          }

          this._isPushed = false;

          this._applyPosition(
          /** @type {?} */
          bestFit.position,
          /** @type {?} */
          bestFit.origin);

          return;
        } // When none of the preferred positions fit within the viewport, take the position
        // that went off-screen the least and attempt to push it on-screen.


        if (this._canPush) {
          // TODO(jelbourn): after pushing, the opening "direction" of the overlay might not make sense.
          this._isPushed = true;

          this._applyPosition(
          /** @type {?} */
          fallback.position,
          /** @type {?} */
          fallback.originPoint);

          return;
        } // All options for getting the overlay within the viewport have been exhausted, so go with the
        // position that went off-screen the least.


        this._applyPosition(
        /** @type {?} */
        fallback.position,
        /** @type {?} */
        fallback.originPoint);
      }
      /**
       * @return {?}
       */


      detach() {
        this._clearPanelClasses();

        this._lastPosition = null;
        this._previousPushAmount = null;

        this._resizeSubscription.unsubscribe();
      }
      /**
       * Cleanup after the element gets destroyed.
       * @return {?}
       */


      dispose() {
        if (this._isDisposed) {
          return;
        } // We can't use `_resetBoundingBoxStyles` here, because it resets
        // some properties to zero, rather than removing them.


        if (this._boundingBox) {
          extendStyles(this._boundingBox.style,
          /** @type {?} */
          {
            top: '',
            left: '',
            right: '',
            bottom: '',
            height: '',
            width: '',
            alignItems: '',
            justifyContent: ''
          });
        }

        if (this._pane) {
          this._resetOverlayElementStyles();
        }

        if (this._overlayRef) {
          this._overlayRef.hostElement.classList.remove(boundingBoxClass);
        }

        this.detach();

        this._positionChanges.complete();

        this._overlayRef = this._boundingBox =
        /** @type {?} */
        null;
        this._isDisposed = true;
      }
      /**
       * This re-aligns the overlay element with the trigger in its last calculated position,
       * even if a position higher in the "preferred positions" list would now fit. This
       * allows one to re-align the panel without changing the orientation of the panel.
       * @return {?}
       */


      reapplyLastPosition() {
        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
          this._originRect = this._getOriginRect();
          this._overlayRect = this._pane.getBoundingClientRect();
          this._viewportRect = this._getNarrowedViewportRect();
          /** @type {?} */

          const lastPosition = this._lastPosition || this._preferredPositions[0];
          /** @type {?} */

          const originPoint = this._getOriginPoint(this._originRect, lastPosition);

          this._applyPosition(lastPosition, originPoint);
        }
      }
      /**
       * Sets the list of Scrollable containers that host the origin element so that
       * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
       * Scrollable must be an ancestor element of the strategy's origin element.
       * @template THIS
       * @this {THIS}
       * @param {?} scrollables
       * @return {THIS}
       */


      withScrollableContainers(scrollables) {
        /** @type {?} */
        this._scrollables = scrollables;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Adds new preferred positions.
       * @template THIS
       * @this {THIS}
       * @param {?} positions List of positions options for this overlay.
       * @return {THIS}
       */


      withPositions(positions) {
        /** @type {?} */
        this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear
        // it in order to avoid it being picked up if the consumer tries to re-apply.

        if (positions.indexOf(
        /** @type {?} */

        /** @type {?} */
        this._lastPosition) === -1) {
          /** @type {?} */
          this._lastPosition = null;
        }

        /** @type {?} */
        this._validatePositions();

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
       * @template THIS
       * @this {THIS}
       * @param {?} margin Required margin between the overlay and the viewport edge in pixels.
       * @return {THIS}
       */


      withViewportMargin(margin) {
        /** @type {?} */
        this._viewportMargin = margin;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets whether the overlay's width and height can be constrained to fit within the viewport.
       * @template THIS
       * @this {THIS}
       * @param {?=} flexibleDimensions
       * @return {THIS}
       */


      withFlexibleDimensions(flexibleDimensions = true) {
        /** @type {?} */
        this._hasFlexibleDimensions = flexibleDimensions;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets whether the overlay can grow after the initial open via flexible width/height.
       * @template THIS
       * @this {THIS}
       * @param {?=} growAfterOpen
       * @return {THIS}
       */


      withGrowAfterOpen(growAfterOpen = true) {
        /** @type {?} */
        this._growAfterOpen = growAfterOpen;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.
       * @template THIS
       * @this {THIS}
       * @param {?=} canPush
       * @return {THIS}
       */


      withPush(canPush = true) {
        /** @type {?} */
        this._canPush = canPush;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets whether the overlay's position should be locked in after it is positioned
       * initially. When an overlay is locked in, it won't attempt to reposition itself
       * when the position is re-applied (e.g. when the user scrolls away).
       * @template THIS
       * @this {THIS}
       * @param {?=} isLocked Whether the overlay should locked in.
       * @return {THIS}
       */


      withLockedPosition(isLocked = true) {
        /** @type {?} */
        this._positionLocked = isLocked;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the origin, relative to which to position the overlay.
       * Using an element origin is useful for building components that need to be positioned
       * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
       * used for cases like contextual menus which open relative to the user's pointer.
       * @template THIS
       * @this {THIS}
       * @param {?} origin Reference to the new origin.
       * @return {THIS}
       */


      setOrigin(origin) {
        /** @type {?} */
        this._origin = origin;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the default offset for the overlay's connection point on the x-axis.
       * @template THIS
       * @this {THIS}
       * @param {?} offset New offset in the X axis.
       * @return {THIS}
       */


      withDefaultOffsetX(offset) {
        /** @type {?} */
        this._offsetX = offset;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the default offset for the overlay's connection point on the y-axis.
       * @template THIS
       * @this {THIS}
       * @param {?} offset New offset in the Y axis.
       * @return {THIS}
       */


      withDefaultOffsetY(offset) {
        /** @type {?} */
        this._offsetY = offset;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Configures that the position strategy should set a `transform-origin` on some elements
       * inside the overlay, depending on the current position that is being applied. This is
       * useful for the cases where the origin of an animation can change depending on the
       * alignment of the overlay.
       * @template THIS
       * @this {THIS}
       * @param {?} selector CSS selector that will be used to find the target
       *    elements onto which to set the transform origin.
       * @return {THIS}
       */


      withTransformOriginOn(selector) {
        /** @type {?} */
        this._transformOriginSelector = selector;
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
       * @private
       * @param {?} originRect
       * @param {?} pos
       * @return {?}
       */


      _getOriginPoint(originRect, pos) {
        /** @type {?} */
        let x;

        if (pos.originX == 'center') {
          // Note: when centering we should always use the `left`
          // offset, otherwise the position will be wrong in RTL.
          x = originRect.left + originRect.width / 2;
        } else {
          /** @type {?} */
          const startX = this._isRtl() ? originRect.right : originRect.left;
          /** @type {?} */

          const endX = this._isRtl() ? originRect.left : originRect.right;
          x = pos.originX == 'start' ? startX : endX;
        }
        /** @type {?} */


        let y;

        if (pos.originY == 'center') {
          y = originRect.top + originRect.height / 2;
        } else {
          y = pos.originY == 'top' ? originRect.top : originRect.bottom;
        }

        return {
          x,
          y
        };
      }
      /**
       * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
       * origin point to which the overlay should be connected.
       * @private
       * @param {?} originPoint
       * @param {?} overlayRect
       * @param {?} pos
       * @return {?}
       */


      _getOverlayPoint(originPoint, overlayRect, pos) {
        // Calculate the (overlayStartX, overlayStartY), the start of the
        // potential overlay position relative to the origin point.

        /** @type {?} */
        let overlayStartX;

        if (pos.overlayX == 'center') {
          overlayStartX = -overlayRect.width / 2;
        } else if (pos.overlayX === 'start') {
          overlayStartX = this._isRtl() ? -overlayRect.width : 0;
        } else {
          overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
        }
        /** @type {?} */


        let overlayStartY;

        if (pos.overlayY == 'center') {
          overlayStartY = -overlayRect.height / 2;
        } else {
          overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
        } // The (x, y) coordinates of the overlay.


        return {
          x: originPoint.x + overlayStartX,
          y: originPoint.y + overlayStartY
        };
      }
      /**
       * Gets how well an overlay at the given point will fit within the viewport.
       * @private
       * @param {?} point
       * @param {?} overlay
       * @param {?} viewport
       * @param {?} position
       * @return {?}
       */


      _getOverlayFit(point, overlay, viewport, position) {
        let {
          x,
          y
        } = point;
        /** @type {?} */

        let offsetX = this._getOffset(position, 'x');
        /** @type {?} */


        let offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.


        if (offsetX) {
          x += offsetX;
        }

        if (offsetY) {
          y += offsetY;
        } // How much the overlay would overflow at this position, on each side.

        /** @type {?} */


        let leftOverflow = 0 - x;
        /** @type {?} */

        let rightOverflow = x + overlay.width - viewport.width;
        /** @type {?} */

        let topOverflow = 0 - y;
        /** @type {?} */

        let bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.

        /** @type {?} */

        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);
        /** @type {?} */


        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);
        /** @type {?} */


        let visibleArea = visibleWidth * visibleHeight;
        return {
          visibleArea,
          isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,
          fitsInViewportVertically: visibleHeight === overlay.height,
          fitsInViewportHorizontally: visibleWidth == overlay.width
        };
      }
      /**
       * Whether the overlay can fit within the viewport when it may resize either its width or height.
       * @private
       * @param {?} fit How well the overlay fits in the viewport at some position.
       * @param {?} point The (x, y) coordinates of the overlat at some position.
       * @param {?} viewport The geometry of the viewport.
       * @return {?}
       */


      _canFitWithFlexibleDimensions(fit, point, viewport) {
        if (this._hasFlexibleDimensions) {
          /** @type {?} */
          const availableHeight = viewport.bottom - point.y;
          /** @type {?} */

          const availableWidth = viewport.right - point.x;
          /** @type {?} */

          const minHeight = this._overlayRef.getConfig().minHeight;
          /** @type {?} */


          const minWidth = this._overlayRef.getConfig().minWidth;
          /** @type {?} */


          const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;
          /** @type {?} */

          const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;
          return verticalFit && horizontalFit;
        }

        return false;
      }
      /**
       * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
       * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the
       * right and bottom).
       *
       * @private
       * @param {?} start Starting point from which the overlay is pushed.
       * @param {?} overlay Dimensions of the overlay.
       * @param {?} scrollPosition Current viewport scroll position.
       * @return {?} The point at which to position the overlay after pushing. This is effectively a new
       *     originPoint.
       */


      _pushOverlayOnScreen(start, overlay, scrollPosition) {
        // If the position is locked and we've pushed the overlay already, reuse the previous push
        // amount, rather than pushing it again. If we were to continue pushing, the element would
        // remain in the viewport, which goes against the expectations when position locking is enabled.
        if (this._previousPushAmount && this._positionLocked) {
          return {
            x: start.x + this._previousPushAmount.x,
            y: start.y + this._previousPushAmount.y
          };
        }
        /** @type {?} */


        const viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each
        // side, which we'll use to decide which direction to push it.

        /** @type {?} */

        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);
        /** @type {?} */

        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);
        /** @type {?} */

        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
        /** @type {?} */

        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.

        /** @type {?} */

        let pushX = 0;
        /** @type {?} */

        let pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever
        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the
        // viewport and allow for the trailing end of the overlay to go out of bounds.

        if (overlay.width <= viewport.width) {
          pushX = overflowLeft || -overflowRight;
        } else {
          pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;
        }

        if (overlay.height <= viewport.height) {
          pushY = overflowTop || -overflowBottom;
        } else {
          pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;
        }

        this._previousPushAmount = {
          x: pushX,
          y: pushY
        };
        return {
          x: start.x + pushX,
          y: start.y + pushY
        };
      }
      /**
       * Applies a computed position to the overlay and emits a position change.
       * @private
       * @param {?} position The position preference
       * @param {?} originPoint The point on the origin element where the overlay is connected.
       * @return {?}
       */


      _applyPosition(position, originPoint) {
        this._setTransformOrigin(position);

        this._setOverlayElementStyles(originPoint, position);

        this._setBoundingBoxStyles(originPoint, position);

        if (position.panelClass) {
          this._addPanelClasses(position.panelClass);
        } // Save the last connected position in case the position needs to be re-calculated.


        this._lastPosition = position; // Notify that the position has been changed along with its change properties.
        // We only emit if we've got any subscriptions, because the scroll visibility
        // calculcations can be somewhat expensive.

        if (this._positionChanges.observers.length) {
          /** @type {?} */
          const scrollableViewProperties = this._getScrollVisibility();
          /** @type {?} */


          const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);

          this._positionChanges.next(changeEvent);
        }

        this._isInitialRender = false;
      }
      /**
       * Sets the transform origin based on the configured selector and the passed-in position.
       * @private
       * @param {?} position
       * @return {?}
       */


      _setTransformOrigin(position) {
        if (!this._transformOriginSelector) {
          return;
        }
        /** @type {?} */


        const elements =
        /** @type {?} */
        this._boundingBox.querySelectorAll(this._transformOriginSelector);
        /** @type {?} */


        let xOrigin;
        /** @type {?} */

        let yOrigin = position.overlayY;

        if (position.overlayX === 'center') {
          xOrigin = 'center';
        } else if (this._isRtl()) {
          xOrigin = position.overlayX === 'start' ? 'right' : 'left';
        } else {
          xOrigin = position.overlayX === 'start' ? 'left' : 'right';
        }

        for (let i = 0; i < elements.length; i++) {
          elements[i].style.transformOrigin = "".concat(xOrigin, " ").concat(yOrigin);
        }
      }
      /**
       * Gets the position and size of the overlay's sizing container.
       *
       * This method does no measuring and applies no styles so that we can cheaply compute the
       * bounds for all positions and choose the best fit based on these results.
       * @private
       * @param {?} origin
       * @param {?} position
       * @return {?}
       */


      _calculateBoundingBoxRect(origin, position) {
        /** @type {?} */
        const viewport = this._viewportRect;
        /** @type {?} */

        const isRtl = this._isRtl();
        /** @type {?} */


        let height;
        /** @type {?} */

        let top;
        /** @type {?} */

        let bottom;

        if (position.overlayY === 'top') {
          // Overlay is opening "downward" and thus is bound by the bottom viewport edge.
          top = origin.y;
          height = viewport.height - top + this._viewportMargin;
        } else if (position.overlayY === 'bottom') {
          // Overlay is opening "upward" and thus is bound by the top viewport edge. We need to add
          // the viewport margin back in, because the viewport rect is narrowed down to remove the
          // margin, whereas the `origin` position is calculated based on its `ClientRect`.
          bottom = viewport.height - origin.y + this._viewportMargin * 2;
          height = viewport.height - bottom + this._viewportMargin;
        } else {
          // If neither top nor bottom, it means that the overlay is vertically centered on the
          // origin point. Note that we want the position relative to the viewport, rather than
          // the page, which is why we don't use something like `viewport.bottom - origin.y` and
          // `origin.y - viewport.top`.

          /** @type {?} */
          const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
          /** @type {?} */

          const previousHeight = this._lastBoundingBoxSize.height;
          height = smallestDistanceToViewportEdge * 2;
          top = origin.y - smallestDistanceToViewportEdge;

          if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
            top = origin.y - previousHeight / 2;
          }
        } // The overlay is opening 'right-ward' (the content flows to the right).

        /** @type {?} */


        const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).

        /** @type {?} */

        const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;
        /** @type {?} */

        let width;
        /** @type {?} */

        let left;
        /** @type {?} */

        let right;

        if (isBoundedByLeftViewportEdge) {
          right = viewport.width - origin.x + this._viewportMargin;
          width = origin.x - this._viewportMargin;
        } else if (isBoundedByRightViewportEdge) {
          left = origin.x;
          width = viewport.right - origin.x;
        } else {
          // If neither start nor end, it means that the overlay is horizontally centered on the
          // origin point. Note that we want the position relative to the viewport, rather than
          // the page, which is why we don't use something like `viewport.right - origin.x` and
          // `origin.x - viewport.left`.

          /** @type {?} */
          const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);
          /** @type {?} */

          const previousWidth = this._lastBoundingBoxSize.width;
          width = smallestDistanceToViewportEdge * 2;
          left = origin.x - smallestDistanceToViewportEdge;

          if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
            left = origin.x - previousWidth / 2;
          }
        }

        return {
          top:
          /** @type {?} */
          top,
          left:
          /** @type {?} */
          left,
          bottom:
          /** @type {?} */
          bottom,
          right:
          /** @type {?} */
          right,
          width,
          height
        };
      }
      /**
       * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
       * origin's connection point and stetches to the bounds of the viewport.
       *
       * @private
       * @param {?} origin The point on the origin element where the overlay is connected.
       * @param {?} position The position preference
       * @return {?}
       */


      _setBoundingBoxStyles(origin, position) {
        /** @type {?} */
        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account
        // when applying a new size.


        if (!this._isInitialRender && !this._growAfterOpen) {
          boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
          boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
        }
        /** @type {?} */


        const styles =
        /** @type {?} */
        {};

        if (this._hasExactPosition()) {
          styles.top = styles.left = '0';
          styles.bottom = styles.right = '';
          styles.width = styles.height = '100%';
        } else {
          /** @type {?} */
          const maxHeight = this._overlayRef.getConfig().maxHeight;
          /** @type {?} */


          const maxWidth = this._overlayRef.getConfig().maxWidth;

          styles.height = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.height);
          styles.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.top);
          styles.bottom = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.bottom);
          styles.width = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.width);
          styles.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.left);
          styles.right = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(boundingBoxRect.right); // Push the pane content towards the proper direction.

          if (position.overlayX === 'center') {
            styles.alignItems = 'center';
          } else {
            styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';
          }

          if (position.overlayY === 'center') {
            styles.justifyContent = 'center';
          } else {
            styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';
          }

          if (maxHeight) {
            styles.maxHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(maxHeight);
          }

          if (maxWidth) {
            styles.maxWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(maxWidth);
          }
        }

        this._lastBoundingBoxSize = boundingBoxRect;
        extendStyles(
        /** @type {?} */
        this._boundingBox.style, styles);
      }
      /**
       * Resets the styles for the bounding box so that a new positioning can be computed.
       * @private
       * @return {?}
       */


      _resetBoundingBoxStyles() {
        extendStyles(
        /** @type {?} */
        this._boundingBox.style,
        /** @type {?} */
        {
          top: '0',
          left: '0',
          right: '0',
          bottom: '0',
          height: '',
          width: '',
          alignItems: '',
          justifyContent: ''
        });
      }
      /**
       * Resets the styles for the overlay pane so that a new positioning can be computed.
       * @private
       * @return {?}
       */


      _resetOverlayElementStyles() {
        extendStyles(this._pane.style,
        /** @type {?} */
        {
          top: '',
          left: '',
          bottom: '',
          right: '',
          position: '',
          transform: ''
        });
      }
      /**
       * Sets positioning styles to the overlay element.
       * @private
       * @param {?} originPoint
       * @param {?} position
       * @return {?}
       */


      _setOverlayElementStyles(originPoint, position) {
        /** @type {?} */
        const styles =
        /** @type {?} */
        {};

        if (this._hasExactPosition()) {
          /** @type {?} */
          const scrollPosition = this._viewportRuler.getViewportScrollPosition();

          extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
          extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
        } else {
          styles.position = 'static';
        } // Use a transform to apply the offsets. We do this because the `center` positions rely on
        // being in the normal flex flow and setting a `top` / `left` at all will completely throw
        // off the position. We also can't use margins, because they won't have an effect in some
        // cases where the element doesn't have anything to "push off of". Finally, this works
        // better both with flexible and non-flexible positioning.

        /** @type {?} */


        let transformString = '';
        /** @type {?} */

        let offsetX = this._getOffset(position, 'x');
        /** @type {?} */


        let offsetY = this._getOffset(position, 'y');

        if (offsetX) {
          transformString += "translateX(".concat(offsetX, "px) ");
        }

        if (offsetY) {
          transformString += "translateY(".concat(offsetY, "px)");
        }

        styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because
        // we need these values to both be set to "100%" for the automatic flexible sizing to work.
        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.

        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {
          styles.maxHeight = '';
        }

        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {
          styles.maxWidth = '';
        }

        extendStyles(this._pane.style, styles);
      }
      /**
       * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.
       * @private
       * @param {?} position
       * @param {?} originPoint
       * @param {?} scrollPosition
       * @return {?}
       */


      _getExactOverlayY(position, originPoint, scrollPosition) {
        // Reset any existing styles. This is necessary in case the
        // preferred position has changed since the last `apply`.

        /** @type {?} */
        let styles =
        /** @type {?} */
        {
          top: null,
          bottom: null
        };
        /** @type {?} */

        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);

        if (this._isPushed) {
          overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
        }
        /** @type {?} */


        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an
        // autocomplete), mobile browsers will shift everything in order to put the input in the middle
        // of the screen and to make space for the virtual keyboard. We need to account for this offset,
        // otherwise our positioning will be thrown off.


        overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear
        // above or below the origin and the direction in which the element will expand.

        if (position.overlayY === 'bottom') {
          // When using `bottom`, we adjust the y position such that it is the distance
          // from the bottom of the viewport rather than the top.

          /** @type {?} */
          const documentHeight =
          /** @type {?} */
          this._document.documentElement.clientHeight;
          styles.bottom = "".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), "px");
        } else {
          styles.top = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(overlayPoint.y);
        }

        return styles;
      }
      /**
       * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.
       * @private
       * @param {?} position
       * @param {?} originPoint
       * @param {?} scrollPosition
       * @return {?}
       */


      _getExactOverlayX(position, originPoint, scrollPosition) {
        // Reset any existing styles. This is necessary in case the preferred position has
        // changed since the last `apply`.

        /** @type {?} */
        let styles =
        /** @type {?} */
        {
          left: null,
          right: null
        };
        /** @type {?} */

        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);

        if (this._isPushed) {
          overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
        } // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
        // or "after" the origin, which determines the direction in which the element will expand.
        // For the horizontal axis, the meaning of "before" and "after" change based on whether the
        // page is in RTL or LTR.

        /** @type {?} */


        let horizontalStyleProperty;

        if (this._isRtl()) {
          horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';
        } else {
          horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';
        } // When we're setting `right`, we adjust the x position such that it is the distance
        // from the right edge of the viewport rather than the left edge.


        if (horizontalStyleProperty === 'right') {
          /** @type {?} */
          const documentWidth =
          /** @type {?} */
          this._document.documentElement.clientWidth;
          styles.right = "".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), "px");
        } else {
          styles.left = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceCssPixelValue"])(overlayPoint.x);
        }

        return styles;
      }
      /**
       * Gets the view properties of the trigger and overlay, including whether they are clipped
       * or completely outside the view of any of the strategy's scrollables.
       * @private
       * @return {?}
       */


      _getScrollVisibility() {
        // Note: needs fresh rects since the position could've changed.

        /** @type {?} */
        const originBounds = this._getOriginRect();
        /** @type {?} */


        const overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers
        // every time, we should be able to use the scrollTop of the containers if the size of those
        // containers hasn't changed.

        /** @type {?} */


        const scrollContainerBounds = this._scrollables.map(
        /**
        * @param {?} scrollable
        * @return {?}
        */
        scrollable => {
          return scrollable.getElementRef().nativeElement.getBoundingClientRect();
        });

        return {
          isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
          isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
          isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
          isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)
        };
      }
      /**
       * Subtracts the amount that an element is overflowing on an axis from its length.
       * @private
       * @param {?} length
       * @param {...?} overflows
       * @return {?}
       */


      _subtractOverflows(length, ...overflows) {
        return overflows.reduce(
        /**
        * @param {?} currentValue
        * @param {?} currentOverflow
        * @return {?}
        */
        (currentValue, currentOverflow) => {
          return currentValue - Math.max(currentOverflow, 0);
        }, length);
      }
      /**
       * Narrows the given viewport rect by the current _viewportMargin.
       * @private
       * @return {?}
       */


      _getNarrowedViewportRect() {
        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,
        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference
        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`
        // and `innerHeight` that do. This is necessary, because the overlay container uses
        // 100% `width` and `height` which don't include the scrollbar either.

        /** @type {?} */
        const width =
        /** @type {?} */
        this._document.documentElement.clientWidth;
        /** @type {?} */

        const height =
        /** @type {?} */
        this._document.documentElement.clientHeight;
        /** @type {?} */

        const scrollPosition = this._viewportRuler.getViewportScrollPosition();

        return {
          top: scrollPosition.top + this._viewportMargin,
          left: scrollPosition.left + this._viewportMargin,
          right: scrollPosition.left + width - this._viewportMargin,
          bottom: scrollPosition.top + height - this._viewportMargin,
          width: width - 2 * this._viewportMargin,
          height: height - 2 * this._viewportMargin
        };
      }
      /**
       * Whether the we're dealing with an RTL context
       * @private
       * @return {?}
       */


      _isRtl() {
        return this._overlayRef.getDirection() === 'rtl';
      }
      /**
       * Determines whether the overlay uses exact or flexible positioning.
       * @private
       * @return {?}
       */


      _hasExactPosition() {
        return !this._hasFlexibleDimensions || this._isPushed;
      }
      /**
       * Retrieves the offset of a position along the x or y axis.
       * @private
       * @param {?} position
       * @param {?} axis
       * @return {?}
       */


      _getOffset(position, axis) {
        if (axis === 'x') {
          // We don't do something like `position['offset' + axis]` in
          // order to avoid breking minifiers that rename properties.
          return position.offsetX == null ? this._offsetX : position.offsetX;
        }

        return position.offsetY == null ? this._offsetY : position.offsetY;
      }
      /**
       * Validates that the current position match the expected values.
       * @private
       * @return {?}
       */


      _validatePositions() {
        if (!this._preferredPositions.length) {
          throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
        } // TODO(crisbeto): remove these once Angular's template type
        // checking is advanced enough to catch these cases.


        this._preferredPositions.forEach(
        /**
        * @param {?} pair
        * @return {?}
        */
        pair => {
          validateHorizontalPosition('originX', pair.originX);
          validateVerticalPosition('originY', pair.originY);
          validateHorizontalPosition('overlayX', pair.overlayX);
          validateVerticalPosition('overlayY', pair.overlayY);
        });
      }
      /**
       * Adds a single CSS class or an array of classes on the overlay panel.
       * @private
       * @param {?} cssClasses
       * @return {?}
       */


      _addPanelClasses(cssClasses) {
        if (this._pane) {
          Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceArray"])(cssClasses).forEach(
          /**
          * @param {?} cssClass
          * @return {?}
          */
          cssClass => {
            if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {
              this._appliedPanelClasses.push(cssClass);

              this._pane.classList.add(cssClass);
            }
          });
        }
      }
      /**
       * Clears the classes that the position strategy has applied from the overlay panel.
       * @private
       * @return {?}
       */


      _clearPanelClasses() {
        if (this._pane) {
          this._appliedPanelClasses.forEach(
          /**
          * @param {?} cssClass
          * @return {?}
          */
          cssClass => {
            this._pane.classList.remove(cssClass);
          });

          this._appliedPanelClasses = [];
        }
      }
      /**
       * Returns the ClientRect of the current origin.
       * @private
       * @return {?}
       */


      _getOriginRect() {
        /** @type {?} */
        const origin = this._origin;

        if (origin instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]) {
          return origin.nativeElement.getBoundingClientRect();
        }

        if (origin instanceof HTMLElement) {
          return origin.getBoundingClientRect();
        }
        /** @type {?} */


        const width = origin.width || 0;
        /** @type {?} */

        const height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.

        return {
          top: origin.y,
          bottom: origin.y + height,
          left: origin.x,
          right: origin.x + width,
          height,
          width
        };
      }

    }
    /**
     * Shallow-extends a stylesheet object with another stylesheet object.
     * @param {?} dest
     * @param {?} source
     * @return {?}
     */


    function extendStyles(dest, source) {
      for (let key in source) {
        if (source.hasOwnProperty(key)) {
          dest[key] = source[key];
        }
      }

      return dest;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * A strategy for positioning overlays. Using this strategy, an overlay is given an
     * implicit position relative to some origin element. The relative position is defined in terms of
     * a point on the origin element that is connected to a point on the overlay element. For example,
     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
     * of the overlay.
     * @deprecated Use `FlexibleConnectedPositionStrategy` instead.
     * \@breaking-change 8.0.0
     */


    class ConnectedPositionStrategy {
      /**
       * @param {?} originPos
       * @param {?} overlayPos
       * @param {?} connectedTo
       * @param {?} viewportRuler
       * @param {?} document
       * @param {?} platform
       * @param {?} overlayContainer
       */
      constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {
        /**
         * Ordered list of preferred positions, from most to least desirable.
         */
        this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain
        // the extra logic, we create an instance of the positioning strategy that has some
        // defaults that make it behave as the old position strategy and to which we'll
        // proxy all of the API calls.

        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);
        this.withFallbackPosition(originPos, overlayPos);
      }
      /**
       * Whether the we're dealing with an RTL context
       * @return {?}
       */


      get _isRtl() {
        return this._overlayRef.getDirection() === 'rtl';
      }
      /**
       * Emits an event when the connection point changes.
       * @return {?}
       */


      get onPositionChange() {
        return this._positionStrategy.positionChanges;
      }
      /**
       * Ordered list of preferred positions, from most to least desirable.
       * @return {?}
       */


      get positions() {
        return this._preferredPositions;
      }
      /**
       * Attach this position strategy to an overlay.
       * @param {?} overlayRef
       * @return {?}
       */


      attach(overlayRef) {
        this._overlayRef = overlayRef;

        this._positionStrategy.attach(overlayRef);

        if (this._direction) {
          overlayRef.setDirection(this._direction);
          this._direction = null;
        }
      }
      /**
       * Disposes all resources used by the position strategy.
       * @return {?}
       */


      dispose() {
        this._positionStrategy.dispose();
      }
      /**
       * \@docs-private
       * @return {?}
       */


      detach() {
        this._positionStrategy.detach();
      }
      /**
       * Updates the position of the overlay element, using whichever preferred position relative
       * to the origin fits on-screen.
       * \@docs-private
       * @return {?}
       */


      apply() {
        this._positionStrategy.apply();
      }
      /**
       * Re-positions the overlay element with the trigger in its last calculated position,
       * even if a position higher in the "preferred positions" list would now fit. This
       * allows one to re-align the panel without changing the orientation of the panel.
       * @return {?}
       */


      recalculateLastPosition() {
        this._positionStrategy.reapplyLastPosition();
      }
      /**
       * Sets the list of Scrollable containers that host the origin element so that
       * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
       * Scrollable must be an ancestor element of the strategy's origin element.
       * @param {?} scrollables
       * @return {?}
       */


      withScrollableContainers(scrollables) {
        this._positionStrategy.withScrollableContainers(scrollables);
      }
      /**
       * Adds a new preferred fallback position.
       * @template THIS
       * @this {THIS}
       * @param {?} originPos
       * @param {?} overlayPos
       * @param {?=} offsetX
       * @param {?=} offsetY
       * @return {THIS}
       */


      withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {
        /** @type {?} */
        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);

        /** @type {?} */
        this._preferredPositions.push(position);

        /** @type {?} */
        this._positionStrategy.withPositions(
        /** @type {?} */
        this._preferredPositions);

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the layout direction so the overlay's position can be adjusted to match.
       * @template THIS
       * @this {THIS}
       * @param {?} dir New layout direction.
       * @return {THIS}
       */


      withDirection(dir) {
        // Since the direction might be declared before the strategy is attached,
        // we save the value in a temporary property and we'll transfer it to the
        // overlay ref on attachment.
        if (
        /** @type {?} */
        this._overlayRef) {
          /** @type {?} */
          this._overlayRef.setDirection(dir);
        } else {
          /** @type {?} */
          this._direction = dir;
        }

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets an offset for the overlay's connection point on the x-axis
       * @template THIS
       * @this {THIS}
       * @param {?} offset New offset in the X axis.
       * @return {THIS}
       */


      withOffsetX(offset) {
        /** @type {?} */
        this._positionStrategy.withDefaultOffsetX(offset);

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets an offset for the overlay's connection point on the y-axis
       * @template THIS
       * @this {THIS}
       * @param {?} offset New offset in the Y axis.
       * @return {THIS}
       */


      withOffsetY(offset) {
        /** @type {?} */
        this._positionStrategy.withDefaultOffsetY(offset);

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets whether the overlay's position should be locked in after it is positioned
       * initially. When an overlay is locked in, it won't attempt to reposition itself
       * when the position is re-applied (e.g. when the user scrolls away).
       * @template THIS
       * @this {THIS}
       * @param {?} isLocked Whether the overlay should locked in.
       * @return {THIS}
       */


      withLockedPosition(isLocked) {
        /** @type {?} */
        this._positionStrategy.withLockedPosition(isLocked);

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Overwrites the current set of positions with an array of new ones.
       * @template THIS
       * @this {THIS}
       * @param {?} positions Position pairs to be set on the strategy.
       * @return {THIS}
       */


      withPositions(positions) {
        /** @type {?} */
        this._preferredPositions = positions.slice();

        /** @type {?} */
        this._positionStrategy.withPositions(
        /** @type {?} */
        this._preferredPositions);

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the origin element, relative to which to position the overlay.
       * @template THIS
       * @this {THIS}
       * @param {?} origin Reference to the new origin element.
       * @return {THIS}
       */


      setOrigin(origin) {
        /** @type {?} */
        this._positionStrategy.setOrigin(origin);

        return (
          /** @type {?} */
          this
        );
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Class to be added to the overlay pane wrapper.
     * @type {?}
     */


    const wrapperClass = 'cdk-global-overlay-wrapper';
    /**
     * A strategy for positioning overlays. Using this strategy, an overlay is given an
     * explicit position relative to the browser's viewport. We use flexbox, instead of
     * transforms, in order to avoid issues with subpixel rendering which can cause the
     * element to become blurry.
     */

    class GlobalPositionStrategy {
      constructor() {
        this._cssPosition = 'static';
        this._topOffset = '';
        this._bottomOffset = '';
        this._leftOffset = '';
        this._rightOffset = '';
        this._alignItems = '';
        this._justifyContent = '';
        this._width = '';
        this._height = '';
      }
      /**
       * @param {?} overlayRef
       * @return {?}
       */


      attach(overlayRef) {
        /** @type {?} */
        const config = overlayRef.getConfig();
        this._overlayRef = overlayRef;

        if (this._width && !config.width) {
          overlayRef.updateSize({
            width: this._width
          });
        }

        if (this._height && !config.height) {
          overlayRef.updateSize({
            height: this._height
          });
        }

        overlayRef.hostElement.classList.add(wrapperClass);
        this._isDisposed = false;
      }
      /**
       * Sets the top position of the overlay. Clears any previously set vertical position.
       * @template THIS
       * @this {THIS}
       * @param {?=} value New top offset.
       * @return {THIS}
       */


      top(value = '') {
        /** @type {?} */
        this._bottomOffset = '';

        /** @type {?} */
        this._topOffset = value;

        /** @type {?} */
        this._alignItems = 'flex-start';
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the left position of the overlay. Clears any previously set horizontal position.
       * @template THIS
       * @this {THIS}
       * @param {?=} value New left offset.
       * @return {THIS}
       */


      left(value = '') {
        /** @type {?} */
        this._rightOffset = '';

        /** @type {?} */
        this._leftOffset = value;

        /** @type {?} */
        this._justifyContent = 'flex-start';
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the bottom position of the overlay. Clears any previously set vertical position.
       * @template THIS
       * @this {THIS}
       * @param {?=} value New bottom offset.
       * @return {THIS}
       */


      bottom(value = '') {
        /** @type {?} */
        this._topOffset = '';

        /** @type {?} */
        this._bottomOffset = value;

        /** @type {?} */
        this._alignItems = 'flex-end';
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the right position of the overlay. Clears any previously set horizontal position.
       * @template THIS
       * @this {THIS}
       * @param {?=} value New right offset.
       * @return {THIS}
       */


      right(value = '') {
        /** @type {?} */
        this._leftOffset = '';

        /** @type {?} */
        this._rightOffset = value;

        /** @type {?} */
        this._justifyContent = 'flex-end';
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the overlay width and clears any previously set width.
       * @deprecated Pass the `width` through the `OverlayConfig`.
       * \@breaking-change 8.0.0
       * @template THIS
       * @this {THIS}
       * @param {?=} value New width for the overlay
       * @return {THIS}
       */


      width(value = '') {
        if (
        /** @type {?} */
        this._overlayRef) {
          /** @type {?} */
          this._overlayRef.updateSize({
            width: value
          });
        } else {
          /** @type {?} */
          this._width = value;
        }

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Sets the overlay height and clears any previously set height.
       * @deprecated Pass the `height` through the `OverlayConfig`.
       * \@breaking-change 8.0.0
       * @template THIS
       * @this {THIS}
       * @param {?=} value New height for the overlay
       * @return {THIS}
       */


      height(value = '') {
        if (
        /** @type {?} */
        this._overlayRef) {
          /** @type {?} */
          this._overlayRef.updateSize({
            height: value
          });
        } else {
          /** @type {?} */
          this._height = value;
        }

        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Centers the overlay horizontally with an optional offset.
       * Clears any previously set horizontal position.
       *
       * @template THIS
       * @this {THIS}
       * @param {?=} offset Overlay offset from the horizontal center.
       * @return {THIS}
       */


      centerHorizontally(offset = '') {
        /** @type {?} */
        this.left(offset);

        /** @type {?} */
        this._justifyContent = 'center';
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Centers the overlay vertically with an optional offset.
       * Clears any previously set vertical position.
       *
       * @template THIS
       * @this {THIS}
       * @param {?=} offset Overlay offset from the vertical center.
       * @return {THIS}
       */


      centerVertically(offset = '') {
        /** @type {?} */
        this.top(offset);

        /** @type {?} */
        this._alignItems = 'center';
        return (
          /** @type {?} */
          this
        );
      }
      /**
       * Apply the position to the element.
       * \@docs-private
       * @return {?}
       */


      apply() {
        // Since the overlay ref applies the strategy asynchronously, it could
        // have been disposed before it ends up being applied. If that is the
        // case, we shouldn't do anything.
        if (!this._overlayRef || !this._overlayRef.hasAttached()) {
          return;
        }
        /** @type {?} */


        const styles = this._overlayRef.overlayElement.style;
        /** @type {?} */

        const parentStyles = this._overlayRef.hostElement.style;
        /** @type {?} */

        const config = this._overlayRef.getConfig();

        styles.position = this._cssPosition;
        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;
        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;
        styles.marginBottom = this._bottomOffset;
        styles.marginRight = this._rightOffset;

        if (config.width === '100%') {
          parentStyles.justifyContent = 'flex-start';
        } else if (this._justifyContent === 'center') {
          parentStyles.justifyContent = 'center';
        } else if (this._overlayRef.getConfig().direction === 'rtl') {
          // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we
          // don't want that because our positioning is explicitly `left` and `right`, hence
          // why we do another inversion to ensure that the overlay stays in the same position.
          // TODO: reconsider this if we add `start` and `end` methods.
          if (this._justifyContent === 'flex-start') {
            parentStyles.justifyContent = 'flex-end';
          } else if (this._justifyContent === 'flex-end') {
            parentStyles.justifyContent = 'flex-start';
          }
        } else {
          parentStyles.justifyContent = this._justifyContent;
        }

        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;
      }
      /**
       * Cleans up the DOM changes from the position strategy.
       * \@docs-private
       * @return {?}
       */


      dispose() {
        if (this._isDisposed || !this._overlayRef) {
          return;
        }
        /** @type {?} */


        const styles = this._overlayRef.overlayElement.style;
        /** @type {?} */

        const parent = this._overlayRef.hostElement;
        /** @type {?} */

        const parentStyles = parent.style;
        parent.classList.remove(wrapperClass);
        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';
        this._overlayRef =
        /** @type {?} */
        null;
        this._isDisposed = true;
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Builder for overlay position strategy.
     */


    class OverlayPositionBuilder {
      /**
       * @param {?} _viewportRuler
       * @param {?} _document
       * @param {?} _platform
       * @param {?} _overlayContainer
       */
      constructor(_viewportRuler, _document, _platform, _overlayContainer) {
        this._viewportRuler = _viewportRuler;
        this._document = _document;
        this._platform = _platform;
        this._overlayContainer = _overlayContainer;
      }
      /**
       * Creates a global position strategy.
       * @return {?}
       */


      global() {
        return new GlobalPositionStrategy();
      }
      /**
       * Creates a relative position strategy.
       * @deprecated Use `flexibleConnectedTo` instead.
       * \@breaking-change 8.0.0
       * @param {?} elementRef
       * @param {?} originPos
       * @param {?} overlayPos
       * @return {?}
       */


      connectedTo(elementRef, originPos, overlayPos) {
        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);
      }
      /**
       * Creates a flexible position strategy.
       * @param {?} origin Origin relative to which to position the overlay.
       * @return {?}
       */


      flexibleConnectedTo(origin) {
        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
      }

    }

    OverlayPositionBuilder.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    OverlayPositionBuilder.ctorParameters = () => [{
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
    }, {
      type: OverlayContainer
    }];
    /** @nocollapse */


    OverlayPositionBuilder.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({
      factory: function OverlayPositionBuilder_Factory() {
        return new OverlayPositionBuilder(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(OverlayContainer));
      },
      token: OverlayPositionBuilder,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Next overlay unique ID.
     * @type {?}
     */

    let nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver
    // it needs is different based on where OverlayModule is imported.

    /**
     * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
     * used as a low-level building block for other components. Dialogs, tooltips, menus,
     * selects, etc. can all be built using overlays. The service should primarily be used by authors
     * of re-usable components rather than developers building end-user applications.
     *
     * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
     */

    class Overlay {
      /**
       * @param {?} scrollStrategies
       * @param {?} _overlayContainer
       * @param {?} _componentFactoryResolver
       * @param {?} _positionBuilder
       * @param {?} _keyboardDispatcher
       * @param {?} _injector
       * @param {?} _ngZone
       * @param {?} _document
       * @param {?} _directionality
       * @param {?=} _location
       */
      constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {
        this.scrollStrategies = scrollStrategies;
        this._overlayContainer = _overlayContainer;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._positionBuilder = _positionBuilder;
        this._keyboardDispatcher = _keyboardDispatcher;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this._document = _document;
        this._directionality = _directionality;
        this._location = _location;
      }
      /**
       * Creates an overlay.
       * @param {?=} config Configuration applied to the overlay.
       * @return {?} Reference to the created overlay.
       */


      create(config) {
        /** @type {?} */
        const host = this._createHostElement();
        /** @type {?} */


        const pane = this._createPaneElement(host);
        /** @type {?} */


        const portalOutlet = this._createPortalOutlet(pane);
        /** @type {?} */


        const overlayConfig = new OverlayConfig(config);
        overlayConfig.direction = overlayConfig.direction || this._directionality.value;
        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);
      }
      /**
       * Gets a position builder that can be used, via fluent API,
       * to construct and configure a position strategy.
       * @return {?} An overlay position builder.
       */


      position() {
        return this._positionBuilder;
      }
      /**
       * Creates the DOM element for an overlay and appends it to the overlay container.
       * @private
       * @param {?} host
       * @return {?} Newly-created pane element
       */


      _createPaneElement(host) {
        /** @type {?} */
        const pane = this._document.createElement('div');

        pane.id = "cdk-overlay-".concat(nextUniqueId++);
        pane.classList.add('cdk-overlay-pane');
        host.appendChild(pane);
        return pane;
      }
      /**
       * Creates the host element that wraps around an overlay
       * and can be used for advanced positioning.
       * @private
       * @return {?} Newly-create host element.
       */


      _createHostElement() {
        /** @type {?} */
        const host = this._document.createElement('div');

        this._overlayContainer.getContainerElement().appendChild(host);

        return host;
      }
      /**
       * Create a DomPortalOutlet into which the overlay content can be loaded.
       * @private
       * @param {?} pane The DOM element to turn into a portal outlet.
       * @return {?} A portal outlet for the given DOM element.
       */


      _createPortalOutlet(pane) {
        // We have to resolve the ApplicationRef later in order to allow people
        // to use overlay-based providers during app initialization.
        if (!this._appRef) {
          this._appRef = this._injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ApplicationRef"]);
        }

        return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["DomPortalOutlet"](pane, this._componentFactoryResolver, this._appRef, this._injector);
      }

    }

    Overlay.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"]
    }];
    /** @nocollapse */

    Overlay.ctorParameters = () => [{
      type: ScrollStrategyOptions
    }, {
      type: OverlayContainer
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ComponentFactoryResolver"]
    }, {
      type: OverlayPositionBuilder
    }, {
      type: OverlayKeyboardDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injector"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"]
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"],
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Default set of positions for the overlay. Follows the behavior of a dropdown.
     * @type {?}
     */


    const defaultPositionList = [{
      originX: 'start',
      originY: 'bottom',
      overlayX: 'start',
      overlayY: 'top'
    }, {
      originX: 'start',
      originY: 'top',
      overlayX: 'start',
      overlayY: 'bottom'
    }, {
      originX: 'end',
      originY: 'top',
      overlayX: 'end',
      overlayY: 'bottom'
    }, {
      originX: 'end',
      originY: 'bottom',
      overlayX: 'end',
      overlayY: 'top'
    }];
    /**
     * Injection token that determines the scroll handling while the connected overlay is open.
     * @type {?}
     */

    const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["InjectionToken"]('cdk-connected-overlay-scroll-strategy');
    /**
     * Directive applied to an element to make it usable as an origin for an Overlay using a
     * ConnectedPositionStrategy.
     */

    class CdkOverlayOrigin {
      /**
       * @param {?} elementRef
       */
      constructor(elementRef) {
        this.elementRef = elementRef;
      }

    }

    CdkOverlayOrigin.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
      args: [{
        selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
        exportAs: 'cdkOverlayOrigin'
      }]
    }];
    /** @nocollapse */

    CdkOverlayOrigin.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"]
    }];
    /**
     * Directive to facilitate declarative creation of an
     * Overlay using a FlexibleConnectedPositionStrategy.
     */


    class CdkConnectedOverlay {
      // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.

      /**
       * @param {?} _overlay
       * @param {?} templateRef
       * @param {?} viewContainerRef
       * @param {?} scrollStrategyFactory
       * @param {?} _dir
       */
      constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
        this._overlay = _overlay;
        this._dir = _dir;
        this._hasBackdrop = false;
        this._lockPosition = false;
        this._growAfterOpen = false;
        this._flexibleDimensions = false;
        this._push = false;
        this._backdropSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
        /**
         * Margin between the overlay and the viewport edges.
         */

        this.viewportMargin = 0;
        /**
         * Whether the overlay is open.
         */

        this.open = false;
        /**
         * Event emitted when the backdrop is clicked.
         */

        this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /**
         * Event emitted when the position has changed.
         */

        this.positionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /**
         * Event emitted when the overlay has been attached.
         */

        this.attach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /**
         * Event emitted when the overlay has been detached.
         */

        this.detach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        /**
         * Emits when there are keyboard events that are targeted at the overlay.
         */

        this.overlayKeydown = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
        this._templatePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](templateRef, viewContainerRef);
        this._scrollStrategyFactory = scrollStrategyFactory;
        this.scrollStrategy = this._scrollStrategyFactory();
      }
      /**
       * The offset in pixels for the overlay connection point on the x-axis
       * @return {?}
       */


      get offsetX() {
        return this._offsetX;
      }
      /**
       * @param {?} offsetX
       * @return {?}
       */


      set offsetX(offsetX) {
        this._offsetX = offsetX;

        if (this._position) {
          this._updatePositionStrategy(this._position);
        }
      }
      /**
       * The offset in pixels for the overlay connection point on the y-axis
       * @return {?}
       */


      get offsetY() {
        return this._offsetY;
      }
      /**
       * @param {?} offsetY
       * @return {?}
       */


      set offsetY(offsetY) {
        this._offsetY = offsetY;

        if (this._position) {
          this._updatePositionStrategy(this._position);
        }
      }
      /**
       * Whether or not the overlay should attach a backdrop.
       * @return {?}
       */


      get hasBackdrop() {
        return this._hasBackdrop;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set hasBackdrop(value) {
        this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
      }
      /**
       * Whether or not the overlay should be locked when scrolling.
       * @return {?}
       */


      get lockPosition() {
        return this._lockPosition;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set lockPosition(value) {
        this._lockPosition = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
      }
      /**
       * Whether the overlay's width and height can be constrained to fit within the viewport.
       * @return {?}
       */


      get flexibleDimensions() {
        return this._flexibleDimensions;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set flexibleDimensions(value) {
        this._flexibleDimensions = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
      }
      /**
       * Whether the overlay can grow after the initial open when flexible positioning is turned on.
       * @return {?}
       */


      get growAfterOpen() {
        return this._growAfterOpen;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set growAfterOpen(value) {
        this._growAfterOpen = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
      }
      /**
       * Whether the overlay can be pushed on-screen if none of the provided positions fit.
       * @return {?}
       */


      get push() {
        return this._push;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set push(value) {
        this._push = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
      }
      /**
       * The associated overlay reference.
       * @return {?}
       */


      get overlayRef() {
        return this._overlayRef;
      }
      /**
       * The element's layout direction.
       * @return {?}
       */


      get dir() {
        return this._dir ? this._dir.value : 'ltr';
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        if (this._overlayRef) {
          this._overlayRef.dispose();
        }

        this._backdropSubscription.unsubscribe();
      }
      /**
       * @param {?} changes
       * @return {?}
       */


      ngOnChanges(changes) {
        if (this._position) {
          this._updatePositionStrategy(this._position);

          this._overlayRef.updateSize({
            width: this.width,
            minWidth: this.minWidth,
            height: this.height,
            minHeight: this.minHeight
          });

          if (changes['origin'] && this.open) {
            this._position.apply();
          }
        }

        if (changes['open']) {
          this.open ? this._attachOverlay() : this._detachOverlay();
        }
      }
      /**
       * Creates an overlay
       * @private
       * @return {?}
       */


      _createOverlay() {
        if (!this.positions || !this.positions.length) {
          this.positions = defaultPositionList;
        }

        this._overlayRef = this._overlay.create(this._buildConfig());

        this._overlayRef.keydownEvents().subscribe(
        /**
        * @param {?} event
        * @return {?}
        */
        event => {
          this.overlayKeydown.next(event);

          if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ESCAPE"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["hasModifierKey"])(event)) {
            event.preventDefault();

            this._detachOverlay();
          }
        });
      }
      /**
       * Builds the overlay config based on the directive's inputs
       * @private
       * @return {?}
       */


      _buildConfig() {
        /** @type {?} */
        const positionStrategy = this._position = this._createPositionStrategy();
        /** @type {?} */


        const overlayConfig = new OverlayConfig({
          direction: this._dir,
          positionStrategy,
          scrollStrategy: this.scrollStrategy,
          hasBackdrop: this.hasBackdrop
        });

        if (this.width || this.width === 0) {
          overlayConfig.width = this.width;
        }

        if (this.height || this.height === 0) {
          overlayConfig.height = this.height;
        }

        if (this.minWidth || this.minWidth === 0) {
          overlayConfig.minWidth = this.minWidth;
        }

        if (this.minHeight || this.minHeight === 0) {
          overlayConfig.minHeight = this.minHeight;
        }

        if (this.backdropClass) {
          overlayConfig.backdropClass = this.backdropClass;
        }

        if (this.panelClass) {
          overlayConfig.panelClass = this.panelClass;
        }

        return overlayConfig;
      }
      /**
       * Updates the state of a position strategy, based on the values of the directive inputs.
       * @private
       * @param {?} positionStrategy
       * @return {?}
       */


      _updatePositionStrategy(positionStrategy) {
        /** @type {?} */
        const positions = this.positions.map(
        /**
        * @param {?} currentPosition
        * @return {?}
        */
        currentPosition => ({
          originX: currentPosition.originX,
          originY: currentPosition.originY,
          overlayX: currentPosition.overlayX,
          overlayY: currentPosition.overlayY,
          offsetX: currentPosition.offsetX || this.offsetX,
          offsetY: currentPosition.offsetY || this.offsetY,
          panelClass: currentPosition.panelClass || undefined
        }));
        return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition);
      }
      /**
       * Returns the position strategy of the overlay to be set on the overlay config
       * @private
       * @return {?}
       */


      _createPositionStrategy() {
        /** @type {?} */
        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);

        this._updatePositionStrategy(strategy);

        strategy.positionChanges.subscribe(
        /**
        * @param {?} p
        * @return {?}
        */
        p => this.positionChange.emit(p));
        return strategy;
      }
      /**
       * Attaches the overlay and subscribes to backdrop clicks if backdrop exists
       * @private
       * @return {?}
       */


      _attachOverlay() {
        if (!this._overlayRef) {
          this._createOverlay();
        } else {
          // Update the overlay size, in case the directive's inputs have changed
          this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
        }

        if (!this._overlayRef.hasAttached()) {
          this._overlayRef.attach(this._templatePortal);

          this.attach.emit();
        }

        if (this.hasBackdrop) {
          this._backdropSubscription = this._overlayRef.backdropClick().subscribe(
          /**
          * @param {?} event
          * @return {?}
          */
          event => {
            this.backdropClick.emit(event);
          });
        } else {
          this._backdropSubscription.unsubscribe();
        }
      }
      /**
       * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists
       * @private
       * @return {?}
       */


      _detachOverlay() {
        if (this._overlayRef) {
          this._overlayRef.detach();

          this.detach.emit();
        }

        this._backdropSubscription.unsubscribe();
      }

    }

    CdkConnectedOverlay.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"],
      args: [{
        selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
        exportAs: 'cdkConnectedOverlay'
      }]
    }];
    /** @nocollapse */

    CdkConnectedOverlay.ctorParameters = () => [{
      type: Overlay
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]
      }]
    }];

    CdkConnectedOverlay.propDecorators = {
      origin: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayOrigin']
      }],
      positions: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayPositions']
      }],
      offsetX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayOffsetX']
      }],
      offsetY: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayOffsetY']
      }],
      width: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayWidth']
      }],
      height: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayHeight']
      }],
      minWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayMinWidth']
      }],
      minHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayMinHeight']
      }],
      backdropClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayBackdropClass']
      }],
      panelClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayPanelClass']
      }],
      viewportMargin: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayViewportMargin']
      }],
      scrollStrategy: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayScrollStrategy']
      }],
      open: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayOpen']
      }],
      hasBackdrop: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayHasBackdrop']
      }],
      lockPosition: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayLockPosition']
      }],
      flexibleDimensions: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayFlexibleDimensions']
      }],
      growAfterOpen: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayGrowAfterOpen']
      }],
      push: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
        args: ['cdkConnectedOverlayPush']
      }],
      backdropClick: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
      }],
      positionChange: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
      }],
      attach: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
      }],
      detach: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
      }],
      overlayKeydown: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]
      }]
    };
    /**
     * \@docs-private
     * @param {?} overlay
     * @return {?}
     */

    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
      return (
        /**
        * @return {?}
        */
        () => overlay.scrollStrategies.reposition()
      );
    }
    /**
     * \@docs-private
     * @type {?}
     */


    const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
      provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
      deps: [Overlay],
      useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class OverlayModule {}

    OverlayModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"],
      args: [{
        imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["PortalModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollingModule"]],
        exports: [CdkConnectedOverlay, CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["ScrollingModule"]],
        declarations: [CdkConnectedOverlay, CdkOverlayOrigin],
        providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]
      }]
    }];
    /**
     * @deprecated Use `OverlayModule` instead.
     * \@breaking-change 8.0.0
     * \@docs-private
     * @type {?}
     */

    const OVERLAY_PROVIDERS = [Overlay, OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__["VIEWPORT_RULER_PROVIDER"], OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Alternative to OverlayContainer that supports correct displaying of overlay elements in
     * Fullscreen mode
     * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
     *
     * Should be provided in the root component.
     */

    class FullscreenOverlayContainer extends OverlayContainer {
      /**
       * @param {?} _document
       */
      constructor(_document) {
        super(_document);
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        super.ngOnDestroy();

        if (this._fullScreenEventName && this._fullScreenListener) {
          this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
        }
      }
      /**
       * @protected
       * @return {?}
       */


      _createContainer() {
        super._createContainer();

        this._adjustParentForFullscreenChange();

        this._addFullscreenChangeListener(
        /**
        * @return {?}
        */
        () => this._adjustParentForFullscreenChange());
      }
      /**
       * @private
       * @return {?}
       */


      _adjustParentForFullscreenChange() {
        if (!this._containerElement) {
          return;
        }
        /** @type {?} */


        const fullscreenElement = this.getFullscreenElement();
        /** @type {?} */

        const parent = fullscreenElement || this._document.body;
        parent.appendChild(this._containerElement);
      }
      /**
       * @private
       * @param {?} fn
       * @return {?}
       */


      _addFullscreenChangeListener(fn) {
        /** @type {?} */
        const eventName = this._getEventName();

        if (eventName) {
          if (this._fullScreenListener) {
            this._document.removeEventListener(eventName, this._fullScreenListener);
          }

          this._document.addEventListener(eventName, fn);

          this._fullScreenListener = fn;
        }
      }
      /**
       * @private
       * @return {?}
       */


      _getEventName() {
        if (!this._fullScreenEventName) {
          /** @type {?} */
          const _document =
          /** @type {?} */
          this._document;

          if (_document.fullscreenEnabled) {
            this._fullScreenEventName = 'fullscreenchange';
          } else if (_document.webkitFullscreenEnabled) {
            this._fullScreenEventName = 'webkitfullscreenchange';
          } else if (_document.mozFullScreenEnabled) {
            this._fullScreenEventName = 'mozfullscreenchange';
          } else if (_document.msFullscreenEnabled) {
            this._fullScreenEventName = 'MSFullscreenChange';
          }
        }

        return this._fullScreenEventName;
      }
      /**
       * When the page is put into fullscreen mode, a specific element is specified.
       * Only that element and its children are visible when in fullscreen mode.
       * @return {?}
       */


      getFullscreenElement() {
        /** @type {?} */
        const _document =
        /** @type {?} */
        this._document;
        return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;
      }

    }

    FullscreenOverlayContainer.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    FullscreenOverlayContainer.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]]
      }]
    }];
    /** @nocollapse */


    FullscreenOverlayContainer.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"])({
      factory: function FullscreenOverlayContainer_Factory() {
        return new FullscreenOverlayContainer(Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]));
      },
      token: FullscreenOverlayContainer,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=overlay.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/cdk/esm2015/platform.js":
  /*!*******************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/platform.js ***!
    \*******************************************************/

  /*! exports provided: Platform, PlatformModule, getSupportedInputTypes, supportsPassiveEventListeners, normalizePassiveListenerOptions, supportsScrollBehavior, getRtlScrollAxisType, RtlScrollAxisType, _supportsShadowDom */

  /***/
  function node_modulesAngularCdkEsm2015PlatformJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Platform", function () {
      return Platform;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PlatformModule", function () {
      return PlatformModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getSupportedInputTypes", function () {
      return getSupportedInputTypes;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "supportsPassiveEventListeners", function () {
      return supportsPassiveEventListeners;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "normalizePassiveListenerOptions", function () {
      return normalizePassiveListenerOptions;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "supportsScrollBehavior", function () {
      return supportsScrollBehavior;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getRtlScrollAxisType", function () {
      return getRtlScrollAxisType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RtlScrollAxisType", function () {
      return RtlScrollAxisType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "_supportsShadowDom", function () {
      return _supportsShadowDom;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Whether the current platform supports the V8 Break Iterator. The V8 check
    // is necessary to detect all Blink based browsers.

    /** @type {?} */


    let hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
    // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
    // the consumer is providing a polyfilled `Map`. See:
    // https://github.com/Microsoft/ChakraCore/issues/3189
    // https://github.com/angular/components/issues/15687

    try {
      hasV8BreakIterator = typeof Intl !== 'undefined' &&
      /** @type {?} */
      Intl.v8BreakIterator;
    } catch (_a) {
      hasV8BreakIterator = false;
    }
    /**
     * Service to detect the current platform by comparing the userAgent strings and
     * checking browser-specific global properties.
     */


    class Platform {
      /**
       * \@breaking-change 8.0.0 remove optional decorator
       * @param {?=} _platformId
       */
      constructor(_platformId) {
        this._platformId = _platformId;
        /**
         * Whether the Angular application is being rendered in the browser.
         * We want to use the Angular platform check because if the Document is shimmed
         * without the navigator, the following checks will fail. This is preferred because
         * sometimes the Document may be shimmed without the user's knowledge or intention
         */

        this.isBrowser = this._platformId ? Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["isPlatformBrowser"])(this._platformId) : typeof document === 'object' && !!document;
        /**
         * Whether the current browser is Microsoft Edge.
         */

        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
        /**
         * Whether the current rendering engine is Microsoft Trident.
         */

        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
        /**
         * Whether the current rendering engine is Blink.
         */
        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.

        this.BLINK = this.isBrowser && !!(
        /** @type {?} */
        window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT;
        /**
         * Whether the current rendering engine is WebKit.
         */
        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
        // ensure that Webkit runs standalone and is not used as another engine's base.

        this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
        /**
         * Whether the current platform is Apple iOS.
         */

        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);
        /**
         * Whether the current browser is Firefox.
         */
        // It's difficult to detect the plain Gecko engine, because most of the browsers identify
        // them self as Gecko-like browsers and modify the userAgent's according to that.
        // Since we only cover one explicit Firefox case, we can simply check for Firefox
        // instead of having an unstable check for Gecko.

        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
        /**
         * Whether the current platform is Android.
         */
        // Trident on mobile adds the android platform to the userAgent to trick detections.

        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
        /**
         * Whether the current browser is Safari.
         */
        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
        // Safari browser should also use Webkit as its layout engine.

        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
      }

    }

    Platform.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    Platform.ctorParameters = () => [{
      type: Object,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]]
      }]
    }];
    /** @nocollapse */


    Platform.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
      factory: function Platform_Factory() {
        return new Platform(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"], 8));
      },
      token: Platform,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class PlatformModule {}

    PlatformModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{}]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Cached result Set of input types support by the current browser.
     * @type {?}
     */

    let supportedInputTypes;
    /**
     * Types of `<input>` that *might* be supported.
     * @type {?}
     */

    const candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
    // first changing it to something else:
    // The specified value "" does not conform to the required format.
    // The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
    'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
    /**
     * @return {?} The input types supported by this browser.
     */

    function getSupportedInputTypes() {
      // Result is cached.
      if (supportedInputTypes) {
        return supportedInputTypes;
      } // We can't check if an input type is not supported until we're on the browser, so say that
      // everything is supported when not on the browser. We don't use `Platform` here since it's
      // just a helper function and can't inject it.


      if (typeof document !== 'object' || !document) {
        supportedInputTypes = new Set(candidateInputTypes);
        return supportedInputTypes;
      }
      /** @type {?} */


      let featureTestInput = document.createElement('input');
      supportedInputTypes = new Set(candidateInputTypes.filter(
      /**
      * @param {?} value
      * @return {?}
      */
      value => {
        featureTestInput.setAttribute('type', value);
        return featureTestInput.type === value;
      }));
      return supportedInputTypes;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Cached result of whether the user's browser supports passive event listeners.
     * @type {?}
     */


    let supportsPassiveEvents;
    /**
     * Checks whether the user's browser supports passive event listeners.
     * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
     * @return {?}
     */

    function supportsPassiveEventListeners() {
      if (supportsPassiveEvents == null && typeof window !== 'undefined') {
        try {
          window.addEventListener('test',
          /** @type {?} */
          null, Object.defineProperty({}, 'passive', {
            get:
            /**
            * @return {?}
            */
            () => supportsPassiveEvents = true
          }));
        } finally {
          supportsPassiveEvents = supportsPassiveEvents || false;
        }
      }

      return supportsPassiveEvents;
    }
    /**
     * Normalizes an `AddEventListener` object to something that can be passed
     * to `addEventListener` on any browser, no matter whether it supports the
     * `options` parameter.
     * @param {?} options Object to be normalized.
     * @return {?}
     */


    function normalizePassiveListenerOptions(options) {
      return supportsPassiveEventListeners() ? options : !!options.capture;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {number} */


    const RtlScrollAxisType = {
      /**
       * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled
       * all the way right.
       */
      NORMAL: 0,

      /**
       * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
       * all the way right.
       */
      NEGATED: 1,

      /**
       * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled
       * all the way right.
       */
      INVERTED: 2
    };
    RtlScrollAxisType[RtlScrollAxisType.NORMAL] = 'NORMAL';
    RtlScrollAxisType[RtlScrollAxisType.NEGATED] = 'NEGATED';
    RtlScrollAxisType[RtlScrollAxisType.INVERTED] = 'INVERTED';
    /**
     * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.
     * @type {?}
     */

    let rtlScrollAxisType;
    /**
     * Check whether the browser supports scroll behaviors.
     * @return {?}
     */

    function supportsScrollBehavior() {
      return !!(typeof document == 'object' && 'scrollBehavior' in
      /** @type {?} */
      document.documentElement.style);
    }
    /**
     * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
     * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
     * @return {?}
     */


    function getRtlScrollAxisType() {
      // We can't check unless we're on the browser. Just assume 'normal' if we're not.
      if (typeof document !== 'object' || !document) {
        return RtlScrollAxisType.NORMAL;
      }

      if (!rtlScrollAxisType) {
        // Create a 1px wide scrolling container and a 2px wide content element.

        /** @type {?} */
        const scrollContainer = document.createElement('div');
        /** @type {?} */

        const containerStyle = scrollContainer.style;
        scrollContainer.dir = 'rtl';
        containerStyle.height = '1px';
        containerStyle.width = '1px';
        containerStyle.overflow = 'auto';
        containerStyle.visibility = 'hidden';
        containerStyle.pointerEvents = 'none';
        containerStyle.position = 'absolute';
        /** @type {?} */

        const content = document.createElement('div');
        /** @type {?} */

        const contentStyle = content.style;
        contentStyle.width = '2px';
        contentStyle.height = '1px';
        scrollContainer.appendChild(content);
        document.body.appendChild(scrollContainer);
        rtlScrollAxisType = RtlScrollAxisType.NORMAL; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
        // dealing with one of the other two types of browsers.

        if (scrollContainer.scrollLeft === 0) {
          // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
          // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
          // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
          // return 0 when we read it again.
          scrollContainer.scrollLeft = 1;
          rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;
        }

        /** @type {?} */
        scrollContainer.parentNode.removeChild(scrollContainer);
      }

      return rtlScrollAxisType;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */


    let shadowDomIsSupported;
    /**
     * Checks whether the user's browser support Shadow DOM.
     * @return {?}
     */

    function _supportsShadowDom() {
      if (shadowDomIsSupported == null) {
        /** @type {?} */
        const head = typeof document !== 'undefined' ? document.head : null;
        shadowDomIsSupported = !!(head && (
        /** @type {?} */
        head.createShadowRoot || head.attachShadow));
      }

      return shadowDomIsSupported;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=platform.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/cdk/esm2015/portal.js":
  /*!*****************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/portal.js ***!
    \*****************************************************/

  /*! exports provided: Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector */

  /***/
  function node_modulesAngularCdkEsm2015PortalJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Portal", function () {
      return Portal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ComponentPortal", function () {
      return ComponentPortal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TemplatePortal", function () {
      return TemplatePortal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BasePortalOutlet", function () {
      return BasePortalOutlet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BasePortalHost", function () {
      return BasePortalHost;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DomPortalOutlet", function () {
      return DomPortalOutlet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DomPortalHost", function () {
      return DomPortalHost;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkPortal", function () {
      return CdkPortal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TemplatePortalDirective", function () {
      return TemplatePortalDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkPortalOutlet", function () {
      return CdkPortalOutlet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PortalHostDirective", function () {
      return PortalHostDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PortalModule", function () {
      return PortalModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PortalInjector", function () {
      return PortalInjector;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Throws an exception when attempting to attach a null portal to a host.
     * \@docs-private
     * @return {?}
     */


    function throwNullPortalError() {
      throw Error('Must provide a portal to attach');
    }
    /**
     * Throws an exception when attempting to attach a portal to a host that is already attached.
     * \@docs-private
     * @return {?}
     */


    function throwPortalAlreadyAttachedError() {
      throw Error('Host already has a portal attached');
    }
    /**
     * Throws an exception when attempting to attach a portal to an already-disposed host.
     * \@docs-private
     * @return {?}
     */


    function throwPortalOutletAlreadyDisposedError() {
      throw Error('This PortalOutlet has already been disposed');
    }
    /**
     * Throws an exception when attempting to attach an unknown portal type.
     * \@docs-private
     * @return {?}
     */


    function throwUnknownPortalTypeError() {
      throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');
    }
    /**
     * Throws an exception when attempting to attach a portal to a null host.
     * \@docs-private
     * @return {?}
     */


    function throwNullPortalOutletError() {
      throw Error('Attempting to attach a portal to a null PortalOutlet');
    }
    /**
     * Throws an exception when attempting to detach a portal that is not attached.
     * \@docs-private
     * @return {?}
     */


    function throwNoPortalAttachedError() {
      throw Error('Attempting to detach a portal that is not attached to a host');
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * A `Portal` is something that you want to render somewhere else.
     * It can be attach to / detached from a `PortalOutlet`.
     * @abstract
     * @template T
     */


    class Portal {
      /**
       * Attach this portal to a host.
       * @param {?} host
       * @return {?}
       */
      attach(host) {
        if (host == null) {
          throwNullPortalOutletError();
        }

        if (host.hasAttached()) {
          throwPortalAlreadyAttachedError();
        }

        this._attachedHost = host;
        return (
          /** @type {?} */
          host.attach(this)
        );
      }
      /**
       * Detach this portal from its host
       * @return {?}
       */


      detach() {
        /** @type {?} */
        let host = this._attachedHost;

        if (host == null) {
          throwNoPortalAttachedError();
        } else {
          this._attachedHost = null;
          host.detach();
        }
      }
      /**
       * Whether this portal is attached to a host.
       * @return {?}
       */


      get isAttached() {
        return this._attachedHost != null;
      }
      /**
       * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
       * the PortalOutlet when it is performing an `attach()` or `detach()`.
       * @param {?} host
       * @return {?}
       */


      setAttachedHost(host) {
        this._attachedHost = host;
      }

    }
    /**
     * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
     * @template T
     */


    class ComponentPortal extends Portal {
      /**
       * @param {?} component
       * @param {?=} viewContainerRef
       * @param {?=} injector
       * @param {?=} componentFactoryResolver
       */
      constructor(component, viewContainerRef, injector, componentFactoryResolver) {
        super();
        this.component = component;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
      }

    }
    /**
     * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
     * @template C
     */


    class TemplatePortal extends Portal {
      /**
       * @param {?} template
       * @param {?} viewContainerRef
       * @param {?=} context
       */
      constructor(template, viewContainerRef, context) {
        super();
        this.templateRef = template;
        this.viewContainerRef = viewContainerRef;
        this.context = context;
      }
      /**
       * @return {?}
       */


      get origin() {
        return this.templateRef.elementRef;
      }
      /**
       * Attach the portal to the provided `PortalOutlet`.
       * When a context is provided it will override the `context` property of the `TemplatePortal`
       * instance.
       * @param {?} host
       * @param {?=} context
       * @return {?}
       */


      attach(host, context = this.context) {
        this.context = context;
        return super.attach(host);
      }
      /**
       * @return {?}
       */


      detach() {
        this.context = undefined;
        return super.detach();
      }

    }
    /**
     * Partial implementation of PortalOutlet that handles attaching
     * ComponentPortal and TemplatePortal.
     * @abstract
     */


    class BasePortalOutlet {
      constructor() {
        /**
         * Whether this host has already been permanently disposed.
         */
        this._isDisposed = false;
      }
      /**
       * Whether this host has an attached portal.
       * @return {?}
       */


      hasAttached() {
        return !!this._attachedPortal;
      }
      /**
       * Attaches a portal.
       * @param {?} portal
       * @return {?}
       */


      attach(portal) {
        if (!portal) {
          throwNullPortalError();
        }

        if (this.hasAttached()) {
          throwPortalAlreadyAttachedError();
        }

        if (this._isDisposed) {
          throwPortalOutletAlreadyDisposedError();
        }

        if (portal instanceof ComponentPortal) {
          this._attachedPortal = portal;
          return this.attachComponentPortal(portal);
        } else if (portal instanceof TemplatePortal) {
          this._attachedPortal = portal;
          return this.attachTemplatePortal(portal);
        }

        throwUnknownPortalTypeError();
      }
      /**
       * Detaches a previously attached portal.
       * @return {?}
       */


      detach() {
        if (this._attachedPortal) {
          this._attachedPortal.setAttachedHost(null);

          this._attachedPortal = null;
        }

        this._invokeDisposeFn();
      }
      /**
       * Permanently dispose of this portal host.
       * @return {?}
       */


      dispose() {
        if (this.hasAttached()) {
          this.detach();
        }

        this._invokeDisposeFn();

        this._isDisposed = true;
      }
      /**
       * \@docs-private
       * @param {?} fn
       * @return {?}
       */


      setDisposeFn(fn) {
        this._disposeFn = fn;
      }
      /**
       * @private
       * @return {?}
       */


      _invokeDisposeFn() {
        if (this._disposeFn) {
          this._disposeFn();

          this._disposeFn = null;
        }
      }

    }
    /**
     * @deprecated Use `BasePortalOutlet` instead.
     * \@breaking-change 9.0.0
     * @abstract
     */


    class BasePortalHost extends BasePortalOutlet {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
     * application context.
     */


    class DomPortalOutlet extends BasePortalOutlet {
      /**
       * @param {?} outletElement
       * @param {?} _componentFactoryResolver
       * @param {?} _appRef
       * @param {?} _defaultInjector
       */
      constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {
        super();
        this.outletElement = outletElement;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._appRef = _appRef;
        this._defaultInjector = _defaultInjector;
      }
      /**
       * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
       * @template T
       * @param {?} portal Portal to be attached
       * @return {?} Reference to the created component.
       */


      attachComponentPortal(portal) {
        /** @type {?} */
        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
        /** @type {?} */

        const componentFactory = resolver.resolveComponentFactory(portal.component);
        /** @type {?} */

        let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point
        // for the component (in terms of Angular's component tree, not rendering).
        // When the ViewContainerRef is missing, we use the factory to create the component directly
        // and then manually attach the view to the application.

        if (portal.viewContainerRef) {
          componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);
          this.setDisposeFn(
          /**
          * @return {?}
          */
          () => componentRef.destroy());
        } else {
          componentRef = componentFactory.create(portal.injector || this._defaultInjector);

          this._appRef.attachView(componentRef.hostView);

          this.setDisposeFn(
          /**
          * @return {?}
          */
          () => {
            this._appRef.detachView(componentRef.hostView);

            componentRef.destroy();
          });
        } // At this point the component has been instantiated, so we move it to the location in the DOM
        // where we want it to be rendered.


        this.outletElement.appendChild(this._getComponentRootNode(componentRef));
        return componentRef;
      }
      /**
       * Attaches a template portal to the DOM as an embedded view.
       * @template C
       * @param {?} portal Portal to be attached.
       * @return {?} Reference to the created embedded view.
       */


      attachTemplatePortal(portal) {
        /** @type {?} */
        let viewContainer = portal.viewContainerRef;
        /** @type {?} */

        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);
        viewRef.detectChanges(); // The method `createEmbeddedView` will add the view as a child of the viewContainer.
        // But for the DomPortalOutlet the view can be added everywhere in the DOM
        // (e.g Overlay Container) To move the view to the specified host element. We just
        // re-append the existing root nodes.

        viewRef.rootNodes.forEach(
        /**
        * @param {?} rootNode
        * @return {?}
        */
        rootNode => this.outletElement.appendChild(rootNode));
        this.setDisposeFn(
        /**
        * @return {?}
        */
        () => {
          /** @type {?} */
          let index = viewContainer.indexOf(viewRef);

          if (index !== -1) {
            viewContainer.remove(index);
          }
        }); // TODO(jelbourn): Return locals from view.

        return viewRef;
      }
      /**
       * Clears out a portal from the DOM.
       * @return {?}
       */


      dispose() {
        super.dispose();

        if (this.outletElement.parentNode != null) {
          this.outletElement.parentNode.removeChild(this.outletElement);
        }
      }
      /**
       * Gets the root HTMLElement for an instantiated component.
       * @private
       * @param {?} componentRef
       * @return {?}
       */


      _getComponentRootNode(componentRef) {
        return (
          /** @type {?} */

          /** @type {?} */
          componentRef.hostView.rootNodes[0]
        );
      }

    }
    /**
     * @deprecated Use `DomPortalOutlet` instead.
     * \@breaking-change 9.0.0
     */


    class DomPortalHost extends DomPortalOutlet {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
     * the directive instance itself can be attached to a host, enabling declarative use of portals.
     */


    class CdkPortal extends TemplatePortal {
      /**
       * @param {?} templateRef
       * @param {?} viewContainerRef
       */
      constructor(templateRef, viewContainerRef) {
        super(templateRef, viewContainerRef);
      }

    }

    CdkPortal.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[cdkPortal]',
        exportAs: 'cdkPortal'
      }]
    }];
    /** @nocollapse */

    CdkPortal.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
    }];
    /**
     * @deprecated Use `CdkPortal` instead.
     * \@breaking-change 9.0.0
     */


    class TemplatePortalDirective extends CdkPortal {}

    TemplatePortalDirective.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[cdk-portal], [portal]',
        exportAs: 'cdkPortal',
        providers: [{
          provide: CdkPortal,
          useExisting: TemplatePortalDirective
        }]
      }]
    }];
    /**
     * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
     * directly attached to it, enabling declarative use.
     *
     * Usage:
     * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
     */

    class CdkPortalOutlet extends BasePortalOutlet {
      /**
       * @param {?} _componentFactoryResolver
       * @param {?} _viewContainerRef
       */
      constructor(_componentFactoryResolver, _viewContainerRef) {
        super();
        this._componentFactoryResolver = _componentFactoryResolver;
        this._viewContainerRef = _viewContainerRef;
        /**
         * Whether the portal component is initialized.
         */

        this._isInitialized = false;
        /**
         * Emits when a portal is attached to the outlet.
         */

        this.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * Portal associated with the Portal outlet.
       * @return {?}
       */


      get portal() {
        return this._attachedPortal;
      }
      /**
       * @param {?} portal
       * @return {?}
       */


      set portal(portal) {
        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
        // and attach a portal programmatically in the parent component. When Angular does the first CD
        // round, it will fire the setter with empty string, causing the user's content to be cleared.
        if (this.hasAttached() && !portal && !this._isInitialized) {
          return;
        }

        if (this.hasAttached()) {
          super.detach();
        }

        if (portal) {
          super.attach(portal);
        }

        this._attachedPortal = portal;
      }
      /**
       * Component or view reference that is attached to the portal.
       * @return {?}
       */


      get attachedRef() {
        return this._attachedRef;
      }
      /**
       * @return {?}
       */


      ngOnInit() {
        this._isInitialized = true;
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        super.dispose();
        this._attachedPortal = null;
        this._attachedRef = null;
      }
      /**
       * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
       *
       * @template T
       * @param {?} portal Portal to be attached to the portal outlet.
       * @return {?} Reference to the created component.
       */


      attachComponentPortal(portal) {
        portal.setAttachedHost(this); // If the portal specifies an origin, use that as the logical location of the component
        // in the application tree. Otherwise use the location of this PortalOutlet.

        /** @type {?} */

        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;
        /** @type {?} */

        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
        /** @type {?} */

        const componentFactory = resolver.resolveComponentFactory(portal.component);
        /** @type {?} */

        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);
        super.setDisposeFn(
        /**
        * @return {?}
        */
        () => ref.destroy());
        this._attachedPortal = portal;
        this._attachedRef = ref;
        this.attached.emit(ref);
        return ref;
      }
      /**
       * Attach the given TemplatePortal to this PortlHost as an embedded View.
       * @template C
       * @param {?} portal Portal to be attached.
       * @return {?} Reference to the created embedded view.
       */


      attachTemplatePortal(portal) {
        portal.setAttachedHost(this);
        /** @type {?} */

        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);

        super.setDisposeFn(
        /**
        * @return {?}
        */
        () => this._viewContainerRef.clear());
        this._attachedPortal = portal;
        this._attachedRef = viewRef;
        this.attached.emit(viewRef);
        return viewRef;
      }

    }

    CdkPortalOutlet.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[cdkPortalOutlet]',
        exportAs: 'cdkPortalOutlet',
        inputs: ['portal: cdkPortalOutlet']
      }]
    }];
    /** @nocollapse */

    CdkPortalOutlet.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
    }];

    CdkPortalOutlet.propDecorators = {
      attached: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };
    /**
     * @deprecated Use `CdkPortalOutlet` instead.
     * \@breaking-change 9.0.0
     */

    class PortalHostDirective extends CdkPortalOutlet {}

    PortalHostDirective.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[cdkPortalHost], [portalHost]',
        exportAs: 'cdkPortalHost',
        inputs: ['portal: cdkPortalHost'],
        providers: [{
          provide: CdkPortalOutlet,
          useExisting: PortalHostDirective
        }]
      }]
    }];

    class PortalModule {}

    PortalModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
        declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Custom injector to be used when providing custom
     * injection tokens to components inside a portal.
     * \@docs-private
     */

    class PortalInjector {
      /**
       * @param {?} _parentInjector
       * @param {?} _customTokens
       */
      constructor(_parentInjector, _customTokens) {
        this._parentInjector = _parentInjector;
        this._customTokens = _customTokens;
      }
      /**
       * @param {?} token
       * @param {?=} notFoundValue
       * @return {?}
       */


      get(token, notFoundValue) {
        /** @type {?} */
        const value = this._customTokens.get(token);

        if (typeof value !== 'undefined') {
          return value;
        }

        return this._parentInjector.get(token, notFoundValue);
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=portal.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/cdk/esm2015/scrolling.js":
  /*!********************************************************!*\
    !*** ./node_modules/@angular/cdk/esm2015/scrolling.js ***!
    \********************************************************/

  /*! exports provided: _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport */

  /***/
  function node_modulesAngularCdkEsm2015ScrollingJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "_fixedSizeVirtualScrollStrategyFactory", function () {
      return _fixedSizeVirtualScrollStrategyFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FixedSizeVirtualScrollStrategy", function () {
      return FixedSizeVirtualScrollStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkFixedSizeVirtualScroll", function () {
      return CdkFixedSizeVirtualScroll;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER_FACTORY", function () {
      return SCROLL_DISPATCHER_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DEFAULT_SCROLL_TIME", function () {
      return DEFAULT_SCROLL_TIME;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollDispatcher", function () {
      return ScrollDispatcher;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SCROLL_DISPATCHER_PROVIDER", function () {
      return SCROLL_DISPATCHER_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkScrollable", function () {
      return CdkScrollable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollingModule", function () {
      return ScrollingModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollDispatchModule", function () {
      return ScrollDispatchModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER_FACTORY", function () {
      return VIEWPORT_RULER_PROVIDER_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DEFAULT_RESIZE_TIME", function () {
      return DEFAULT_RESIZE_TIME;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewportRuler", function () {
      return ViewportRuler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VIEWPORT_RULER_PROVIDER", function () {
      return VIEWPORT_RULER_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkVirtualForOf", function () {
      return CdkVirtualForOf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VIRTUAL_SCROLL_STRATEGY", function () {
      return VIRTUAL_SCROLL_STRATEGY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CdkVirtualScrollViewport", function () {
      return CdkVirtualScrollViewport;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/cdk/platform */
    "./node_modules/@angular/cdk/esm2015/platform.js");
    /* harmony import */


    var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @angular/cdk/bidi */
    "./node_modules/@angular/cdk/esm2015/bidi.js");
    /* harmony import */


    var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/cdk/collections */
    "./node_modules/@angular/cdk/esm2015/collections.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * The injection token used to specify the virtual scrolling strategy.
     * @type {?}
     */


    const VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('VIRTUAL_SCROLL_STRATEGY');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Virtual scrolling strategy for lists with items of known fixed size.
     */

    class FixedSizeVirtualScrollStrategy {
      /**
       * @param {?} itemSize The size of the items in the virtually scrolling list.
       * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
       * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
       */
      constructor(itemSize, minBufferPx, maxBufferPx) {
        this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * \@docs-private Implemented as part of VirtualScrollStrategy.
         */

        this.scrolledIndexChange = this._scrolledIndexChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["distinctUntilChanged"])());
        /**
         * The attached viewport.
         */

        this._viewport = null;
        this._itemSize = itemSize;
        this._minBufferPx = minBufferPx;
        this._maxBufferPx = maxBufferPx;
      }
      /**
       * Attaches this scroll strategy to a viewport.
       * @param {?} viewport The viewport to attach this strategy to.
       * @return {?}
       */


      attach(viewport) {
        this._viewport = viewport;

        this._updateTotalContentSize();

        this._updateRenderedRange();
      }
      /**
       * Detaches this scroll strategy from the currently attached viewport.
       * @return {?}
       */


      detach() {
        this._scrolledIndexChange.complete();

        this._viewport = null;
      }
      /**
       * Update the item size and buffer size.
       * @param {?} itemSize The size of the items in the virtually scrolling list.
       * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more
       * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.
       * @return {?}
       */


      updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {
        if (maxBufferPx < minBufferPx) {
          throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');
        }

        this._itemSize = itemSize;
        this._minBufferPx = minBufferPx;
        this._maxBufferPx = maxBufferPx;

        this._updateTotalContentSize();

        this._updateRenderedRange();
      }
      /**
       * \@docs-private Implemented as part of VirtualScrollStrategy.
       * @return {?}
       */


      onContentScrolled() {
        this._updateRenderedRange();
      }
      /**
       * \@docs-private Implemented as part of VirtualScrollStrategy.
       * @return {?}
       */


      onDataLengthChanged() {
        this._updateTotalContentSize();

        this._updateRenderedRange();
      }
      /**
       * \@docs-private Implemented as part of VirtualScrollStrategy.
       * @return {?}
       */


      onContentRendered() {}
      /**
       * \@docs-private Implemented as part of VirtualScrollStrategy.
       * @return {?}
       */


      onRenderedOffsetChanged() {}
      /**
       * Scroll to the offset for the given index.
       * @param {?} index The index of the element to scroll to.
       * @param {?} behavior The ScrollBehavior to use when scrolling.
       * @return {?}
       */


      scrollToIndex(index, behavior) {
        if (this._viewport) {
          this._viewport.scrollToOffset(index * this._itemSize, behavior);
        }
      }
      /**
       * Update the viewport's total content size.
       * @private
       * @return {?}
       */


      _updateTotalContentSize() {
        if (!this._viewport) {
          return;
        }

        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
      }
      /**
       * Update the viewport's rendered range.
       * @private
       * @return {?}
       */


      _updateRenderedRange() {
        if (!this._viewport) {
          return;
        }
        /** @type {?} */


        const scrollOffset = this._viewport.measureScrollOffset();
        /** @type {?} */


        const firstVisibleIndex = scrollOffset / this._itemSize;
        /** @type {?} */

        const renderedRange = this._viewport.getRenderedRange();
        /** @type {?} */


        const newRange = {
          start: renderedRange.start,
          end: renderedRange.end
        };
        /** @type {?} */

        const viewportSize = this._viewport.getViewportSize();
        /** @type {?} */


        const dataLength = this._viewport.getDataLength();
        /** @type {?} */


        const startBuffer = scrollOffset - newRange.start * this._itemSize;

        if (startBuffer < this._minBufferPx && newRange.start != 0) {
          /** @type {?} */
          const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
          newRange.start = Math.max(0, newRange.start - expandStart);
          newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
        } else {
          /** @type {?} */
          const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);

          if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
            /** @type {?} */
            const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);

            if (expandEnd > 0) {
              newRange.end = Math.min(dataLength, newRange.end + expandEnd);
              newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
            }
          }
        }

        this._viewport.setRenderedRange(newRange);

        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);

        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
      }

    }
    /**
     * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created
     * `FixedSizeVirtualScrollStrategy` from the given directive.
     * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the
     *     `FixedSizeVirtualScrollStrategy` from.
     * @return {?}
     */


    function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
      return fixedSizeDir._scrollStrategy;
    }
    /**
     * A virtual scroll strategy that supports fixed-size items.
     */


    class CdkFixedSizeVirtualScroll {
      constructor() {
        this._itemSize = 20;
        this._minBufferPx = 100;
        this._maxBufferPx = 200;
        /**
         * The scroll strategy used by this directive.
         */

        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
      }
      /**
       * The size of the items in the list (in pixels).
       * @return {?}
       */


      get itemSize() {
        return this._itemSize;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set itemSize(value) {
        this._itemSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value);
      }
      /**
       * The minimum amount of buffer rendered beyond the viewport (in pixels).
       * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
       * @return {?}
       */


      get minBufferPx() {
        return this._minBufferPx;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set minBufferPx(value) {
        this._minBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value);
      }
      /**
       * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
       * @return {?}
       */


      get maxBufferPx() {
        return this._maxBufferPx;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set maxBufferPx(value) {
        this._maxBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceNumberProperty"])(value);
      }
      /**
       * @return {?}
       */


      ngOnChanges() {
        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
      }

    }

    CdkFixedSizeVirtualScroll.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: 'cdk-virtual-scroll-viewport[itemSize]',
        providers: [{
          provide: VIRTUAL_SCROLL_STRATEGY,
          useFactory: _fixedSizeVirtualScrollStrategyFactory,
          deps: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
          /**
          * @return {?}
          */
          () => CdkFixedSizeVirtualScroll)]
        }]
      }]
    }];
    CdkFixedSizeVirtualScroll.propDecorators = {
      itemSize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      minBufferPx: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      maxBufferPx: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Time in ms to throttle the scrolling events by default.
     * @type {?}
     */

    const DEFAULT_SCROLL_TIME = 20;
    /**
     * Service contained all registered Scrollable references and emits an event when any one of the
     * Scrollable references emit a scrolled event.
     */

    class ScrollDispatcher {
      /**
       * @param {?} _ngZone
       * @param {?} _platform
       */
      constructor(_ngZone, _platform) {
        this._ngZone = _ngZone;
        this._platform = _platform;
        /**
         * Subject for notifying that a registered scrollable reference element has been scrolled.
         */

        this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * Keeps track of the global `scroll` and `resize` subscriptions.
         */

        this._globalSubscription = null;
        /**
         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.
         */

        this._scrolledCount = 0;
        /**
         * Map of all the scrollable references that are registered with the service and their
         * scroll event subscriptions.
         */

        this.scrollContainers = new Map();
      }
      /**
       * Registers a scrollable instance with the service and listens for its scrolled events. When the
       * scrollable is scrolled, the service emits the event to its scrolled observable.
       * @param {?} scrollable Scrollable instance to be registered.
       * @return {?}
       */


      register(scrollable) {
        if (!this.scrollContainers.has(scrollable)) {
          this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(
          /**
          * @return {?}
          */
          () => this._scrolled.next(scrollable)));
        }
      }
      /**
       * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
       * @param {?} scrollable Scrollable instance to be deregistered.
       * @return {?}
       */


      deregister(scrollable) {
        /** @type {?} */
        const scrollableReference = this.scrollContainers.get(scrollable);

        if (scrollableReference) {
          scrollableReference.unsubscribe();
          this.scrollContainers.delete(scrollable);
        }
      }
      /**
       * Returns an observable that emits an event whenever any of the registered Scrollable
       * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
       * to override the default "throttle" time.
       *
       * **Note:** in order to avoid hitting change detection for every scroll event,
       * all of the events emitted from this stream will be run outside the Angular zone.
       * If you need to update any data bindings as a result of a scroll event, you have
       * to run the callback using `NgZone.run`.
       * @param {?=} auditTimeInMs
       * @return {?}
       */


      scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {
        if (!this._platform.isBrowser) {
          return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
        }

        return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](
        /**
        * @param {?} observer
        * @return {?}
        */
        observer => {
          if (!this._globalSubscription) {
            this._addGlobalListener();
          } // In the case of a 0ms delay, use an observable without auditTime
          // since it does add a perceptible delay in processing overhead.

          /** @type {?} */


          const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);
          this._scrolledCount++;
          return (
            /**
            * @return {?}
            */
            () => {
              subscription.unsubscribe();
              this._scrolledCount--;

              if (!this._scrolledCount) {
                this._removeGlobalListener();
              }
            }
          );
        });
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._removeGlobalListener();

        this.scrollContainers.forEach(
        /**
        * @param {?} _
        * @param {?} container
        * @return {?}
        */
        (_, container) => this.deregister(container));

        this._scrolled.complete();
      }
      /**
       * Returns an observable that emits whenever any of the
       * scrollable ancestors of an element are scrolled.
       * @param {?} elementRef Element whose ancestors to listen for.
       * @param {?=} auditTimeInMs Time to throttle the scroll events.
       * @return {?}
       */


      ancestorScrolled(elementRef, auditTimeInMs) {
        /** @type {?} */
        const ancestors = this.getAncestorScrollContainers(elementRef);
        return this.scrolled(auditTimeInMs).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(
        /**
        * @param {?} target
        * @return {?}
        */
        target => {
          return !target || ancestors.indexOf(target) > -1;
        }));
      }
      /**
       * Returns all registered Scrollables that contain the provided element.
       * @param {?} elementRef
       * @return {?}
       */


      getAncestorScrollContainers(elementRef) {
        /** @type {?} */
        const scrollingContainers = [];
        this.scrollContainers.forEach(
        /**
        * @param {?} _subscription
        * @param {?} scrollable
        * @return {?}
        */
        (_subscription, scrollable) => {
          if (this._scrollableContainsElement(scrollable, elementRef)) {
            scrollingContainers.push(scrollable);
          }
        });
        return scrollingContainers;
      }
      /**
       * Returns true if the element is contained within the provided Scrollable.
       * @private
       * @param {?} scrollable
       * @param {?} elementRef
       * @return {?}
       */


      _scrollableContainsElement(scrollable, elementRef) {
        /** @type {?} */
        let element = elementRef.nativeElement;
        /** @type {?} */

        let scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements
        // are the scrollable's element.

        do {
          if (element == scrollableElement) {
            return true;
          }
        } while (element =
        /** @type {?} */
        element.parentElement);

        return false;
      }
      /**
       * Sets up the global scroll listeners.
       * @private
       * @return {?}
       */


      _addGlobalListener() {
        this._globalSubscription = this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window.document, 'scroll').subscribe(
          /**
          * @return {?}
          */
          () => this._scrolled.next());
        });
      }
      /**
       * Cleans up the global scroll listener.
       * @private
       * @return {?}
       */


      _removeGlobalListener() {
        if (this._globalSubscription) {
          this._globalSubscription.unsubscribe();

          this._globalSubscription = null;
        }
      }

    }

    ScrollDispatcher.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    ScrollDispatcher.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
    }];
    /** @nocollapse */


    ScrollDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
      factory: function ScrollDispatcher_Factory() {
        return new ScrollDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]));
      },
      token: ScrollDispatcher,
      providedIn: "root"
    });
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} parentDispatcher
     * @param {?} ngZone
     * @param {?} platform
     * @return {?}
     */

    function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {
      return parentDispatcher || new ScrollDispatcher(ngZone, platform);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const SCROLL_DISPATCHER_PROVIDER = {
      // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.
      provide: ScrollDispatcher,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), ScrollDispatcher], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]],
      useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Sends an event when the directive's element is scrolled. Registers itself with the
     * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
     * can be listened to through the service.
     */

    class CdkScrollable {
      /**
       * @param {?} elementRef
       * @param {?} scrollDispatcher
       * @param {?} ngZone
       * @param {?=} dir
       */
      constructor(elementRef, scrollDispatcher, ngZone, dir) {
        this.elementRef = elementRef;
        this.scrollDispatcher = scrollDispatcher;
        this.ngZone = ngZone;
        this.dir = dir;
        this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](
        /**
        * @param {?} observer
        * @return {?}
        */
        observer => this.ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(this.elementRef.nativeElement, 'scroll').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(observer)));
      }
      /**
       * @return {?}
       */


      ngOnInit() {
        this.scrollDispatcher.register(this);
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this.scrollDispatcher.deregister(this);

        this._destroyed.next();

        this._destroyed.complete();
      }
      /**
       * Returns observable that emits when a scroll event is fired on the host element.
       * @return {?}
       */


      elementScrolled() {
        return this._elementScrolled;
      }
      /**
       * Gets the ElementRef for the viewport.
       * @return {?}
       */


      getElementRef() {
        return this.elementRef;
      }
      /**
       * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
       * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
       * left and right always refer to the left and right side of the scrolling container irrespective
       * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
       * in an RTL context.
       * @param {?} options specified the offsets to scroll to.
       * @return {?}
       */


      scrollTo(options) {
        /** @type {?} */
        const el = this.elementRef.nativeElement;
        /** @type {?} */

        const isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.

        options.left = options.left == null ? isRtl ? options.end : options.start : options.left;
        options.right = options.right == null ? isRtl ? options.start : options.end : options.right; // Rewrite the bottom offset as a top offset.

        if (options.bottom != null) {
          /** @type {?} */
          options.top = el.scrollHeight - el.clientHeight - options.bottom;
        } // Rewrite the right offset as a left offset.


        if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() != _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NORMAL) {
          if (options.left != null) {
            /** @type {?} */
            options.right = el.scrollWidth - el.clientWidth - options.left;
          }

          if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].INVERTED) {
            options.left = options.right;
          } else if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NEGATED) {
            options.left = options.right ? -options.right : options.right;
          }
        } else {
          if (options.right != null) {
            /** @type {?} */
            options.left = el.scrollWidth - el.clientWidth - options.right;
          }
        }

        this._applyScrollToOptions(options);
      }
      /**
       * @private
       * @param {?} options
       * @return {?}
       */


      _applyScrollToOptions(options) {
        /** @type {?} */
        const el = this.elementRef.nativeElement;

        if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["supportsScrollBehavior"])()) {
          el.scrollTo(options);
        } else {
          if (options.top != null) {
            el.scrollTop = options.top;
          }

          if (options.left != null) {
            el.scrollLeft = options.left;
          }
        }
      }
      /**
       * Measures the scroll offset relative to the specified edge of the viewport. This method can be
       * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
       * about what scrollLeft means in RTL. The values returned by this method are normalized such that
       * left and right always refer to the left and right side of the scrolling container irrespective
       * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
       * in an RTL context.
       * @param {?} from The edge to measure from.
       * @return {?}
       */


      measureScrollOffset(from) {
        /** @type {?} */
        const LEFT = 'left';
        /** @type {?} */

        const RIGHT = 'right';
        /** @type {?} */

        const el = this.elementRef.nativeElement;

        if (from == 'top') {
          return el.scrollTop;
        }

        if (from == 'bottom') {
          return el.scrollHeight - el.clientHeight - el.scrollTop;
        } // Rewrite start & end as left or right offsets.

        /** @type {?} */


        const isRtl = this.dir && this.dir.value == 'rtl';

        if (from == 'start') {
          from = isRtl ? RIGHT : LEFT;
        } else if (from == 'end') {
          from = isRtl ? LEFT : RIGHT;
        }

        if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].INVERTED) {
          // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and
          // 0 when scrolled all the way right.
          if (from == LEFT) {
            return el.scrollWidth - el.clientWidth - el.scrollLeft;
          } else {
            return el.scrollLeft;
          }
        } else if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["getRtlScrollAxisType"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["RtlScrollAxisType"].NEGATED) {
          // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and
          // 0 when scrolled all the way right.
          if (from == LEFT) {
            return el.scrollLeft + el.scrollWidth - el.clientWidth;
          } else {
            return -el.scrollLeft;
          }
        } else {
          // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and
          // (scrollWidth - clientWidth) when scrolled all the way right.
          if (from == LEFT) {
            return el.scrollLeft;
          } else {
            return el.scrollWidth - el.clientWidth - el.scrollLeft;
          }
        }
      }

    }

    CdkScrollable.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[cdk-scrollable], [cdkScrollable]'
      }]
    }];
    /** @nocollapse */

    CdkScrollable.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
    }, {
      type: ScrollDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Checks if the given ranges are equal.
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */


    function rangesEqual(r1, r2) {
      return r1.start == r2.start && r1.end == r2.end;
    }
    /**
     * Scheduler to be used for scroll events. Needs to fall back to
     * something that doesn't rely on requestAnimationFrame on environments
     * that don't support it (e.g. server-side rendering).
     * @type {?}
     */


    const SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_2__["animationFrameScheduler"] : rxjs__WEBPACK_IMPORTED_MODULE_2__["asapScheduler"];
    /**
     * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.
     */

    class CdkVirtualScrollViewport extends CdkScrollable {
      /**
       * @param {?} elementRef
       * @param {?} _changeDetectorRef
       * @param {?} ngZone
       * @param {?} _scrollStrategy
       * @param {?} dir
       * @param {?} scrollDispatcher
       */
      constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {
        super(elementRef, scrollDispatcher, ngZone, dir);
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._scrollStrategy = _scrollStrategy;
        /**
         * Emits when the viewport is detached from a CdkVirtualForOf.
         */

        this._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * Emits when the rendered range changes.
         */

        this._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this._orientation = 'vertical'; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll
        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because
        // depending on how the strategy calculates the scrolled index, it may come at a cost to
        // performance.

        /**
         * Emits when the index of the first element visible in the viewport changes.
         */

        this.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"](
        /**
        * @param {?} observer
        * @return {?}
        */
        observer => this._scrollStrategy.scrolledIndexChange.subscribe(
        /**
        * @param {?} index
        * @return {?}
        */
        index => Promise.resolve().then(
        /**
        * @return {?}
        */
        () => this.ngZone.run(
        /**
        * @return {?}
        */
        () => observer.next(index)))));
        /**
         * A stream that emits whenever the rendered range changes.
         */

        this.renderedRangeStream = this._renderedRangeSubject.asObservable();
        /**
         * The total size of all content (in pixels), including content that is not currently rendered.
         */

        this._totalContentSize = 0;
        /**
         * A string representing the `style.width` property value to be used for the spacer element.
         */

        this._totalContentWidth = '';
        /**
         * A string representing the `style.height` property value to be used for the spacer element.
         */

        this._totalContentHeight = '';
        /**
         * The currently rendered range of indices.
         */

        this._renderedRange = {
          start: 0,
          end: 0
        };
        /**
         * The length of the data bound to this viewport (in number of items).
         */

        this._dataLength = 0;
        /**
         * The size of the viewport (in pixels).
         */

        this._viewportSize = 0;
        /**
         * The last rendered content offset that was set.
         */

        this._renderedContentOffset = 0;
        /**
         * Whether the last rendered content offset was to the end of the content (and therefore needs to
         * be rewritten as an offset to the start of the content).
         */

        this._renderedContentOffsetNeedsRewrite = false;
        /**
         * Whether there is a pending change detection cycle.
         */

        this._isChangeDetectionPending = false;
        /**
         * A list of functions to run after the next change detection cycle.
         */

        this._runAfterChangeDetection = [];

        if (!_scrollStrategy) {
          throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
        }
      }
      /**
       * The direction the viewport scrolls.
       * @return {?}
       */


      get orientation() {
        return this._orientation;
      }
      /**
       * @param {?} orientation
       * @return {?}
       */


      set orientation(orientation) {
        if (this._orientation !== orientation) {
          this._orientation = orientation;

          this._calculateSpacerSize();
        }
      }
      /**
       * @return {?}
       */


      ngOnInit() {
        super.ngOnInit(); // It's still too early to measure the viewport at this point. Deferring with a promise allows
        // the Viewport to be rendered with the correct size before we measure. We run this outside the
        // zone to avoid causing more change detection cycles. We handle the change detection loop
        // ourselves instead.

        this.ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => Promise.resolve().then(
        /**
        * @return {?}
        */
        () => {
          this._measureViewportSize();

          this._scrollStrategy.attach(this);

          this.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(
          /** @type {?} */
          null), // Collect multiple events into one until the next animation frame. This way if
          // there are multiple scroll events in the same frame we only need to recheck
          // our layout once.
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(0, SCROLL_SCHEDULER)).subscribe(
          /**
          * @return {?}
          */
          () => this._scrollStrategy.onContentScrolled());

          this._markChangeDetectionNeeded();
        }));
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this.detach();

        this._scrollStrategy.detach(); // Complete all subjects


        this._renderedRangeSubject.complete();

        this._detachedSubject.complete();

        super.ngOnDestroy();
      }
      /**
       * Attaches a `CdkVirtualForOf` to this viewport.
       * @param {?} forOf
       * @return {?}
       */


      attach(forOf) {
        if (this._forOf) {
          throw Error('CdkVirtualScrollViewport is already attached.');
        } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length
        // changes. Run outside the zone to avoid triggering change detection, since we're managing the
        // change detection loop ourselves.


        this.ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          this._forOf = forOf;

          this._forOf.dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._detachedSubject)).subscribe(
          /**
          * @param {?} data
          * @return {?}
          */
          data => {
            /** @type {?} */
            const newLength = data.length;

            if (newLength !== this._dataLength) {
              this._dataLength = newLength;

              this._scrollStrategy.onDataLengthChanged();
            }

            this._doChangeDetection();
          });
        });
      }
      /**
       * Detaches the current `CdkVirtualForOf`.
       * @return {?}
       */


      detach() {
        this._forOf = null;

        this._detachedSubject.next();
      }
      /**
       * Gets the length of the data bound to this viewport (in number of items).
       * @return {?}
       */


      getDataLength() {
        return this._dataLength;
      }
      /**
       * Gets the size of the viewport (in pixels).
       * @return {?}
       */


      getViewportSize() {
        return this._viewportSize;
      } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
      // cycle happens. I'm being careful to only call it after the render cycle is complete and before
      // setting it to something else, but its error prone and should probably be split into
      // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.

      /**
       * Get the current rendered range of items.
       * @return {?}
       */


      getRenderedRange() {
        return this._renderedRange;
      }
      /**
       * Sets the total size of all content (in pixels), including content that is not currently
       * rendered.
       * @param {?} size
       * @return {?}
       */


      setTotalContentSize(size) {
        if (this._totalContentSize !== size) {
          this._totalContentSize = size;

          this._calculateSpacerSize();

          this._markChangeDetectionNeeded();
        }
      }
      /**
       * Sets the currently rendered range of indices.
       * @param {?} range
       * @return {?}
       */


      setRenderedRange(range) {
        if (!rangesEqual(this._renderedRange, range)) {
          this._renderedRangeSubject.next(this._renderedRange = range);

          this._markChangeDetectionNeeded(
          /**
          * @return {?}
          */
          () => this._scrollStrategy.onContentRendered());
        }
      }
      /**
       * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
       * @return {?}
       */


      getOffsetToRenderedContentStart() {
        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
      }
      /**
       * Sets the offset from the start of the viewport to either the start or end of the rendered data
       * (in pixels).
       * @param {?} offset
       * @param {?=} to
       * @return {?}
       */


      setRenderedContentOffset(offset, to = 'to-start') {
        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis
        // in the negative direction.

        /** @type {?} */
        const isRtl = this.dir && this.dir.value == 'rtl';
        /** @type {?} */

        const isHorizontal = this.orientation == 'horizontal';
        /** @type {?} */

        const axis = isHorizontal ? 'X' : 'Y';
        /** @type {?} */

        const axisDirection = isHorizontal && isRtl ? -1 : 1;
        /** @type {?} */

        let transform = "translate".concat(axis, "(").concat(Number(axisDirection * offset), "px)");
        this._renderedContentOffset = offset;

        if (to === 'to-end') {
          transform += " translate".concat(axis, "(-100%)"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise
          // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would
          // expand upward).

          this._renderedContentOffsetNeedsRewrite = true;
        }

        if (this._renderedContentTransform != transform) {
          // We know this value is safe because we parse `offset` with `Number()` before passing it
          // into the string.
          this._renderedContentTransform = transform;

          this._markChangeDetectionNeeded(
          /**
          * @return {?}
          */
          () => {
            if (this._renderedContentOffsetNeedsRewrite) {
              this._renderedContentOffset -= this.measureRenderedContentSize();
              this._renderedContentOffsetNeedsRewrite = false;
              this.setRenderedContentOffset(this._renderedContentOffset);
            } else {
              this._scrollStrategy.onRenderedOffsetChanged();
            }
          });
        }
      }
      /**
       * Scrolls to the given offset from the start of the viewport. Please note that this is not always
       * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
       * direction, this would be the equivalent of setting a fictional `scrollRight` property.
       * @param {?} offset The offset to scroll to.
       * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
       * @return {?}
       */


      scrollToOffset(offset, behavior = 'auto') {
        /** @type {?} */
        const options = {
          behavior
        };

        if (this.orientation === 'horizontal') {
          options.start = offset;
        } else {
          options.top = offset;
        }

        this.scrollTo(options);
      }
      /**
       * Scrolls to the offset for the given index.
       * @param {?} index The index of the element to scroll to.
       * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
       * @return {?}
       */


      scrollToIndex(index, behavior = 'auto') {
        this._scrollStrategy.scrollToIndex(index, behavior);
      }
      /**
       * Gets the current scroll offset from the start of the viewport (in pixels).
       * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
       *     in horizontal mode.
       * @return {?}
       */


      measureScrollOffset(from) {
        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');
      }
      /**
       * Measure the combined size of all of the rendered items.
       * @return {?}
       */


      measureRenderedContentSize() {
        /** @type {?} */
        const contentEl = this._contentWrapper.nativeElement;
        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;
      }
      /**
       * Measure the total combined size of the given range. Throws if the range includes items that are
       * not rendered.
       * @param {?} range
       * @return {?}
       */


      measureRangeSize(range) {
        if (!this._forOf) {
          return 0;
        }

        return this._forOf.measureRangeSize(range, this.orientation);
      }
      /**
       * Update the viewport dimensions and re-render.
       * @return {?}
       */


      checkViewportSize() {
        // TODO: Cleanup later when add logic for handling content resize
        this._measureViewportSize();

        this._scrollStrategy.onDataLengthChanged();
      }
      /**
       * Measure the viewport size.
       * @private
       * @return {?}
       */


      _measureViewportSize() {
        /** @type {?} */
        const viewportEl = this.elementRef.nativeElement;
        this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;
      }
      /**
       * Queue up change detection to run.
       * @private
       * @param {?=} runAfter
       * @return {?}
       */


      _markChangeDetectionNeeded(runAfter) {
        if (runAfter) {
          this._runAfterChangeDetection.push(runAfter);
        } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of
        // properties sequentially we only have to run `_doChangeDetection` once at the end.


        if (!this._isChangeDetectionPending) {
          this._isChangeDetectionPending = true;
          this.ngZone.runOutsideAngular(
          /**
          * @return {?}
          */
          () => Promise.resolve().then(
          /**
          * @return {?}
          */
          () => {
            this._doChangeDetection();
          }));
        }
      }
      /**
       * Run change detection.
       * @private
       * @return {?}
       */


      _doChangeDetection() {
        this._isChangeDetectionPending = false; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection
        // from the root, since the repeated items are content projected in. Calling `detectChanges`
        // instead does not properly check the projected content.

        this.ngZone.run(
        /**
        * @return {?}
        */
        () => this._changeDetectorRef.markForCheck()); // Apply the content transform. The transform can't be set via an Angular binding because
        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of
        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through
        // the `Number` function first to coerce it to a numeric value.

        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;
        /** @type {?} */

        const runAfterChangeDetection = this._runAfterChangeDetection;
        this._runAfterChangeDetection = [];

        for (const fn of runAfterChangeDetection) {
          fn();
        }
      }
      /**
       * Calculates the `style.width` and `style.height` for the spacer element.
       * @private
       * @return {?}
       */


      _calculateSpacerSize() {
        this._totalContentHeight = this.orientation === 'horizontal' ? '' : "".concat(this._totalContentSize, "px");
        this._totalContentWidth = this.orientation === 'horizontal' ? "".concat(this._totalContentSize, "px") : '';
      }

    }

    CdkVirtualScrollViewport.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
      args: [{
        selector: 'cdk-virtual-scroll-viewport',
        template: "<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\"><ng-content></ng-content></div><div class=\"cdk-virtual-scroll-spacer\" [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>",
        styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}"],
        host: {
          'class': 'cdk-virtual-scroll-viewport',
          '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === "horizontal"',
          '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== "horizontal"'
        },
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
        providers: [{
          provide: CdkScrollable,
          useExisting: CdkVirtualScrollViewport
        }]
      }]
    }];
    /** @nocollapse */

    CdkVirtualScrollViewport.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [VIRTUAL_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }]
    }, {
      type: ScrollDispatcher
    }];

    CdkVirtualScrollViewport.propDecorators = {
      orientation: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrolledIndexChange: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      _contentWrapper: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
        args: ['contentWrapper', {
          static: true
        }]
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Helper to extract size from a DOM Node.
     * @param {?} orientation
     * @param {?} node
     * @return {?}
     */

    function getSize(orientation, node) {
      /** @type {?} */
      const el =
      /** @type {?} */
      node;

      if (!el.getBoundingClientRect) {
        return 0;
      }
      /** @type {?} */


      const rect = el.getBoundingClientRect();
      return orientation == 'horizontal' ? rect.width : rect.height;
    }
    /**
     * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling
     * container.
     * @template T
     */


    class CdkVirtualForOf {
      /**
       * @param {?} _viewContainerRef
       * @param {?} _template
       * @param {?} _differs
       * @param {?} _viewport
       * @param {?} ngZone
       */
      constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {
        this._viewContainerRef = _viewContainerRef;
        this._template = _template;
        this._differs = _differs;
        this._viewport = _viewport;
        /**
         * Emits when the rendered view of the data changes.
         */

        this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * Subject that emits when a new DataSource instance is given.
         */

        this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * The size of the cache used to store templates that are not being used for re-use later.
         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
         */

        this.cdkVirtualForTemplateCacheSize = 20;
        /**
         * Emits whenever the data in the current DataSource changes.
         */

        this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(
        /** @type {?} */
        null), // Bundle up the previous and current data sources so we can work with both.
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["pairwise"])(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the
        // new one, passing back a stream of data changes which we run through `switchMap` to give
        // us a data stream that emits the latest data from whatever the current `DataSource` is.
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(
        /**
        * @param {?} __0
        * @return {?}
        */
        ([prev, cur]) => this._changeDataSource(prev, cur)), // Replay the last emitted data when someone subscribes.
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["shareReplay"])(1));
        /**
         * The differ used to calculate changes to the data.
         */

        this._differ = null;
        /**
         * The template cache used to hold on ot template instancess that have been stamped out, but don't
         * currently need to be rendered. These instances will be reused in the future rather than
         * stamping out brand new ones.
         */

        this._templateCache = [];
        /**
         * Whether the rendered data should be updated during the next ngDoCheck cycle.
         */

        this._needsUpdate = false;
        this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.dataStream.subscribe(
        /**
        * @param {?} data
        * @return {?}
        */
        data => {
          this._data = data;

          this._onRenderedDataChange();
        });

        this._viewport.renderedRangeStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this._destroyed)).subscribe(
        /**
        * @param {?} range
        * @return {?}
        */
        range => {
          this._renderedRange = range;
          ngZone.run(
          /**
          * @return {?}
          */
          () => this.viewChange.next(this._renderedRange));

          this._onRenderedDataChange();
        });

        this._viewport.attach(this);
      }
      /**
       * The DataSource to display.
       * @return {?}
       */


      get cdkVirtualForOf() {
        return this._cdkVirtualForOf;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set cdkVirtualForOf(value) {
        this._cdkVirtualForOf = value;
        /** @type {?} */

        const ds = Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["isDataSource"])(value) ? value : // Slice the value if its an NgIterable to ensure we're working with an array.
        new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["ArrayDataSource"](value instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"] ? value : Array.prototype.slice.call(value || []));

        this._dataSourceChanges.next(ds);
      }
      /**
       * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
       * the item and produces a value to be used as the item's identity when tracking changes.
       * @return {?}
       */


      get cdkVirtualForTrackBy() {
        return this._cdkVirtualForTrackBy;
      }
      /**
       * @param {?} fn
       * @return {?}
       */


      set cdkVirtualForTrackBy(fn) {
        this._needsUpdate = true;
        this._cdkVirtualForTrackBy = fn ?
        /**
        * @param {?} index
        * @param {?} item
        * @return {?}
        */
        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;
      }
      /**
       * The template used to stamp out new elements.
       * @param {?} value
       * @return {?}
       */


      set cdkVirtualForTemplate(value) {
        if (value) {
          this._needsUpdate = true;
          this._template = value;
        }
      }
      /**
       * Measures the combined size (width for horizontal orientation, height for vertical) of all items
       * in the specified range. Throws an error if the range includes items that are not currently
       * rendered.
       * @param {?} range
       * @param {?} orientation
       * @return {?}
       */


      measureRangeSize(range, orientation) {
        if (range.start >= range.end) {
          return 0;
        }

        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {
          throw Error("Error: attempted to measure an item that isn't rendered.");
        } // The index into the list of rendered views for the first item in the range.

        /** @type {?} */


        const renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.

        /** @type {?} */

        const rangeLen = range.end - range.start; // Loop over all root nodes for all items in the range and sum up their size.

        /** @type {?} */

        let totalSize = 0;
        /** @type {?} */

        let i = rangeLen;

        while (i--) {
          /** @type {?} */
          const view =
          /** @type {?} */
          this._viewContainerRef.get(i + renderedStartIndex);
          /** @type {?} */


          let j = view ? view.rootNodes.length : 0;

          while (j--) {
            totalSize += getSize(orientation,
            /** @type {?} */
            view.rootNodes[j]);
          }
        }

        return totalSize;
      }
      /**
       * @return {?}
       */


      ngDoCheck() {
        if (this._differ && this._needsUpdate) {
          // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of
          // this list being rendered (can use simpler algorithm) vs needs update due to data actually
          // changing (need to do this diff).

          /** @type {?} */
          const changes = this._differ.diff(this._renderedItems);

          if (!changes) {
            this._updateContext();
          } else {
            this._applyChanges(changes);
          }

          this._needsUpdate = false;
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._viewport.detach();

        this._dataSourceChanges.next();

        this._dataSourceChanges.complete();

        this.viewChange.complete();

        this._destroyed.next();

        this._destroyed.complete();

        for (let view of this._templateCache) {
          view.destroy();
        }
      }
      /**
       * React to scroll state changes in the viewport.
       * @private
       * @return {?}
       */


      _onRenderedDataChange() {
        if (!this._renderedRange) {
          return;
        }

        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);

        if (!this._differ) {
          this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);
        }

        this._needsUpdate = true;
      }
      /**
       * Swap out one `DataSource` for another.
       * @private
       * @param {?} oldDs
       * @param {?} newDs
       * @return {?}
       */


      _changeDataSource(oldDs, newDs) {
        if (oldDs) {
          oldDs.disconnect(this);
        }

        this._needsUpdate = true;
        return newDs ? newDs.connect(this) : Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])();
      }
      /**
       * Update the `CdkVirtualForOfContext` for all views.
       * @private
       * @return {?}
       */


      _updateContext() {
        /** @type {?} */
        const count = this._data.length;
        /** @type {?} */

        let i = this._viewContainerRef.length;

        while (i--) {
          /** @type {?} */
          let view =
          /** @type {?} */
          this._viewContainerRef.get(i);

          view.context.index = this._renderedRange.start + i;
          view.context.count = count;

          this._updateComputedContextProperties(view.context);

          view.detectChanges();
        }
      }
      /**
       * Apply changes to the DOM.
       * @private
       * @param {?} changes
       * @return {?}
       */


      _applyChanges(changes) {
        // Rearrange the views to put them in the right location.
        changes.forEachOperation(
        /**
        * @param {?} record
        * @param {?} adjustedPreviousIndex
        * @param {?} currentIndex
        * @return {?}
        */
        (record, adjustedPreviousIndex, currentIndex) => {
          if (record.previousIndex == null) {
            // Item added.
            // Item added.

            /** @type {?} */
            const view = this._insertViewForNewItem(
            /** @type {?} */
            currentIndex);

            view.context.$implicit = record.item;
          } else if (currentIndex == null) {
            // Item removed.
            this._cacheView(this._detachView(
            /** @type {?} */
            adjustedPreviousIndex));
          } else {
            // Item moved.
            // Item moved.

            /** @type {?} */
            const view =
            /** @type {?} */
            this._viewContainerRef.get(
            /** @type {?} */
            adjustedPreviousIndex);

            this._viewContainerRef.move(view, currentIndex);

            view.context.$implicit = record.item;
          }
        }); // Update $implicit for any items that had an identity change.

        changes.forEachIdentityChange(
        /**
        * @param {?} record
        * @return {?}
        */
        record => {
          /** @type {?} */
          const view =
          /** @type {?} */
          this._viewContainerRef.get(
          /** @type {?} */
          record.currentIndex);

          view.context.$implicit = record.item;
        }); // Update the context variables on all items.

        /** @type {?} */

        const count = this._data.length;
        /** @type {?} */

        let i = this._viewContainerRef.length;

        while (i--) {
          /** @type {?} */
          const view =
          /** @type {?} */
          this._viewContainerRef.get(i);

          view.context.index = this._renderedRange.start + i;
          view.context.count = count;

          this._updateComputedContextProperties(view.context);
        }
      }
      /**
       * Cache the given detached view.
       * @private
       * @param {?} view
       * @return {?}
       */


      _cacheView(view) {
        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {
          this._templateCache.push(view);
        } else {
          /** @type {?} */
          const index = this._viewContainerRef.indexOf(view); // It's very unlikely that the index will ever be -1, but just in case,
          // destroy the view on its own, otherwise destroy it through the
          // container to ensure that all the references are removed.


          if (index === -1) {
            view.destroy();
          } else {
            this._viewContainerRef.remove(index);
          }
        }
      }
      /**
       * Inserts a view for a new item, either from the cache or by creating a new one.
       * @private
       * @param {?} index
       * @return {?}
       */


      _insertViewForNewItem(index) {
        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);
      }
      /**
       * Update the computed properties on the `CdkVirtualForOfContext`.
       * @private
       * @param {?} context
       * @return {?}
       */


      _updateComputedContextProperties(context) {
        context.first = context.index === 0;
        context.last = context.index === context.count - 1;
        context.even = context.index % 2 === 0;
        context.odd = !context.even;
      }
      /**
       * Creates a new embedded view and moves it to the given index
       * @private
       * @param {?} index
       * @return {?}
       */


      _createEmbeddedViewAt(index) {
        // Note that it's important that we insert the item directly at the proper index,
        // rather than inserting it and the moving it in place, because if there's a directive
        // on the same node that injects the `ViewContainerRef`, Angular will insert another
        // comment node which can throw off the move when it's being repeated for all items.
        return this._viewContainerRef.createEmbeddedView(this._template, {
          $implicit:
          /** @type {?} */
          null,
          cdkVirtualForOf: this._cdkVirtualForOf,
          index: -1,
          count: -1,
          first: false,
          last: false,
          odd: false,
          even: false
        }, index);
      }
      /**
       * Inserts a recycled view from the cache at the given index.
       * @private
       * @param {?} index
       * @return {?}
       */


      _insertViewFromCache(index) {
        /** @type {?} */
        const cachedView = this._templateCache.pop();

        if (cachedView) {
          this._viewContainerRef.insert(cachedView, index);
        }

        return cachedView || null;
      }
      /**
       * Detaches the embedded view at the given index.
       * @private
       * @param {?} index
       * @return {?}
       */


      _detachView(index) {
        return (
          /** @type {?} */
          this._viewContainerRef.detach(index)
        );
      }

    }

    CdkVirtualForOf.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[cdkVirtualFor][cdkVirtualForOf]'
      }]
    }];
    /** @nocollapse */

    CdkVirtualForOf.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]
    }, {
      type: CdkVirtualScrollViewport,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }];

    CdkVirtualForOf.propDecorators = {
      cdkVirtualForOf: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      cdkVirtualForTrackBy: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      cdkVirtualForTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      cdkVirtualForTemplateCacheSize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class ScrollingModule {}

    ScrollingModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["PlatformModule"]],
        exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"], CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport],
        declarations: [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]
      }]
    }];
    /**
     * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.
     * \@breaking-change 8.0.0 delete this alias
     */

    class ScrollDispatchModule {}

    ScrollDispatchModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [ScrollingModule],
        exports: [ScrollingModule]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Time in ms to throttle the resize events by default.
     * @type {?}
     */

    const DEFAULT_RESIZE_TIME = 20;
    /**
     * Simple utility for getting the bounds of the browser viewport.
     * \@docs-private
     */

    class ViewportRuler {
      /**
       * @param {?} _platform
       * @param {?} ngZone
       */
      constructor(_platform, ngZone) {
        this._platform = _platform;
        ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          this._change = _platform.isBrowser ? Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'resize'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'orientationchange')) : Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(); // Note that we need to do the subscription inside `runOutsideAngular`
          // since subscribing is what causes the event listener to be added.

          this._invalidateCache = this.change().subscribe(
          /**
          * @return {?}
          */
          () => this._updateViewportSize());
        });
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._invalidateCache.unsubscribe();
      }
      /**
       * Returns the viewport's width and height.
       * @return {?}
       */


      getViewportSize() {
        if (!this._viewportSize) {
          this._updateViewportSize();
        }
        /** @type {?} */


        const output = {
          width: this._viewportSize.width,
          height: this._viewportSize.height
        }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.

        if (!this._platform.isBrowser) {
          this._viewportSize =
          /** @type {?} */
          null;
        }

        return output;
      }
      /**
       * Gets a ClientRect for the viewport's bounds.
       * @return {?}
       */


      getViewportRect() {
        // Use the document element's bounding rect rather than the window scroll properties
        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
        // conceptual viewports. Under most circumstances these viewports are equivalent, but they
        // can disagree when the page is pinch-zoomed (on devices that support touch).
        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
        // We use the documentElement instead of the body because, by default (without a css reset)
        // browsers typically give the document body an 8px margin, which is not included in
        // getBoundingClientRect().

        /** @type {?} */
        const scrollPosition = this.getViewportScrollPosition();
        const {
          width,
          height
        } = this.getViewportSize();
        return {
          top: scrollPosition.top,
          left: scrollPosition.left,
          bottom: scrollPosition.top + height,
          right: scrollPosition.left + width,
          height,
          width
        };
      }
      /**
       * Gets the (top, left) scroll position of the viewport.
       * @return {?}
       */


      getViewportScrollPosition() {
        // While we can get a reference to the fake document
        // during SSR, it doesn't have getBoundingClientRect.
        if (!this._platform.isBrowser) {
          return {
            top: 0,
            left: 0
          };
        } // The top-left-corner of the viewport is determined by the scroll position of the document
        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
        // whether `document.body` or `document.documentElement` is the scrolled element, so reading
        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
        // `document.documentElement` works consistently, where the `top` and `left` values will
        // equal negative the scroll position.

        /** @type {?} */


        const documentElement =
        /** @type {?} */
        document.documentElement;
        /** @type {?} */

        const documentRect = documentElement.getBoundingClientRect();
        /** @type {?} */

        const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;
        /** @type {?} */

        const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;
        return {
          top,
          left
        };
      }
      /**
       * Returns a stream that emits whenever the size of the viewport changes.
       * @param {?=} throttleTime Time in milliseconds to throttle the stream.
       * @return {?}
       */


      change(throttleTime = DEFAULT_RESIZE_TIME) {
        return throttleTime > 0 ? this._change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["auditTime"])(throttleTime)) : this._change;
      }
      /**
       * Updates the cached viewport size.
       * @private
       * @return {?}
       */


      _updateViewportSize() {
        this._viewportSize = this._platform.isBrowser ? {
          width: window.innerWidth,
          height: window.innerHeight
        } : {
          width: 0,
          height: 0
        };
      }

    }

    ViewportRuler.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    ViewportRuler.ctorParameters = () => [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }];
    /** @nocollapse */


    ViewportRuler.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
      factory: function ViewportRuler_Factory() {
        return new ViewportRuler(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
      },
      token: ViewportRuler,
      providedIn: "root"
    });
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @param {?} parentRuler
     * @param {?} platform
     * @param {?} ngZone
     * @return {?}
     */

    function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {
      return parentRuler || new ViewportRuler(platform, ngZone);
    }
    /**
     * \@docs-private \@deprecated \@breaking-change 8.0.0
     * @type {?}
     */


    const VIEWPORT_RULER_PROVIDER = {
      // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.
      provide: ViewportRuler,
      deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), ViewportRuler], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]],
      useFactory: VIEWPORT_RULER_PROVIDER_FACTORY
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=scrolling.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/material/esm2015/core.js":
  /*!********************************************************!*\
    !*** ./node_modules/@angular/material/esm2015/core.js ***!
    \********************************************************/

  /*! exports provided: VERSION, AnimationCurves, AnimationDurations, MatCommonModule, MATERIAL_SANITY_CHECKS, mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, mixinErrorState, mixinInitialized, NativeDateModule, MatNativeDateModule, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE, MAT_DATE_LOCALE_PROVIDER, DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter, MAT_NATIVE_DATE_FORMATS, ShowOnDirtyErrorStateMatcher, ErrorStateMatcher, MAT_HAMMER_OPTIONS, GestureConfig, setLines, MatLine, MatLineSetter, MatLineModule, MatOptionModule, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MAT_LABEL_GLOBAL_OPTIONS, MatRippleModule, MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple, RippleState, RippleRef, defaultRippleAnimationConfig, RippleRenderer, MatPseudoCheckboxModule, MatPseudoCheckbox, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, ɵa1 */

  /***/
  function node_modulesAngularMaterialEsm2015CoreJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AnimationCurves", function () {
      return AnimationCurves;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AnimationDurations", function () {
      return AnimationDurations;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatCommonModule", function () {
      return MatCommonModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MATERIAL_SANITY_CHECKS", function () {
      return MATERIAL_SANITY_CHECKS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mixinDisabled", function () {
      return mixinDisabled;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mixinColor", function () {
      return mixinColor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mixinDisableRipple", function () {
      return mixinDisableRipple;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mixinTabIndex", function () {
      return mixinTabIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mixinErrorState", function () {
      return mixinErrorState;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mixinInitialized", function () {
      return mixinInitialized;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NativeDateModule", function () {
      return NativeDateModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatNativeDateModule", function () {
      return MatNativeDateModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_FACTORY", function () {
      return MAT_DATE_LOCALE_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE", function () {
      return MAT_DATE_LOCALE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_PROVIDER", function () {
      return MAT_DATE_LOCALE_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DateAdapter", function () {
      return DateAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_DATE_FORMATS", function () {
      return MAT_DATE_FORMATS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NativeDateAdapter", function () {
      return NativeDateAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_NATIVE_DATE_FORMATS", function () {
      return MAT_NATIVE_DATE_FORMATS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ShowOnDirtyErrorStateMatcher", function () {
      return ShowOnDirtyErrorStateMatcher;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function () {
      return ErrorStateMatcher;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_HAMMER_OPTIONS", function () {
      return MAT_HAMMER_OPTIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GestureConfig", function () {
      return GestureConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "setLines", function () {
      return setLines;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatLine", function () {
      return MatLine;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatLineSetter", function () {
      return MatLineSetter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatLineModule", function () {
      return MatLineModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatOptionModule", function () {
      return MatOptionModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "_countGroupLabelsBeforeOption", function () {
      return _countGroupLabelsBeforeOption;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "_getOptionScrollPosition", function () {
      return _getOptionScrollPosition;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatOptionSelectionChange", function () {
      return MatOptionSelectionChange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_OPTION_PARENT_COMPONENT", function () {
      return MAT_OPTION_PARENT_COMPONENT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatOption", function () {
      return MatOption;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatOptgroup", function () {
      return MatOptgroup;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_LABEL_GLOBAL_OPTIONS", function () {
      return MAT_LABEL_GLOBAL_OPTIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatRippleModule", function () {
      return MatRippleModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_RIPPLE_GLOBAL_OPTIONS", function () {
      return MAT_RIPPLE_GLOBAL_OPTIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatRipple", function () {
      return MatRipple;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RippleState", function () {
      return RippleState;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RippleRef", function () {
      return RippleRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defaultRippleAnimationConfig", function () {
      return defaultRippleAnimationConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RippleRenderer", function () {
      return RippleRenderer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatPseudoCheckboxModule", function () {
      return MatPseudoCheckboxModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatPseudoCheckbox", function () {
      return MatPseudoCheckbox;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "JAN", function () {
      return JAN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FEB", function () {
      return FEB;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAR", function () {
      return MAR;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "APR", function () {
      return APR;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAY", function () {
      return MAY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "JUN", function () {
      return JUN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "JUL", function () {
      return JUL;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AUG", function () {
      return AUG;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SEP", function () {
      return SEP;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OCT", function () {
      return OCT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NOV", function () {
      return NOV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DEC", function () {
      return DEC;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵa1", function () {
      return MATERIAL_SANITY_CHECKS_FACTORY;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
    /* harmony import */


    var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/cdk/bidi */
    "./node_modules/@angular/cdk/esm2015/bidi.js");
    /* harmony import */


    var _angular_cdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/cdk */
    "./node_modules/@angular/cdk/esm2015/cdk.js");
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/cdk/platform */
    "./node_modules/@angular/cdk/esm2015/platform.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! @angular/cdk/a11y */
    "./node_modules/@angular/cdk/esm2015/a11y.js");
    /* harmony import */


    var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! @angular/platform-browser/animations */
    "./node_modules/@angular/platform-browser/fesm2015/animations.js");
    /* harmony import */


    var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! @angular/cdk/keycodes */
    "./node_modules/@angular/cdk/esm2015/keycodes.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Current version of Angular Material.
     * @type {?}
     */


    const VERSION$1 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.3');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * \@docs-private
     */

    class AnimationCurves {}

    AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
    AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
    AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
    AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';
    /**
     * \@docs-private
     */

    class AnimationDurations {}

    AnimationDurations.COMPLEX = '375ms';
    AnimationDurations.ENTERING = '225ms';
    AnimationDurations.EXITING = '195ms';
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Private version constant to circumvent test/build issues,
    // i.e. avoid core to depend on the @angular/material primary entry-point
    // Can be removed once the Material primary entry-point no longer
    // re-exports all secondary entry-points

    /** @type {?} */

    const VERSION$2 = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('8.2.3');
    /**
     * \@docs-private
     * @return {?}
     */

    function MATERIAL_SANITY_CHECKS_FACTORY() {
      return true;
    }
    /**
     * Injection token that configures whether the Material sanity checks are enabled.
     * @type {?}
     */


    const MATERIAL_SANITY_CHECKS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-sanity-checks', {
      providedIn: 'root',
      factory: MATERIAL_SANITY_CHECKS_FACTORY
    });
    /**
     * Module that captures anything that should be loaded and/or run for *all* Angular Material
     * components. This includes Bidi, etc.
     *
     * This module should be imported to each top-level component module (e.g., MatTabsModule).
     */

    class MatCommonModule {
      /**
       * @param {?} _sanityChecksEnabled
       * @param {?=} _hammerLoader
       */
      constructor(_sanityChecksEnabled, _hammerLoader) {
        this._sanityChecksEnabled = _sanityChecksEnabled;
        this._hammerLoader = _hammerLoader;
        /**
         * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).
         */

        this._hasDoneGlobalChecks = false;
        /**
         * Whether we've already checked for HammerJs availability.
         */

        this._hasCheckedHammer = false;
        /**
         * Reference to the global `document` object.
         */

        this._document = typeof document === 'object' && document ? document : null;
        /**
         * Reference to the global 'window' object.
         */

        this._window = typeof window === 'object' && window ? window : null;

        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {
          this._checkDoctypeIsDefined();

          this._checkThemeIsPresent();

          this._checkCdkVersionMatch();

          this._hasDoneGlobalChecks = true;
        }
      }
      /**
       * Whether any sanity checks are enabled
       * @private
       * @return {?}
       */


      _areChecksEnabled() {
        return this._sanityChecksEnabled && Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() && !this._isTestEnv();
      }
      /**
       * Whether the code is running in tests.
       * @private
       * @return {?}
       */


      _isTestEnv() {
        /** @type {?} */
        const window =
        /** @type {?} */
        this._window;
        return window && (window.__karma__ || window.jasmine);
      }
      /**
       * @private
       * @return {?}
       */


      _checkDoctypeIsDefined() {
        if (this._document && !this._document.doctype) {
          console.warn('Current document does not have a doctype. This may cause ' + 'some Angular Material components not to behave as expected.');
        }
      }
      /**
       * @private
       * @return {?}
       */


      _checkThemeIsPresent() {
        // We need to assert that the `body` is defined, because these checks run very early
        // and the `body` won't be defined if the consumer put their scripts in the `head`.
        if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {
          return;
        }
        /** @type {?} */


        const testElement = this._document.createElement('div');

        testElement.classList.add('mat-theme-loaded-marker');

        this._document.body.appendChild(testElement);
        /** @type {?} */


        const computedStyle = getComputedStyle(testElement); // In some situations the computed style of the test element can be null. For example in
        // Firefox, the computed style is null if an application is running inside of a hidden iframe.
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397

        if (computedStyle && computedStyle.display !== 'none') {
          console.warn('Could not find Angular Material core theme. Most Material ' + 'components may not work as expected. For more info refer ' + 'to the theming guide: https://material.angular.io/guide/theming');
        }

        this._document.body.removeChild(testElement);
      }
      /**
       * Checks whether the material version matches the cdk version
       * @private
       * @return {?}
       */


      _checkCdkVersionMatch() {
        if (VERSION$2.full !== _angular_cdk__WEBPACK_IMPORTED_MODULE_3__["VERSION"].full) {
          console.warn('The Angular Material version (' + VERSION$2.full + ') does not match ' + 'the Angular CDK version (' + _angular_cdk__WEBPACK_IMPORTED_MODULE_3__["VERSION"].full + ').\n' + 'Please ensure the versions of these two packages exactly match.');
        }
      }
      /**
       * Checks whether HammerJS is available.
       * @return {?}
       */


      _checkHammerIsAvailable() {
        if (this._hasCheckedHammer || !this._window) {
          return;
        }

        if (this._areChecksEnabled() && !
        /** @type {?} */
        this._window['Hammer'] && !this._hammerLoader) {
          console.warn('Could not find HammerJS. Certain Angular Material components may not work correctly.');
        }

        this._hasCheckedHammer = true;
      }

    }

    MatCommonModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]],
        exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"]]
      }]
    }];
    /** @nocollapse */

    MatCommonModule.ctorParameters = () => [{
      type: Boolean,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [MATERIAL_SANITY_CHECKS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["HAMMER_LOADER"]]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Mixin to augment a directive with a `disabled` property.
     * @template T
     * @param {?} base
     * @return {?}
     */


    function mixinDisabled(base) {
      return class extends base {
        /**
         * @param {...?} args
         */
        constructor(...args) {
          super(...args);
          this._disabled = false;
        }
        /**
         * @return {?}
         */


        get disabled() {
          return this._disabled;
        }
        /**
         * @param {?} value
         * @return {?}
         */


        set disabled(value) {
          this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        }

      };
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Mixin to augment a directive with a `color` property.
     * @template T
     * @param {?} base
     * @param {?=} defaultColor
     * @return {?}
     */


    function mixinColor(base, defaultColor) {
      return class extends base {
        /**
         * @return {?}
         */
        get color() {
          return this._color;
        }
        /**
         * @param {?} value
         * @return {?}
         */


        set color(value) {
          /** @type {?} */
          const colorPalette = value || defaultColor;

          if (colorPalette !== this._color) {
            if (this._color) {
              this._elementRef.nativeElement.classList.remove("mat-".concat(this._color));
            }

            if (colorPalette) {
              this._elementRef.nativeElement.classList.add("mat-".concat(colorPalette));
            }

            this._color = colorPalette;
          }
        }
        /**
         * @param {...?} args
         */


        constructor(...args) {
          super(...args); // Set the default color that can be specified from the mixin.

          this.color = defaultColor;
        }

      };
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Mixin to augment a directive with a `disableRipple` property.
     * @template T
     * @param {?} base
     * @return {?}
     */


    function mixinDisableRipple(base) {
      return class extends base {
        /**
         * @param {...?} args
         */
        constructor(...args) {
          super(...args);
          this._disableRipple = false;
        }
        /**
         * Whether the ripple effect is disabled or not.
         * @return {?}
         */


        get disableRipple() {
          return this._disableRipple;
        }
        /**
         * @param {?} value
         * @return {?}
         */


        set disableRipple(value) {
          this._disableRipple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
        }

      };
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Mixin to augment a directive with a `tabIndex` property.
     * @template T
     * @param {?} base
     * @param {?=} defaultTabIndex
     * @return {?}
     */


    function mixinTabIndex(base, defaultTabIndex = 0) {
      return class extends base {
        /**
         * @param {...?} args
         */
        constructor(...args) {
          super(...args);
          this._tabIndex = defaultTabIndex;
        }
        /**
         * @return {?}
         */


        get tabIndex() {
          return this.disabled ? -1 : this._tabIndex;
        }
        /**
         * @param {?} value
         * @return {?}
         */


        set tabIndex(value) {
          // If the specified tabIndex value is null or undefined, fall back to the default value.
          this._tabIndex = value != null ? value : defaultTabIndex;
        }

      };
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Mixin to augment a directive with updateErrorState method.
     * For component with `errorState` and need to update `errorState`.
     * @template T
     * @param {?} base
     * @return {?}
     */


    function mixinErrorState(base) {
      return class extends base {
        /**
         * @param {...?} args
         */
        constructor(...args) {
          super(...args);
          /**
           * Whether the component is in an error state.
           */

          this.errorState = false;
          /**
           * Stream that emits whenever the state of the input changes such that the wrapping
           * `MatFormField` needs to run change detection.
           */

          this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        }
        /**
         * @return {?}
         */


        updateErrorState() {
          /** @type {?} */
          const oldState = this.errorState;
          /** @type {?} */

          const parent = this._parentFormGroup || this._parentForm;
          /** @type {?} */

          const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
          /** @type {?} */

          const control = this.ngControl ?
          /** @type {?} */
          this.ngControl.control : null;
          /** @type {?} */

          const newState = matcher.isErrorState(control, parent);

          if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
          }
        }

      };
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.
     * @template T
     * @param {?} base
     * @return {?}
     */


    function mixinInitialized(base) {
      return class extends base {
        /**
         * @param {...?} args
         */
        constructor(...args) {
          super(...args);
          /**
           * Whether this directive has been marked as initialized.
           */

          this._isInitialized = false;
          /**
           * List of subscribers that subscribed before the directive was initialized. Should be notified
           * during _markInitialized. Set to null after pending subscribers are notified, and should
           * not expect to be populated after.
           */

          this._pendingSubscribers = [];
          /**
           * Observable stream that emits when the directive initializes. If already initialized, the
           * subscriber is stored to be notified once _markInitialized is called.
           */

          this.initialized = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Observable"](
          /**
          * @param {?} subscriber
          * @return {?}
          */
          subscriber => {
            // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify
            // when _markInitialized is called.
            if (this._isInitialized) {
              this._notifySubscriber(subscriber);
            } else {
              /** @type {?} */
              this._pendingSubscribers.push(subscriber);
            }
          });
        }
        /**
         * Marks the state as initialized and notifies pending subscribers. Should be called at the end
         * of ngOnInit.
         * \@docs-private
         * @return {?}
         */


        _markInitialized() {
          if (this._isInitialized) {
            throw Error('This directive has already been marked as initialized and ' + 'should not be called twice.');
          }

          this._isInitialized = true;

          /** @type {?} */
          this._pendingSubscribers.forEach(this._notifySubscriber);

          this._pendingSubscribers = null;
        }
        /**
         * Emits and completes the subscriber stream (should only emit once).
         * @param {?} subscriber
         * @return {?}
         */


        _notifySubscriber(subscriber) {
          subscriber.next();
          subscriber.complete();
        }

      };
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * InjectionToken for datepicker that can be used to override default locale code.
     * @type {?}
     */


    const MAT_DATE_LOCALE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_DATE_LOCALE', {
      providedIn: 'root',
      factory: MAT_DATE_LOCALE_FACTORY
    });
    /**
     * \@docs-private
     * @return {?}
     */

    function MAT_DATE_LOCALE_FACTORY() {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["inject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]);
    }
    /**
     * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.
     * If you are importing and providing this in your code you can simply remove it.
     * @deprecated
     * \@breaking-change 8.0.0
     * @type {?}
     */


    const MAT_DATE_LOCALE_PROVIDER = {
      provide: MAT_DATE_LOCALE,
      useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]
    };
    /**
     * Adapts type `D` to be usable as a date by cdk-based components that work with dates.
     * @abstract
     * @template D
     */

    class DateAdapter {
      constructor() {
        this._localeChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
      }
      /**
       * A stream that emits when the locale changes.
       * @return {?}
       */


      get localeChanges() {
        return this._localeChanges;
      }
      /**
       * Attempts to deserialize a value to a valid date object. This is different from parsing in that
       * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
       * string). The default implementation does not allow any deserialization, it simply checks that
       * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
       * method on all of its `\@Input()` properties that accept dates. It is therefore possible to
       * support passing values from your backend directly to these properties by overriding this method
       * to also deserialize the format used by your backend.
       * @param {?} value The value to be deserialized into a date object.
       * @return {?} The deserialized date object, either a valid date, null if the value can be
       *     deserialized into a null date (e.g. the empty string), or an invalid date.
       */


      deserialize(value) {
        if (value == null || this.isDateInstance(value) && this.isValid(value)) {
          return value;
        }

        return this.invalid();
      }
      /**
       * Sets the locale used for all dates.
       * @param {?} locale The new locale.
       * @return {?}
       */


      setLocale(locale) {
        this.locale = locale;

        this._localeChanges.next();
      }
      /**
       * Compares two dates.
       * @param {?} first The first date to compare.
       * @param {?} second The second date to compare.
       * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
       *     a number greater than 0 if the first date is later.
       */


      compareDate(first, second) {
        return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);
      }
      /**
       * Checks if two dates are equal.
       * @param {?} first The first date to check.
       * @param {?} second The second date to check.
       * @return {?} Whether the two dates are equal.
       *     Null dates are considered equal to other null dates.
       */


      sameDate(first, second) {
        if (first && second) {
          /** @type {?} */
          let firstValid = this.isValid(first);
          /** @type {?} */

          let secondValid = this.isValid(second);

          if (firstValid && secondValid) {
            return !this.compareDate(first, second);
          }

          return firstValid == secondValid;
        }

        return first == second;
      }
      /**
       * Clamp the given date between min and max dates.
       * @param {?} date The date to clamp.
       * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.
       * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.
       * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,
       *     otherwise `date`.
       */


      clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
          return min;
        }

        if (max && this.compareDate(date, max) > 0) {
          return max;
        }

        return date;
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */


    const MAT_DATE_FORMATS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-date-formats');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO(mmalerba): Remove when we no longer support safari 9.

    /**
     * Whether the browser supports the Intl API.
     * @type {?}
     */

    let SUPPORTS_INTL_API; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can
    // cause IE to throw. These cases are tied to particular versions of Windows and can happen if
    // the consumer is providing a polyfilled `Map`. See:
    // https://github.com/Microsoft/ChakraCore/issues/3189
    // https://github.com/angular/components/issues/15687

    try {
      SUPPORTS_INTL_API = typeof Intl != 'undefined';
    } catch (_a) {
      SUPPORTS_INTL_API = false;
    }
    /**
     * The default month names to use if Intl API is not available.
     * @type {?}
     */


    const DEFAULT_MONTH_NAMES = {
      'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
    };

    const ɵ0 =
    /**
    * @param {?} i
    * @return {?}
    */
    i => String(i + 1);
    /**
     * The default date names to use if Intl API is not available.
     * @type {?}
     */


    const DEFAULT_DATE_NAMES = range(31, ɵ0);
    /**
     * The default day of the week names to use if Intl API is not available.
     * @type {?}
     */

    const DEFAULT_DAY_OF_WEEK_NAMES = {
      'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
    };
    /**
     * Matches strings that have the form of a valid RFC 3339 string
     * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
     * because the regex will match strings an with out of bounds month, date, etc.
     * @type {?}
     */

    const ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
    /**
     * Creates an array and fills it with values.
     * @template T
     * @param {?} length
     * @param {?} valueFunction
     * @return {?}
     */

    function range(length, valueFunction) {
      /** @type {?} */
      const valuesArray = Array(length);

      for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
      }

      return valuesArray;
    }
    /**
     * Adapts the native JS Date for use with cdk-based components that work with dates.
     */


    class NativeDateAdapter extends DateAdapter {
      /**
       * @param {?} matDateLocale
       * @param {?} platform
       */
      constructor(matDateLocale, platform) {
        super();
        /**
         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
         * will produce `'8/13/1800'`.
         *
         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
         * getting the string representation of a Date object from its utc representation. We're keeping
         * it here for sometime, just for precaution, in case we decide to revert some of these changes
         * though.
         */

        this.useUtcForDisplay = true;
        super.setLocale(matDateLocale); // IE does its own time zone correction, so we disable this on IE.

        this.useUtcForDisplay = !platform.TRIDENT;
        this._clampDate = platform.TRIDENT || platform.EDGE;
      }
      /**
       * @param {?} date
       * @return {?}
       */


      getYear(date) {
        return date.getFullYear();
      }
      /**
       * @param {?} date
       * @return {?}
       */


      getMonth(date) {
        return date.getMonth();
      }
      /**
       * @param {?} date
       * @return {?}
       */


      getDate(date) {
        return date.getDate();
      }
      /**
       * @param {?} date
       * @return {?}
       */


      getDayOfWeek(date) {
        return date.getDay();
      }
      /**
       * @param {?} style
       * @return {?}
       */


      getMonthNames(style) {
        if (SUPPORTS_INTL_API) {
          /** @type {?} */
          const dtf = new Intl.DateTimeFormat(this.locale, {
            month: style,
            timeZone: 'utc'
          });
          return range(12,
          /**
          * @param {?} i
          * @return {?}
          */
          i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));
        }

        return DEFAULT_MONTH_NAMES[style];
      }
      /**
       * @return {?}
       */


      getDateNames() {
        if (SUPPORTS_INTL_API) {
          /** @type {?} */
          const dtf = new Intl.DateTimeFormat(this.locale, {
            day: 'numeric',
            timeZone: 'utc'
          });
          return range(31,
          /**
          * @param {?} i
          * @return {?}
          */
          i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }

        return DEFAULT_DATE_NAMES;
      }
      /**
       * @param {?} style
       * @return {?}
       */


      getDayOfWeekNames(style) {
        if (SUPPORTS_INTL_API) {
          /** @type {?} */
          const dtf = new Intl.DateTimeFormat(this.locale, {
            weekday: style,
            timeZone: 'utc'
          });
          return range(7,
          /**
          * @param {?} i
          * @return {?}
          */
          i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }

        return DEFAULT_DAY_OF_WEEK_NAMES[style];
      }
      /**
       * @param {?} date
       * @return {?}
       */


      getYearName(date) {
        if (SUPPORTS_INTL_API) {
          /** @type {?} */
          const dtf = new Intl.DateTimeFormat(this.locale, {
            year: 'numeric',
            timeZone: 'utc'
          });
          return this._stripDirectionalityCharacters(this._format(dtf, date));
        }

        return String(this.getYear(date));
      }
      /**
       * @return {?}
       */


      getFirstDayOfWeek() {
        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
        return 0;
      }
      /**
       * @param {?} date
       * @return {?}
       */


      getNumDaysInMonth(date) {
        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
      }
      /**
       * @param {?} date
       * @return {?}
       */


      clone(date) {
        return new Date(date.getTime());
      }
      /**
       * @param {?} year
       * @param {?} month
       * @param {?} date
       * @return {?}
       */


      createDate(year, month, date) {
        // Check for invalid month and date (except upper bound on date which we have to check after
        // creating the Date).
        if (month < 0 || month > 11) {
          throw Error("Invalid month index \"".concat(month, "\". Month index has to be between 0 and 11."));
        }

        if (date < 1) {
          throw Error("Invalid date \"".concat(date, "\". Date has to be greater than 0."));
        }
        /** @type {?} */


        let result = this._createDateWithOverflow(year, month, date); // Check that the date wasn't above the upper bound for the month, causing the month to overflow


        if (result.getMonth() != month) {
          throw Error("Invalid date \"".concat(date, "\" for month with index \"").concat(month, "\"."));
        }

        return result;
      }
      /**
       * @return {?}
       */


      today() {
        return new Date();
      }
      /**
       * @param {?} value
       * @return {?}
       */


      parse(value) {
        // We have no way using the native JS Date to set the parse format or locale, so we ignore these
        // parameters.
        if (typeof value == 'number') {
          return new Date(value);
        }

        return value ? new Date(Date.parse(value)) : null;
      }
      /**
       * @param {?} date
       * @param {?} displayFormat
       * @return {?}
       */


      format(date, displayFormat) {
        if (!this.isValid(date)) {
          throw Error('NativeDateAdapter: Cannot format invalid date.');
        }

        if (SUPPORTS_INTL_API) {
          // On IE and Edge the i18n API will throw a hard error that can crash the entire app
          // if we attempt to format a date whose year is less than 1 or greater than 9999.
          if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
            date = this.clone(date);
            date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
          }

          displayFormat = Object.assign({}, displayFormat, {
            timeZone: 'utc'
          });
          /** @type {?} */

          const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
          return this._stripDirectionalityCharacters(this._format(dtf, date));
        }

        return this._stripDirectionalityCharacters(date.toDateString());
      }
      /**
       * @param {?} date
       * @param {?} years
       * @return {?}
       */


      addCalendarYears(date, years) {
        return this.addCalendarMonths(date, years * 12);
      }
      /**
       * @param {?} date
       * @param {?} months
       * @return {?}
       */


      addCalendarMonths(date, months) {
        /** @type {?} */
        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date)); // It's possible to wind up in the wrong month if the original month has more days than the new
        // month. In this case we want to go to the last day of the desired month.
        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
        // guarantee this.


        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
          newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
        }

        return newDate;
      }
      /**
       * @param {?} date
       * @param {?} days
       * @return {?}
       */


      addCalendarDays(date, days) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
      }
      /**
       * @param {?} date
       * @return {?}
       */


      toIso8601(date) {
        return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');
      }
      /**
       * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
       * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
       * invalid date for all other values.
       * @param {?} value
       * @return {?}
       */


      deserialize(value) {
        if (typeof value === 'string') {
          if (!value) {
            return null;
          } // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
          // string is the right format first.


          if (ISO_8601_REGEX.test(value)) {
            /** @type {?} */
            let date = new Date(value);

            if (this.isValid(date)) {
              return date;
            }
          }
        }

        return super.deserialize(value);
      }
      /**
       * @param {?} obj
       * @return {?}
       */


      isDateInstance(obj) {
        return obj instanceof Date;
      }
      /**
       * @param {?} date
       * @return {?}
       */


      isValid(date) {
        return !isNaN(date.getTime());
      }
      /**
       * @return {?}
       */


      invalid() {
        return new Date(NaN);
      }
      /**
       * Creates a date but allows the month and date to overflow.
       * @private
       * @param {?} year
       * @param {?} month
       * @param {?} date
       * @return {?}
       */


      _createDateWithOverflow(year, month, date) {
        /** @type {?} */
        const result = new Date(year, month, date); // We need to correct for the fact that JS native Date treats years in range [0, 99] as
        // abbreviations for 19xx.

        if (year >= 0 && year < 100) {
          result.setFullYear(this.getYear(result) - 1900);
        }

        return result;
      }
      /**
       * Pads a number to make it two digits.
       * @private
       * @param {?} n The number to pad.
       * @return {?} The padded number.
       */


      _2digit(n) {
        return ('00' + n).slice(-2);
      }
      /**
       * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
       * other browsers do not. We remove them to make output consistent and because they interfere with
       * date parsing.
       * @private
       * @param {?} str The string to strip direction characters from.
       * @return {?} The stripped string.
       */


      _stripDirectionalityCharacters(str) {
        return str.replace(/[\u200e\u200f]/g, '');
      }
      /**
       * When converting Date object to string, javascript built-in functions may return wrong
       * results because it applies its internal DST rules. The DST rules around the world change
       * very frequently, and the current valid rule is not always valid in previous years though.
       * We work around this problem building a new Date object which has its internal UTC
       * representation with the local date and time.
       * @private
       * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have
       *    timeZone set to 'utc' to work fine.
       * @param {?} date Date from which we want to get the string representation according to dtf
       * @return {?} A Date object with its UTC representation based on the passed in date info
       */


      _format(dtf, date) {
        /** @type {?} */
        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        return dtf.format(d);
      }

    }

    NativeDateAdapter.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }];
    /** @nocollapse */

    NativeDateAdapter.ctorParameters = () => [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [MAT_DATE_LOCALE]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */


    const MAT_NATIVE_DATE_FORMATS = {
      parse: {
        dateInput: null
      },
      display: {
        dateInput: {
          year: 'numeric',
          month: 'numeric',
          day: 'numeric'
        },
        monthYearLabel: {
          year: 'numeric',
          month: 'short'
        },
        dateA11yLabel: {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        },
        monthYearA11yLabel: {
          year: 'numeric',
          month: 'long'
        }
      }
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class NativeDateModule {}

    NativeDateModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"]],
        providers: [{
          provide: DateAdapter,
          useClass: NativeDateAdapter
        }]
      }]
    }];
    const ɵ0$1 = MAT_NATIVE_DATE_FORMATS;

    class MatNativeDateModule {}

    MatNativeDateModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [NativeDateModule],
        providers: [{
          provide: MAT_DATE_FORMATS,
          useValue: ɵ0$1
        }]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Error state matcher that matches when a control is invalid and dirty.
     */

    class ShowOnDirtyErrorStateMatcher {
      /**
       * @param {?} control
       * @param {?} form
       * @return {?}
       */
      isErrorState(control, form) {
        return !!(control && control.invalid && (control.dirty || form && form.submitted));
      }

    }

    ShowOnDirtyErrorStateMatcher.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }];
    /**
     * Provider that defines how form controls behave with regards to displaying error messages.
     */

    class ErrorStateMatcher {
      /**
       * @param {?} control
       * @param {?} form
       * @return {?}
       */
      isErrorState(control, form) {
        return !!(control && control.invalid && (control.touched || form && form.submitted));
      }

    }

    ErrorStateMatcher.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
      args: [{
        providedIn: 'root'
      }]
    }];
    /** @nocollapse */

    ErrorStateMatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
      factory: function ErrorStateMatcher_Factory() {
        return new ErrorStateMatcher();
      },
      token: ErrorStateMatcher,
      providedIn: "root"
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Injection token that can be used to provide options to the Hammerjs instance.
     * More info at http://hammerjs.github.io/api/.
     * @type {?}
     */

    const MAT_HAMMER_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_HAMMER_OPTIONS');
    /** @type {?} */

    const ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = ['longpress', 'slide', 'slidestart', 'slideend', 'slideright', 'slideleft'];

    const ɵ0$2 =
    /**
    * @return {?}
    */
    () => {},
          ɵ1 =
    /**
    * @return {?}
    */
    () => {};
    /**
     * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not
     * been loaded on the page.
     * @type {?}
     */


    const noopHammerInstance = {
      on: ɵ0$2,
      off: ɵ1
    };
    /**
     * Adjusts configuration of our gesture library, Hammer.
     */

    class GestureConfig extends _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["HammerGestureConfig"] {
      /**
       * @param {?=} _hammerOptions
       * @param {?=} commonModule
       */
      constructor(_hammerOptions, commonModule) {
        super();
        this._hammerOptions = _hammerOptions;
        /**
         * List of new event names to add to the gesture support list
         */

        this.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;

        if (commonModule) {
          commonModule._checkHammerIsAvailable();
        }
      }
      /**
       * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.
       *
       * Our gesture names come from the Material Design gestures spec:
       * https://material.io/design/#gestures-touch-mechanics
       *
       * More information on default recognizers can be found in Hammer docs:
       * http://hammerjs.github.io/recognizer-pan/
       * http://hammerjs.github.io/recognizer-press/
       *
       * @param {?} element Element to which to assign the new HammerJS gestures.
       * @return {?} Newly-created HammerJS instance.
       */


      buildHammer(element) {
        /** @type {?} */
        const hammer = typeof window !== 'undefined' ?
        /** @type {?} */
        window.Hammer : null;

        if (!hammer) {
          // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to
          // ensure that omitting HammerJS completely will not cause any errors while *also* supporting
          // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.
          // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set
          // `this.events` to the set we support, instead of conditionally setting it to `[]` if
          // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is
          // undefined).
          // @breaking-change 8.0.0
          return noopHammerInstance;
        }
        /** @type {?} */


        const mc = new hammer(element, this._hammerOptions || undefined); // Default Hammer Recognizers.

        /** @type {?} */

        const pan = new hammer.Pan();
        /** @type {?} */

        const swipe = new hammer.Swipe();
        /** @type {?} */

        const press = new hammer.Press(); // Notice that a HammerJS recognizer can only depend on one other recognizer once.
        // Otherwise the previous `recognizeWith` will be dropped.
        // TODO: Confirm threshold numbers with Material Design UX Team

        /** @type {?} */

        const slide = this._createRecognizer(pan, {
          event: 'slide',
          threshold: 0
        }, swipe);
        /** @type {?} */


        const longpress = this._createRecognizer(press, {
          event: 'longpress',
          time: 500
        }); // Overwrite the default `pan` event to use the swipe event.


        pan.recognizeWith(swipe); // Since the slide event threshold is set to zero, the slide recognizer can fire and
        // accidentally reset the longpress recognizer. In order to make sure that the two
        // recognizers can run simultaneously but don't affect each other, we allow the slide
        // recognizer to recognize while a longpress is being processed.
        // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124

        longpress.recognizeWith(slide); // Add customized gestures to Hammer manager

        mc.add([swipe, press, pan, slide, longpress]);
        return (
          /** @type {?} */
          mc
        );
      }
      /**
       * Creates a new recognizer, without affecting the default recognizers of HammerJS
       * @private
       * @param {?} base
       * @param {?} options
       * @param {...?} inheritances
       * @return {?}
       */


      _createRecognizer(base, options, ...inheritances) {
        /** @type {?} */
        let recognizer = new
        /** @type {?} */
        base.constructor(options);
        inheritances.push(base);
        inheritances.forEach(
        /**
        * @param {?} item
        * @return {?}
        */
        item => recognizer.recognizeWith(item));
        return recognizer;
      }

    }

    GestureConfig.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }];
    /** @nocollapse */

    GestureConfig.ctorParameters = () => [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [MAT_HAMMER_OPTIONS]
      }]
    }, {
      type: MatCommonModule,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Shared directive to count lines inside a text area, such as a list item.
     * Line elements can be extracted with a \@ContentChildren(MatLine) query, then
     * counted by checking the query list's length.
     */


    class MatLine {}

    MatLine.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[mat-line], [matLine]',
        host: {
          'class': 'mat-line'
        }
      }]
    }];
    /**
     * Helper that takes a query list of lines and sets the correct class on the host.
     * \@docs-private
     * @param {?} lines
     * @param {?} element
     * @return {?}
     */

    function setLines(lines, element) {
      // Note: doesn't need to unsubscribe, because `changes`
      // gets completed by Angular when the view is destroyed.
      lines.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(lines)).subscribe(
      /**
      * @param {?} __0
      * @return {?}
      */
      ({
        length
      }) => {
        setClass(element, 'mat-2-line', false);
        setClass(element, 'mat-3-line', false);
        setClass(element, 'mat-multi-line', false);

        if (length === 2 || length === 3) {
          setClass(element, "mat-".concat(length, "-line"), true);
        } else if (length > 3) {
          setClass(element, "mat-multi-line", true);
        }
      });
    }
    /**
     * Adds or removes a class from an element.
     * @param {?} element
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */


    function setClass(element, className, isAdd) {
      /** @type {?} */
      const classList = element.nativeElement.classList;
      isAdd ? classList.add(className) : classList.remove(className);
    }
    /**
     * Helper that takes a query list of lines and sets the correct class on the host.
     * \@docs-private
     * @deprecated Use `setLines` instead.
     * \@breaking-change 8.0.0
     */


    class MatLineSetter {
      /**
       * @param {?} lines
       * @param {?} element
       */
      constructor(lines, element) {
        setLines(lines, element);
      }

    }

    class MatLineModule {}

    MatLineModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [MatCommonModule],
        exports: [MatLine, MatCommonModule],
        declarations: [MatLine]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {number} */

    const RippleState = {
      FADING_IN: 0,
      VISIBLE: 1,
      FADING_OUT: 2,
      HIDDEN: 3
    };
    RippleState[RippleState.FADING_IN] = 'FADING_IN';
    RippleState[RippleState.VISIBLE] = 'VISIBLE';
    RippleState[RippleState.FADING_OUT] = 'FADING_OUT';
    RippleState[RippleState.HIDDEN] = 'HIDDEN';
    /**
     * Reference to a previously launched ripple element.
     */

    class RippleRef {
      /**
       * @param {?} _renderer
       * @param {?} element
       * @param {?} config
       */
      constructor(_renderer, element, config) {
        this._renderer = _renderer;
        this.element = element;
        this.config = config;
        /**
         * Current state of the ripple.
         */

        this.state = RippleState.HIDDEN;
      }
      /**
       * Fades out the ripple element.
       * @return {?}
       */


      fadeOut() {
        this._renderer.fadeOutRipple(this);
      }

    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Default ripple animation configuration for ripples without an explicit
     * animation config specified.
     * @type {?}
     */


    const defaultRippleAnimationConfig = {
      enterDuration: 450,
      exitDuration: 400
    };
    /**
     * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch
     * events to avoid synthetic mouse events.
     * @type {?}
     */

    const ignoreMouseEventsTimeout = 800;
    /**
     * Options that apply to all the event listeners that are bound by the ripple renderer.
     * @type {?}
     */

    const passiveEventOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["normalizePassiveListenerOptions"])({
      passive: true
    });
    /**
     * Helper service that performs DOM manipulations. Not intended to be used outside this module.
     * The constructor takes a reference to the ripple directive's host element and a map of DOM
     * event handlers to be installed on the element that triggers ripple animations.
     * This will eventually become a custom renderer once Angular support exists.
     * \@docs-private
     */

    class RippleRenderer {
      /**
       * @param {?} _target
       * @param {?} _ngZone
       * @param {?} elementOrElementRef
       * @param {?} platform
       */
      constructor(_target, _ngZone, elementOrElementRef, platform) {
        this._target = _target;
        this._ngZone = _ngZone;
        /**
         * Whether the pointer is currently down or not.
         */

        this._isPointerDown = false;
        /**
         * Events to be registered on the trigger element.
         */

        this._triggerEvents = new Map();
        /**
         * Set of currently active ripple references.
         */

        this._activeRipples = new Set();
        /**
         * Function being called whenever the trigger is being pressed using mouse.
         */

        this._onMousedown =
        /**
        * @param {?} event
        * @return {?}
        */
        event => {
          // Screen readers will fire fake mouse events for space/enter. Skip launching a
          // ripple in this case for consistency with the non-screen-reader experience.

          /** @type {?} */
          const isFakeMousedown = Object(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_8__["isFakeMousedownFromScreenReader"])(event);
          /** @type {?} */

          const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;

          if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
            this._isPointerDown = true;
            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);
          }
        };
        /**
         * Function being called whenever the trigger is being pressed using touch.
         */


        this._onTouchStart =
        /**
        * @param {?} event
        * @return {?}
        */
        event => {
          if (!this._target.rippleDisabled) {
            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse
            // events will launch a second ripple if we don't ignore mouse events for a specific
            // time after a touchstart event.
            this._lastTouchStartEvent = Date.now();
            this._isPointerDown = true; // Use `changedTouches` so we skip any touches where the user put
            // their finger down, but used another finger to tap the element again.

            /** @type {?} */

            const touches = event.changedTouches;

            for (let i = 0; i < touches.length; i++) {
              this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);
            }
          }
        };
        /**
         * Function being called whenever the trigger is being released.
         */


        this._onPointerUp =
        /**
        * @return {?}
        */
        () => {
          if (!this._isPointerDown) {
            return;
          }

          this._isPointerDown = false; // Fade-out all ripples that are visible and not persistent.

          this._activeRipples.forEach(
          /**
          * @param {?} ripple
          * @return {?}
          */
          ripple => {
            // By default, only ripples that are completely visible will fade out on pointer release.
            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.

            /** @type {?} */
            const isVisible = ripple.state === RippleState.VISIBLE || ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;

            if (!ripple.config.persistent && isVisible) {
              ripple.fadeOut();
            }
          });
        }; // Only do anything if we're on the browser.


        if (platform.isBrowser) {
          this._containerElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(elementOrElementRef); // Specify events which need to be registered on the trigger.

          this._triggerEvents.set('mousedown', this._onMousedown).set('mouseup', this._onPointerUp).set('mouseleave', this._onPointerUp).set('touchstart', this._onTouchStart).set('touchend', this._onPointerUp).set('touchcancel', this._onPointerUp);
        }
      }
      /**
       * Fades in a ripple at the given coordinates.
       * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.
       * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.
       * @param {?=} config Extra ripple options.
       * @return {?}
       */


      fadeInRipple(x, y, config = {}) {
        /** @type {?} */
        const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();
        /** @type {?} */


        const animationConfig = Object.assign({}, defaultRippleAnimationConfig, config.animation);

        if (config.centered) {
          x = containerRect.left + containerRect.width / 2;
          y = containerRect.top + containerRect.height / 2;
        }
        /** @type {?} */


        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);
        /** @type {?} */

        const offsetX = x - containerRect.left;
        /** @type {?} */

        const offsetY = y - containerRect.top;
        /** @type {?} */

        const duration = animationConfig.enterDuration;
        /** @type {?} */

        const ripple = document.createElement('div');
        ripple.classList.add('mat-ripple-element');
        ripple.style.left = "".concat(offsetX - radius, "px");
        ripple.style.top = "".concat(offsetY - radius, "px");
        ripple.style.height = "".concat(radius * 2, "px");
        ripple.style.width = "".concat(radius * 2, "px"); // If the color is not set, the default CSS color will be used.

        ripple.style.backgroundColor = config.color || null;
        ripple.style.transitionDuration = "".concat(duration, "ms");

        this._containerElement.appendChild(ripple); // By default the browser does not recalculate the styles of dynamically created
        // ripple elements. This is critical because then the `scale` would not animate properly.


        enforceStyleRecalculation(ripple);
        ripple.style.transform = 'scale(1)'; // Exposed reference to the ripple that will be returned.

        /** @type {?} */

        const rippleRef = new RippleRef(this, ripple, config);
        rippleRef.state = RippleState.FADING_IN; // Add the ripple reference to the list of all active ripples.

        this._activeRipples.add(rippleRef);

        if (!config.persistent) {
          this._mostRecentTransientRipple = rippleRef;
        } // Wait for the ripple element to be completely faded in.
        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.


        this._runTimeoutOutsideZone(
        /**
        * @return {?}
        */
        () => {
          /** @type {?} */
          const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;
          rippleRef.state = RippleState.VISIBLE; // When the timer runs out while the user has kept their pointer down, we want to
          // keep only the persistent ripples and the latest transient ripple. We do this,
          // because we don't want stacked transient ripples to appear after their enter
          // animation has finished.

          if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {
            rippleRef.fadeOut();
          }
        }, duration);

        return rippleRef;
      }
      /**
       * Fades out a ripple reference.
       * @param {?} rippleRef
       * @return {?}
       */


      fadeOutRipple(rippleRef) {
        /** @type {?} */
        const wasActive = this._activeRipples.delete(rippleRef);

        if (rippleRef === this._mostRecentTransientRipple) {
          this._mostRecentTransientRipple = null;
        } // Clear out the cached bounding rect if we have no more ripples.


        if (!this._activeRipples.size) {
          this._containerRect = null;
        } // For ripples that are not active anymore, don't re-run the fade-out animation.


        if (!wasActive) {
          return;
        }
        /** @type {?} */


        const rippleEl = rippleRef.element;
        /** @type {?} */

        const animationConfig = Object.assign({}, defaultRippleAnimationConfig, rippleRef.config.animation);
        rippleEl.style.transitionDuration = "".concat(animationConfig.exitDuration, "ms");
        rippleEl.style.opacity = '0';
        rippleRef.state = RippleState.FADING_OUT; // Once the ripple faded out, the ripple can be safely removed from the DOM.

        this._runTimeoutOutsideZone(
        /**
        * @return {?}
        */
        () => {
          rippleRef.state = RippleState.HIDDEN;

          /** @type {?} */
          rippleEl.parentNode.removeChild(rippleEl);
        }, animationConfig.exitDuration);
      }
      /**
       * Fades out all currently active ripples.
       * @return {?}
       */


      fadeOutAll() {
        this._activeRipples.forEach(
        /**
        * @param {?} ripple
        * @return {?}
        */
        ripple => ripple.fadeOut());
      }
      /**
       * Sets up the trigger event listeners
       * @param {?} elementOrElementRef
       * @return {?}
       */


      setupTriggerEvents(elementOrElementRef) {
        /** @type {?} */
        const element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(elementOrElementRef);

        if (!element || element === this._triggerElement) {
          return;
        } // Remove all previously registered event listeners from the trigger element.


        this._removeTriggerEvents();

        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => {
          this._triggerEvents.forEach(
          /**
          * @param {?} fn
          * @param {?} type
          * @return {?}
          */
          (fn, type) => {
            element.addEventListener(type, fn, passiveEventOptions);
          });
        });

        this._triggerElement = element;
      }
      /**
       * Runs a timeout outside of the Angular zone to avoid triggering the change detection.
       * @private
       * @param {?} fn
       * @param {?=} delay
       * @return {?}
       */


      _runTimeoutOutsideZone(fn, delay = 0) {
        this._ngZone.runOutsideAngular(
        /**
        * @return {?}
        */
        () => setTimeout(fn, delay));
      }
      /**
       * Removes previously registered event listeners from the trigger element.
       * @return {?}
       */


      _removeTriggerEvents() {
        if (this._triggerElement) {
          this._triggerEvents.forEach(
          /**
          * @param {?} fn
          * @param {?} type
          * @return {?}
          */
          (fn, type) => {
            /** @type {?} */
            this._triggerElement.removeEventListener(type, fn, passiveEventOptions);
          });
        }
      }

    }
    /**
     * Enforces a style recalculation of a DOM element by computing its styles.
     * @param {?} element
     * @return {?}
     */


    function enforceStyleRecalculation(element) {
      // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
      // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
      // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
      window.getComputedStyle(element).getPropertyValue('opacity');
    }
    /**
     * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
     * @param {?} x
     * @param {?} y
     * @param {?} rect
     * @return {?}
     */


    function distanceToFurthestCorner(x, y, rect) {
      /** @type {?} */
      const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
      /** @type {?} */

      const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
      return Math.sqrt(distX * distX + distY * distY);
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Injection token that can be used to specify the global ripple options.
     * @type {?}
     */


    const MAT_RIPPLE_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-ripple-global-options');

    class MatRipple {
      /**
       * @param {?} _elementRef
       * @param {?} ngZone
       * @param {?} platform
       * @param {?=} globalOptions
       * @param {?=} animationMode
       */
      constructor(_elementRef, ngZone, platform, globalOptions, animationMode) {
        this._elementRef = _elementRef;
        /**
         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
         * will be the distance from the center of the ripple to the furthest corner of the host element's
         * bounding rectangle.
         */

        this.radius = 0;
        this._disabled = false;
        /**
         * Whether ripple directive is initialized and the input bindings are set.
         */

        this._isInitialized = false;
        this._globalOptions = globalOptions || {};
        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);

        if (animationMode === 'NoopAnimations') {
          this._globalOptions.animation = {
            enterDuration: 0,
            exitDuration: 0
          };
        }
      }
      /**
       * Whether click events will not trigger the ripple. Ripples can be still launched manually
       * by using the `launch()` method.
       * @return {?}
       */


      get disabled() {
        return this._disabled;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set disabled(value) {
        this._disabled = value;

        this._setupTriggerEventsIfEnabled();
      }
      /**
       * The element that triggers the ripple when click events are received.
       * Defaults to the directive's host element.
       * @return {?}
       */


      get trigger() {
        return this._trigger || this._elementRef.nativeElement;
      }
      /**
       * @param {?} trigger
       * @return {?}
       */


      set trigger(trigger) {
        this._trigger = trigger;

        this._setupTriggerEventsIfEnabled();
      }
      /**
       * @return {?}
       */


      ngOnInit() {
        this._isInitialized = true;

        this._setupTriggerEventsIfEnabled();
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._rippleRenderer._removeTriggerEvents();
      }
      /**
       * Fades out all currently showing ripple elements.
       * @return {?}
       */


      fadeOutAll() {
        this._rippleRenderer.fadeOutAll();
      }
      /**
       * Ripple configuration from the directive's input values.
       * \@docs-private Implemented as part of RippleTarget
       * @return {?}
       */


      get rippleConfig() {
        return {
          centered: this.centered,
          radius: this.radius,
          color: this.color,
          animation: Object.assign({}, this._globalOptions.animation, this.animation),
          terminateOnPointerUp: this._globalOptions.terminateOnPointerUp
        };
      }
      /**
       * Whether ripples on pointer-down are disabled or not.
       * \@docs-private Implemented as part of RippleTarget
       * @return {?}
       */


      get rippleDisabled() {
        return this.disabled || !!this._globalOptions.disabled;
      }
      /**
       * Sets up the trigger event listeners if ripples are enabled.
       * @private
       * @return {?}
       */


      _setupTriggerEventsIfEnabled() {
        if (!this.disabled && this._isInitialized) {
          this._rippleRenderer.setupTriggerEvents(this.trigger);
        }
      }
      /**
       * Launches a manual ripple at the specified coordinated or just by the ripple config.
       * @param {?} configOrX
       * @param {?=} y
       * @param {?=} config
       * @return {?}
       */


      launch(configOrX, y = 0, config) {
        if (typeof configOrX === 'number') {
          return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign({}, this.rippleConfig, config));
        } else {
          return this._rippleRenderer.fadeInRipple(0, 0, Object.assign({}, this.rippleConfig, configOrX));
        }
      }

    }

    MatRipple.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
      args: [{
        selector: '[mat-ripple], [matRipple]',
        exportAs: 'matRipple',
        host: {
          'class': 'mat-ripple',
          '[class.mat-ripple-unbounded]': 'unbounded'
        }
      }]
    }];
    /** @nocollapse */

    MatRipple.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [MAT_RIPPLE_GLOBAL_OPTIONS]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]
      }]
    }];

    MatRipple.propDecorators = {
      color: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleColor']
      }],
      unbounded: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleUnbounded']
      }],
      centered: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleCentered']
      }],
      radius: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleRadius']
      }],
      animation: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleAnimation']
      }],
      disabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleDisabled']
      }],
      trigger: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['matRippleTrigger']
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class MatRippleModule {}

    MatRippleModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [MatCommonModule, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"]],
        exports: [MatRipple, MatCommonModule],
        declarations: [MatRipple]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Component that shows a simplified checkbox without including any kind of "real" checkbox.
     * Meant to be used when the checkbox is purely decorative and a large number of them will be
     * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
     * Note that theming is meant to be handled by the parent element, e.g.
     * `mat-primary .mat-pseudo-checkbox`.
     *
     * Note that this component will be completely invisible to screen-reader users. This is *not*
     * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly
     * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
     * of more complex components that appropriately handle selected / checked state.
     * \@docs-private
     */

    class MatPseudoCheckbox {
      /**
       * @param {?=} _animationMode
       */
      constructor(_animationMode) {
        this._animationMode = _animationMode;
        /**
         * Display state of the checkbox.
         */

        this.state = 'unchecked';
        /**
         * Whether the checkbox is disabled.
         */

        this.disabled = false;
      }

    }

    MatPseudoCheckbox.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
      args: [{
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
        selector: 'mat-pseudo-checkbox',
        styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}"],
        template: '',
        host: {
          'class': 'mat-pseudo-checkbox',
          '[class.mat-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
          '[class.mat-pseudo-checkbox-checked]': 'state === "checked"',
          '[class.mat-pseudo-checkbox-disabled]': 'disabled',
          '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"'
        }
      }]
    }];
    /** @nocollapse */

    MatPseudoCheckbox.ctorParameters = () => [{
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]
      }]
    }];

    MatPseudoCheckbox.propDecorators = {
      state: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      disabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    class MatPseudoCheckboxModule {}

    MatPseudoCheckboxModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        exports: [MatPseudoCheckbox],
        declarations: [MatPseudoCheckbox]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Boilerplate for applying mixins to MatOptgroup.

    /**
     * \@docs-private
     */

    class MatOptgroupBase {}
    /** @type {?} */


    const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase); // Counter for unique group ids.

    /** @type {?} */


    let _uniqueOptgroupIdCounter = 0;
    /**
     * Component that is used to group instances of `mat-option`.
     */

    class MatOptgroup extends _MatOptgroupMixinBase {
      constructor() {
        super(...arguments);
        /**
         * Unique id for the underlying label.
         */

        this._labelId = "mat-optgroup-label-".concat(_uniqueOptgroupIdCounter++);
      }

    }

    MatOptgroup.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
      args: [{
        selector: 'mat-optgroup',
        exportAs: 'matOptgroup',
        template: "<label class=\"mat-optgroup-label\" [id]=\"_labelId\">{{ label }}<ng-content></ng-content></label><ng-content select=\"mat-option, ng-container\"></ng-content>",
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
        inputs: ['disabled'],
        styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}"],
        host: {
          'class': 'mat-optgroup',
          'role': 'group',
          '[class.mat-optgroup-disabled]': 'disabled',
          '[attr.aria-disabled]': 'disabled.toString()',
          '[attr.aria-labelledby]': '_labelId'
        }
      }]
    }];
    MatOptgroup.propDecorators = {
      label: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }]
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Option IDs need to be unique across components, so this counter exists outside of
     * the component definition.
     * @type {?}
     */

    let _uniqueIdCounter = 0;
    /**
     * Event object emitted by MatOption when selected or deselected.
     */

    class MatOptionSelectionChange {
      /**
       * @param {?} source
       * @param {?=} isUserInput
       */
      constructor(source, isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
      }

    }
    /**
     * Injection token used to provide the parent component to options.
     * @type {?}
     */


    const MAT_OPTION_PARENT_COMPONENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_OPTION_PARENT_COMPONENT');
    /**
     * Single option inside of a `<mat-select>` element.
     */

    class MatOption {
      /**
       * @param {?} _element
       * @param {?} _changeDetectorRef
       * @param {?} _parent
       * @param {?} group
       */
      constructor(_element, _changeDetectorRef, _parent, group) {
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parent = _parent;
        this.group = group;
        this._selected = false;
        this._active = false;
        this._disabled = false;
        this._mostRecentViewValue = '';
        /**
         * The unique ID of the option.
         */

        this.id = "mat-option-".concat(_uniqueIdCounter++);
        /**
         * Event emitted when the option is selected or deselected.
         */
        // tslint:disable-next-line:no-output-on-prefix

        this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Emits when the state of the option changes and any parents have to be notified.
         */

        this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
      }
      /**
       * Whether the wrapping component is in multiple selection mode.
       * @return {?}
       */


      get multiple() {
        return this._parent && this._parent.multiple;
      }
      /**
       * Whether or not the option is currently selected.
       * @return {?}
       */


      get selected() {
        return this._selected;
      }
      /**
       * Whether the option is disabled.
       * @return {?}
       */


      get disabled() {
        return this.group && this.group.disabled || this._disabled;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
      }
      /**
       * Whether ripples for the option are disabled.
       * @return {?}
       */


      get disableRipple() {
        return this._parent && this._parent.disableRipple;
      }
      /**
       * Whether or not the option is currently active and ready to be selected.
       * An active option displays styles as if it is focused, but the
       * focus is actually retained somewhere else. This comes in handy
       * for components like autocomplete where focus must remain on the input.
       * @return {?}
       */


      get active() {
        return this._active;
      }
      /**
       * The displayed value of the option. It is necessary to show the selected option in the
       * select's trigger.
       * @return {?}
       */


      get viewValue() {
        // TODO(kara): Add input property alternative for node envs.
        return (this._getHostElement().textContent || '').trim();
      }
      /**
       * Selects the option.
       * @return {?}
       */


      select() {
        if (!this._selected) {
          this._selected = true;

          this._changeDetectorRef.markForCheck();

          this._emitSelectionChangeEvent();
        }
      }
      /**
       * Deselects the option.
       * @return {?}
       */


      deselect() {
        if (this._selected) {
          this._selected = false;

          this._changeDetectorRef.markForCheck();

          this._emitSelectionChangeEvent();
        }
      }
      /**
       * Sets focus onto this option.
       * @param {?=} _origin
       * @param {?=} options
       * @return {?}
       */


      focus(_origin, options) {
        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.

        /** @type {?} */
        const element = this._getHostElement();

        if (typeof element.focus === 'function') {
          element.focus(options);
        }
      }
      /**
       * This method sets display styles on the option to make it appear
       * active. This is used by the ActiveDescendantKeyManager so key
       * events will display the proper options as active on arrow key events.
       * @return {?}
       */


      setActiveStyles() {
        if (!this._active) {
          this._active = true;

          this._changeDetectorRef.markForCheck();
        }
      }
      /**
       * This method removes display styles on the option that made it appear
       * active. This is used by the ActiveDescendantKeyManager so key
       * events will display the proper options as active on arrow key events.
       * @return {?}
       */


      setInactiveStyles() {
        if (this._active) {
          this._active = false;

          this._changeDetectorRef.markForCheck();
        }
      }
      /**
       * Gets the label to be used when determining whether the option should be focused.
       * @return {?}
       */


      getLabel() {
        return this.viewValue;
      }
      /**
       * Ensures the option is selected when activated from the keyboard.
       * @param {?} event
       * @return {?}
       */


      _handleKeydown(event) {
        if ((event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"] || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]) && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["hasModifierKey"])(event)) {
          this._selectViaInteraction(); // Prevent the page from scrolling down and form submits.


          event.preventDefault();
        }
      }
      /**
       * `Selects the option while indicating the selection came from the user. Used to
       * determine if the select's view -> model callback should be invoked.`
       * @return {?}
       */


      _selectViaInteraction() {
        if (!this.disabled) {
          this._selected = this.multiple ? !this._selected : true;

          this._changeDetectorRef.markForCheck();

          this._emitSelectionChangeEvent(true);
        }
      }
      /**
       * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
       * attribute from single-selection, unselected options. Including the `aria-selected="false"`
       * attributes adds a significant amount of noise to screen-reader users without providing useful
       * information.
       * @return {?}
       */


      _getAriaSelected() {
        return this.selected || (this.multiple ? false : null);
      }
      /**
       * Returns the correct tabindex for the option depending on disabled state.
       * @return {?}
       */


      _getTabIndex() {
        return this.disabled ? '-1' : '0';
      }
      /**
       * Gets the host DOM element.
       * @return {?}
       */


      _getHostElement() {
        return this._element.nativeElement;
      }
      /**
       * @return {?}
       */


      ngAfterViewChecked() {
        // Since parent components could be using the option's label to display the selected values
        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        if (this._selected) {
          /** @type {?} */
          const viewValue = this.viewValue;

          if (viewValue !== this._mostRecentViewValue) {
            this._mostRecentViewValue = viewValue;

            this._stateChanges.next();
          }
        }
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._stateChanges.complete();
      }
      /**
       * Emits the selection change event.
       * @private
       * @param {?=} isUserInput
       * @return {?}
       */


      _emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));
      }

    }

    MatOption.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
      args: [{
        selector: 'mat-option',
        exportAs: 'matOption',
        host: {
          'role': 'option',
          '[attr.tabindex]': '_getTabIndex()',
          '[class.mat-selected]': 'selected',
          '[class.mat-option-multiple]': 'multiple',
          '[class.mat-active]': 'active',
          '[id]': 'id',
          '[attr.aria-selected]': '_getAriaSelected()',
          '[attr.aria-disabled]': 'disabled.toString()',
          '[class.mat-option-disabled]': 'disabled',
          '(click)': '_selectViaInteraction()',
          '(keydown)': '_handleKeydown($event)',
          'class': 'mat-option'
        },
        styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:0;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}@media (-ms-high-contrast:active){.mat-option{margin:0 1px}.mat-option.mat-active{border:solid 1px currentColor;margin:0}}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}@media (-ms-high-contrast:active){.mat-option .mat-option-ripple{opacity:.5}}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}"],
        template: "<mat-pseudo-checkbox *ngIf=\"multiple\" class=\"mat-option-pseudo-checkbox\" [state]=\"selected ? 'checked' : ''\" [disabled]=\"disabled\"></mat-pseudo-checkbox><span class=\"mat-option-text\"><ng-content></ng-content></span><div class=\"mat-option-ripple\" mat-ripple [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disabled || disableRipple\"></div>",
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
      }]
    }];
    /** @nocollapse */

    MatOption.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
        args: [MAT_OPTION_PARENT_COMPONENT]
      }]
    }, {
      type: MatOptgroup,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
      }]
    }];

    MatOption.propDecorators = {
      value: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      id: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      disabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      onSelectionChange: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };
    /**
     * Counts the amount of option group labels that precede the specified option.
     * \@docs-private
     * @param {?} optionIndex Index of the option at which to start counting.
     * @param {?} options Flat list of all of the options.
     * @param {?} optionGroups Flat list of all of the option groups.
     * @return {?}
     */

    function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
      if (optionGroups.length) {
        /** @type {?} */
        let optionsArray = options.toArray();
        /** @type {?} */

        let groups = optionGroups.toArray();
        /** @type {?} */

        let groupCounter = 0;

        for (let i = 0; i < optionIndex + 1; i++) {
          if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
            groupCounter++;
          }
        }

        return groupCounter;
      }

      return 0;
    }
    /**
     * Determines the position to which to scroll a panel in order for an option to be into view.
     * \@docs-private
     * @param {?} optionIndex Index of the option to be scrolled into the view.
     * @param {?} optionHeight Height of the options.
     * @param {?} currentScrollPosition Current scroll position of the panel.
     * @param {?} panelHeight Height of the panel.
     * @return {?}
     */


    function _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {
      /** @type {?} */
      const optionOffset = optionIndex * optionHeight;

      if (optionOffset < currentScrollPosition) {
        return optionOffset;
      }

      if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
      }

      return currentScrollPosition;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    class MatOptionModule {}

    MatOptionModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
      args: [{
        imports: [MatRippleModule, _angular_common__WEBPACK_IMPORTED_MODULE_11__["CommonModule"], MatPseudoCheckboxModule],
        exports: [MatOption, MatOptgroup],
        declarations: [MatOption, MatOptgroup]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * InjectionToken that can be used to specify the global label options.
     * @type {?}
     */

    const MAT_LABEL_GLOBAL_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-label-global-options');
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * When constructing a Date, the month is zero-based. This can be confusing, since people are
     * used to seeing them one-based. So we create these aliases to make writing the tests easier.
     * \@docs-private
     * \@breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.
     * @type {?}
     */

    const JAN = 0;
    /** @type {?} */

    const FEB = 1;
    /** @type {?} */

    const MAR = 2;
    /** @type {?} */

    const APR = 3;
    /** @type {?} */

    const MAY = 4;
    /** @type {?} */

    const JUN = 5;
    /** @type {?} */

    const JUL = 6;
    /** @type {?} */

    const AUG = 7;
    /** @type {?} */

    const SEP = 8;
    /** @type {?} */

    const OCT = 9;
    /** @type {?} */

    const NOV = 10;
    /** @type {?} */

    const DEC = 11;
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=core.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/material/esm2015/tooltip.js":
  /*!***********************************************************!*\
    !*** ./node_modules/@angular/material/esm2015/tooltip.js ***!
    \***********************************************************/

  /*! exports provided: MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations */

  /***/
  function node_modulesAngularMaterialEsm2015TooltipJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatTooltipModule", function () {
      return MatTooltipModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getMatTooltipInvalidPositionError", function () {
      return getMatTooltipInvalidPositionError;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY", function () {
      return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY", function () {
      return MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SCROLL_THROTTLE_MS", function () {
      return SCROLL_THROTTLE_MS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TOOLTIP_PANEL_CLASS", function () {
      return TOOLTIP_PANEL_CLASS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY", function () {
      return MAT_TOOLTIP_SCROLL_STRATEGY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
      return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS", function () {
      return MAT_TOOLTIP_DEFAULT_OPTIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MatTooltip", function () {
      return MatTooltip;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TooltipComponent", function () {
      return TooltipComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "matTooltipAnimations", function () {
      return matTooltipAnimations;
    });
    /* harmony import */


    var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/animations */
    "./node_modules/@angular/animations/fesm2015/animations.js");
    /* harmony import */


    var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/cdk/a11y */
    "./node_modules/@angular/cdk/esm2015/a11y.js");
    /* harmony import */


    var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/cdk/bidi */
    "./node_modules/@angular/cdk/esm2015/bidi.js");
    /* harmony import */


    var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/cdk/coercion */
    "./node_modules/@angular/cdk/esm2015/coercion.js");
    /* harmony import */


    var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @angular/cdk/keycodes */
    "./node_modules/@angular/cdk/esm2015/keycodes.js");
    /* harmony import */


    var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @angular/cdk/layout */
    "./node_modules/@angular/cdk/esm2015/layout.js");
    /* harmony import */


    var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @angular/cdk/overlay */
    "./node_modules/@angular/cdk/esm2015/overlay.js");
    /* harmony import */


    var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! @angular/cdk/platform */
    "./node_modules/@angular/cdk/esm2015/platform.js");
    /* harmony import */


    var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! @angular/cdk/portal */
    "./node_modules/@angular/cdk/esm2015/portal.js");
    /* harmony import */


    var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! @angular/cdk/scrolling */
    "./node_modules/@angular/cdk/esm2015/scrolling.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_material_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! @angular/material/core */
    "./node_modules/@angular/material/esm2015/core.js");
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Animations used by MatTooltip.
     * \@docs-private
     * @type {?}
     */


    const matTooltipAnimations = {
      /**
       * Animation that transitions a tooltip in and out.
       */
      tooltipState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('state', [Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('initial, void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
        opacity: 0,
        transform: 'scale(0)'
      })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
        transform: 'scale(1)'
      })), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('200ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["keyframes"])([Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
        opacity: 0,
        transform: 'scale(0)',
        offset: 0
      }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
        opacity: 0.5,
        transform: 'scale(0.99)',
        offset: 0.5
      }), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
        opacity: 1,
        transform: 'scale(1)',
        offset: 1
      })]))), Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('100ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
        opacity: 0
      })))])
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Time in ms to throttle repositioning after scroll events.
     * @type {?}
     */

    const SCROLL_THROTTLE_MS = 20;
    /**
     * CSS class that will be attached to the overlay panel.
     * @type {?}
     */

    const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';
    /**
     * Creates an error to be thrown if the user supplied an invalid tooltip position.
     * \@docs-private
     * @param {?} position
     * @return {?}
     */

    function getMatTooltipInvalidPositionError(position) {
      return Error("Tooltip position \"".concat(position, "\" is invalid."));
    }
    /**
     * Injection token that determines the scroll handling while a tooltip is visible.
     * @type {?}
     */


    const MAT_TOOLTIP_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_10__["InjectionToken"]('mat-tooltip-scroll-strategy');
    /**
     * \@docs-private
     * @param {?} overlay
     * @return {?}
     */

    function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {
      return (
        /**
        * @return {?}
        */
        () => overlay.scrollStrategies.reposition({
          scrollThrottle: SCROLL_THROTTLE_MS
        })
      );
    }
    /**
     * \@docs-private
     * @type {?}
     */


    const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
      provide: MAT_TOOLTIP_SCROLL_STRATEGY,
      deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]],
      useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY
    };
    /**
     * Injection token to be used to override the default options for `matTooltip`.
     * @type {?}
     */

    const MAT_TOOLTIP_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_10__["InjectionToken"]('mat-tooltip-default-options', {
      providedIn: 'root',
      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY
    });
    /**
     * \@docs-private
     * @return {?}
     */

    function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {
      return {
        showDelay: 0,
        hideDelay: 0,
        touchendHideDelay: 1500
      };
    }
    /**
     * Directive that attaches a material design tooltip to the host element. Animates the showing and
     * hiding of a tooltip provided position (defaults to below the element).
     *
     * https://material.io/design/components/tooltips.html
     */


    class MatTooltip {
      /**
       * @param {?} _overlay
       * @param {?} _elementRef
       * @param {?} _scrollDispatcher
       * @param {?} _viewContainerRef
       * @param {?} _ngZone
       * @param {?} platform
       * @param {?} _ariaDescriber
       * @param {?} _focusMonitor
       * @param {?} scrollStrategy
       * @param {?} _dir
       * @param {?} _defaultOptions
       * @param {?=} hammerLoader
       */
      constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._scrollDispatcher = _scrollDispatcher;
        this._viewContainerRef = _viewContainerRef;
        this._ngZone = _ngZone;
        this._ariaDescriber = _ariaDescriber;
        this._focusMonitor = _focusMonitor;
        this._dir = _dir;
        this._defaultOptions = _defaultOptions;
        this._position = 'below';
        this._disabled = false;
        /**
         * The default delay in ms before showing the tooltip after show is called
         */

        this.showDelay = this._defaultOptions.showDelay;
        /**
         * The default delay in ms before hiding the tooltip after hide is called
         */

        this.hideDelay = this._defaultOptions.hideDelay;
        this._message = '';
        this._manualListeners = new Map();
        /**
         * Emits when the component is destroyed.
         */

        this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
        this._scrollStrategy = scrollStrategy;
        /** @type {?} */

        const element = _elementRef.nativeElement;
        /** @type {?} */

        const hasGestures = typeof window === 'undefined' ||
        /** @type {?} */
        window.Hammer || hammerLoader; // The mouse events shouldn't be bound on mobile devices, because they can prevent the
        // first tap from firing its click event or can cause the tooltip to open for clicks.

        if (!platform.IOS && !platform.ANDROID) {
          this._manualListeners.set('mouseenter',
          /**
          * @return {?}
          */
          () => this.show()).set('mouseleave',
          /**
          * @return {?}
          */
          () => this.hide());
        } else if (!hasGestures) {
          // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise
          // there's no way for the user to trigger the tooltip on a touch device.
          this._manualListeners.set('touchstart',
          /**
          * @return {?}
          */
          () => this.show());
        }

        this._manualListeners.forEach(
        /**
        * @param {?} listener
        * @param {?} event
        * @return {?}
        */
        (listener, event) => element.addEventListener(event, listener));

        _focusMonitor.monitor(_elementRef).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(
        /**
        * @param {?} origin
        * @return {?}
        */
        origin => {
          // Note that the focus monitor runs outside the Angular zone.
          if (!origin) {
            _ngZone.run(
            /**
            * @return {?}
            */
            () => this.hide(0));
          } else if (origin === 'keyboard') {
            _ngZone.run(
            /**
            * @return {?}
            */
            () => this.show());
          }
        });

        if (_defaultOptions && _defaultOptions.position) {
          this.position = _defaultOptions.position;
        }
      }
      /**
       * Allows the user to define the position of the tooltip relative to the parent element
       * @return {?}
       */


      get position() {
        return this._position;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set position(value) {
        if (value !== this._position) {
          this._position = value;

          if (this._overlayRef) {
            this._updatePosition();

            if (this._tooltipInstance) {
              /** @type {?} */
              this._tooltipInstance.show(0);
            }

            this._overlayRef.updatePosition();
          }
        }
      }
      /**
       * Disables the display of the tooltip.
       * @return {?}
       */


      get disabled() {
        return this._disabled;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set disabled(value) {
        this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); // If tooltip is disabled, hide immediately.

        if (this._disabled) {
          this.hide(0);
        }
      }
      /**
       * The message to be displayed in the tooltip
       * @return {?}
       */


      get message() {
        return this._message;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set message(value) {
        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.


        this._message = value != null ? "".concat(value).trim() : '';

        if (!this._message && this._isTooltipVisible()) {
          this.hide(0);
        } else {
          this._updateTooltipMessage();

          this._ngZone.runOutsideAngular(
          /**
          * @return {?}
          */
          () => {
            // The `AriaDescriber` has some functionality that avoids adding a description if it's the
            // same as the `aria-label` of an element, however we can't know whether the tooltip trigger
            // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the
            // issue by deferring the description by a tick so Angular has time to set the `aria-label`.
            Promise.resolve().then(
            /**
            * @return {?}
            */
            () => {
              this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);
            });
          });
        }
      }
      /**
       * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.
       * @return {?}
       */


      get tooltipClass() {
        return this._tooltipClass;
      }
      /**
       * @param {?} value
       * @return {?}
       */


      set tooltipClass(value) {
        this._tooltipClass = value;

        if (this._tooltipInstance) {
          this._setTooltipClass(this._tooltipClass);
        }
      }
      /**
       * Setup styling-specific things
       * @return {?}
       */


      ngOnInit() {
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        /** @type {?} */

        const elementStyle =
        /** @type {?} */
        element.style;

        if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
          // When we bind a gesture event on an element (in this case `longpress`), HammerJS
          // will add some inline styles by default, including `user-select: none`. This is
          // problematic on iOS and in Safari, because it will prevent users from typing in inputs.
          // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected
          // behavior for text fields, we always clear the `user-select` to avoid such issues.
          elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';
        } // Hammer applies `-webkit-user-drag: none` on all elements by default,
        // which breaks the native drag&drop. If the consumer explicitly made
        // the element draggable, clear the `-webkit-user-drag`.


        if (element.draggable && elementStyle.webkitUserDrag === 'none') {
          elementStyle.webkitUserDrag = '';
        }
      }
      /**
       * Dispose the tooltip when destroyed.
       * @return {?}
       */


      ngOnDestroy() {
        if (this._overlayRef) {
          this._overlayRef.dispose();

          this._tooltipInstance = null;
        } // Clean up the event listeners set in the constructor


        this._manualListeners.forEach(
        /**
        * @param {?} listener
        * @param {?} event
        * @return {?}
        */
        (listener, event) => {
          this._elementRef.nativeElement.removeEventListener(event, listener);
        });

        this._manualListeners.clear();

        this._destroyed.next();

        this._destroyed.complete();

        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);

        this._focusMonitor.stopMonitoring(this._elementRef);
      }
      /**
       * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input
       * @param {?=} delay
       * @return {?}
       */


      show(delay = this.showDelay) {
        if (this.disabled || !this.message || this._isTooltipVisible() && !
        /** @type {?} */
        this._tooltipInstance._showTimeoutId && !
        /** @type {?} */
        this._tooltipInstance._hideTimeoutId) {
          return;
        }
        /** @type {?} */


        const overlayRef = this._createOverlay();

        this._detach();

        this._portal = this._portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["ComponentPortal"](TooltipComponent, this._viewContainerRef);
        this._tooltipInstance = overlayRef.attach(this._portal).instance;

        this._tooltipInstance.afterHidden().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(
        /**
        * @return {?}
        */
        () => this._detach());

        this._setTooltipClass(this._tooltipClass);

        this._updateTooltipMessage();

        /** @type {?} */
        this._tooltipInstance.show(delay);
      }
      /**
       * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input
       * @param {?=} delay
       * @return {?}
       */


      hide(delay = this.hideDelay) {
        if (this._tooltipInstance) {
          this._tooltipInstance.hide(delay);
        }
      }
      /**
       * Shows/hides the tooltip
       * @return {?}
       */


      toggle() {
        this._isTooltipVisible() ? this.hide() : this.show();
      }
      /**
       * Returns true if the tooltip is currently visible to the user
       * @return {?}
       */


      _isTooltipVisible() {
        return !!this._tooltipInstance && this._tooltipInstance.isVisible();
      }
      /**
       * Handles the keydown events on the host element.
       * @param {?} e
       * @return {?}
       */


      _handleKeydown(e) {
        if (this._isTooltipVisible() && e.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ESCAPE"] && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["hasModifierKey"])(e)) {
          e.preventDefault();
          e.stopPropagation();
          this.hide(0);
        }
      }
      /**
       * Handles the touchend events on the host element.
       * @return {?}
       */


      _handleTouchend() {
        this.hide(this._defaultOptions.touchendHideDelay);
      }
      /**
       * Create the overlay config and position strategy
       * @private
       * @return {?}
       */


      _createOverlay() {
        if (this._overlayRef) {
          return this._overlayRef;
        }
        /** @type {?} */


        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.

        /** @type {?} */


        const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);

        strategy.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(
        /**
        * @param {?} change
        * @return {?}
        */
        change => {
          if (this._tooltipInstance) {
            if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {
              // After position changes occur and the overlay is clipped by
              // a parent scrollable then close the tooltip.
              this._ngZone.run(
              /**
              * @return {?}
              */
              () => this.hide(0));
            }
          }
        });
        this._overlayRef = this._overlay.create({
          direction: this._dir,
          positionStrategy: strategy,
          panelClass: TOOLTIP_PANEL_CLASS,
          scrollStrategy: this._scrollStrategy()
        });

        this._updatePosition();

        this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(
        /**
        * @return {?}
        */
        () => this._detach());

        return this._overlayRef;
      }
      /**
       * Detaches the currently-attached tooltip.
       * @private
       * @return {?}
       */


      _detach() {
        if (this._overlayRef && this._overlayRef.hasAttached()) {
          this._overlayRef.detach();
        }

        this._tooltipInstance = null;
      }
      /**
       * Updates the position of the current tooltip.
       * @private
       * @return {?}
       */


      _updatePosition() {
        /** @type {?} */
        const position =
        /** @type {?} */

        /** @type {?} */
        this._overlayRef.getConfig().positionStrategy;
        /** @type {?} */


        const origin = this._getOrigin();
        /** @type {?} */


        const overlay = this._getOverlayPosition();

        position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);
      }
      /**
       * Returns the origin position and a fallback position based on the user's position preference.
       * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
       * @return {?}
       */


      _getOrigin() {
        /** @type {?} */
        const isLtr = !this._dir || this._dir.value == 'ltr';
        /** @type {?} */

        const position = this.position;
        /** @type {?} */

        let originPosition;

        if (position == 'above' || position == 'below') {
          originPosition = {
            originX: 'center',
            originY: position == 'above' ? 'top' : 'bottom'
          };
        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {
          originPosition = {
            originX: 'start',
            originY: 'center'
          };
        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {
          originPosition = {
            originX: 'end',
            originY: 'center'
          };
        } else {
          throw getMatTooltipInvalidPositionError(position);
        }

        const {
          x,
          y
        } = this._invertPosition(originPosition.originX, originPosition.originY);

        return {
          main: originPosition,
          fallback: {
            originX: x,
            originY: y
          }
        };
      }
      /**
       * Returns the overlay position and a fallback position based on the user's preference
       * @return {?}
       */


      _getOverlayPosition() {
        /** @type {?} */
        const isLtr = !this._dir || this._dir.value == 'ltr';
        /** @type {?} */

        const position = this.position;
        /** @type {?} */

        let overlayPosition;

        if (position == 'above') {
          overlayPosition = {
            overlayX: 'center',
            overlayY: 'bottom'
          };
        } else if (position == 'below') {
          overlayPosition = {
            overlayX: 'center',
            overlayY: 'top'
          };
        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {
          overlayPosition = {
            overlayX: 'end',
            overlayY: 'center'
          };
        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {
          overlayPosition = {
            overlayX: 'start',
            overlayY: 'center'
          };
        } else {
          throw getMatTooltipInvalidPositionError(position);
        }

        const {
          x,
          y
        } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);

        return {
          main: overlayPosition,
          fallback: {
            overlayX: x,
            overlayY: y
          }
        };
      }
      /**
       * Updates the tooltip message and repositions the overlay according to the new message length
       * @private
       * @return {?}
       */


      _updateTooltipMessage() {
        // Must wait for the message to be painted to the tooltip so that the overlay can properly
        // calculate the correct positioning based on the size of the text.
        if (this._tooltipInstance) {
          this._tooltipInstance.message = this.message;

          this._tooltipInstance._markForCheck();

          this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__["takeUntil"])(this._destroyed)).subscribe(
          /**
          * @return {?}
          */
          () => {
            if (this._tooltipInstance) {
              /** @type {?} */
              this._overlayRef.updatePosition();
            }
          });
        }
      }
      /**
       * Updates the tooltip class
       * @private
       * @param {?} tooltipClass
       * @return {?}
       */


      _setTooltipClass(tooltipClass) {
        if (this._tooltipInstance) {
          this._tooltipInstance.tooltipClass = tooltipClass;

          this._tooltipInstance._markForCheck();
        }
      }
      /**
       * Inverts an overlay position.
       * @private
       * @param {?} x
       * @param {?} y
       * @return {?}
       */


      _invertPosition(x, y) {
        if (this.position === 'above' || this.position === 'below') {
          if (y === 'top') {
            y = 'bottom';
          } else if (y === 'bottom') {
            y = 'top';
          }
        } else {
          if (x === 'end') {
            x = 'start';
          } else if (x === 'start') {
            x = 'end';
          }
        }

        return {
          x,
          y
        };
      }

    }

    MatTooltip.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Directive"],
      args: [{
        selector: '[matTooltip]',
        exportAs: 'matTooltip',
        host: {
          '(longpress)': 'show()',
          '(keydown)': '_handleKeydown($event)',
          '(touchend)': '_handleTouchend()'
        }
      }]
    }];
    /** @nocollapse */

    MatTooltip.ctorParameters = () => [{
      type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ElementRef"]
    }, {
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_9__["ScrollDispatcher"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ViewContainerRef"]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["NgZone"]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]
    }, {
      type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["AriaDescriber"]
    }, {
      type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Inject"],
        args: [MAT_TOOLTIP_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"],
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Optional"]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Inject"],
        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Optional"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Inject"],
        args: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__["HAMMER_LOADER"]]
      }]
    }];

    MatTooltip.propDecorators = {
      position: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"],
        args: ['matTooltipPosition']
      }],
      disabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"],
        args: ['matTooltipDisabled']
      }],
      showDelay: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"],
        args: ['matTooltipShowDelay']
      }],
      hideDelay: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"],
        args: ['matTooltipHideDelay']
      }],
      message: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"],
        args: ['matTooltip']
      }],
      tooltipClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Input"],
        args: ['matTooltipClass']
      }]
    };
    /**
     * Internal component that wraps the tooltip's content.
     * \@docs-private
     */

    class TooltipComponent {
      /**
       * @param {?} _changeDetectorRef
       * @param {?} _breakpointObserver
       */
      constructor(_changeDetectorRef, _breakpointObserver) {
        this._changeDetectorRef = _changeDetectorRef;
        this._breakpointObserver = _breakpointObserver;
        /**
         * Property watched by the animation framework to show or hide the tooltip
         */

        this._visibility = 'initial';
        /**
         * Whether interactions on the page should close the tooltip
         */

        this._closeOnInteraction = false;
        /**
         * Subject for notifying that the tooltip has been hidden from the view
         */

        this._onHide = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
        /**
         * Stream that emits whether the user has a handset-sized display.
         */

        this._isHandset = this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_5__["Breakpoints"].Handset);
      }
      /**
       * Shows the tooltip with an animation originating from the provided origin
       * @param {?} delay Amount of milliseconds to the delay showing the tooltip.
       * @return {?}
       */


      show(delay) {
        // Cancel the delayed hide if it is scheduled
        if (this._hideTimeoutId) {
          clearTimeout(this._hideTimeoutId);
          this._hideTimeoutId = null;
        } // Body interactions should cancel the tooltip if there is a delay in showing.


        this._closeOnInteraction = true;
        this._showTimeoutId = setTimeout(
        /**
        * @return {?}
        */
        () => {
          this._visibility = 'visible';
          this._showTimeoutId = null; // Mark for check so if any parent component has set the
          // ChangeDetectionStrategy to OnPush it will be checked anyways

          this._markForCheck();
        }, delay);
      }
      /**
       * Begins the animation to hide the tooltip after the provided delay in ms.
       * @param {?} delay Amount of milliseconds to delay showing the tooltip.
       * @return {?}
       */


      hide(delay) {
        // Cancel the delayed show if it is scheduled
        if (this._showTimeoutId) {
          clearTimeout(this._showTimeoutId);
          this._showTimeoutId = null;
        }

        this._hideTimeoutId = setTimeout(
        /**
        * @return {?}
        */
        () => {
          this._visibility = 'hidden';
          this._hideTimeoutId = null; // Mark for check so if any parent component has set the
          // ChangeDetectionStrategy to OnPush it will be checked anyways

          this._markForCheck();
        }, delay);
      }
      /**
       * Returns an observable that notifies when the tooltip has been hidden from view.
       * @return {?}
       */


      afterHidden() {
        return this._onHide.asObservable();
      }
      /**
       * Whether the tooltip is being displayed.
       * @return {?}
       */


      isVisible() {
        return this._visibility === 'visible';
      }
      /**
       * @return {?}
       */


      ngOnDestroy() {
        this._onHide.complete();
      }
      /**
       * @return {?}
       */


      _animationStart() {
        this._closeOnInteraction = false;
      }
      /**
       * @param {?} event
       * @return {?}
       */


      _animationDone(event) {
        /** @type {?} */
        const toState =
        /** @type {?} */
        event.toState;

        if (toState === 'hidden' && !this.isVisible()) {
          this._onHide.next();
        }

        if (toState === 'visible' || toState === 'hidden') {
          this._closeOnInteraction = true;
        }
      }
      /**
       * Interactions on the HTML body should close the tooltip immediately as defined in the
       * material design spec.
       * https://material.io/design/components/tooltips.html#behavior
       * @return {?}
       */


      _handleBodyInteraction() {
        if (this._closeOnInteraction) {
          this.hide(0);
        }
      }
      /**
       * Marks that the tooltip needs to be checked in the next change detection run.
       * Mainly used for rendering the initial text before positioning a tooltip, which
       * can be problematic in components with OnPush change detection.
       * @return {?}
       */


      _markForCheck() {
        this._changeDetectorRef.markForCheck();
      }

    }

    TooltipComponent.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["Component"],
      args: [{
        selector: 'mat-tooltip-component',
        template: "<div class=\"mat-tooltip\" [ngClass]=\"tooltipClass\" [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\" [@state]=\"_visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">{{message}}</div>",
        styles: [".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}"],
        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ViewEncapsulation"].None,
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ChangeDetectionStrategy"].OnPush,
        animations: [matTooltipAnimations.tooltipState],
        host: {
          // Forces the element to have a layout in IE and Edge. This fixes issues where the element
          // won't be rendered if the animations are disabled or there is no web animations polyfill.
          '[style.zoom]': '_visibility === "visible" ? 1 : null',
          '(body:click)': 'this._handleBodyInteraction()',
          'aria-hidden': 'true'
        }
      }]
    }];
    /** @nocollapse */

    TooltipComponent.ctorParameters = () => [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["ChangeDetectorRef"]
    }, {
      type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_5__["BreakpointObserver"]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    class MatTooltipModule {}

    MatTooltipModule.decorators = [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__["NgModule"],
      args: [{
        imports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["A11yModule"], _angular_common__WEBPACK_IMPORTED_MODULE_14__["CommonModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_15__["MatCommonModule"]],
        exports: [MatTooltip, TooltipComponent, _angular_material_core__WEBPACK_IMPORTED_MODULE_15__["MatCommonModule"]],
        declarations: [MatTooltip, TooltipComponent],
        entryComponents: [TooltipComponent],
        providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {
          provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_11__["HAMMER_GESTURE_CONFIG"],
          useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_15__["GestureConfig"]
        }]
      }]
    }];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=tooltip.js.map

    /***/
  },

  /***/
  "./node_modules/css-element-queries/src/ResizeSensor.js":
  /*!**************************************************************!*\
    !*** ./node_modules/css-element-queries/src/ResizeSensor.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCssElementQueriesSrcResizeSensorJs(module, exports, __webpack_require__) {
    "use strict";

    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
    /**
     * Copyright Marc J. Schmidt. See the LICENSE file at the top-level
     * directory of this distribution and at
     * https://github.com/marcj/css-element-queries/blob/master/LICENSE.
     */


    (function (root, factory) {
      if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
      } else {}
    })(typeof window !== 'undefined' ? window : this, function () {
      // Make sure it does not throw in a SSR (Server Side Rendering) situation
      if (typeof window === "undefined") {
        return null;
      } // https://github.com/Semantic-Org/Semantic-UI/issues/3855
      // https://github.com/marcj/css-element-queries/issues/257


      var globalWindow = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')(); // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.
      // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and
      // would generate too many unnecessary events.

      var requestAnimationFrame = globalWindow.requestAnimationFrame || globalWindow.mozRequestAnimationFrame || globalWindow.webkitRequestAnimationFrame || function (fn) {
        return globalWindow.setTimeout(fn, 20);
      };
      /**
       * Iterate over each of the provided element(s).
       *
       * @param {HTMLElement|HTMLElement[]} elements
       * @param {Function}                  callback
       */


      function forEachElement(elements, callback) {
        var elementsType = Object.prototype.toString.call(elements);
        var isCollectionTyped = '[object Array]' === elementsType || '[object NodeList]' === elementsType || '[object HTMLCollection]' === elementsType || '[object Object]' === elementsType || 'undefined' !== typeof jQuery && elements instanceof jQuery //jquery
        || 'undefined' !== typeof Elements && elements instanceof Elements //mootools
        ;
        var i = 0,
            j = elements.length;

        if (isCollectionTyped) {
          for (; i < j; i++) {
            callback(elements[i]);
          }
        } else {
          callback(elements);
        }
      }
      /**
      * Get element size
      * @param {HTMLElement} element
      * @returns {Object} {width, height}
      */


      function getElementSize(element) {
        if (!element.getBoundingClientRect) {
          return {
            width: element.offsetWidth,
            height: element.offsetHeight
          };
        }

        var rect = element.getBoundingClientRect();
        return {
          width: Math.round(rect.width),
          height: Math.round(rect.height)
        };
      }
      /**
       * Apply CSS styles to element.
       *
       * @param {HTMLElement} element
       * @param {Object} style
       */


      function setStyle(element, style) {
        Object.keys(style).forEach(function (key) {
          element.style[key] = style[key];
        });
      }
      /**
       * Class for dimension change detection.
       *
       * @param {Element|Element[]|Elements|jQuery} element
       * @param {Function} callback
       *
       * @constructor
       */


      var ResizeSensor = function ResizeSensor(element, callback) {
        /**
         *
         * @constructor
         */
        function EventQueue() {
          var q = [];

          this.add = function (ev) {
            q.push(ev);
          };

          var i, j;

          this.call = function (sizeInfo) {
            for (i = 0, j = q.length; i < j; i++) {
              q[i].call(this, sizeInfo);
            }
          };

          this.remove = function (ev) {
            var newQueue = [];

            for (i = 0, j = q.length; i < j; i++) {
              if (q[i] !== ev) newQueue.push(q[i]);
            }

            q = newQueue;
          };

          this.length = function () {
            return q.length;
          };
        }
        /**
         *
         * @param {HTMLElement} element
         * @param {Function}    resized
         */


        function attachResizeEvent(element, resized) {
          if (!element) return;

          if (element.resizedAttached) {
            element.resizedAttached.add(resized);
            return;
          }

          element.resizedAttached = new EventQueue();
          element.resizedAttached.add(resized);
          element.resizeSensor = document.createElement('div');
          element.resizeSensor.dir = 'ltr';
          element.resizeSensor.className = 'resize-sensor';
          var style = {
            pointerEvents: 'none',
            position: 'absolute',
            left: '0px',
            top: '0px',
            right: '0px',
            bottom: '0px',
            overflow: 'hidden',
            zIndex: '-1',
            visibility: 'hidden',
            maxWidth: '100%'
          };
          var styleChild = {
            position: 'absolute',
            left: '0px',
            top: '0px',
            transition: '0s'
          };
          setStyle(element.resizeSensor, style);
          var expand = document.createElement('div');
          expand.className = 'resize-sensor-expand';
          setStyle(expand, style);
          var expandChild = document.createElement('div');
          setStyle(expandChild, styleChild);
          expand.appendChild(expandChild);
          var shrink = document.createElement('div');
          shrink.className = 'resize-sensor-shrink';
          setStyle(shrink, style);
          var shrinkChild = document.createElement('div');
          setStyle(shrinkChild, styleChild);
          setStyle(shrinkChild, {
            width: '200%',
            height: '200%'
          });
          shrink.appendChild(shrinkChild);
          element.resizeSensor.appendChild(expand);
          element.resizeSensor.appendChild(shrink);
          element.appendChild(element.resizeSensor);
          var computedStyle = window.getComputedStyle(element);
          var position = computedStyle ? computedStyle.getPropertyValue('position') : null;

          if ('absolute' !== position && 'relative' !== position && 'fixed' !== position) {
            element.style.position = 'relative';
          }

          var dirty, rafId;
          var size = getElementSize(element);
          var lastWidth = 0;
          var lastHeight = 0;
          var initialHiddenCheck = true;
          var lastAnimationFrame = 0;

          var resetExpandShrink = function resetExpandShrink() {
            var width = element.offsetWidth;
            var height = element.offsetHeight;
            expandChild.style.width = width + 10 + 'px';
            expandChild.style.height = height + 10 + 'px';
            expand.scrollLeft = width + 10;
            expand.scrollTop = height + 10;
            shrink.scrollLeft = width + 10;
            shrink.scrollTop = height + 10;
          };

          var reset = function reset() {
            // Check if element is hidden
            if (initialHiddenCheck) {
              var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;

              if (invisible) {
                // Check in next frame
                if (!lastAnimationFrame) {
                  lastAnimationFrame = requestAnimationFrame(function () {
                    lastAnimationFrame = 0;
                    reset();
                  });
                }

                return;
              } else {
                // Stop checking
                initialHiddenCheck = false;
              }
            }

            resetExpandShrink();
          };

          element.resizeSensor.resetSensor = reset;

          var onResized = function onResized() {
            rafId = 0;
            if (!dirty) return;
            lastWidth = size.width;
            lastHeight = size.height;

            if (element.resizedAttached) {
              element.resizedAttached.call(size);
            }
          };

          var onScroll = function onScroll() {
            size = getElementSize(element);
            dirty = size.width !== lastWidth || size.height !== lastHeight;

            if (dirty && !rafId) {
              rafId = requestAnimationFrame(onResized);
            }

            reset();
          };

          var addEvent = function addEvent(el, name, cb) {
            if (el.attachEvent) {
              el.attachEvent('on' + name, cb);
            } else {
              el.addEventListener(name, cb);
            }
          };

          addEvent(expand, 'scroll', onScroll);
          addEvent(shrink, 'scroll', onScroll); // Fix for custom Elements

          requestAnimationFrame(reset);
        }

        forEachElement(element, function (elem) {
          attachResizeEvent(elem, callback);
        });

        this.detach = function (ev) {
          ResizeSensor.detach(element, ev);
        };

        this.reset = function () {
          element.resizeSensor.resetSensor();
        };
      };

      ResizeSensor.reset = function (element) {
        forEachElement(element, function (elem) {
          elem.resizeSensor.resetSensor();
        });
      };

      ResizeSensor.detach = function (element, ev) {
        forEachElement(element, function (elem) {
          if (!elem) return;

          if (elem.resizedAttached && typeof ev === "function") {
            elem.resizedAttached.remove(ev);
            if (elem.resizedAttached.length()) return;
          }

          if (elem.resizeSensor) {
            if (elem.contains(elem.resizeSensor)) {
              elem.removeChild(elem.resizeSensor);
            }

            delete elem.resizeSensor;
            delete elem.resizedAttached;
          }
        });
      };

      if (typeof MutationObserver !== "undefined") {
        var observer = new MutationObserver(function (mutations) {
          for (var i in mutations) {
            if (mutations.hasOwnProperty(i)) {
              var items = mutations[i].addedNodes;

              for (var j = 0; j < items.length; j++) {
                if (items[j].resizeSensor) {
                  ResizeSensor.reset(items[j]);
                }
              }
            }
          }
        });
        document.addEventListener("DOMContentLoaded", function (event) {
          observer.observe(document.body, {
            childList: true,
            subtree: true
          });
        });
      }

      return ResizeSensor;
    });
    /***/

  },

  /***/
  "./node_modules/raw-loader/dist/cjs.js!./src/app/folder/components/home/home.component.html":
  /*!**************************************************************************************************!*\
    !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/folder/components/home/home.component.html ***!
    \**************************************************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesRawLoaderDistCjsJsSrcAppFolderComponentsHomeHomeComponentHtml(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony default export */


    __webpack_exports__["default"] = "<ion-header [translucent]=\"true\">\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-menu-button></ion-menu-button>\n        </ion-buttons>\n        <ion-title>{{ folder | titlecase }}</ion-title>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content [fullscreen]=\"true\">\n    <ion-header collapse=\"condense\">\n        <ion-toolbar>\n            <ion-title size=\"large\">{{ folder | titlecase}}</ion-title>\n        </ion-toolbar>\n    </ion-header>\n    <ion-grid>\n        <ion-row>\n            <ion-col>\n                <ion-card>\n                    <ion-item>\n                        <ion-label><img src=\"../assets/icon/cases.png\" alt=\"Smiley face\" height=\"42\" width=\"42\">&nbsp;&nbsp;&nbsp;Total Cases : {{totalConfirmedCases | number}}</ion-label>\n                    </ion-item>\n                </ion-card>\n            </ion-col>\n            <ion-col>\n                <ion-card>\n                    <ion-item>\n                        <ion-label><img src=\"../assets/icon/dead.png\" alt=\"Smiley face\" height=\"42\" width=\"42\">&nbsp;&nbsp;&nbsp;Total Deaths : {{totalDeaths | number}}</ion-label>\n                    </ion-item>\n                </ion-card>\n            </ion-col>\n            <ion-col>\n                <ion-card>\n                    <ion-item>\n                        <ion-label><img src=\"../assets/icon/saved.jpg\" alt=\"Smiley face\" height=\"42\" width=\"42\">&nbsp;&nbsp;&nbsp;Total Recovered : {{totalRecoveredCases | number}}</ion-label>\n                    </ion-item>\n                </ion-card>\n            </ion-col>\n\n        </ion-row>\n    </ion-grid>\n    <!-- <agm-map [latitude]=\"latitude\" [longitude]=\"longitude\" [zoom]=\"zoom\">\n      <agm-marker [latitude]=\"latitude\" [longitude]=\"longitude\" [markerDraggable]=\"true\" (dragEnd)=\"markerDragEnd($event)\"></agm-marker>\n  </agm-map> -->\n    <ion-grid style=\"margin: 15px;\">\n        <!-- <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> -->\n        <!-- Created for MapSVG plugin: http://mapsvg.com -->\n        <svg xmlns:mapsvg=\"http://mapsvg.com\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" mapsvg:geoViewBox=\"-141.007366 83.116658 -52.648425 41.730628\"\n            width=\"792.48273\" height=\"1030.8354\" style=\"margin: 155px;\">\n        <path\n           d=\"m 278.17,938.02051 -2.88,0 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -2.96,0 0.11,-0.29 -0.06,-0.32 -0.68,-0.77 -0.28,-0.72 -0.23,-0.29 -1.48,-0.58 -0.21,-0.3 -0.07,-0.27 -0.36,-0.3 -0.48,-0.81 -0.77,-0.83 -0.2,-0.36 -0.02,-0.44 0.13,-0.92 -0.02,-0.34 -0.21,-0.1 -0.71,-0.07 -0.32,-0.17 -0.16,-0.26 -0.03,-0.23 0.46,-0.54 0.39,-1.21 0.04,-0.92 -0.42,-1.9 0.06,-0.29 0.24,-0.42 0,-0.48 -0.15,-0.58 -0.43,-0.95 -0.65,-3.21 -1.83,-2.61 -0.49,-0.45 -0.39,-0.11 -0.33,0 -0.55,0.39 -0.15,0.05 -0.14,-0.13 -0.4,-0.44 -0.35,-0.57 -0.05,-0.11 0.03,-0.19 0.08,-0.25 -0.11,-0.33 -0.22,-0.32 -0.1,-0.13 -0.12,0 -0.14,0.02 -0.1,0.01 -0.11,-0.07 -0.31,-0.35 -1.8,-1.4 -0.05,-0.2 0.47,-0.56 -0.08,-0.39 -0.2,-0.37 -1.57,-1.53 -1.31,-0.45 -0.52,-0.4 -0.14,-0.3 -0.19,-0.95 -0.06,-0.18 -0.12,-0.1 -0.72,-0.42 -0.37,-0.44 -0.66,-0.36 -0.26,-0.36 -0.28,-1.44 -0.6,-0.71 -0.3,-0.66 -0.42,-0.43 -0.4,-0.6 -0.58,-0.51 -0.6,-1.56 -0.36,-0.46 -0.39,-0.14 -0.37,0.17 -0.29,0.25 -0.15,0.27 -0.06,0.44 -0.14,0.1 -0.74,0.02 -0.23,-0.32 -0.89,-2.17 -0.35,-0.59 -1.51,-1.75 -0.67,-1.59 -0.25,-0.04 -0.33,0.21 -1.82,0.04 -1.46,-0.96 -0.33,-0.36 -0.31,-0.58 0.78,-1.18 0.03,-0.45 -0.23,-0.16 -1.13,-0.53 -1.07,-0.81 -0.23,0.29 -0.14,0.56 -0.15,0.22 -1.17,0.42 -0.27,-0.03 -0.19,-0.33 -0.04,-0.47 0.2,-0.62 -0.37,-0.52 -0.2,-0.65 -0.56,-0.9 0.28,-0.75 -0.1,-0.5 -0.25,-0.49 -0.49,-0.63 -0.14,-0.76 -0.43,-0.63 -0.23,-0.15 -0.93,-0.1 -0.22,-0.21 -0.34,-0.93 -0.09,-0.8 -0.47,-0.48 -0.32,-0.11 -0.06,-0.84 -0.27,-0.47 -0.99,-0.87 -0.71,-0.36 -0.21,0.47 -0.05,0.97 -0.21,-0.07 -1.93,-0.98 -0.43,-0.48 -0.82,-1.66 -0.31,-0.13 -1.41,-0.17 -0.5,0.14 -0.29,-0.11 -0.39,-0.44 -0.86,-1.37 -0.32,-0.26 -0.34,-0.1 -0.02,-0.77 -0.23,-0.54 0.03,-0.15 0.28,-0.04 1.29,0 0.07,-0.28 -0.69,-0.99 -0.65,-0.13 -0.18,-0.23 -0.11,-0.71 -0.5,-0.41 -0.26,-0.71 0.01,-5.86 0,-5.92 0,-5.97 0,-6.03 0,-6.09 0,-6.15 0,-6.21 0,-6.28 0,-6.34 0,-6.41 0,-6.47 0,-6.55 0,-6.62 0,-6.7 0,-6.76 0,-6.85 5.61,0 5.6,0 5.6,0 5.6,0 5.61,0 5.6,0 5.6,0 5.61,0 5.6,0 5.6,0 5.6,0 5.61,0 5.6,0 5.6,0 5.61,0 5.6,0 0,6.12 0,6.06 0,6.01 0,5.94 0,5.88 0,5.83 0,5.77 0,5.71 0,5.66 0,5.61 0,5.56 0,5.51 0,5.46 0,5.41 0,5.37 0,5.32 0,5.28 0,5.23 0,5.19 0,5.14 0,5.11 0,5.06 0,5.03 0,4.98 0,4.95 0,4.91 0,4.88 0,4.84 0,4.8 0,4.77 0,4.74 z\"\n           title=\"Alberta\"\n           id=\"CA-AB\" class=\"carona-high\" (mouseover)=\"mapMouseOver('CA-AB')\" matTooltipPosition=\"above\" [matTooltip]=\"CAAB\"/>\n        <path\n           d=\"m 154.29,767.18051 4.28,0 4.28,0 4.28,0 4.28,0 4.28,0 4.28,0 4.28,0 4.28,0 0,6.85 0,6.77 0,6.69 0,6.62 0,6.55 0,6.48 0,6.41 0,6.34 0,6.28 0,6.21 0,6.15 0,6.09 0,6.03 0,5.97 0,5.92 0,5.86 0.25,0.71 0.5,0.41 0.11,0.71 0.18,0.23 0.66,0.14 0.69,0.98 -0.07,0.28 -1.29,0 -0.28,0.04 -0.02,0.15 0.22,0.54 0.02,0.77 0.35,0.1 0.32,0.27 0.86,1.37 0.39,0.44 0.29,0.11 0.5,-0.14 1.41,0.16 0.31,0.14 0.82,1.66 0.43,0.48 1.93,0.98 0.21,0.07 0.05,-0.97 0.21,-0.47 0.7,0.36 0.99,0.87 0.27,0.47 0.06,0.84 0.31,0.11 0.48,0.48 0.09,0.81 0.34,0.92 0.23,0.21 0.93,0.1 0.22,0.15 0.44,0.64 0.14,0.76 0.49,0.63 0.25,0.49 0.1,0.51 -0.28,0.75 0.55,0.9 0.2,0.65 0.37,0.52 -0.19,0.62 0.03,0.47 0.2,0.33 0.27,0.03 1.18,-0.42 0.14,-0.22 0.14,-0.56 0.24,-0.29 1.07,0.82 1.12,0.52 0.23,0.17 -0.03,0.45 -0.78,1.18 0.31,0.58 0.33,0.36 1.46,0.96 1.81,-0.04 0.33,-0.21 0.25,0.05 0.68,1.58 1.5,1.75 0.36,0.59 0.88,2.17 0.23,0.32 0.74,-0.02 0.14,-0.1 0.06,-0.44 0.16,-0.27 0.29,-0.25 0.36,-0.17 0.39,0.13 0.36,0.47 0.6,1.55 0.59,0.52 0.39,0.59 0.42,0.43 0.3,0.67 0.6,0.71 0.28,1.43 0.25,0.36 0.66,0.37 0.37,0.44 0.72,0.42 0.11,0.1 0.06,0.18 0.19,0.96 0.14,0.3 0.51,0.39 1.31,0.45 1.57,1.54 0.2,0.37 0.07,0.38 -0.47,0.57 0.05,0.2 1.8,1.4 0.31,0.35 0.11,0.07 0.1,-0.01 0.14,-0.02 0.12,0 0.1,0.13 0.21,0.32 0.11,0.33 -0.08,0.25 -0.03,0.19 0.05,0.11 0.35,0.57 0.4,0.45 0.14,0.13 0.15,-0.05 0.55,-0.39 0.33,0 0.39,0.11 0.49,0.45 1.83,2.61 0.65,3.21 0.44,0.95 0.14,0.58 0,0.48 -0.24,0.42 -0.06,0.29 0.42,1.91 -0.05,0.92 -0.39,1.21 -0.46,0.54 0.03,0.23 0.16,0.26 0.32,0.18 0.71,0.07 0.22,0.1 0.01,0.34 -0.12,0.92 0.02,0.43 0.2,0.36 0.77,0.83 0.48,0.81 0.36,0.31 0.07,0.27 0.21,0.29 1.48,0.58 0.23,0.29 0.28,0.72 0.67,0.76 0.06,0.32 -0.11,0.29 -0.86,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -1.65,0 -2.17,0 -3.82,0 -2.89,0 -0.94,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -0.92,0 -0.34,-0.48 -0.87,-0.63 -0.35,0 -0.35,0.19 -0.22,0.31 -0.2,0.62 -0.33,0 -0.28,-0.86 0.07,-0.39 0.29,-0.46 -0.02,-0.17 -0.63,0.13 -0.28,-0.12 -0.13,-0.25 0.05,-0.98 -0.34,-0.56 0.41,-0.24 1.05,-0.19 1.07,-0.02 0.31,-0.41 0.3,-1.04 -0.77,0.96 -0.46,0.1 -1.42,-0.36 -0.92,0.06 -0.12,-0.21 0.04,-0.21 0.2,-0.21 0.15,-0.72 0.22,-2.03 0.29,-0.74 0.1,-0.4 -0.07,-0.09 -1.23,1.42 -0.1,0.45 0.13,0.39 -0.12,0.8 -0.57,0.24 -0.34,-0.13 -0.64,0.67 -0.2,0.07 -2.94,-1.18 -0.29,-0.16 -0.51,-0.55 -0.72,-0.94 -0.23,-0.81 0.27,-0.69 0.28,-0.34 0.3,0 0.33,0.26 0.68,1.12 0.27,0.69 0.7,-0.1 1.13,-0.88 0.27,-0.33 -1.13,0.34 -0.49,-0.02 -0.5,-0.37 -0.51,-0.71 -0.26,-0.81 0,-2.58 0.17,-0.5 0.55,-0.37 0.35,-0.62 -0.03,-0.26 -0.34,-0.52 -0.49,-0.41 -0.48,-0.21 -0.11,0.06 0.74,1.13 -0.02,0.42 -0.82,1.1 -0.13,0.32 -0.01,1.08 -0.11,0.23 -0.66,0.3 -0.74,0.84 -1.25,0.29 -1.18,-0.08 -0.63,-0.42 -1.96,-2.07 -0.72,-0.87 -0.02,-0.73 -1.34,-2.58 0.01,-0.56 -0.47,-0.81 -0.52,-0.11 -0.12,-0.77 1.07,-1.67 0.67,-1.41 0.08,-0.44 -0.03,-0.69 -0.16,-1.53 0.14,-0.66 -0.66,0.88 -0.14,0.65 0.16,0.65 -0.1,0.74 -0.38,1.04 -0.66,1.1 -1.35,0.53 -2.39,-0.29 -0.28,-0.14 -0.17,-0.38 -0.12,-1.62 -0.15,0.2 -0.27,0.86 -0.22,1.23 -0.28,0.28 -0.5,0.02 -0.39,-0.2 -0.28,-0.42 -0.6,-0.04 -1.13,0.33 -0.53,-0.13 -0.63,-0.01 -1.27,-0.36 -1.51,-0.09 -0.41,-0.28 0.02,-0.54 0.28,-0.27 1.59,-0.24 1.54,-0.57 1.52,-0.28 -0.06,-0.29 -0.69,-0.09 -3.49,0.63 -1.1,-0.08 -0.19,-0.1 -0.03,-0.64 0.4,-0.61 0.67,-0.56 0.2,-0.43 -0.39,-0.18 -0.63,0.12 -0.3,-0.34 0.33,-1.34 -0.29,-1.37 -0.41,1.3 -0.62,0.71 -2.95,0.3 -0.48,0.38 -0.39,-0.01 -1.88,-0.69 -0.8,-0.42 -0.76,-0.62 -1.34,-1.4 -1.05,-0.91 -0.06,-1.68 0.23,-1.07 0.51,-1.2 1.91,-2.6 0.65,-0.49 0.59,-0.17 2.8,-0.23 2.09,-0.33 0.39,-0.16 -3.07,-0.19 -2.73,0.13 -0.93,0.41 -1.19,1.67 -0.3,0.7 -0.32,0.51 -0.21,0.01 -0.41,-0.18 -0.13,-0.22 -0.17,-0.55 -0.64,-0.87 -0.28,-1 -0.17,-1.47 0.05,-0.66 0.3,-0.84 0.92,-1.66 -1.18,0.04 0.14,-1.4 0.43,-1.52 1.09,-0.9 1.11,-0.65 1,-0.86 1.75,-0.57 0.6,1.17 1.5,0.35 0.44,0.53 0.53,0.97 0.66,0.92 0.79,0.88 0.22,0.06 -0.35,-0.75 -1.28,-1.65 -0.06,-0.58 -0.33,-0.63 -1.69,-0.91 -0.3,-0.35 -0.3,-0.92 -0.13,-0.6 0.19,-0.58 1.72,-1.77 0.39,-0.93 0,-0.44 -0.13,-0.5 -0.38,-0.86 -0.1,0 0.12,1.3 -0.06,0.51 -0.19,0.56 -0.28,0.43 -0.37,0.29 -3.7,4.02 -0.37,0.24 -1.37,0.36 -0.7,0.43 -0.38,0.56 -0.61,1.46 -0.84,2.91 -0.96,2.35 -0.82,-3.04 -1.47,-2.34 2.87,-2.33 0.07,-0.36 -0.28,-1.25 0.08,-0.38 0.27,-0.55 0.73,-0.8 -0.03,-0.08 -0.85,0.29 -1.31,1.81 -0.51,0.58 -0.27,0.08 -0.03,-1.06 0.7,-2.76 0.58,-2.69 0.21,-0.77 0.5,-0.78 -0.47,0.06 -2.32,1.2 -0.78,-0.75 -0.65,-3.92 -1.14,-1.54 -1.94,-1.26 -1.9,-0.59 -0.44,-1.13 -0.38,-1.37 0.51,-1.62 0.83,-0.77 0.77,-0.35 0.73,0.16 0.04,0.59 -0.49,1.6 0.65,0.15 2.61,1.93 0.57,0.16 1.08,-0.74 0.6,0.03 1.42,0.6 0.48,0.72 1.36,1.42 -0.2,-0.83 -1.48,-1.74 -0.83,-0.56 -1.45,-0.11 -0.9,0.29 -0.38,-0.08 -0.79,-0.44 -0.67,-0.73 -0.67,-1.6 -0.15,-0.75 0.04,-0.55 0.16,-0.5 0.28,-0.45 0.55,-0.33 0.83,-0.2 0.25,-0.2 -1.06,-0.92 -0.48,0 -1.66,1.35 -0.34,0.11 -0.15,-0.26 -0.14,-0.02 -0.49,0.67 -0.38,0.3 -1.36,2.06 -0.21,0.98 -0.08,1.46 -0.16,0.92 -0.24,0.37 -1.6,0.7 -0.91,1.42 -1.1,-1.23 -1.21,-1.19 -0.81,-2.08 -1.46,-0.37 -1.69,-1.18 -0.65,-1.05 0.92,-2.17 1.32,-1.64 0.2,-1.98 0.18,-0.43 2.26,-0.49 1.48,-0.99 -1.51,-0.09 -0.93,0.15 -1.67,0.69 -1.85,-1.36 -0.95,-1.25 -0.3,-1.06 0.33,-0.9 0.04,-0.92 0.17,-1.25 0.17,-0.54 0.39,-0.7 0.79,-0.46 0.7,-1.43 0.29,-1 1.44,-3.02 0.52,-1.31 0.98,-1.82 1.97,-2.87 -0.62,0.16 -0.33,0.25 -0.31,-0.03 -0.29,-0.31 -0.28,-0.64 -0.27,-0.97 -0.15,0.43 -0.03,1.82 -0.2,1.55 -0.35,1.08 -0.97,2.18 -0.57,0.85 -0.39,-0.79 0.3,-1.36 0.56,-1.09 0.1,-1.49 -0.53,-1.78 -0.32,-1.44 -0.12,-1.09 -0.02,-1 0.09,-0.9 0.22,-0.99 0.36,-1.07 -0.04,-0.12 0.1,-1 -0.08,-1.02 -0.3,-0.81 -0.38,-0.71 -1.05,0.42 -1.78,-0.64 -0.57,-1.74 -1.54,-0.53 -0.83,-1.24 -1.69,-0.61 -1.37,-0.42 -1.04,-0.72 -1.22,-0.84 -1.22,-0.9 -0.93,-0.68 -0.69,0.04 -1.55,0.1 -0.08,-1.54 -0.47,-0.93 0.18,-0.83 -0.86,-0.42 -1.27,-0.62 0.37,-1.58 0.28,-1.2 -1.13,-0.36 -1.62,-0.51 0.52,-1.08 0.42,-0.88 -0.62,-1.29 -1.26,-2.16 -0.97,-1.55 -1.26,-2.42 -1.11,-2.14 -0.91,-1.75 -0.76,-1.21 -1.07,-2.17 -1.39,-2.46 -1.32,-1.94 0.19,-1.26 -1.3,-1.58 -1.14,-1.61 -1.32,-1.86 -1.3,-0.91 -0.93,-0.65 -1.34,-0.94 -0.7,-0.84 -0.29,-0.71 -0.3,-0.5 -0.26,-0.7 -0.15,-0.82 -0.27,-0.51 -1.62,-1.22 -0.5,-0.77 -1.12,-0.89 -0.94,-0.37 -0.33,-0.3 -1.14,-2.69 0.18,-0.96 0.13,-0.96 -0.13,-0.49 -1.88,-2.06 -0.96,-0.86 -0.97,-0.89 -2.03,1.15 -2.08,1.17 -1.46,0.43 -2.01,0.59 0.67,1.27 -0.28,0.93 -0.63,0.43 -1.06,-0.05 0,3.15 -1,2.23 -2.1,0.04 -1.13,0.77 -1.68,1.13 -1.36,0.92 -1.44,1.48 -0.74,-0.21 0.33,-1.32 -0.54,-2.35 -0.44,-1.87 -0.93,-0.96 -1.56,-1.62 -1.17,-1.22 -1.67,-1.75 -1.17,-1.22 -1.22,-1.28 -1.6,-1.68 -0.66,-2.19 -1.46,-0.79 -1.57,-0.85 -0.12,-0.15 8.62,0.01 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.53,0 8.57,0 z m -57.33,83.03 -0.04,-0.54 0.42,-1.2 1.21,-2.52 -0.02,-0.72 -0.18,-1.08 -0.55,-1.77 -0.18,-0.96 -0.05,-1.1 0.08,-1.03 0.23,-0.96 0.33,-0.89 0.44,-0.83 -0.6,1.63 -0.28,1.51 0.11,1.74 0.37,1.55 0.28,1.05 0.14,0.7 0.06,0.63 -0.03,0.73 -0.41,0.92 -1.33,3.14 z m -3.24,3.99 0.74,-1 1.62,-1.74 0.88,-1.25 0.09,1.23 -1.3,2.06 -1.67,1.02 -0.36,-0.32 z m -3.15,4.49 -0.21,0.02 -0.08,-0.32 0.05,-0.67 0.28,-1.13 0.13,-0.26 1.16,0.2 0.17,0.08 0.04,0.22 -0.09,0.35 -0.37,0.51 -1.08,1 z m -15.5,5.38 0.82,0.9 1.97,-0.57 0.37,0.11 0.37,0.34 0.41,0.73 0.45,1.11 0.1,1.21 -0.18,0.43 -0.35,0.48 -3.14,1.92 -0.08,0.18 0.06,0.17 0.29,0.18 0.63,-0.02 2.49,-0.48 0.14,-0.33 0.17,-1.52 0.34,-0.81 0.03,-0.61 -0.23,-1.45 0.01,-0.58 1.74,-0.12 1.09,-0.54 1.11,-1 0.25,0.03 -0.16,1.81 -0.15,0.55 -1.06,2.2 -0.61,1.93 -0.3,1.9 -0.05,3.14 -0.26,1.06 -0.48,0.65 -3.01,1.13 -1.55,-0.07 -1.38,-1.03 -0.65,-0.71 0.49,-0.86 0.34,-0.04 0.97,0.17 0.75,0.32 0.33,0.01 -0.06,-0.2 -2.14,-1.62 -1.57,-0.74 -0.47,-0.83 -0.01,-0.64 -0.12,-0.36 -1.24,-2.25 -0.24,-0.89 -0.16,-1.26 0,-1.3 0.31,-2.11 0.14,-0.23 0.51,0.02 0.88,0.26 2.09,0.23 z m 21.69,2.58 -0.28,0.55 -0.63,0.85 -0.42,0.34 -0.21,-0.18 -0.56,-0.09 -0.6,-0.85 -0.47,-0.34 -0.31,-0.02 -0.15,0.31 -0.04,0.41 0.08,0.52 -0.05,0.23 -0.18,-0.05 -0.18,-0.24 -0.18,-0.44 -0.04,-0.44 0.1,-0.45 0.44,-0.61 1.37,-1.26 0.42,-0.23 0.45,0.05 0.73,0.59 0.16,0.17 0.55,1.18 z m 3.48,11.9 -0.18,0.05 -0.59,-0.18 -1.95,-2.53 -1.38,-0.92 -0.94,-1.25 -0.96,-0.8 0.59,-1.31 0.51,0.16 1.79,1.07 1.43,1.03 0.81,0.67 1.7,2.87 -0.13,0.41 -0.7,0.73 z m 6.1,0.75 -0.05,0.11 -0.93,0 -0.26,-0.15 -0.16,-0.31 -0.07,-0.47 0.15,-0.57 0.55,-1.09 0.02,-0.47 0.12,-0.2 0.39,0.55 0.16,0.51 0.08,2.09 z m 5.52,2.65 0.41,4.72 -0.03,1.5 -0.6,0.98 -0.42,1.64 -0.49,0.74 -0.47,-0.98 -0.04,-1.63 -0.12,-1.3 -0.15,-0.62 0.18,-2.43 -0.21,0.18 -0.55,1.07 -0.62,0.07 -1.1,-1.21 -0.55,-0.98 -0.09,-1.03 -0.73,-1.08 -0.08,-0.38 0.06,-0.4 0.6,-1.08 0.24,-0.73 0.21,-1.51 0.24,-0.59 0.56,0.08 1.01,0.68 1.05,0.74 0.97,0.99 0.72,2.56 z m -28.7,-3.81 0.91,1.38 0.27,1.23 -0.11,1.45 -1.44,0.55 -0.76,-0.44 -0.33,0.08 -0.5,0.43 0.6,0.19 0.85,0.71 0.74,0.92 1.05,0.17 1.39,0.64 -1.05,1.16 -0.16,0.66 1.32,1.83 0.12,0.46 0.42,0.09 0.98,-0.15 0.12,0.15 0,0.38 -0.6,1.06 0.06,0.21 0.54,0.17 1.04,0.01 0.24,1.05 -0.94,0.96 -1.8,-1.23 -0.8,-1.23 -0.46,-1.14 -0.55,-0.65 -1.67,-1.43 -2.53,-3.11 -0.65,-0.45 -0.66,-1.24 -0.19,-0.6 0.02,-0.4 0.26,-0.21 0.76,-0.14 0.01,-0.62 -2.91,-1.08 -0.32,-0.22 -0.38,-0.76 0.2,-0.11 1.6,0.13 1.72,-0.36 1.06,-0.28 0.42,-0.34 0.86,-0.44 0.36,0.03 0.89,0.53 z m 21.87,3.03 -0.13,0.12 -0.37,-0.2 -0.36,-0.39 -0.61,-1.1 -0.2,-0.46 -0.13,-0.75 0.12,-0.13 0.27,0.08 0.19,0.13 0.96,1.82 0.26,0.88 z m 3.38,7.12 -0.29,0.67 -1.2,-1.62 -0.44,-0.46 -0.89,-1.72 -0.16,-0.74 0.04,-0.42 0.16,-0.15 0.28,0.11 0.26,0.19 1.72,1.91 0.48,0.9 0.04,1.33 z m 5.09,1.6 -0.69,0.2 0.23,-0.79 0.07,-0.47 -0.12,-0.44 -0.09,-0.85 -0.03,-2 0.67,-1.26 1.05,-0.04 -0.01,0.64 -0.45,2.84 -0.23,1.31 -0.18,0.48 -0.22,0.38 z m -23.85,6.41 -0.16,0.03 -0.3,-0.3 -0.21,-0.49 -0.12,-1.27 0.09,-0.52 0.08,-0.2 0.78,0.81 -0.16,1.94 z m 27.83,7.04 -0.15,0.24 -0.36,0 -0.57,-0.24 -0.42,-0.53 -0.51,-1.66 0.06,-0.29 0.18,-0.29 0.82,-0.6 0.3,0.07 0.11,0.44 0.49,0.98 0.14,0.29 0,1.14 -0.09,0.45 z m 6.52,11.86 4.45,1.76 4.46,0.87 3.27,1.02 2.01,0.31 0.73,0.22 0.47,0.36 0.55,0.87 0.95,2.07 0.72,1.32 1.5,2.28 1.18,1.61 0.27,0.64 -0.25,0.21 0.02,0.38 0.9,1.56 1.68,1.4 1.32,0.66 2.78,1.09 1.7,1.05 0.53,0.73 0.74,0.71 0.31,0.49 0.61,1.8 1.13,1.73 1.16,3.28 0.22,-0.27 0.13,-0.98 0.13,-0.22 0.25,-0.1 0.23,0.38 0.21,0.86 0.74,2.04 -0.24,0.59 -0.21,0.06 -1,-0.28 -0.35,0.37 -0.47,0.74 -0.33,0.3 -0.19,-0.14 -2.89,-0.71 -1.78,-0.67 -2.34,-1.06 -2.81,-1.11 -1.6,-0.76 -1.34,-0.78 -0.93,-0.67 -0.18,-0.57 0.04,-0.27 1.8,-1.82 0.76,-0.98 0.29,-0.75 0.15,-0.79 -0.11,-0.97 -0.07,0.08 -0.16,0.93 -0.27,0.83 -0.32,0.65 -0.21,0.23 -2.16,0.32 -1.74,-0.1 -0.87,0.78 -0.26,0.1 -0.48,-0.26 -1.05,-1.04 -1.51,-0.85 0.15,-0.21 0.98,-0.44 0.52,-0.64 -0.09,-0.1 -0.35,0.04 -0.31,-0.13 -0.61,-0.83 -0.35,-0.23 -0.74,0.37 -0.3,0.02 -0.29,-0.55 0.41,-1.26 0.02,-0.3 -0.76,0.46 -0.25,-0.15 -0.24,-0.41 -0.22,-0.17 -0.62,0.08 -0.67,-0.38 -0.23,0.15 -0.09,0.55 -0.22,0.14 -1.02,-0.92 -0.23,-0.03 -0.5,0.7 -0.17,0.04 -0.26,-0.3 -0.14,-1.71 0.06,-0.49 0.14,-0.16 0.89,-0.4 2.56,-0.43 0.21,-0.31 -1.91,0.16 -0.5,-0.23 -0.53,-0.59 -0.56,0.01 -0.3,-0.19 -0.31,-0.42 -0.81,-1.56 -0.55,-0.39 -0.94,-0.25 -0.48,-0.3 -0.2,0.13 -0.2,0.44 -0.26,0.28 -0.64,0.16 -0.59,-0.11 -0.46,-0.43 -0.27,-0.54 -0.1,-0.6 0.25,-0.8 0,-0.32 -0.11,-0.37 -0.21,-0.3 -0.31,-0.23 -0.17,0.12 -0.03,0.47 -0.17,0.34 -0.53,0.26 -0.43,-0.46 -0.29,-0.64 -0.33,-0.46 -1.86,0 -0.86,0.59 -0.41,0.05 -0.43,-0.14 -0.08,-0.31 0.4,-0.86 -0.1,-1.14 -0.1,-0.29 -0.86,-0.17 -0.15,-0.28 0.51,-1.39 0.29,-0.26 0.38,-0.1 1.7,-0.11 0.57,0.2 0.82,0.85 -0.03,-0.32 -0.31,-0.96 -0.04,-0.58 0.57,-0.65 -0.54,-0.19 -2.02,-0.15 0.02,0.42 0.17,0.59 -1.2,0.52 -0.89,0.09 -0.85,-0.08 -0.69,-0.31 -1.18,-1.25 -0.74,-1.23 0.03,-0.67 0.41,-0.71 0.53,-0.48 1.26,-0.42 1.64,-0.04 1.84,0.56 4.59,2.51 z m 18.05,7.61 -0.1,0.74 -0.58,-1.19 -0.89,-2.54 0.12,-0.59 0.4,-0.84 0.36,-0.05 0.58,0.39 0.51,0.7 0.12,0.27 0.31,0.73 0.16,0.66 -0.35,0.8 -0.64,0.92 z m 1.85,0.94 -0.21,0.12 -0.22,-1.58 0.27,-0.57 0.08,-0.29 -0.03,-0.3 0.47,0.71 0.19,0.48 0.08,0.66 -0.01,0.18 -0.62,0.59 z m -14.91,5.87 -0.35,0.06 -0.56,-0.17 -0.63,-0.4 -1.11,-1.05 -0.11,-0.24 0.1,-0.21 0.32,-0.17 0.07,-0.28 -0.26,-0.76 0.89,-0.48 0.79,0.4 0.36,0.49 0.43,0.87 0.19,0.98 0.02,0.67 -0.15,0.29 z m 22.3,1.03 0.12,0.29 -1.99,-1.07 -0.85,-0.63 -0.33,-0.46 -0.21,-0.26 -1.01,-0.68 -0.17,-0.31 0.24,-0.23 0.68,0.14 1.13,0.51 1.01,0.84 1.38,1.86 z m -17.38,2.44 0.25,1.24 -1.1,-0.2 -0.38,-0.24 -0.02,-0.59 0.21,-0.56 0.84,0.2 0.2,0.15 z m 24.38,6.39 -0.11,0.15 -1.4,-0.96 -0.94,-1.26 -0.39,-0.77 1.85,1.91 0.94,0.63 0.05,0.3 z m -0.56,1.78 -0.38,0.35 -0.2,-0.05 -0.16,-0.24 -0.58,-2.38 0.25,0.05 0.78,0.74 -0.18,0.29 0.58,0.71 0.14,0.51 -0.25,0.02 z\"\n           title=\"British Columbia\"\n           id=\"CA-BC\" class=\"carona-high\" (mouseover)=\"mapMouseOver('CA-BC')\" [matTooltip]=\"CABC\"/>\n        <path\n           d=\"m 466.88,821.05051 -2.3,2.55 -2.31,2.6 -2.32,2.58 -2.32,2.57 -3.13,3.61 -3.13,3.58 -3.14,3.57 -3.13,3.54 -2.74,3.28 -2.73,3.26 -2.74,3.24 -2.74,3.23 -2.29,2.81 -2.28,2.81 -2.29,2.78 -2.29,2.78 -3.43,3.49 -3.44,3.47 -3.44,3.45 -3.43,3.44 -0.01,6.35 -0.01,6.29 -0.01,6.23 -0.01,6.17 -0.01,6.12 0,6.05 -0.01,6.01 0.04,5.96 -0.02,2.28 -0.04,2.89 -2.11,-0.02 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -1.1,0 -2.72,0 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -3.82,0 -0.33,-5.85 -0.36,-5.88 -0.36,-5.94 -0.35,-5.99 -0.36,-6.05 -0.36,-6.11 -0.35,-6.16 -0.36,-6.22 -0.36,-6.28 -0.35,-6.34 -0.36,-6.41 -0.36,-6.47 -0.35,-6.54 -0.36,-6.61 -0.36,-6.68 -0.35,-6.76 -0.01,-4.18 0,-4.2 0,-4.24 0,-4.26 0,-4.3 0,-4.32 0,-4.36 0,-4.38 0,-4.42 0,-4.46 0,-4.48 0,-4.52 0,-4.56 0,-4.59 0,-4.62 0,-4.66 4.03,0 4.04,0 4.03,0 4.03,0 4.04,0 4.03,0 4.03,0 4.04,0 4.03,0 4.03,0 4.04,0 4.03,0 4.03,0 4.04,0 4.03,0 4.31,-0.01 -0.12,0.86 0.08,8.43 -0.11,3.7 -0.28,2.03 -0.45,1.11 -0.78,0.33 0.99,0.32 0.63,0.52 0.29,0.79 0.28,1.25 0.35,0.57 0.45,-0.09 0.4,0.12 0.35,0.35 1.08,1.78 1.19,0.5 0.05,0.99 -0.46,5.47 0,0.71 0.54,-1.37 0.57,-4.25 0.77,-1.9 0.6,-0.41 2.47,-0.21 2.64,0.48 0.99,0.06 0.87,-0.26 0.89,0.53 0.22,0.53 0.25,2.24 0.24,1.28 1.57,4.52 0.74,2.52 0.92,3.91 0.34,1.12 1.9,5.16 0.36,1.39 0.15,1.08 -0.06,0.75 -0.35,1.15 -0.63,1.56 -0.59,1.18 -0.54,0.81 -0.57,0.61 -0.57,0.4 0.04,0.1 0.65,-0.19 0.66,-0.41 1.27,-1.05 0.48,-0.23 1.37,-0.15 0.05,0.38 -0.67,0.78 0.15,0.07 0.96,-0.63 2.07,-0.9 8.13,-2.93 1.91,-0.25 2.74,0.53 2.22,1.25 2.42,1.6 2.54,1.16 4.02,1.08 1.18,0.52 z\"\n           title=\"Manitoba\" id=\"CA-MB\" class=\"carona-normal\" (mouseover)=\"mapMouseOver('CA-MB')\" [matTooltip]=\"CAMB\"/>\n        <path\n           d=\"m 690.26,977.46051 -0.18,0.45 -0.97,0.17 -0.51,0.82 -0.51,0.65 -0.38,0.18 -0.8,0.11 -0.7,0.26 -0.49,-0.77 -0.86,-1.03 -0.08,0.43 0.43,1.28 -1.66,2.24 -1.07,0.16 -1.43,1.04 -2.02,0.91 -2.35,1.73 -3.04,1.45 -0.64,0.01 -1.38,-1.2 0.39,-0.54 0.36,-0.74 -0.34,0.21 -0.22,0.32 -0.83,0.51 0.68,0.99 -0.33,0.37 -0.97,0.49 -0.9,0.71 -0.79,0.47 -0.64,-0.6 -1.76,0.76 -1.48,0.2 -0.32,-0.38 -0.09,-0.61 -0.52,-0.15 -0.96,0.17 -0.37,-0.32 -0.41,-0.16 -0.38,-0.13 -0.33,-0.1 -0.19,0.18 -0.18,0.24 -0.22,0.18 -0.46,-0.25 -0.29,-0.46 -0.47,-0.48 -0.18,-0.36 0.09,-0.42 0.21,-0.4 0.09,-0.48 -0.23,-0.55 -0.21,-0.31 -0.15,-0.36 0.05,-0.34 0.29,-0.16 0.27,-0.21 0.09,-0.45 -0.17,-0.48 -0.48,-0.2 -0.4,0.07 -0.58,-0.1 -0.56,-0.3 -0.37,-0.34 -0.28,-0.2 -0.22,0 -0.26,-0.2 -0.16,-0.33 0.02,-0.54 0.07,-0.33 0.15,-0.29 0.01,-0.32 -0.06,-0.23 -0.01,-0.18 0.04,-0.23 0.09,-0.45 -0.16,-0.33 -0.02,-1.15 -0.03,-2.16 -0.02,-1.66 -0.03,-2.09 -0.02,-1.52 -0.02,-2.14 -0.02,-2.04 -0.04,-1.93 -1.15,-1.11 -1.45,-1.41 -1.24,-0.94 -0.68,-0.11 -0.42,0.13 -0.17,0.37 -0.93,0.4 -1.69,0.43 -1.44,0.66 -0.53,0.01 -0.45,-0.11 -0.59,-0.33 -0.41,-0.49 -0.04,-0.28 3.81,-1.66 1.19,-0.79 0.59,-0.63 0.32,-0.46 0.13,-0.34 0,-1.37 0,-0.97 0,-0.97 0,-1.21 1.12,0 1.25,0 0,-0.92 0.81,0 0.99,0 1.56,0 1.13,0 0.03,0.4 0.27,0.39 1.92,1.13 0.52,-0.43 1.07,-0.09 1.16,-0.33 0.95,0.25 0.24,-0.85 0.74,-0.46 1.24,-0.33 0.65,0.15 1.82,-0.75 0.62,0.08 1.34,0.96 3.23,1.04 0.84,0.68 0.8,2.18 0.53,0.35 1.11,-0.23 1.25,-1.08 1.04,-0.58 2.03,-0.47 -0.4,0.72 1.55,-0.06 1.53,0.96 -0.57,0.68 -0.77,1.37 -0.54,2.66 -1.56,1.78 -2.09,1.74 0.53,0.42 0.61,0.26 1.34,-0.51 0.9,0.04 1,0.33 -0.31,1.35 -0.36,0.91 0.21,0.85 0.59,1.62 0.81,0.36 0.33,2.07 0.43,1.13 -0.06,0.9 0.82,0.58 0.14,0.92 2.96,0.26 0.6,0.35 2.05,0.35 0.39,0.25 0.37,0.5 -2.01,1.1 0.27,0.14 z m -3.99,-25.49 -1.03,0.69 0.45,-1.04 0.19,-0.27 0.17,-0.12 0.17,0.09 0.05,0.65 z m -0.29,0.96 -0.23,0.97 -0.78,0.82 -0.39,0.06 -0.18,-0.08 0.22,-0.53 -0.02,-0.92 0.65,-0.13 0.24,0.08 0.49,-0.27 z m -20.21,41.46 -1.21,0.66 0.47,-1.7 0.38,-0.52 0.51,0.18 -0.07,1.03 -0.08,0.35 z\"\n           title=\"New Brunswick\"\n           id=\"CA-NB\" class=\"carona-high\" (mouseover)=\"mapMouseOver('CA-NB')\" [matTooltip]=\"CANB\"/>\n        <path\n           d=\"m 752.39,903.78051 -0.01,-3.85 0,-4.2 -3.65,0 -3.64,0 -3.64,0 -3.65,0 -3.65,0 -3.64,0 -3.64,0 -3.65,0 -3.64,0 -3.64,0 -3.65,0 -3.64,0 -3.65,0 -3.64,0 -3.65,0 -3.64,0 -1.35,-0.14 -0.24,-0.14 -0.08,-0.34 0.06,-0.1 0.73,0.04 0.36,-0.17 -0.03,-0.5 -0.14,-0.64 -0.73,-2.33 -1.06,-0.69 -0.46,-0.53 -0.07,-0.54 -0.08,-0.16 -0.99,-0.42 -0.04,-0.12 0.06,-0.28 0.38,-0.59 0.56,-0.59 0.51,-0.35 0.79,-0.32 2.58,-0.55 0.89,-0.31 0.12,-0.28 -1.26,-1.26 -0.12,-0.34 -0.03,-0.43 0.16,-1.69 -0.05,-0.37 -0.46,-1.05 -0.59,-0.98 -0.46,-0.13 -0.69,0.07 -0.95,0.41 -0.11,0.17 -0.5,2.53 -0.31,0.25 -1.18,0.36 -0.35,0.58 -0.08,2.8 0.03,1.06 0.72,2.58 -0.25,2.8 -0.26,0.56 -0.9,0.71 -0.1,0.24 -0.45,2.23 -0.12,1.27 0.08,0.44 0.33,0.61 -0.01,0.58 -1.94,1.73 -0.82,0.12 -0.89,-1.73 -0.04,-0.36 0.09,-0.25 0.48,-0.4 0.11,-0.5 -0.28,-0.34 -0.96,-0.82 -1.5,-2.17 -0.93,-0.85 -0.91,-0.6 -1.17,-0.45 -1.16,-0.26 -0.48,0 -0.2,0.1 -0.69,1.49 -0.34,0.3 -0.38,0 -0.53,-0.3 -0.81,-0.15 -0.23,0.59 -0.19,0.16 -0.5,-0.03 -0.86,-0.39 -0.51,-0.41 -0.55,-1.46 -0.46,-0.3 -1.17,-1.04 -0.15,0.09 -0.28,1.55 -0.17,0.49 -0.3,-0.14 -0.26,-0.28 -0.29,-0.66 -0.21,-0.96 -0.01,-0.68 0.55,-0.83 0.07,-0.29 -0.29,-3.57 0.08,-0.41 0.45,-0.78 0.09,-0.96 0.14,-0.5 0.28,-0.31 0.09,-0.53 -0.25,-0.55 -0.55,-0.86 -0.34,-0.28 -0.36,-0.12 -0.2,0.2 -0.28,0.69 -0.84,0.4 -0.14,0.32 -0.36,2.39 -0.15,0.32 -1.13,0.6 -0.37,-0.18 -0.37,0.07 -0.48,-0.07 -0.7,-0.33 -0.35,-0.51 -0.01,-1.15 0.14,-1.29 0.23,-0.9 0.52,-1.38 0.05,-1.64 0.25,-2.18 -0.06,-0.39 -0.32,-0.43 -0.41,-0.14 -0.45,-0.37 -0.47,-1.28 -0.33,-0.61 -2.62,-0.88 -0.15,-0.18 -0.03,-0.33 0.19,-1.44 -0.14,-1 -0.53,-0.65 -2.03,-2.95 -0.04,-0.41 0.27,-0.6 0.45,-0.63 1.52,-1.45 0.03,-0.25 -0.07,-0.44 -0.6,-1.69 -0.25,-0.92 -0.09,-0.85 0.17,-0.71 0.21,-0.2 0.38,-0.11 1.99,0.85 0.26,-0.02 0.44,-1.03 0.77,-0.48 0.03,-0.56 -0.47,-0.45 -0.05,-0.27 -0.77,-1.96 -0.74,-1.42 -0.39,-1.04 -0.19,-0.82 0.1,-0.35 0.16,-0.2 0.62,-0.04 0.33,0.17 1.21,1.97 2.69,2.43 1.28,0.51 0.66,-0.78 -0.05,-0.75 -0.48,-1.58 0.16,-0.78 -0.49,-2.05 0.25,-0.99 -0.05,-0.32 -0.65,-1.27 -0.02,-0.27 0.23,-0.27 0.36,0.15 1.04,0.99 3.39,3.87 0.75,0.63 0.66,0.41 1.79,0.54 0.14,0.14 0.64,1.45 0.5,0.56 0.59,0.37 4.97,0.4 2.75,-0.23 4.25,0.12 3.86,1.43 1.42,0.34 0.47,-0.05 0.37,-0.45 0.79,-2.04 0.7,-2.2 0.14,-0.69 -0.04,-0.4 -0.64,-1.55 0.15,-0.85 0.21,-0.43 0.73,-0.66 2.4,-1.53 0.44,-0.51 -0.35,-1.02 -0.07,-0.57 0.08,-0.69 -0.03,-0.47 -1.35,-0.45 -0.53,-0.36 -0.46,-0.5 -0.98,-1.74 -1.58,-2.47 -0.07,-0.36 0.09,-0.64 0.33,-0.39 0.67,-0.45 0.25,-0.26 -0.18,-0.53 -2.31,-0.6 -0.45,-0.4 -0.74,-0.1 -0.32,-0.04 0.11,-0.76 0.83,-1.09 -0.12,-0.27 -1.53,-0.74 -0.28,-0.22 -0.06,-0.17 0.03,-0.56 -0.16,-0.97 0.75,-0.57 0.88,-0.15 0.26,-0.59 -0.26,-0.84 -1.41,-2.67 -0.03,-0.27 0.13,-0.5 0.63,-0.8 0.24,-0.55 0.48,-0.7 0.42,-0.42 0.24,-2.19 0.36,-0.99 0.39,-0.77 0.3,-1.61 -0.02,-0.22 -0.3,-0.63 -0.06,-0.66 0.52,-1.28 -0.17,-1.95 0.03,-0.66 0.13,-0.47 1.16,-1.48 0.15,-0.39 -0.03,-0.51 -0.15,-0.05 -0.88,0.51 -0.7,-0.17 -0.43,-0.12 -0.27,-0.3 -0.44,-0.88 -0.36,-0.31 -0.22,-0.02 -0.53,0.3 -0.3,-0.46 -0.49,-1.06 -0.83,-2.4 -1.44,-1.38 -0.12,-0.38 0.05,-0.39 0.21,-0.42 2.45,-3.23 0.67,-0.68 1.57,-1.04 0.1,-0.39 -0.03,-0.39 -0.37,-0.86 -1.4,0.18 -0.21,-0.17 -0.21,-0.76 0.01,-0.37 0.13,-0.35 0.35,-0.42 0.64,-0.31 3.65,-0.82 0.42,-0.2 0.08,-0.17 -0.07,-0.3 -0.28,-0.49 -0.51,-0.54 -0.67,-0.41 -0.55,-0.14 -2.36,0.88 -1.48,0.7 -0.33,0.03 -0.39,-0.29 -0.52,-1.39 -2.9,-0.79 -1.71,-0.31 -0.36,-0.34 -0.02,-0.6 0.16,-0.63 0.28,-0.35 0.28,-0.15 3.38,0.87 0.32,-0.06 0.3,-0.31 -0.07,-0.41 -0.98,-0.82 -0.32,-0.44 -0.25,-0.87 -0.13,-1.04 0.01,-2.28 0.14,-0.75 0.69,-1.02 0.42,-0.33 -0.06,-0.7 -0.53,-0.23 -2.42,1.09 -0.55,-0.39 -0.38,-0.92 0.24,-4.88 0.26,-0.86 0.86,-0.74 0.04,-0.29 -0.03,-0.2 -0.16,-0.18 -1.36,-0.77 -0.31,-0.41 -0.17,-0.48 0.06,-0.26 0.88,-0.25 0.64,-0.49 0.54,-0.34 0.25,-0.56 -0.2,-0.36 -1.3,-0.63 -0.52,-0.76 0,-0.23 0.28,-0.3 1.81,-0.7 1.03,0.68 0.57,0.72 0.15,1.02 -0.97,1.38 -1.66,1.03 -0.5,0.45 0.32,0.26 1.55,-0.82 1.36,-0.38 1.11,0.01 0.9,1.63 0.13,2.26 -0.52,1.87 0.68,-0.93 0.85,-0.51 0.69,1.22 0.08,1 0.37,0.93 0.79,1.25 0.82,1.09 -0.9,1.14 -1.08,0.68 0.23,0.51 1.48,0.54 0.2,0.54 -0.16,0.73 0.21,0 1.03,-1.12 0.88,0.15 1.12,2.42 -0.82,1.38 -1.25,0.63 -0.99,0.27 -1.38,-0.04 -0.54,0.21 0.27,0.46 1.32,0.01 2.02,-0.35 1.51,-0.57 0.66,-0.03 0.69,0.23 0.23,0.19 -0.73,0.4 -0.05,0.14 0.27,0.4 0.57,1.31 -0.05,0.29 -0.54,0.76 0.87,0.17 1.21,-0.35 0.38,0.39 0.74,1.56 0.47,1.6 -2.05,2.18 -1.04,0.45 -1.54,1.15 -0.43,0.92 -0.89,1.18 0.57,-0.01 1.59,-1.89 0.78,-0.44 0.58,0.11 0.23,0.32 -0.11,0.53 0.51,-0.07 2.14,-1.1 0.9,-0.22 1.16,-0.07 0.13,0.38 -0.72,2.64 -1.23,2.02 -2.25,1.24 -0.8,0.73 -0.98,1.17 0.37,0.21 2.14,-1.54 1.46,-0.61 2.06,-0.49 0.91,0.07 1.62,3.08 0.93,0.3 0.75,-0.16 1.42,0.88 0.53,0.85 -0.13,0.61 -0.48,0.36 -0.24,0.57 0.57,1.69 -0.33,0.95 -1.04,0.83 -0.74,0.42 -0.78,0.13 -0.76,0.74 -0.35,0.11 -1.06,-0.19 0.36,0.45 0.52,0.23 0.84,0.12 0.98,-0.23 0.95,0.03 1.5,0.53 0.63,0.66 0.01,0.18 -0.32,0.37 -0.48,1.22 -0.35,0.44 0.29,0.33 0.75,0.51 0.56,0.19 0.74,-0.17 0.79,0.22 2.64,2.84 -0.11,1.46 -0.4,1.12 0.16,1.26 0.01,1.55 -1.43,0.43 -4.76,-0.72 -2.72,-1.11 -0.14,-0.34 0.77,-0.74 -0.68,-0.05 -0.79,0.29 -0.33,0.27 0.91,1.17 2.5,1.03 1.12,1.24 1.23,0.11 0.37,0.22 0.68,0.72 -0.2,0.25 -1.25,0.09 -0.99,0.83 0.62,0.49 2.22,0.43 1.59,0.11 0.8,0.48 -0.66,0.53 -1.87,0.63 -0.05,0.93 1.38,0.37 1.23,-0.22 0.51,0.09 0.36,2.25 0.21,0.46 -1.32,0.4 -0.01,0.43 0.88,0.35 1.46,0.29 0.48,0.4 0.1,0.67 0.3,0.35 0.84,0.06 0.92,-0.83 0.54,-0.7 0.79,0.26 0.06,0.87 0.95,0.99 0.34,0.16 0.27,1.4 0.77,-1.24 0.57,0.26 0.64,0.06 -0.22,1.2 -0.38,0.94 0.5,0.59 0.39,0.88 1.04,1.2 -0.28,0.58 -1.23,1.23 -0.65,1.94 -0.15,0.67 -0.63,1.11 -0.87,1.08 0.54,-0.11 1.93,-1.98 1.15,-0.67 2.53,-0.36 0.61,-0.56 0.93,-0.23 0.57,0.64 0.06,1.14 0.75,0.36 0.79,-0.38 0.72,0.34 -0.43,0.72 -2.29,2.93 -0.67,1.17 -0.19,0.83 0.79,-1.13 2.88,-2.63 0.31,-0.39 0.63,-1.13 0.58,-0.74 1.55,0.26 0.8,0.53 0.37,1.48 0.63,1.6 0.95,1.77 2.51,0.86 0.91,0.14 1.57,-0.6 0.25,-0.83 1.23,-0.25 0.86,0.1 0.3,1.59 0.92,0.84 0.91,0.7 0.88,0.36 1.29,0.16 0.7,0.76 0,0.32 -0.72,0.82 -0.7,1.19 -1.22,0.83 -1.7,0.04 -2.35,0.52 -0.09,0.47 -0.52,0.51 -1.25,0.51 -0.68,0.39 -1.1,1.91 -0.67,0.81 -0.77,0.16 -1.09,-0.08 -0.71,0.17 -0.52,0.35 -0.31,0.52 -0.24,0.19 -1.46,0.52 -2.65,1.44 -1.4,0.04 -0.87,-0.17 -0.66,0.12 -0.45,0.4 -1.26,0.7 -0.38,0.43 -0.22,0.49 -0.17,1.01 -0.15,0.36 -0.25,0.21 -1.06,-0.21 -1.18,-0.65 0.23,0.69 1.88,1.17 0.54,0.65 -0.51,0.56 -1.19,0.88 -0.14,0.47 0.49,0.25 -0.19,0.4 -0.65,0.42 0.07,0.17 0.07,0.17 1.62,-0.6 1.45,-1.29 0.94,-1.31 0.47,-0.37 1.86,-0.49 1.1,-0.57 1.58,-1.04 1.73,-1.51 1.88,-1.99 2.4,-1.56 2.92,-1.13 2.14,-0.58 1.36,-0.03 0.07,-0.19 -1.22,-0.35 -1.01,-0.07 -1.26,0.26 -0.39,-0.61 0.04,-0.27 0.41,-0.45 1.06,-0.41 5.17,0.57 1.78,0.43 1.95,3.63 0.45,1.16 0.13,0.85 -0.2,0.53 -0.78,0.63 -2.2,1.24 -0.31,0.33 -0.03,0.17 0.96,0.25 0.3,0.34 0.49,1.38 0.99,-0.89 1.88,-2.17 1.54,-1.01 1.29,-0.28 1.54,-0.13 0.53,0.02 0.19,0.71 0.81,1.42 0.75,0.37 1.43,0.19 1.29,1.75 0.49,1.21 0.47,0.7 -0.04,0.47 0.08,0.4 0.34,0.6 0.17,0.5 -0.09,1.15 -0.75,2 0.56,1.81 -0.25,0.82 -0.13,1.3 0.48,0.86 0.14,0.5 -0.41,0.29 -2.86,0.71 -1.12,0.01 -0.29,0.43 0.87,0.13 1.58,-0.02 1.9,0.44 0.84,0.49 0.36,0.68 -0.09,0.54 -0.55,0.4 -1.07,-0.08 -1.03,-0.36 0.06,0.35 1.53,0.88 0.45,0.45 0.83,0.56 0.16,0.75 -0.2,0.76 -2.89,3.03 -2.38,1.92 -2.38,1.68 -3.83,3.21 -0.38,0.16 -0.69,0.06 -0.04,-0.02 z m -41.63,-94.35 0.75,0.49 0.2,1.81 -1.42,-0.11 -1.62,-1.21 -0.32,-0.88 0.04,-0.15 0.21,-0.15 0.41,0.21 0.4,-0.32 0.4,-0.1 0.95,0.41 z m 6.72,24.76 0.11,0.39 -1.38,-0.28 -0.49,-0.25 -0.04,-0.26 0.07,-0.4 0.27,-0.47 0.63,-0.36 0.34,0.19 0.74,0.49 0.1,0.3 -0.35,0.65 z m 50.5,63.15 -0.43,0.01 -0.1,-0.16 0.18,-0.56 0.48,-0.64 0.65,-0.18 -0.17,0.95 -0.61,0.58 z m -0.88,5.1 -0.66,1.43 -0.46,0.69 -0.42,0.22 -0.9,0.2 -1.89,0.22 -0.81,0.21 -0.12,0.95 0.12,0.5 0.28,0.39 0.35,0.11 0.78,-0.24 0.29,0.04 0.23,0.2 0.18,0.36 0.09,0.5 0.01,0.63 -0.14,0.76 -0.64,1.79 -0.81,0.99 -1.04,0.8 -0.25,0.31 -0.13,0.36 -0.13,1.17 -0.54,0.93 -1.67,2.36 -0.64,0.52 0,0.41 -0.26,1.12 -0.5,0.9 -1.39,2.05 -0.34,0.72 -0.15,0.57 0.02,0.81 -0.06,0.36 -0.32,0.68 -0.44,0.64 -0.09,0.31 0.17,0.56 0.18,0.2 0.02,0.51 -0.14,0.83 0.59,-0.53 1.31,-1.88 0.98,-1.14 0.66,-0.38 0.46,-0.5 0.49,-1.11 0.67,-1.06 0.61,-0.35 0.28,0.2 0.24,0.52 -0.05,0.66 -0.33,0.8 0.03,0.24 0.77,-0.59 1.33,-0.49 0.48,0.06 0.97,0.73 0.81,-0.08 1.29,-0.42 0.24,0.19 -0.22,0.64 -0.51,0.62 -1.2,0.88 -2.89,1.72 -0.9,1.18 0.17,-0.04 0.62,-0.51 0.66,-0.27 0.69,-0.04 0.29,0.15 -0.11,0.33 -0.09,0.91 -1.75,1.77 0.41,-0.07 2.03,-0.8 1.23,1.11 1.69,-0.38 1.02,-0.38 -0.03,0.23 0.22,0.48 -0.01,0.78 0.1,0.11 0.48,-0.26 0.09,-0.29 -0.03,-1.39 0.15,-0.14 0.33,0.22 0.2,0.36 0.06,1.01 -0.22,1.01 -0.31,0.93 -0.75,1.35 0.09,0.58 -0.19,0.63 0.17,0.02 0.74,-0.59 0.04,-0.24 -0.06,-0.56 0.08,-0.28 0.61,-0.61 1.01,-0.72 0.33,-0.11 0.14,0.17 -0.05,0.45 0.3,-0.11 0.65,-0.66 0.6,-0.4 0.55,-0.14 0.58,-0.45 0.6,-0.77 0.64,-0.64 0.69,-0.5 0.3,-0.03 -0.1,0.83 0.14,0.95 0.02,0.81 0.14,0.17 0.53,-0.86 0.3,-0.32 0.35,-0.12 0.41,0.07 2.81,-0.31 0.85,0.21 0.96,0.56 1.21,0.87 0.45,0.79 0.08,0.99 -0.12,0.69 -0.88,0.87 -0.78,0.58 -0.46,0.57 -0.14,0.57 -0.18,0.35 -0.52,0.49 -2.31,1.38 0.55,0.04 1.33,-0.3 0.88,-0.06 0.04,0.2 -0.35,0.39 -0.67,0.39 -0.07,0.19 0.03,0.25 0.72,0.3 0.92,-0.15 0.77,0.21 -0.07,0.33 -0.61,1.07 -0.18,0.67 -0.81,0.56 -1.63,0.89 -0.42,0.34 0.09,0.07 1.5,-0.65 0.76,-0.17 0.48,0 0.54,-0.63 0.85,-0.21 0.83,0.4 1.26,-1.08 0.45,-0.14 0.77,0.13 0.5,-0.2 0.83,-0.74 0.63,-0.36 0.13,0.03 0.13,0.3 0.06,0.85 -0.15,0.75 -0.21,0.48 -0.68,1.06 -0.42,0.37 -0.39,0.14 -0.68,-0.06 -0.3,0.16 -0.64,0.83 -1.13,0.84 -0.7,0.32 0.44,0.45 0.17,0.88 -0.25,0.27 -1.21,0.27 -0.05,0.15 -0.43,0.19 -1,0.3 0.68,0.13 1.26,-0.21 0.13,0.15 -0.17,0.61 -0.33,0.63 -1.49,1.63 -0.02,0.16 0.23,0.79 0.29,0.6 0.36,0.42 0.83,0.02 0.61,-0.19 0.9,-1.08 1.98,-3.38 1.77,-0.94 1.47,-1.05 0.34,0.21 0.16,0.24 -0.05,0.25 -0.74,0.86 -0.39,0.71 -1.01,2.19 -0.39,1.03 -0.19,1.08 0.05,1.87 0.11,0.32 0.32,0.43 0.59,-0.37 1,-0.92 0.64,-0.88 0.5,-1.44 0.31,-0.55 0.34,0.01 0.3,0.32 0.07,0.69 0.28,0.95 0.17,0.96 -0.13,1.05 -0.14,0.58 -2.05,4.25 0.22,0.75 0.05,0.46 -0.06,0.48 -0.65,2.02 -0.63,1.26 -0.34,0.54 -0.4,0.33 -0.47,0.12 -0.42,-0.18 -0.37,-0.48 -0.33,-0.25 -0.28,-0.02 -0.53,0.09 -1.38,1.03 -0.28,0.05 -0.2,-0.14 -0.24,-0.54 0.19,-2.72 0.12,-0.9 -0.28,-0.7 0.29,-1.17 0.01,-0.44 -0.17,-0.17 -0.35,0.11 -0.53,0.59 -0.71,1.06 -0.77,0.95 -1.34,1.31 -0.6,0.26 -0.24,-0.06 -0.27,-0.18 -0.37,-0.55 0,-0.48 0.16,-0.66 0.56,-1.56 1.1,-2.31 0.91,-1.65 0.17,-0.7 -0.25,-0.31 -0.21,-0.61 -0.35,-1.79 -0.44,-1.48 -0.52,-0.66 -1.3,-0.72 -0.24,0.17 -0.14,1 -1.53,2.86 -0.27,1.24 -0.19,0.46 -0.29,0.31 -0.67,0.38 0.18,-0.66 0.71,-1.47 -0.1,-0.14 -0.9,1.18 -0.69,0.65 -0.84,0.17 -0.51,-0.04 -0.49,0.18 -2.1,2.78 -0.08,0.92 -0.36,0.76 -1.03,1.37 -0.54,0.47 -0.77,0.08 -0.7,-0.24 -0.46,0.04 -1.09,0.43 -1.22,0.19 -0.5,-0.09 -0.32,-0.17 -0.62,-0.53 -0.07,-0.38 0.03,-0.22 0.32,-0.57 0.72,-0.72 0.6,-0.27 1.45,-0.36 1.06,-0.54 0.81,-0.8 0.36,-0.49 1.53,-2.51 1.93,-0.89 0.95,-0.72 0.67,-0.92 0.1,-0.32 -0.95,0.47 -0.49,0.11 -0.8,-0.17 -0.35,-0.31 -1.09,0.1 -1.52,-0.15 -0.22,0.24 -0.2,1.23 -0.2,0.65 -0.23,0.22 -0.34,0.13 -0.69,0.13 -1.78,-0.44 -0.33,-0.24 -0.45,-0.18 -1.97,0.4 -0.41,-0.04 0.39,-0.29 1.94,-0.9 0.2,-2.6 -0.12,-0.42 -0.54,0.36 -0.91,0.38 -0.62,-0.11 -0.29,-0.23 -0.26,0.2 -0.63,1.37 -0.37,0.17 -0.56,0.05 -1.2,0.5 -2.36,0.33 -0.46,0.36 -1.6,-0.13 -4.67,-0.75 -1.67,0.08 -2.01,-0.46 -0.37,-0.2 -2.81,0.08 -0.84,-0.11 0.06,-0.57 -0.09,-0.15 -0.82,0.63 -0.72,0.41 -0.93,0.35 -2.94,0.61 -1.58,0.13 -0.92,-0.42 -0.36,-0.42 -0.55,-1.36 -0.37,-1.71 0,-0.31 0.19,-0.6 0.62,-0.83 2.79,-2.19 2.24,-2.22 0.95,-1.16 0.92,-0.41 1.5,-0.97 0.05,-0.11 -1.45,0.12 -1.02,-0.27 -1.04,-0.11 -1.98,0.25 -2,0 -0.01,-0.5 0.94,-0.94 1.99,-1.61 0.2,-0.01 -0.61,0.75 -0.17,0.56 0.26,0.37 0.3,0.24 1.14,0.1 0.26,-0.32 0.41,-1.72 0.86,-2 0.46,-1.45 0.81,-1.11 0.4,-0.17 0.36,0.21 1.19,0.27 1.22,1.01 0.4,0.09 0.13,-0.09 -0.45,-0.3 -0.37,-0.48 -0.15,-0.45 0.45,-1.4 0.52,-0.4 0.09,-0.28 -1.05,-0.01 -0.84,-0.39 -0.25,-0.64 0.05,-1.12 0.27,-0.67 0.67,-0.88 0.82,-0.59 0.49,0.15 0.94,0.79 0.58,-0.22 -0.07,-0.26 -0.88,-1.26 -0.28,-0.94 0.03,-0.45 1.92,-4.49 0.94,-2.42 1.28,-3.71 0.3,-0.59 0.65,-1.1 0.27,-0.3 0.83,0 0.52,-0.13 -0.76,-0.49 -0.27,-0.34 -0.03,-0.36 0.21,-0.38 0.29,-0.28 0.99,-0.6 0.7,-0.99 0.43,-1.17 -0.06,-0.4 -0.22,-0.4 0.01,-0.22 0.53,-0.24 1.36,-1.39 0.18,-0.27 0.5,-1.86 0.61,-0.83 0.57,-0.42 0.91,-0.53 2.78,-1.28 1.63,-1.15 1.11,0.06 0.33,0.8 1.57,0.53 0.28,-0.57 -0.37,-0.7 0.31,-0.28 1.3,-0.25 0.23,0.09 0.39,0.4 -0.11,0.5 z m -0.69,11.64 -0.3,0.16 -0.28,-0.01 -0.26,-0.17 -0.04,-0.27 0.26,-0.57 0.69,-0.29 0.52,0.07 -0.03,0.29 -0.28,0.48 -0.28,0.31 z m 12.93,13.63 0.66,0.9 0.35,0.24 -2.31,0.97 -0.28,0.06 -0.15,-0.12 -0.02,-0.9 0.1,-0.7 0.17,-0.1 0.53,0.42 0.55,-0.87 0.4,0.1 z m -4.13,2.15 -1.38,0.8 -0.31,0.32 -0.38,0.16 -0.29,-0.25 -0.4,-0.85 0.07,-0.28 0.38,-0.04 0.22,0.11 0.06,0.26 0.17,0.13 0.28,0 1.03,-0.83 0.53,-0.13 0.19,0.16 -0.17,0.44 z m 2.93,28.98 -0.44,0.46 -0.45,-0.02 0.05,-0.4 0.55,-0.78 0.28,-0.56 0.01,-0.34 0.1,-0.26 0.42,-0.29 0.36,-0.53 -0.17,0.98 -0.71,1.74 z\"\n           title=\"Newfoundland and Labrador\"\n           id=\"CA-NL\" class=\"carona-midium\" (mouseover)=\"mapMouseOver('CA-NL')\" [matTooltip]=\"CANL\"/>\n        <path\n           d=\"m 716.49,978.34051 0.3,0.1 1.21,-0.62 0.64,0.03 -0.03,0.45 -1.04,0.49 -0.48,0.37 0.6,0.34 -0.01,0.23 -0.72,0.55 -0.36,0.6 0.3,0.58 1.15,-0.57 0.47,0 0.64,0.13 0.61,-0.17 0.35,-0.28 2.03,-2.22 0.11,-0.29 -2.19,0.46 -0.25,-0.3 1.43,-1.35 -0.11,-0.71 0.72,-1.12 0.66,-0.67 0.49,-0.37 0.7,-0.35 0.49,0.53 0.16,0.96 1.2,-0.13 1.18,0.19 0.86,0.41 0.13,0.23 0.01,0.37 -0.29,0.66 -0.48,0.54 0.95,0.7 -0.13,0.3 -1.56,0.79 -0.88,0.79 -0.81,0.97 -1.62,1.13 -2.57,0.82 -0.81,0 -0.97,-0.25 -0.96,0.06 -0.94,0.3 -0.92,-0.03 -0.45,0.16 -0.42,-0.02 -0.36,-0.31 -0.76,-0.9 -0.37,-0.6 -0.41,-2.89 0.13,-1.52 0.64,-1.43 0.95,-0.95 0.55,-0.76 2.31,-4.52 0.45,-1.03 0.55,-0.88 0.99,-0.87 1.28,-1.47 0.41,-0.3 0.74,-0.14 0.72,0.08 -0.21,0.53 0.05,0.52 0.84,2.03 -0.01,0.4 -0.46,1.61 -0.88,2.59 -0.23,1.43 0.12,0.43 -0.36,0.72 -0.38,0.55 -1.51,1.03 -0.77,0.24 -0.73,0.38 -1.68,1.24 z m -28.78,1.4 0.38,-0.18 0.51,-0.65 0.51,-0.82 0.97,-0.17 0.18,-0.45 1.4,0.69 1.54,1.3 1.21,-0.25 0.52,0.04 1.36,0.81 0.38,0.4 0.21,0.36 0.68,-0.08 0.98,-0.31 1.77,0.08 1.88,0.46 -0.16,0.7 -0.29,0.48 1.47,-0.16 0.92,0.5 0.32,-0.24 0.23,-0.31 1.83,-0.85 2.35,-1.76 0.29,0.22 0.11,0.67 0.31,1.09 0.9,0.75 1.07,0.17 1.48,-0.57 0.58,0.5 0.69,0.95 0.66,1.25 -0.04,0.45 -0.84,0.39 -0.76,0.56 3.18,0.23 0.32,0.24 0.35,0.49 -0.32,0.49 -0.3,0.25 -0.58,-0.29 -1.06,0.26 -0.93,0.64 -0.99,0.36 -0.63,0.04 -0.71,0.29 -0.64,0.46 -0.67,0.13 -2.09,1.14 -2.14,0.73 -2.23,1.17 -2.28,0.74 -2.36,0.88 -0.51,0.08 -0.6,-0.04 -1.35,0.86 -0.67,-0.12 -0.68,0.15 -0.78,-0.19 -0.53,-0.35 0.41,0.91 0.12,0.84 -0.21,0.37 -0.38,0.43 -1.36,-0.08 -0.53,-0.3 -0.63,-0.45 -0.29,-0.72 -0.68,-0.52 -0.41,0.72 0,0.53 -0.5,0.73 -0.59,-1.24 -1.07,0.46 -0.47,1.32 0.24,0.38 0.33,1.01 -0.53,0.53 -0.39,-0.14 -0.81,1.47999 -0.98,0.54 -1.01,1.5 -1.2,1.14 -0.33,0.76 -2.01,1.74 -0.76,-0.05 -0.56,0.06 -0.85,0.72 -0.13,1.46 -0.37,-0.19 -0.38,0.05 -0.2,0.46 -0.28,0.08 -0.74,-0.43 -0.87,0.24 -0.68,-0.33 -0.87,-2.14 -0.46,-0.75 -0.82,-0.24 -0.21,0.46 -0.32,0.44 -0.79,-0.89 -0.6,-3.3 0,-0.8 0.84,-2.78999 2.08,-2.52 -0.66,-0.08 -1.83,1.75 0.19,-0.42 0.31,-0.44 0.62,-0.71 0.94,-0.67 1.25,-0.39 0.86,-0.06 0.59,-0.37 0.86,-0.66 0.16,-0.35 -0.76,0.4 -1.26,0.39 0.32,-0.52 0.32,-0.28 6.76,-4.55 1.36,-0.75 2.71,-0.96 0.38,-0.63 -0.37,-0.4 1.05,0.36 -0.09,0.52 -0.16,0.38 -0.06,0.65 0.1,0.62 1.07,0.3 0.89,1.15 -0.42,-1.57 0.8,-0.89 3.09,-1.19 2.58,-0.13 0.83,-0.55 -2.21,-0.37 -2.62,0.2 -1.62,-0.42 -2.23,0.27 -2.36,-0.26 -0.73,0.34 -0.59,0.75 -0.76,-0.33 -0.37,-0.05 -0.36,-0.26 0.77,-1.28 2.4,-1.91 1.46,-1.67 0.41,-0.35 0.23,-0.75 z m 30.06,4.42 -0.37,0.11 -0.09,-0.18 -0.57,-0.53 -0.05,-0.26 0.5,-0.25 1.02,0.13 -0.36,0.66 -0.08,0.32 z m -47.62,15.1 -0.45,0.44 0.11,-0.43 0.55,-1.09 0.36,-0.16 -0.57,1.24 z m 58.15,4.38999 -1.21,0.44 -1.04,-0.03 -0.69,-0.4 -0.03,-0.18 1.63,0.17 0.63,-0.09 1.25,-0.69 -0.54,0.78 z\"\n           title=\"Nova Scotia\"\n           id=\"CA-NS\" class=\"carona-midium\" (mouseover)=\"mapMouseOver('CA-NS')\" [matTooltip]=\"CANS\"/>\n        <path\n           d=\"m 278.13,256.44051 0.01,16.42 -0.16,-0.05 -2.43,1.09 -1.12,0.14 -3.02,-0.7 -0.76,-0.51 -1.67,-2.01 -1.28,-0.83 -0.54,0.44 -0.64,1.76 -1.21,2.18 -0.74,0.56 -2.17,-0.36 -3.33,-3.68 -3.82,1.09 -3.96,2.15 -1.55,0.4 -0.45,-0.62 -0.62,-1.61 0.1,-0.81 1.18,-2.48 2.64,-2.61 1.93,-1.48 3.83,-2.16 4.53,-1.22 1.69,-1.29 1.07,-1.85 2.95,-2.94 1.74,-1.22 2.33,-1.05 1.88,0.05 2.4,2.4 1.19,0.8 z m 0.01,26.59 0,6.93 -1.76,1.03 -4.94,2.03 -1.03,0.98 0.08,0.58 0.4,0.73 0.83,0.92 3.83,-0.21 0.92,0.4 0.33,0.59 0.2,0.87 0.12,1.13 0.01,3.81 -0.2,2.2 -0.53,1.98 -1.55,1.4 -2.79,1.85 -1.89,0.82 -1.49,-0.3 -1.49,0.19 -6.51,3.46 -2.01,0.02 -1.76,-0.83 -2.43,-3.27 -2.53,-1.29 -1.08,-1.48 -1.06,-0.81 -0.29,-1.19 -0.1,-0.89 0.18,-0.82 0.46,-0.74 0.15,-0.63 -0.42,-1.84 -0.19,-1.76 -0.73,-2.54 -0.11,-1.47 0,-0.96 0.12,-1.04 0.49,-1.86 0.25,-0.38 1.48,-0.29 1.95,-0.96 4.48,-2.8 9.84,-3.52 2.99,0.33 1.31,-0.69 2.41,-0.29 4.06,0.61 z m -34.33,14.35 -2.45,1.43 -1.63,-0.03 -2.88,-2.02 -3.34,-6.22 -0.44,-2.23 1.25,-0.4 0.91,-0.69 0.56,-0.98 1.07,-1.07 2.48,-1.61 0.3,0.62 -0.05,1.32 0.21,1.23 0.89,0.26 0.84,0.87 1.7,2.68 1.16,0.51 0.42,0.58 0.22,0.89 0.71,1.56 -0.01,0.8 -0.95,1.6 -0.97,0.9 z m -15.41,16.28 0.68,1.59 0.05,0.64 -0.33,0.67 -1.05,1.07 -5.29,3.55 -1.04,1.66 0.39,1.42 1.91,2.87 1.94,2.42 0.42,1.2 -0.92,1.22 -1.76,-0.39 -0.66,0.1 -0.62,0.56 0.17,1.07 1.95,3.53 0.64,1.89 -0.02,0.97 -0.35,0.95 -0.82,1.3 -1.29,1.64 -2.22,1.31 -4.77,1.75 -0.16,1.36 0.03,1.04 -0.12,2.51 -0.16,1.16 -0.57,1.94 -0.41,0.91 -0.71,0.62 -1.02,0.34 -1.3,0 -2.15,-1.67 -0.98,-1.07 -1.36,-2.32 -0.24,-1.55 0.13,-1.92 0.36,-2.98 0.59,-3.06 0.82,-3.15 0.24,-1.97 -0.34,-0.78 -0.56,-0.04 -1.75,1.28 -1.13,0.47 -0.88,0.93 -0.62,1.39 -0.35,1.5 -0.2,2.88 -0.33,1.57 -0.95,0.85 -1.42,-0.02 -0.54,0.48 -0.26,1.04 0.19,0.84 1.4,1.77 0.17,1.97 -0.17,1.19 -1.51,2.18 -0.35,0.73 -0.94,3.39 -0.35,0.85 -0.78,0.78 -0.78,-0.09 -0.7,-1.2 -1.06,-2.34 -0.72,-2.02 -0.37,-1.7 -0.31,-0.76 -0.51,0.52 -0.61,1.77 -0.02,1.36 0.13,2.02 -0.03,1.24 -0.9,1.46 0.13,0.66 1.57,1.78 0.2,0.8 0.01,1.24 -0.1,0.56 -0.63,-0.09 -0.53,1.42 -0.61,1.13 -1.6,2.08 -2.22,0.25 -1.84,1 -0.39,-0.03 -0.44,-1.63 -0.5,-3.25 -0.44,-1.85 -0.66,-0.95 -0.82,-3.73 -0.38,-1.21 -0.38,-0.49 -0.31,-0.13 -0.46,0.72 -1.07,5.34 -1.74,1.36 -0.96,0.25 -0.97,-0.15 -2.39,-1.45 -1.92,-0.54 -1.34,0.62 -2.2,2.16 -0.88,0.57 -1.19,-0.25 -0.52,-0.82 -0.44,-1.34 -0.05,-0.81 0.35,-0.29 0.55,-1.56 -0.02,-0.63 -0.54,-0.9 -0.01,-0.7 0.19,-0.48 -0.04,-0.34 -0.28,-0.2 -0.54,0.19 -1.96,1.04 0.22,-1.13 0.94,-2.36 2.28,-4.74 0.86,-1.4 0.52,-0.43 6.74,-1.53 0.47,-0.46 3.2,-6.49 0.91,-1.5 0.94,-1.19 4.59,-3.98 0.43,-0.91 0.72,-2.78 0.42,-0.7 0.99,-1.06 3.31,-5.68 3.02,-4.14 1.53,-2.58 2.1,-2.62 2.42,-1.13 7.3,-1.99 5.26,2.61 1.25,0.16 0.61,-0.74 0.55,-1.2 0.79,0.51 1.95,0.37 0.43,-0.29 0.82,-1.37 -0.56,-0.75 -2.36,-1.38 -0.14,-0.7 0.05,-0.67 0.83,-1.6 1,-1.04 2.9,-0.78 1.33,0.2 1.38,1.11 1.8,2.29 4.12,4.03 z m 17.85,24.8 -1.36,1.28 -9.31,-1.89 -0.51,-0.59 -0.24,-0.81 1.69,-2.21 2.04,-0.96 4.74,-0.77 1.65,0.87 1.09,1.01 0.62,0.88 0.26,1.64 -0.67,1.55 z m 31.9,45.08 0,3.88 0,19 -0.01,1.25 -1.55,0.38 -1.89,0.89 -1.4,1.15 -0.73,0.94 -1.12,2.21 -1.72,1.66 -3.11,1.81 -3.96,2.8 -7.09,2.85 -4.46,0.5 -4.46,-0.94 -1.41,-0.77 -1.48,-1.2 -3.03,-2.85 -0.84,-1.03 -0.97,-2.25 0.58,-1.5 1.62,-1.74 2.42,-1.58 4.83,-2.15 4.38,-3.46 1.55,-0.65 4.21,-0.53 2.13,0.33 1.54,-0.18 1.01,-0.48 1.5,-1.26 2.2,-2.51 1.61,-2.36 0.41,-1.11 -0.54,-1.04 -0.79,-0.15 -2.62,2.44 -1.32,0.82 -1.43,0.06 -1.97,0.83 -1.92,0.33 -0.37,-0.03 -2,-2.32 -1.07,-0.41 -0.5,0.24 -0.45,0.62 -0.87,1.71 -0.5,0.62 -0.86,0.45 -3.48,0.51 -3.34,0.86 -0.74,-0.53 -0.45,-0.99 -0.09,-0.6 -0.05,-2.04 -0.23,-0.81 0.29,-1.7 0.38,-1.3 0.47,-0.9 2.29,-2.66 0.32,-0.69 -1.09,0.14 -2.6,1.3 -0.34,-0.45 -0.61,-1.49 -0.29,-0.15 -0.33,0.62 -0.19,0.87 -0.45,3.58 -0.39,1.82 -1.04,-0.37 -1.29,-1.1 -0.48,-0.15 -0.28,0.35 0.09,0.62 1.31,3.04 0.01,1.06 -0.86,1.85 -3.65,3.06 -1.44,0.82 -0.51,-0.32 -0.46,-0.84 -0.41,-1.36 -0.95,-1.84 -0.56,-0.41 -0.63,-0.06 -0.58,0.38 -0.53,0.82 -0.33,0.86 -0.31,1.61 -0.67,1.23 -0.41,0.21 -3.71,-2.54 -2.99,-4.54 -3.27,0.71 -1.47,-0.16 -4.46,-1.67 -0.57,-1.04 -0.31,-1.35 0.03,-0.73 0.19,-0.76 0.56,-1.51 1.12,-2.3 0.47,-0.74 0.7,-0.61 0.93,-0.48 2.36,-0.27 6.08,-0.09 1.22,-0.36 6.65,-4.49 0.76,-0.74 0.98,-1.45 0.22,-0.6 -0.04,-0.39 -8.18,3.58 -3.51,0.77 -5.37,-0.58 -1.01,-0.56 -0.23,-1 1.12,-2.66 0.59,-0.99 1.53,-0.94 3.7,-1.34 4.94,-1.19 3.24,-0.03 2.72,-0.94 1.63,-1.08 -5.47,0.06 -6.59,0.51 -0.95,-0.35 -1.88,-1.42 -0.09,-1.04 0.75,-1.26 0.28,-0.94 -0.54,-2.11 0.17,-0.82 1.23,-1.77 2.19,-1.92 1.35,-0.27 2.61,0.66 7.43,0.68 1.44,-0.24 -0.91,-0.84 -1.29,-0.62 -5.74,-1.07 -1.19,-0.48 -0.23,-0.66 -0.09,-0.97 0.06,-1.29 0.42,-1.32 1.78,-2.77 5.22,-2.3 2.08,-0.32 2.08,0.15 2.11,1.03 0.94,0.89 0.47,1.1 0.23,1.02 0.03,1.77 0.1,0.69 0.38,1.15 1.22,2.7 0.89,0.84 4.13,-1.57 1.72,-0.35 1.73,0.49 2.52,1.62 3.26,4.85 4.2,4.91 -0.02,1.05 -1.61,1.63 -0.3,0.7 0.22,0.48 1.61,0.32 1.51,-0.24 1.44,0.36 0.32,0.42 0.53,1.77 0.73,3.11 0.87,2.31 1.01,1.52 0.99,0.78 1.46,0.06 1.47,-0.45 2.39,0.15 4.06,0.56 0,0 z m 0,-25.93 -1.78,-1.71 -0.42,-0.64 -0.34,-1.01 -0.27,-1.38 0.04,-1.07 0.35,-0.75 2.39,-2.4 0.03,8.96 z m -74.64,24.47 -2.56,2.31 -1.82,-0.24 -2.42,-1.7 -1.97,-0.58 -0.69,-0.56 -0.1,-0.59 0.67,-1.63 0.84,-1.31 2,-2.58 3.38,-5.01 2.21,-1.9 2.17,-1.35 2.22,-3.03 1.23,-1.36 1.06,-0.1 1.09,0.58 0.12,0.83 -1.14,4.13 -0.8,1.65 -1.57,4.24 -3.01,7.05 -0.91,1.15 z m -24.63,-5.99 -0.7,0.17 -0.78,-0.41 0.18,-0.93 1.75,-2.56 0.1,-0.73 -0.02,-0.6 -0.22,-0.7 0.44,-0.9 0.71,-0.37 0.23,0.35 0.08,0.78 -0.16,2.28 -0.22,1.1 -0.3,0.94 -0.46,0.84 -0.63,0.74 z m 12.01,56.32 0.07,0.14 2.31,-3.04 1.4,-0.17 0.98,0.27 0.31,0.39 0.2,0.6 0.1,1.32 0.06,3.26 0.13,0.4 0.32,-0.18 0.51,-0.77 2.52,-4.83 1.06,-1.33 0.73,-0.4 3.09,-0.73 2.1,0.02 2.32,0.45 1.73,0.68 2.83,1.99 2.23,2.29 2.04,2.42 6.85,9.01 2.9,2.63 1.11,1.49 0.49,1.08 0.43,1.35 0.13,1.26 -0.17,1.17 -0.32,0.82 -0.7,0.69 -4.19,2.93 -2.21,0.89 -2.19,1.29 -5.23,4.52 -3.58,2.14 -4.65,4.15 -8.77,6.6 -1.04,1.32 -0.48,0.94 -2.48,7.4 -0.94,1.7 -2.28,1.73 -2.89,0.43 -0.81,0.48 -0.13,2.51 -1.04,4.15 -0.5,2.78 -0.69,7.36 -0.16,0.73 -0.53,1.35 -0.89,1.46 -2.79,1.68 -2.06,0.88 -2.8,0.73 -0.67,-0.5 -0.68,-1.15 -0.7,-0.1 -0.44,0.18 -3.65,5.01 -3.52,2.01 -1.53,1.81 -1.08,0.85 -0.87,0.26 -1.43,-0.16 -1.03,-0.82 -0.93,-1.27 -0.7,-1.38 -1.81,-5.72 -0.78,-1.97 -0.66,-0.99 -1.77,-3.53 -0.49,-0.71 -6.74,-4.51 -3.28,-2.55 -0.79,-0.9 -0.74,-0.53 -4.22,0.35 -0.56,-0.14 -0.15,-0.38 0.5,-1.34 0.2,-0.85 0.06,-0.83 -0.07,-1.35 0.05,-0.24 1.6,-1.33 -0.26,-0.28 -0.19,-0.52 -0.12,-0.77 0.17,-0.54 0.46,-0.31 0.57,-1.25 0.67,-2.2 0.5,-1.24 0.69,-0.8 1.23,-2.14 0.88,-0.87 0.74,-1.09 0.02,-0.49 -0.3,-0.38 -0.1,-0.83 0.14,-2.61 -0.01,-1.35 0.13,-1.13 0.28,-0.91 0.35,-0.6 3.12,-1.91 0.16,-0.56 0.04,-0.64 -0.08,-0.72 -0.16,-0.51 -0.49,-0.42 -0.83,-0.12 -0.72,-1.11 -0.17,-0.54 0.29,-1.52 1.41,-2.44 0.47,-1.21 1.52,-5.48 2.78,-3.42 0.75,-3.71 2.09,-3.96 0,-0.55 -0.67,-1.36 -1.93,-0.94 -0.93,-1.46 -0.62,-1.66 -2.82,-9.64 -0.48,-0.72 -0.14,-1.13 -0.58,-0.75 0.12,-0.7 11.01,-2.93 7.58,-0.94 7.85,-2.57 2.19,-0.15 1.69,0.51 1.67,1.33 2.21,2.32 2.93,2.26 5.48,3.29 3.42,0.69 -1.37,2.6 -0.19,0.78 0,0.65 z m 87.26,35.78 0.01,8.08 0,16.13 0,15.66 0,15.22 0,14.8 0,14.41 -2.8,0 -2.8,0 -2.8,0 -2.8,0 -2.8,0 -2.8,0 -2.8,0 -2.8,0 0,2.34 -1.35,2.01 -1.01,0.01 -1.01,0.01 -0.03,-2.04 -0.03,-2.34 -4.89,0 -4.73,0 -4.73,0 -4.73,0 -4.73,0 -4.73,0 -4.73,0 -4.12,0 -0.18,2.96 1.14,1.68 1.14,1.67 1.14,1.67 0.39,1.18 -1.84,0 -1.23,-1.8 -1,-2.2 -0.16,-0.56 -0.24,-1.62 -0.32,-2.69 -0.1,-1.65 0.29,-1.01 0.24,-0.2 5.21,-1.97 9.19,-2.17 8.4,-1.47 3.81,0.13 2.25,0.69 2.25,0.32 4.08,0.15 5.14,1.02 1.03,-0.09 2.3,-0.69 0.68,-0.56 3.64,0.07 0.71,-0.34 0.65,-0.61 -0.84,-1.15 -3.48,-2.53 -9.25,-4.56 -2.25,-0.97 -3.23,-1.04 -1.87,-0.15 -2.39,0.59 -0.89,-0.03 -2.34,0.89 -2.22,0.56 -4.22,0.55 -6.09,0.4 -0.85,-0.12 -1.25,-0.69 -0.91,-0.2 -5.96,0.54 -5.33,-0.7 -6.07,-7.03 -1.01,-2.18 0.22,-0.89 0.75,-0.96 3.01,-2.76 1.07,-0.66 4.48,-1.49 4.47,-1.81 3.53,-1.71 1.73,-0.59 1.67,-0.07 1.35,-0.56 -0.27,-0.54 -1.1,-0.62 0.01,-0.88 0.57,-0.42 2.21,-0.45 2.35,0.54 1.17,-0.19 0.34,-0.6 -0.31,-0.48 -2.23,-1 -10.7,2.89 -4.99,0.27 -3.46,1.23 -1.9,-0.04 -2.26,-1.23 -0.3,-0.37 -0.04,-0.51 0.7,-1.65 2.42,-0.99 1.22,-2.8 -1.3,-0.05 -4.34,0.6 -1.9,-0.26 -2.56,-1.08 -0.75,-1.28 -0.32,-0.93 -0.05,-1.11 0.09,-3.17 0.22,-1.71 0.14,-0.39 3.18,-5.3 1.98,-1.11 1.39,-1.68 0.05,-0.71 -0.34,-0.71 -1.3,-1.73 -0.52,-0.88 -0.29,-0.84 0.22,-1.33 0.74,-1.83 2.16,-2.96 5.21,-5.98 2.65,-2.53 2.55,-1.37 3.57,-2.93 9.15,-4.9 8.19,-4.96 3.01,1.31 0.86,1.03 0.38,0.87 0.33,1.22 0.28,1.56 0.39,3.37 0.05,1.73 -0.07,1.73 -0.19,1.56 -0.31,1.39 -0.61,1.7 -0.92,2 -1.95,3.41 -0.21,0.99 0.57,0.38 1.04,-0.31 1.51,-1 1.94,-0.82 2.38,-0.64 0.63,0.78 0.4,-0.16 0.7,-1.27 0.12,-0.84 -0.09,-0.95 0.04,-2.07 0.37,-1.25 1.41,-2.64 0.76,-0.95 1.21,-0.44 2.87,0.28 2.69,1.51 3.64,1.48 5.31,3.71 1.66,1.58 0.17,1.36 -0.94,2.89 -2.29,4.07 -1.84,1.46 -0.71,0.89 1.2,0.62 0.78,1.04 1.18,-1.5 0.86,-1.68 1.22,-1.4 0.42,-0.12 0.1,0.3 -0.21,0.72 -0.09,0.7 0.03,0.69 0.14,0.42 0.75,0.21 0.4,-0.26 1.62,-1.97 1.59,-3.03 2.41,-1.97 0.66,-1.01 2.1,-0.84 -0.02,-0.59 0.1,-2.35 -0.73,-1 -2.46,-2.11 -1.22,-2.53 0.26,-1.95 1.36,0.28 3.72,0.21 0.77,0.26 -0.01,0.03 z m -95.74,95.56 0.02,8.39 0,5.17 0,5.13 0,5.08 0,5.03 0,4.99 0,4.94 2.29,1.87 2.29,1.86 2.29,1.85 2.29,1.85 2.29,1.84 2.29,1.83 2.29,1.83 2.29,1.82 2.29,1.82 2.29,1.81 2.29,1.8 2.29,1.8 2.29,1.79 2.29,1.79 2.29,1.78 2.29,1.78 2.29,1.77 2.29,1.76 2.29,1.76 2.29,1.75 2.29,1.75 2.29,1.74 2.29,1.74 2.29,1.73 2.29,1.73 2.29,1.72 2.29,1.72 2.29,1.71 2.29,1.71 2.29,1.7 2.29,1.7 2.29,1.69 4.11,0.03 4.11,0.03 4.11,0.03 4.11,0.03 2.58,3.2 2.58,3.18 2.58,3.16 2.58,3.14 2.7,1.89 2.17,0.71 3.91,0.72 3.91,0.72 3.91,0.72 3.91,0.72 3.91,0.72 3.91,0.72 3.91,0.72 3.91,0.72 3.91,0.71 3.91,0.71 3.91,0.71 3.91,0.71 3.91,0.71 3.91,0.71 3.91,0.71 3.91,0.71 0.11,3.04 -0.17,4.71 0,4.87 0,4.82 0,4.78 0,4.74 0,4.71 0,4.67 0,4.63 0,4.59 0,4.56 0,4.52 0,4.49 0,4.45 0,4.42 0,4.39 0,4.35 0,4.32 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -4.48,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -5.6,0 -4.28,0 -4.28,0 -4.28,0 -4.28,0 -4.28,0 -4.28,0 -4.28,0 -4.28,0 -0.21,-0.34 -0.34,-0.35 -1.02,-0.01 -0.15,-0.1 -0.02,-0.25 0.19,-0.7 -0.05,-0.49 -0.95,-1.78 -0.73,-1.73 -0.18,-0.58 -0.19,-1.81 -0.21,-0.38 -1.38,-0.38 -0.59,-1.33 -1.17,-1.73 -0.11,-0.37 0,-0.35 0.95,-1.6 -0.01,-0.62 -0.68,-2.4 -0.3,-0.14 -1.71,-0.01 -0.28,0.24 -0.2,0.44 -0.19,1.17 -2.43,0.29 -0.7,0.33 -0.83,0.62 -0.5,0.01 -2.94,-0.9 -1.41,-0.91 -0.32,0 -0.29,0.14 -0.23,0.32 -0.41,1.03 -0.55,-0.13 -0.31,-0.24 -0.14,-0.63 -0.42,-0.05 -0.55,0.18 -0.11,0.23 0,0.64 -0.18,0.28 -0.38,0.17 -0.48,0.07 -1.52,-0.36 -1.3,0.7 -0.92,-0.23 -0.58,0.2 -0.24,-0.1 -0.27,-0.48 0.01,-0.69 -0.21,-0.49 -0.06,-0.45 0.09,-1.21 -0.32,-1.89 -0.18,-0.2 -0.81,0.23 -0.34,-0.36 -0.03,-0.2 0.13,-0.23 0.5,-0.61 0.11,-1.32 -0.06,-0.72 -0.46,-2.48 -0.39,-0.64 -0.45,-1.13 -0.56,-0.56 -0.63,-0.33 -1.51,0.03 -1.26,-0.42 -0.43,-0.36 -0.51,-0.68 -0.84,-0.58 -1.67,-1.74 -0.23,-1.29 -0.24,-0.64 -0.42,-0.53 -1.01,-0.46 -0.23,-0.35 -0.24,-0.84 -0.97,-1.2 -0.3,-0.82 -1.44,-1.59 -0.49,-0.1 -0.56,0.19 -0.87,0.83 -0.34,0.1 -0.24,-0.17 -0.35,-0.73 -0.25,-0.15 -0.95,-0.24 -1.1,0.12 -0.65,-0.2 -0.41,-0.33 -0.13,-0.26 0.07,-0.33 0.2,-0.35 0.06,-0.34 -0.1,-0.32 -0.44,-1.11 0.02,-0.54 0.46,-0.98 -0.09,-0.3 -0.4,-0.44 -0.02,-0.27 0.08,-0.31 0.79,-0.56 0.09,-0.39 -0.19,-0.45 -2.13,-1.29 -0.37,-0.36 -0.04,-0.4 -0.27,-1.06 -0.17,-0.28 -0.68,-0.47 -0.15,-0.31 -0.06,-0.55 -0.14,-0.39 -0.54,-1.08 -0.09,-0.65 0.13,-0.59 0,-0.7 0.86,-2.1 0.05,-0.42 -0.16,-0.19 -0.94,-0.04 -0.83,-0.43 -0.38,-1.29 -0.32,-0.61 -0.65,-0.56 -0.73,-0.9 -0.66,-0.3 -0.06,-0.34 0.34,-0.51 1.37,-1.14 0.39,-0.6 0.54,-1.6 -0.09,-0.72 -0.29,-0.67 -0.52,-0.63 -0.27,-0.59 -0.78,-0.4 -0.17,-0.29 -0.14,-0.58 -0.12,-0.32 -0.28,-0.05 -0.91,0.39 -0.37,-0.15 -0.16,-0.36 0.04,-0.35 0.35,-0.33 1.03,-0.5 0.22,-0.23 0.03,-0.41 -0.19,-0.29 -1.28,-0.3 -0.73,-0.56 -1.34,-1.42 -1.32,-0.62 -0.87,-0.87 -0.31,-0.77 -0.49,-0.37 -0.23,-0.65 -0.52,-0.92 -0.1,-0.31 0.25,-0.56 0,-0.51 -0.16,-0.55 -0.46,-0.83 -0.27,-0.28 -0.13,-0.52 0.04,-0.54 -0.76,-1.58 -1.42,-0.96 -0.84,-0.24 -0.36,0.15 -0.45,0.74 -0.57,0.47 -0.66,0.27 -1.59,0 -0.3,-0.15 -0.05,-0.39 0.11,-0.4 0.54,-1.31 0.13,-0.54 -0.12,-0.39 -0.21,-0.23 -1.26,-0.67 -1.43,-2.24 -0.48,-0.38 -1.92,-1.27 -0.73,-0.31 -1.36,-0.06 -0.31,-0.29 -0.1,-0.3 -0.01,-0.37 0.15,-0.33 0.71,-0.88 0.07,-0.61 0,-0.95 0.14,-0.27 0.9,-1.09 0.24,-0.36 0.01,-0.4 -0.26,-0.38 -1.21,-0.41 -0.2,-0.32 -0.02,-1.3 -0.35,-0.31 -0.27,0.07 -0.88,0.3 -0.39,-0.13 -0.15,-0.25 -0.05,-0.4 0.1,-0.46 1.48,-1.18 0.27,-0.43 0.22,-0.87 1.76,-2.21 0.7,-2.04 0.65,-1.3 -0.01,-0.65 -0.89,-1.92 -0.74,-1.1 -1,-1.16 -0.4,-0.31 -0.19,-0.51 0.14,-0.64 1.78,-1.52 -0.02,-0.52 -0.25,-0.32 -1.01,0.1 -0.84,-0.77 -0.33,-0.12 -0.89,0.69 -0.47,0.58 -0.49,0.95 -0.73,0.32 -0.41,-0.07 -0.18,-0.37 0.25,-0.94 0.21,-0.55 -0.01,-0.35 -0.18,-0.25 -0.93,0.02 -1.68,0.47 -1.64,1.1 -0.79,0.01 -0.8,-0.16 -0.29,-0.26 -0.02,-0.79 -0.19,-0.86 -0.27,-0.54 -0.01,-0.48 0.16,-0.35 0.59,-0.85 0.22,-0.59 0.02,-0.71 -0.04,-0.9 -0.11,-0.81 -0.26,-0.23 -0.35,-0.11 -0.97,-0.07 -0.27,-0.02 -0.09,-0.47 0.09,-0.5 0.27,-1.52 0.18,-0.53 0.3,-0.1 0.28,-0.03 0.18,-0.16 0.02,-0.44 -0.06,-0.83 0.08,-0.61 0.13,-0.66 -0.15,-0.46 -0.66,-1.02 -0.34,-0.44 -0.04,-0.42 -0.02,-0.34 -0.25,-0.61 -0.06,-0.5 0.07,-0.43 0.13,-0.75 -0.1,-0.75 -0.48,-0.98 -0.68,-0.94 -0.96,-0.94 -0.2,-0.66 -0.02,-0.73 -0.56,0 -2.57,0 -2.57,0 -2.63,0 -2.57,0 -2.57,0 -2.57,0 -2.57,0 -0.39,-0.24 -0.23,-0.48 -0.26,-1.2 -0.01,-1.07 0.03,-0.65 0.02,-0.42 0.61,-1.04 0.38,-1.42 0.02,-0.39 -0.21,-1.16 -0.11,-0.49 -0.16,-0.43 -0.17,-0.67 0,-0.64 0.08,-1.5 -0.35,-1.47 -0.23,-0.55 -0.28,-0.37 -1.22,-1.17 -0.3,-0.86 -0.1,-1.04 0,-6.93 0,-7.02 0,-7.11 0.01,-6.8 2.88,0.32 2.29,1.23 4.52,3.37 0.93,0.3 0.25,-0.25 -1.58,-3.33 -0.25,-0.32 -1.82,-1.25 -2.14,-0.62 -0.16,-0.24 -0.4,-1.18 0.13,-0.46 0.47,-0.21 1.59,0.01 0.94,-0.19 0.13,-0.47 -0.68,-0.11 -0.82,-0.45 -0.96,-0.8 -0.54,-0.75 1.96,-5.04 0.69,0.51 1.03,-1.17 1.85,0.74 0.34,-0.41 0.23,-2.58 0.28,-0.62 0.52,-0.46 2.58,-0.46 3.22,0.46 0.33,-0.25 -0.31,-1.73 -0.04,-0.68 0.19,-1.56 0.2,-0.84 0.38,-0.42 1.5,0.33 0.47,0.77 0.5,1.32 0.51,0.75 1.59,0.76 0.18,0.53 -0.61,2 -0.64,1.04 -1.31,2.74 -0.08,0.7 2.03,-1.23 2.28,-1.7 1.96,-0.94 1.63,-0.17 1.17,-0.55 0.71,-0.94 0.5,-0.96 1.01,-3.11 0.67,-0.54 2.81,0.19 0.67,-0.09 0.43,-0.3 -0.08,-0.4 -0.57,-0.49 -0.8,-0.14 -0.02,-0.22 0.3,-0.51 0.44,-0.3 1.39,-0.36 0.91,1.13 0.62,0.08 2.06,-1.25 3.16,-3.34 1.26,-0.93 1.07,-0.16 0.92,0.61 0.71,-0.16 0.94,-1.9 0.37,-1.01 0.58,-0.88 2.34,-1.98 1.5,-0.43 0.91,0.37 1.09,0.82 0.9,0.32 1.18,-0.24 0.88,0.11 0.42,-0.4 1.51,-2.27 0.49,-0.02 0.47,0.67 0.76,1.65 0,0.82 -0.99,2 -7.27,5.67 -2.24,2.43 -1.11,0.89 -1.15,0.5 -2.22,0.42 -0.88,0.49 -1.49,0.44 -3.49,0.77 -0.67,0.38 -0.46,0.44 -1.25,2.94 -0.61,0.96 -1.2,1.44 -1.35,0.88 -1.84,0.34 -1.17,1.37 -1.35,2.63 -1.09,1.82 -1.24,1.54 -1.35,2.01 -0.35,1.05 0.4,1.38 0.22,0.46 1.36,0.74 0.53,-0.17 -0.49,-0.74 -1.14,-1.07 -0.15,-0.38 0.29,-0.3 5.36,0.81 1.15,-0.82 0.4,-0.69 -0.09,-0.36 -1.45,-0.15 -0.31,-0.66 -0.23,-1.25 -0.05,-0.99 0.13,-0.74 0.33,-0.94 1.56,-1.54 1.68,-0.66 1.29,-0.88 0.71,-0.83 1.92,-1.42 0.77,-1.15 0.42,-0.9 0.05,-0.45 -0.35,-0.33 0.28,-0.77 1.4,-0.69 0.62,-0.06 1.97,0.66 0.36,0.52 -0.19,1.37 0.28,-0.06 0.76,-1.74 0.42,-0.58 0.44,-0.12 0.44,0.22 0.45,0.56 0.24,1.68 0.04,2.78 0.1,1.12 0.5,-1.92 0.35,-0.89 1.92,-4.11 1.3,-2.26 1.46,-2.22 2.12,-1.66 4.89,-2.76 2.75,-0.75 1.4,-0.69 0.68,-0.6 0.44,-0.74 0.77,-0.85 0.14,0.07 -0.3,1.79 -0.2,0.52 -1.79,1.1 -0.18,0.84 0.19,1.3 0.31,0.85 0.42,0.41 0.74,-0.29 1.06,-1 1.32,-1.53 2.86,-3.91 0.25,-0.72 0.72,-3.16 1.64,-1.4 2.97,-1.6 0.73,-1.02 -2.6,-0.86 -0.54,-0.6 -0.08,-0.36 0.49,-0.92 -1.19,-0.91 -0.44,-0.56 0.02,-1.64 0.37,-1.18 0.78,-1.14 0.44,-0.2 1.16,0.67 0.98,0.86 3.37,3.97 1.35,1.93 0.78,1.51 1.9,4.69 0.84,2.69 0.67,2.76 0.66,1.98 0.65,1.21 3.24,4.76 1.67,2 1.4,1.24 1.61,0.98 1.82,0.72 1.24,0.06 1.93,-2 0.04,-1.32 -0.85,-2.21 -0.85,-1.54 0.1,-0.94 1.13,-1.81 -0.08,-0.63 0.24,-1.87 0.78,0.36 0.31,-0.07 0.44,-0.69 0.56,-1.3 0.71,-1.08 0.86,-0.86 0.23,-0.56 -0.85,-0.41 -0.51,0 -0.38,-0.18 -0.25,-0.37 0.34,-0.4 1.86,-1.01 0.35,-0.97 0.6,-0.64 0.76,-0.26 0.47,0.27 0.52,0.8 0.03,1.28 -0.23,2.08 -0.04,1.67 0.58,3.93 0.52,0.85 2.01,1.15 -0.12,0.95 -2.33,4.09 -0.5,1 -0.25,0.76 0.08,0.64 0.41,0.53 0.79,0.37 2.03,0.15 0.56,-0.35 3.95,-0.12 0.72,-0.3 0.61,-0.78 0.89,-1.96 1.01,-0.6 0.32,-0.55 0.62,-2.34 0.31,-2.73 0.3,-1.15 0.46,-0.71 0.62,-0.23 1.54,0.27 0.72,-0.23 2.84,0.23 2.85,-0.2 2.94,0.49 1.89,0.56 1.75,0.89 3.35,2.09 1.32,1.12 1.18,1.28 z\"\n           title=\"Northwest Territories\"\n           id=\"CA-NT\" class=\"carona-normal\" (mouseover)=\"mapMouseOver('CA-NT')\" [matTooltip]=\"CANT\"/>\n        <path\n           d=\"m 641.33,7.63051 7.31,1.33 2.37,-0.48 2.71,3.24 1.63,0.38 2.69,-0.61 1.96,0.77 7.3,0.72 1.52,1.25 -0.02,1.51 -1.57,3.25 -2.12,3.11 -13.64,10.02 -1,1.65 2.66,0.52 3.92,-0.45 3.04,-1.1 3.58,-3.38 1.18,-0.19 2.28,-1.65 4.41,-4.64 3.52,-2.53 1.59,1.11 1.34,1.76 0.91,0.2 0.47,-1.35 0.75,-3.71 0.44,-1.36 1.16,-0.97 0.71,0.11 1.15,1.77 1.27,4.16 1.17,2.88 0.63,0.05 2.68,-3.25 1.35,-0.42 3.07,1.18 1.28,1.43 0.23,1.52 -0.82,1.6 -0.51,1.38 -0.2,1.16 0.45,1.34 1.86,2.85 2.69,6.15 -0.02,2.24 -1.47,4.53 0.04,1.14 6.92,-4.75 6.97,2.13 1.97,1.45 0.76,1.74 0.81,2.86 0.85,3.96 -0.59,4.1 -3.06,6.33 -3.16,4.83 -1.87,4.34 -2.87,2.37 -9.82,10.29 -4.8,3.27 -2.76,3.2 -1.24,0.55 -5.85,-0.61 -1.55,1.75 -0.86,2.93 -1.84,1.39 -2.72,0.99 -5.57,0.8 -1.25,3.27 -0.32,2.21 -0.54,1.71 -0.47,0.82 -15.91,11.48 -0.29,1.9 1.6,0.78 2.02,-0.78 23.15,-13.93 4.44,-0.93 4.12,1.02 -0.47,3.28 -5.84,9.18 -7.43,8.14 -3.71,6.09 -9.39,10.34 -7.67,10.1 -2.95,5.06 -3.95,8.91 -1.35,2.13 -1.64,0.88 -1.93,-0.37 -1.74,-1.28 -2.32,-3.3 -2.12,-3.72 -0.66,-0.66 0.4,1.85 4.08,12.24 -0.47,2.34 -7.49,2.45 -3.31,2.16 -1.71,0.52 -1.21,-0.39 -1.18,0.22 -1.15,0.83 -0.06,0.92 1.02,1.01 2.98,0.79 6.63,-2.67 1.06,0.19 1.7,1.3 0.08,1.18 -1.78,3.77 -5.36,4.47 0.7,0.25 1.54,1.57 -0.03,1.41 -1.69,3.31 -0.8,1.05 -5.17,3.05 -2.25,0.71 -1.98,-0.38 -9.07,-6.69 -3.2,-0.97 -3.04,-1.71 -2.24,0.29 -2.38,1.98 1.07,0.99 4.39,1.89 3.67,0.37 1.52,0.73 0.6,1.22 1.58,4.42 0.25,2.36 -0.35,2.18 -0.48,1.52 -0.61,0.87 -0.94,0.43 -3.58,-0.31 -1.34,0.53 -1.55,1.27 -1.95,0.55 -3.51,-0.25 -4.14,1.84 -2.19,0.34 -2.42,-0.83 -2.63,-2.06 -2.77,-1.04 -4.69,-0.88 0.39,1.18 1.65,0.5 3.36,3.16 1.61,4.25 1.51,0.71 3.09,3.46 2.23,0.54 2.33,1.17 3.28,-1.51 2.21,0.28 -0.46,8.41 -0.97,0.81 -5.31,0 -2.52,-1.21 -1.11,-1.25 -2.45,-1.42 -2.2,0.83 -2,-0.18 -1.35,0.84 -2.15,-0.03 -5.62,1.41 -2.97,0.02 -2.19,-0.91 -2.55,-0.28 -2.9,0.34 0.2,0.97 1.23,0.29 1.79,1.57 1.66,2.4 1.38,1.01 1.65,-0.57 1.68,-1.12 6.15,-1.85 2.7,-0.3 2.4,0.82 1.6,1.02 1.12,1.22 1.41,3.23 3.54,0.39 2.7,1.07 4.3,4.64 1.18,0.35 0.48,1.19 -0.91,2.96 -0.1,1.77 -2.98,3.42 -4.64,0.99 -5.1,-0.32 -3.65,0.39 -0.38,0.43 2.51,0.89 5.81,3.95 2.25,2.13 0.39,1.24 -3.2,4.7 -2.83,9.2 -0.93,0.72 -0.97,0.25 -2.49,-0.16 -3.16,2.28 -2.38,0.46 -4.32,-0.86 -4.99,0.05 -0.39,1.47 -0.25,2.8 0.03,4.19 0.3,5.54 -0.26,4.01 -0.82,2.52 -1.04,1.85 -1.88,1.79 -1.93,1.11 -1.44,0.39 -2.4,0.06 -6.89,1.28 -3.37,-0.08 -2.61,-0.54 -2.7,-1.79 -4.5,-5.08 -1.28,-1.13 -1.25,-0.66 0.05,1.1 1.35,2.85 1.12,1.83 0.9,0.82 -0.21,0.87 -1.99,1.36 -2.19,0.61 -2.59,-0.02 -0.08,0.52 0.88,1.46 1.14,1.37 0.75,0.41 1.99,-0.42 2.3,-1.73 1.44,-0.51 2.86,0.41 1.13,0.62 3.57,3.78 0.5,0.18 2.64,-1.9 3.82,-0.1 1.4,1.52 0.54,2.94 0.07,2.38 -0.4,1.81 0.88,1.76 2.17,1.71 1.68,0.37 1.19,-0.97 1.82,-2.35 0.77,-0.56 0.73,0.13 1.11,1.71 1.49,3.28 0.14,3.81 -1.21,4.32 -1.48,2.82 -5.83,4.61 -1.76,1.8 -1.39,1.87 -2.02,1.68 -3.97,2.24 -2.09,0.42 -4.51,2.4 -0.98,0.11 -1.46,-0.39 -0.3,-1.17 0.37,-2.08 0.48,-1.94 0.6,-1.81 0.02,-1.5 -1.27,-2.35 -0.89,-1.09 -0.86,-0.55 -1.74,0.32 -0.98,0.65 -1.05,0.12 -1.12,-0.4 -0.95,-0.99 -1.89,-4.19 -0.71,-0.54 -0.93,0.13 -0.83,-0.6 -0.74,-1.34 -1.22,-1.3 0.33,0.99 1.22,2.4 0.85,2.37 0.48,2.35 -0.22,1.84 -10.36,1.02 -4.45,-0.53 -0.9,-1.61 -2.13,-6.96 -0.46,12.25 -7.76,1.97 -1.81,-0.33 -3.02,-1.35 -3.9,-3.27 -1.62,-2.18 -0.63,-2.18 -0.47,-1.2 -0.31,-0.2 -0.97,2.63 -1.06,5.35 -2.67,-1.38 -3.38,-1.35 -1.22,-5.29 -0.07,7.65 -5.44,-1.01 -2.61,0.29 -0.77,-6.71 -0.13,-7.5 -1.06,4.75 0.46,4.01 0.15,4.84 -2.31,-1.37 -5.07,-0.67 -1.8,-0.67 0.23,-6.48 0.4,-6.53 6.53,-6.59 1.92,-3.15 1.42,-1.27 2.24,-0.81 2.86,-0.5 1.95,0.39 2.23,-0.38 2.67,-1.2 1.9,-0.34 0.36,-0.42 -0.55,-0.62 -2.04,-4.36 -0.73,-1 -0.74,-0.44 -1.47,-0.2 -1.43,-1.93 -0.83,-1.71 -0.88,-2.33 -1.41,-4.45 -1.41,-5.01 0.7,-2.77 2.33,-2.19 2.33,-1.52 2.34,-0.85 1.96,-0.02 2.36,1.22 3.32,2.34 1.9,2.64 2.39,5.56 1.57,4.38 1.28,1.96 5.72,3.55 1.9,0.57 2.26,-0.29 4.6,-0.93 2.26,-0.97 1.01,-1.16 0.52,-1.66 0.65,-1.29 2.04,-2.96 3.12,-6.2 1.72,-4.95 0.41,-1.68 0.34,-2.03 0.28,-2.4 -0.97,1.28 -5.38,12.26 -1.12,2.2 -3.15,3.69 -1.33,0.59 -2.15,-0.18 -2.85,-1.63 -3.36,2.59 -2.04,-0.66 -1.81,-1.81 -0.02,-8.59 -2.29,-6.97 2.53,-3.56 2.1,-2.22 3.73,-5.82 0.82,-0.06 2.7,0.92 -1.48,-1.33 -1.45,-1.98 -3.23,0.51 1.14,-12.81 -2.16,9.61 -2.2,4.97 -1.33,2.5 -1.5,1.43 -5.66,1.23 1.39,-4.61 1.28,-6.87 -1.35,2.58 -3.19,3.85 -2.39,2.01 -1.97,1.06 -3.82,-0.25 -1.9,-1.92 0.54,-4.74 0,-5.89 1.17,-2.75 1.77,-3.55 1.9,-4.82 1.3,-5.06 5.07,-2.27 4.94,-0.93 4.14,-2.71 2.03,-0.48 1.94,1.29 7.88,2.11 3.24,1.6 1.42,1.16 1.05,0.42 1.11,-1.73 1.41,-1.68 4.91,0.17 1.35,-0.31 1.25,-0.79 1.52,-1.6 1.8,-2.42 0.28,-1.19 -1.25,0.04 -1.25,0.61 -1.87,1.77 -1.81,0.95 -1.84,-0.18 -3.71,-1.49 -6.46,-0.27 -3.29,-0.68 -1.53,-0.72 -0.86,-1 -0.75,-1.5 -0.64,-2.02 0.34,-1.42 1.31,-0.82 1.14,-0.17 1.83,1.11 2.05,1.89 2.23,0.24 -0.77,-1.72 -2.83,-3.47 -1.96,-2.96 -1.65,-3.66 -1.27,-3.65 -2.82,-5.77 -2.27,-5.8 -1.6,-2.59 -1.69,-1.29 -5.15,-1.61 -1.03,-1.05 -2.46,-5.18 -0.66,-8.87 -1.08,-5.48 1.04,-7.09 1.71,-3.25 10.29,2.53 4.34,-0.38 5.55,0.9 2.98,1.75 3.41,4.31 3.04,4.82 2.93,3.2 2.69,4.34 2.94,6.38 1.73,3.03 1.5,1.84 2.02,1.58 3.81,1.99 3.32,0.65 1.72,-0.26 1.84,-1.44 1.31,-1.71 -1.46,-0.47 -3.82,0.2 -2.66,-0.91 -1.51,-2.02 -1.61,-2.74 -2.56,-5.21 -1.94,-3.43 -4.23,-5.64 -3.13,-5.67 -2.51,-5.44 -0.23,-2.38 1.81,-1.66 2.23,-1.17 13.95,-3.75 8.32,-4.52 3.38,-5.29 0.4,-1.24 11.14,-7.59 7.88,-2.83 3.03,-0.46 2.75,-1.23 0.11,-0.76 -2.4,-1.04 -2.43,-0.51 -5.51,0.03 -4.9,-0.94 -1.48,-1.72 0.31,-2.82 0.47,-2.44 1.48,-4.1 1.59,-3.1 6.73,-9.04 4.53,-3.85 1.31,-2.68 -9.75,5.95 -3.4,4.26 -3.42,6.33 -1.77,1.85 -1.26,-0.49 -1.13,0.59 -0.99,1.65 -0.83,3.01 -0.67,4.35 -0.61,2.94 -0.55,1.56 -1.39,2.25 -3.34,4.37 -7.83,6.06 -2.63,1.53 -2.26,0.24 -7.31,3.37 -2.2,0.13 -2.43,-1.02 1.04,-2.92 3.87,-5.42 1.03,-2.43 -2.47,0.53 -2.52,1.49 -5.57,1.23 -2.2,2.21 -2.14,3.99 -1.71,2.49 -1.29,1.01 -1.78,0.6 -6.53,0.31 -1.45,-0.26 -3.75,-3.01 -3.33,1.04 -1.37,-0.2 -2.52,-2.14 -0.75,-1.39 0.11,-1.87 1.46,-3.55 1.69,-3.43 5.49,-7.62 3.52,-3.61 5.08,-3.13 11.93,-3.52 0.54,-2.59 -12.07,2.9 -10.27,3.64 -1.67,1.33 -2.39,3.53 -7.59,12.6 -2.24,3.13 -3.42,0.75 -2.62,-1.06 -2.05,-1.57 -3.52,-3.69 -2.66,-1.99 -1.26,-1.34 -0.74,-1.36 -0.6,-1.6 -0.46,-1.83 0.86,-1.54 6.76,-3.34 9.18,0.65 4.12,-0.69 4.05,-2.03 5.98,-5.08 6.51,-7.21 1.27,-2.32 -2.38,-0.51 -1.76,0.57 -4.24,2.6 -6.7,6.93 -5.85,2.43 -14.45,1.29 -4.59,1.91 -2.01,-0.41 -1.52,-1.86 -1.69,-3.47 0.3,-2.79 3.44,-3.15 2.7,-0.74 0.48,-0.65 -3.83,-3.07 -0.34,-1.58 2.21,-3.51 4.79,-5.21 2.42,-1.65 4.44,-1.06 4.57,0.57 0.18,-1 -4.52,-2 -3.38,-0.37 -4.48,1.41 -11.88,8.48 -1.01,-0.25 -1.73,-1.45 0.5,-2.09 6.35,-8.98 0.21,-1.43 -4.56,0.2 -1.34,-0.43 -1.31,-1.08 -1.86,0.96 -2.41,2.98 -1.7,1.27 -0.99,-0.43 -2.52,-3.53 0.33,-2.98 2.01,-3.76 1.83,-2.72 2.49,-2.5 4.05,-3.15 2.93,-1.07 4.75,-0.03 2.26,-1.41 2.01,-2.47 2.52,-4.03 2.76,-2.79 4.51,-2.3 3.8,0.74 2.1,2 1.67,3.5 1.79,2.66 0.17,-2.15 1.48,-2.66 1.86,-1.14 2.24,0.38 1.96,1.27 2.54,3.21 2.05,1.43 0.97,-0.09 1.21,-1.77 3.21,-0.04 -0.07,-0.75 -1.05,-1.86 -1.27,-1.33 -11.38,-9.36 -0.31,-2.07 3.84,-1.95 2.4,-2.34 1.13,-0.57 2.81,-5.02 1.84,-2.63 3.4,-3.01 1.36,0.82 1.72,2.65 1.66,1.65 4.88,1.57 2.09,1.63 3.72,9.26 1.48,2.99 2.12,3.06 1.26,1.15 2.49,0.73 0.26,-1.72 -2.96,-4.31 -0.81,-2.51 0.35,-2.14 0.63,-1.13 0.91,-0.1 2.33,1.91 6.2,6.44 9.27,7.53 3.55,1.74 2.19,2.65 2,3.21 1.97,2.2 0.37,-0.21 -1.83,-4.95 -4.49,-6.17 -12,-10.71 -4.75,-5.7 -2.3,-3.89 -1.74,-3.96 -0.03,-2.18 1.63,-2.56 2.2,-2.04 2.74,-0.81 0.33,-0.85 -2.49,-3.08 -1.47,-2.68 0.05,-1.87 2.97,-1.44 1.84,0.43 3.5,3.39 2.92,1.59 0.47,-1.03 -3.02,-9.05 -0.28,-2.06 0.45,-1.21 1.06,-1.23 3.17,0.71 5.21,4.46 9.33,2.22 2.57,-0.33 -0.39,-1.02 -3.72,-2.75 -3.9,-3.71 -1.72,-2.25 -1.26,-3.05 -1.5,-2.55 -0.12,-1.23 2.41,-1.99 6.33,0.39 5.88,3.06 4.99,-1.11 3.14,0.76 1.24,0.92 2.27,3.31 7.21,11.82 0.77,1.86 0.82,2.81 0.87,3.76 1.23,1.02 2.38,-2.58 1.6,-2.51 -0.69,-2.44 -3.98,-5.64 -0.9,-2.43 -1.99,-4.13 -4.47,-7.48 -1.19,-3.51 -0.75,-3.01 12.37,-2.85 11.93,2.52 1.94,1.78 1.27,2.46 1.25,3.73 1.91,3.78 3.86,5.75 5.5,3.55 -1.05,-2.41 -4.11,-6.33 -1.86,-4.38 0.01,-2.98 0.33,-2.29 0.65,-1.59 4.66,-6.1 6.66,-1.85 0.77,0.34 5.18,9.36 2.46,3.78 1.72,1.51 0.07,-0.66 -2.38,-4.25 -1.83,-2.33 -0.19,-1.46 3.04,-4.56 1.92,-1.15 8.07,-1.34 0.92,0.49 0.77,1.27 1.91,5.02 0.62,0.59 z m -200.77,123.06 1.17,4.84 4.33,11.35 1.96,4.06 3.33,5.01 0.41,1.79 0.04,0.75 -0.09,2.64 0.95,0.97 2.87,1.51 3.19,2.71 0.57,-0.15 1.11,-1.6 1.34,-0.44 1.75,0.39 0.84,1.15 0.62,1.68 0.26,1.2 0.04,0.93 -0.63,1.8 0.07,0.69 0.38,0.83 0.07,0.97 -0.63,3.79 0.17,1.38 1.61,3.42 1.45,1.7 2.87,1.84 1.87,-0.13 1.16,1.16 0.03,-0.72 -0.52,-2.17 -1.12,-3.09 -2.08,-1.6 -0.3,-1.82 -0.15,-3.12 0.18,-2.07 1.06,-1.68 0.9,-0.54 2.68,-0.08 1.48,0.75 2.55,2.34 0.26,1.27 0.14,2.5 0.11,4.99 -0.06,1.07 -2.18,2.8 -0.48,1.89 0.55,0.53 1.88,0.42 2.89,1.71 1.13,0.17 1.13,3.94 0.89,3.73 -0.65,4.52 -0.85,7.18 -0.68,1.63 -0.67,2.47 0.47,0.45 2.85,-0.98 0.58,-0.34 1.9,-2.41 2.8,0.56 0.94,0.63 0.46,0.85 0.85,2.69 0.7,3.54 0.52,-0.32 1.3,-4.29 0.47,-1.07 0.65,-1.03 0.28,0.19 1.31,4.01 2.92,7.01 1,2.87 0.19,2.11 -1.25,2.45 -0.97,1.22 -7.19,5.16 -3.22,2.9 -1.6,2.23 -0.82,0.74 -1.73,-0.34 -0.39,0.37 -0.53,3.56 -0.57,1.51 -1.49,2.44 -2.08,4.39 -1.24,1.91 -2.19,-1.4 -0.55,-2.04 -0.3,-4.63 -0.04,-1.93 0.07,-1.02 0.27,-1.66 0.95,-4.03 -0.11,-0.42 -0.44,0.34 -1.45,2.02 -0.57,1.06 -0.54,1.84 -0.24,3.08 0.21,5.63 -0.21,2.25 -0.58,1.11 0.23,0.86 1.71,1.19 0.3,0.52 0.19,0.94 0.08,1.36 -0.08,1.25 -0.51,1.92 -0.96,0.78 -1.23,-0.87 -2.65,-4.76 -1.15,0.26 -0.29,0.55 0.25,1.7 0.82,3.79 0.15,3.13 -0.38,2.59 -0.76,4.06 -0.52,2.16 -0.28,0.29 -1.32,0.06 -1.13,-1.09 -3.36,-7.11 -1.66,-3.06 -2.43,-6.03 -0.62,-1.25 -0.37,-0.28 -0.35,2.61 0.67,2.4 2.19,5.61 1.31,4.04 0.94,3.32 0.15,1.37 -0.32,0.54 -0.48,-0.31 -0.64,-1.16 -1.99,-1.96 -0.83,-1.09 -0.54,-1.27 -0.99,-0.96 -1.44,-0.66 -1.45,-0.13 -1.46,0.41 -0.28,0.62 1.64,1.73 0.57,0.96 0.43,1.23 0.28,1.49 -0.54,0.94 -2.04,0.59 -2.72,-0.37 -4.41,-1.29 -4.39,-2.14 -4.05,-3.35 -2.93,-3.38 -1.16,-1.81 -0.36,-1.36 1.1,-1.19 3.84,-1.53 3.85,-0.99 -0.61,-0.86 -7,-1.96 -2.3,-0.36 -1.23,0.52 -1.41,-0.3 -1.1,-1.56 -1.46,-2.97 -0.74,-1.98 0.1,-0.77 0.55,-0.44 3.17,0.38 0.44,-0.3 -1.58,-1.49 -5.07,-2.97 -1.9,-2.64 -0.35,-1.03 -0.14,-1.02 0.06,-1 1.91,-2.03 5.88,-4.83 2.02,-0.76 2.03,-0.05 1.42,-1.4 1.22,-4.64 6.09,-1.68 4.7,-2.11 0.39,-0.57 -3.52,0.39 -4.98,-0.42 -2.12,-3.21 -1.44,-0.55 -1.59,0.03 -1.85,1.01 -3.16,2.98 -1.52,0.69 -3.43,3.06 -0.96,-0.22 -0.48,-0.36 -0.14,-0.6 0.62,-2.03 0.9,-1.39 -0.18,-0.48 -1.35,-0.29 -1.56,0.06 -1.08,0.48 -3.95,2.69 -1.77,2.01 -0.53,0.18 -1.91,-3.14 -3.05,-1.73 -0.68,-1.36 0.63,-5.35 0.89,-1.11 2.34,-0.91 7.02,-4.93 0.4,-0.95 0.66,-2.52 -1.6,0.54 -3.52,2.43 -2.9,1.21 -2.29,-0.01 -1.68,-0.35 -1.06,-0.68 -1.27,-1.55 -4.15,-7.21 -1.13,-3.53 -0.16,-3.13 -0.29,-2.4 -1.2,-5.81 8.89,3.62 3.48,0.68 6.71,0.24 0.31,-0.35 0.1,-0.94 -0.12,-1.53 0.05,-1.18 0.22,-0.83 2.49,-2.11 0.38,-0.7 -2.94,-0.35 -5.4,3.52 -1.91,-0.03 -2.16,-5.04 -2.31,0.89 -1.09,-0.4 -1.7,-1.28 -0.84,-1.12 -0.54,-1.39 -0.23,-1.17 0.08,-0.95 0.46,-1.06 1.99,-1.48 0.9,-0.14 2.37,0.95 1.78,-0.07 -0.59,-1.59 -2.57,-4.02 -2.25,-4.49 0.17,-7.59 1.85,-1.62 1.91,-0.27 1.87,1.94 2.51,0.27 1.79,2.17 1.19,4.15 1.42,-0.08 2.23,0.78 5,-0.06 -0.9,-1.48 -1.55,-1.29 -3.53,-1.7 -1.72,-6.13 -3.65,-3.19 -2.86,-1.68 0.05,-1.42 2.15,-7.82 2.59,-2.81 4.13,1.06 2.72,-1.5 3.5,-2.81 3.43,1.3 0.88,-0.12 0.52,-0.86 0.46,-1.66 0,-1.53 -0.45,-1.41 -1.08,-1.75 -4.37,-0.24 -1.94,-0.69 -0.75,-0.94 -0.22,-1.42 -0.12,-1.46 -0.01,-1.51 0.12,-0.93 0.37,-0.51 1.07,-0.6 4.08,-0.08 2.44,-0.82 2.67,1.08 5.58,4.04 1.8,2.05 1.92,3.41 0.9,2.99 z m -61.91,62.99 0.2,6.67 -0.19,3.32 -0.46,2.44 -0.4,0.57 -0.54,0.08 -2.45,-1.9 -0.75,-1.12 -0.04,-0.95 -0.24,-1.86 -1.64,-2.42 -3.06,0.39 -1.28,-0.23 -0.51,-0.72 -0.32,-1.04 -0.3,-4.25 0.05,-1.51 0.37,-2.63 0.23,-0.64 2.25,-2.44 0.64,-0.21 2.75,0.92 2.44,0.12 1.22,0.68 1.09,1.53 0.64,2.31 0.3,2.89 z m -41.55,33.21 2.1,0.98 2.49,3.09 2.35,6.49 0.12,0.82 0.01,1.07 -0.1,1.31 -0.31,1.7 -0.43,1.02 1.21,1.23 0.13,0.6 -0.11,1.36 0.15,1 0.73,-0.99 0.63,-1.52 0.16,-0.98 0.13,-2.64 1.83,-1.32 1.93,-1.93 0.91,-0.44 1.51,0.45 3.63,4.56 1.38,0.43 0.5,0.53 0.46,1.05 0.03,1.13 -0.74,2.62 -0.28,1.59 0.17,1.03 1.89,0.86 4.32,-1.73 3.77,4.22 2.09,4.97 1.55,1.66 0.24,0.89 -0.44,0.84 -0.44,2.3 -1.24,1.71 -0.26,0.77 0.66,2.02 0.05,1.27 -0.09,1.75 0.24,0.98 1.69,1.04 3.86,7.09 0.7,1.96 0.44,2.44 0.04,0.82 -0.55,1.35 -0.6,3.79 -0.34,0.86 -1.57,0.74 -2.85,0.66 -2.66,1.28 -2.86,-1.65 -2.79,-2.52 -0.84,-1.66 -0.7,-2.02 -0.18,-0.79 -0.28,-3.27 -0.15,-0.7 -1.18,-1.85 -1.04,-2.78 -2.01,-0.24 -4.76,-2.84 -2.04,-0.68 -2.04,0.2 -2.89,1.15 -0.54,-0.31 -0.49,-0.85 -0.44,-1.4 -0.11,-1.03 0.48,-1.81 -8.48,2.28 -2.41,2.63 -3.39,-0.42 -1.69,-1.11 -2.25,-2.52 -1.04,-2.21 -0.95,-2.98 -0.09,-2.27 0.77,-1.54 0.8,-0.92 0.83,-0.29 4.6,1.79 4.03,0.91 1.74,-0.91 0.79,-2.45 -0.94,-1.32 -3.88,-0.54 0.83,-1.3 3.28,-1.34 1.71,-2 -0.33,-0.7 -0.99,-0.81 -4.4,0.24 -1.58,-0.79 -0.09,-0.66 0.35,-0.85 2.5,-4.12 -0.1,-0.75 -1.08,-1.36 -0.95,-1.77 -0.35,-0.2 -2.18,1.58 -3.06,6.06 -0.73,0.87 -0.7,-0.05 -0.67,-0.97 0.01,-1.27 0.68,-1.56 1.42,-4.72 -0.1,-1.69 -1.39,-1.13 -3.65,0.85 -2.03,0.03 -0.31,-1.34 -0.08,-2.52 0.08,-2.38 0.51,-3.74 0.71,-2.88 0.43,-1.03 4.84,0.61 7.91,-1.8 2.31,-0.19 2.53,1.82 z m 64.74,36.6 2.12,1.18 3.65,-0.52 1.33,0.86 3.42,3.02 1.04,1.77 0.25,1.34 0,0.68 -1.14,1.44 -2.28,2.2 -0.55,1.65 2.03,2.06 1.03,1.83 0.46,1.3 0.01,1.33 -1.37,3.59 -1,1.05 -1.54,-0.11 -0.73,0.32 -1.96,1.67 -3.05,1.58 -4.17,0.65 -1.13,0.97 -2.07,1.59 -1.4,0.25 -0.46,-0.91 -0.21,-1.35 0.11,-0.93 0.29,-1.16 -0.67,-1.09 -2.99,-2.1 -1.74,-2.93 -0.25,-0.93 -0.09,-0.82 3.87,-0.55 1.66,-0.6 0.74,-0.96 0.12,-0.56 -0.74,-0.24 -2.65,-2.01 -4.45,-1.2 -0.21,-1.4 -1.85,-2.81 -0.18,-2.68 -0.4,-0.74 -1.26,-1.17 -0.19,-0.39 -0.37,-1.75 -0.06,-0.96 0.07,-0.87 2.29,-1.84 -0.32,-1.28 -1.74,-4.81 -0.46,-2.69 0.07,-1.03 1.08,-1.43 1.52,-0.03 4.01,0.43 1.91,0.6 1.91,1.16 2.09,1.72 3.13,1.52 1,1 1.88,3.17 0.2,1 -0.12,1 0.51,0.92 z m -123.7,9.36 -0.01,-16.42 0.57,0.38 1.12,1.28 1.57,2.65 0.54,-0.05 0.69,0.49 0.33,0.69 0.94,3.35 0.18,1.66 0.06,2.13 -0.14,1.77 -0.34,1.42 -0.84,0.9 -2.01,0.56 -2.66,-0.81 z m 62.75,7.71 -1.03,0.88 -1.2,-0.51 -0.17,-0.55 -0.02,-0.66 0.12,-0.78 1.34,-2.74 1.23,-0.94 0.73,-0.18 0.59,0.93 0.33,1.4 -1.92,3.15 z m -62.75,9.4 0,-6.93 3.11,0.45 0.31,0.19 0.03,0.78 -0.54,2.49 -0.83,1.8 -2.08,1.22 z m 74.49,9.87 -1.23,0.39 -2.23,-0.2 -2.67,-1.51 -0.72,-1.78 -0.15,-2.82 0.03,-1.57 0.21,-0.3 1.65,-0.37 3.1,-0.44 2.5,0.32 2.85,1.62 1.15,1.04 0.59,0.73 0.73,1.48 0.24,0.65 0.16,1.16 -3.55,0.25 -1.68,0.45 -0.98,0.9 z m 55.66,-4.03 2.25,1.62 2.45,-0.86 2.63,-0.09 5.85,0.69 3.87,-0.46 1,0.27 1.53,1.03 0.81,1.25 0.74,2.1 -1.89,1.28 -1.62,6.46 -0.22,0.32 -1.76,0.09 -0.86,0.51 -5.13,-0.91 -14.15,-0.41 -0.62,-0.8 -1.86,-3.78 -0.11,-1.5 0.34,-1.76 0.4,-1.17 0.46,-0.58 4.12,-2.87 1.77,-0.43 z m -81.34,26.86 -1.37,0.71 -2.73,-1.64 -1.79,-0.71 -1.48,-2.92 -1.58,-4.01 -1.24,-4.47 -0.47,-2.65 -0.9,-1.58 -0.31,-2.63 -1.64,-4.15 0.27,-0.61 1.55,-0.61 2.47,0.78 1.18,1.48 1.49,2.47 1.93,3.91 0.6,1.72 0.12,2.36 0.35,1.27 1.66,0.23 2.04,3.09 0.37,1.19 0.42,2.42 -0.03,1.15 -0.33,2.36 -0.58,0.84 z m 132,-5.1 -2.34,2.32 -1.2,-0.08 -6.86,-4.76 -1.38,-2.37 -0.26,-1.6 -0.08,-2.28 0.02,-3.14 0.3,-2.12 0.36,-0.74 0.81,-0.76 1.58,-0.47 1.5,0.27 2.26,0.85 2.25,1.41 2.99,4.29 1.07,2.03 0.23,2.63 0,1.6 -0.16,1.17 -0.31,0.73 -0.78,1.02 z m -39.99,14.25 1.68,0.34 1.43,-0.53 1.23,0.12 1.82,1.59 1.68,2.43 1.29,1.09 0.42,0.55 0.16,0.61 0.2,1.82 -0.01,0.84 -0.09,0.67 -0.57,1.65 -0.48,2.04 -0.98,1.79 -0.52,1.35 -0.45,1.7 1.01,-1.01 3.82,-5.63 2.5,0.67 3.76,-0.5 4.55,-2.32 2.16,-0.36 2.18,0.17 1.62,0.73 3.46,3.12 1.2,1.48 0.45,1.05 0.11,0.77 -0.71,1.19 -2.17,-0.72 -3.58,-0.64 -0.65,-0.4 -0.56,0.03 -0.41,0.43 0.25,1.64 0.73,0.36 4.29,0.35 14.08,5.16 0.59,1.64 -0.16,0.72 -0.5,0.8 -1.03,1.07 -8.12,1.17 -4.62,-1.03 -3.88,-1.67 -1.32,0.37 1.15,2.26 2.33,0.69 1.95,1.33 0.81,1.11 4.13,0.85 0.68,0.86 1.28,2.2 1.08,0.17 1.07,1.53 0.88,2.62 0.41,0.35 1.24,-0.47 2.09,2.26 0.65,1.21 0,0.9 -0.47,1.41 -0.94,1.91 -2.37,2.24 -0.18,0.67 2.77,-0.26 0.51,0.3 3.26,3.95 0.43,0.07 0.27,-0.41 0.31,-1.39 -0.14,-1.29 -0.4,-1.8 0.11,-1.31 0.61,-0.82 0.62,-0.4 0.63,0.01 0.68,0.48 3.3,4.79 4.23,-2.28 0.77,1.03 0.64,1.92 0.3,0.31 1.56,-3.82 0.97,-0.95 3.97,4.54 2.42,1 0.97,0.97 1.79,1.06 2.55,0.4 0.42,-1.67 -1.47,-2.15 0.86,-0.95 3.51,-1.83 1.87,0.26 3.46,-2.61 2.12,-0.35 1.3,0.04 4.28,-3.96 1.02,-0.63 0.74,-1.43 1.68,0.22 4.55,2.26 1.29,-0.21 4.84,-2.25 1.79,-0.55 1.79,0.08 4.54,1.32 3.4,1.42 1.06,0.74 -0.38,1.86 0.17,0.55 0.44,0.4 1.11,0.54 4.24,0.04 1.84,0.47 1.47,1.73 0.35,0.69 -0.06,0.71 -1.44,1.85 0.23,0.39 1.44,0.43 3.24,0.21 0.69,0.43 0.67,2.3 0.7,3.17 -0.01,1.25 -1.12,2.13 -3.07,2.82 -3.41,2.33 -0.22,0.6 1.09,1.11 1.12,0.49 0.89,-0.1 2.72,-1.06 0.62,0.02 1.25,1.08 0.58,1.07 0.53,1.42 -0.96,1.29 -3.91,1.6 -2.31,-2.1 -0.78,-0.46 -0.52,0.18 0.3,0.92 1.12,1.66 0.37,1.09 -0.39,0.53 -0.18,1.05 0.02,1.56 -0.09,1.58 -0.38,2.45 -0.13,0.1 -8.5,0.5 -1.02,0.44 -2.39,1.72 -1.81,0.86 -1.18,0.13 -1.15,-0.31 -3.1,-1.78 -2.07,0.33 -0.81,-0.17 -1.75,-1.19 -0.42,-0.6 -0.71,-1.56 -0.53,-2.15 0.04,-1.33 0.22,-1.92 -0.14,-0.96 -0.5,-0.01 -0.56,-0.4 -1.67,-1.94 -1.03,-0.57 -0.19,0.32 0.3,1.51 0.2,0.48 1.1,1.1 0.21,1.27 -0.47,3.21 -0.17,0.51 -1.07,2.34 -0.81,0.67 -2.21,0.05 -3.38,1.65 -1.62,0.24 -2.17,-0.39 -1.36,-0.75 -0.88,-0.86 -0.85,-1.23 -0.45,-0.09 -0.23,2.67 -0.42,0.35 -0.73,-0.04 -1.12,-0.83 -0.92,-1.93 -0.29,0.01 -0.13,1.12 -0.21,0.74 -0.28,0.35 -2.37,1.2 -1.32,0.01 -1.38,-1.38 -0.91,0.14 -1.16,0.74 -2.82,-1.41 -0.68,-0.06 0.58,2.28 -0.93,0.35 -2.01,-0.06 -3.31,-0.73 -2.05,1.07 -3.71,-0.64 -3.74,-0.16 -0.7,-0.52 -0.49,-1.07 -0.02,-0.95 0.18,-1.32 0.55,-1.97 0.91,-2.62 0.32,-1.39 -0.82,-0.64 -0.51,-0.86 -0.42,-0.1 -1.32,1.02 -0.86,2.96 -0.66,0.86 -0.29,-0.72 -0.22,-1.79 -0.29,-0.88 -0.36,0.05 -0.35,0.48 -0.34,0.91 -0.51,0.33 -0.69,-0.25 -0.24,0.45 0.2,1.14 0.07,1.06 -0.06,0.99 -0.59,0.96 -1.69,1.39 -0.98,0.44 -2.56,0.21 -1.53,-0.41 -3.1,-1.67 -1.72,-0.08 -2.07,-2.82 -1.64,-0.65 0.08,-1.02 0.72,-1.91 -0.02,-0.57 -2.24,2.78 -0.3,0.88 0.26,2.05 -0.3,0.15 -1.54,-0.73 -1.51,0.56 -0.37,-0.16 -1.05,-1.48 -1.84,-1.51 -0.81,-1.7 -1.26,-5.33 -0.64,-3.55 0.08,-0.73 0.94,-1.01 -0.14,-0.79 -1.17,-2.02 -1.26,-1.7 -0.38,-1.18 -0.17,-1.2 -0.17,-1.74 -0.01,-1.29 0.15,-0.84 0.72,-2.61 1.97,-4.71 0.27,-0.86 0.11,-0.85 -0.27,-2.52 -0.38,-2.53 -0.39,-1.82 -1.09,-2.52 -1.5,-2.63 -2.11,-4.76 -1.56,-3.73 -1.87,-5.29 -0.9,-0.46 -1.04,0.24 -2.25,1.83 -0.76,0.87 -0.19,0.58 -1.68,0.13 -4.75,-0.48 -1.82,-0.56 -1.36,0.15 -2.33,1.34 -2.49,-0.25 -1.56,-3.74 -3.53,-2.02 -1.05,-1.14 -0.72,-1.56 0.24,-1.02 2.01,-0.92 0.83,-1.01 0.4,-0.82 -1.99,0.71 -0.88,-0.13 -5.99,-5.17 -1.85,-0.92 -0.31,-0.46 -0.15,-0.61 0,-0.76 0.18,-1.15 1.78,1.45 0.8,0.11 1.25,-0.43 0.44,-0.91 -0.28,-0.53 -2.04,-1.75 -0.99,-1.33 -0.38,-0.97 0.39,-1.38 0.1,-0.93 0.66,-0.53 1.21,-0.12 1.55,-0.66 2.83,-1.81 1.9,-0.65 1.89,0.1 4.59,1.86 4.57,2.35 2.89,1.85 z m 40.95,15.79 -0.42,0.52 -1.35,-0.27 -0.45,0.51 -0.72,-0.29 -0.99,-1.09 -1.16,-2.15 -1.32,-3.23 -1.03,-2.79 -0.06,-0.77 0.34,-1.31 1.03,-0.88 2.45,-1.05 1.68,0.03 1.56,2.13 0.44,0.73 0.27,0.87 0.01,0.83 -0.13,0.73 -0.71,1.62 -0.31,1.13 0,1.1 0.15,1.59 0.29,1.05 0.42,0.5 0.01,0.49 z m -181.77,60.08 0.01,-1.25 0,-19 0,-3.88 8.21,1.17 0.73,-0.3 0.52,-0.96 0.31,-1.62 0.12,-1.34 -0.17,-1.83 -0.24,-0.88 -7.63,-5.98 -0.67,-2.43 3.73,-3.41 0.27,-0.79 0.07,-1.09 -0.12,-1.39 -0.51,-1.33 -2,-2.54 -1.77,-0.38 -0.85,-0.81 -0.01,-8.95 0.2,-0.2 1.05,-1.44 3.23,-6.55 1.49,-2.67 1.07,-1.26 1.09,-0.78 2.39,-0.37 2.49,2.47 0.55,0.15 0.23,0.65 -0.1,1.15 -0.31,1.09 -0.89,1.96 -0.21,0.82 0.07,0.85 0.61,1.94 0.19,1.28 0.14,2.14 0.1,0.32 1.5,1.8 1.36,2.34 0.63,3.65 -0.49,1.26 -1.15,1.73 -0.68,1.43 -0.22,1.14 0.17,0.69 0.85,0.35 1.13,0.11 1.32,-0.41 1.49,0.28 0.68,0.83 0.48,1.48 0.02,0.79 -0.09,0.68 -0.21,0.57 -1.93,3.7 -0.45,1.27 0.62,0.31 0.3,-0.21 1.93,-2.76 1.45,-0.87 1.1,-0.2 1.81,0.55 0.72,0.48 0.5,0.56 0.27,0.65 0.71,2.64 0.51,3.4 0.08,-0.35 0.01,-1.9 0.1,-1.49 1.78,-1.01 0.05,-0.33 -0.64,-0.83 -0.54,-1.13 -0.38,-2.12 0.15,-0.79 0.37,-0.85 1.14,-1.82 1.33,-1.09 1.18,-0.26 4.41,1.9 1.73,1.55 0.71,0.8 0.25,0.57 0.37,1.81 0.74,4.94 0,1.58 -0.34,2.53 -1.42,4.71 -0.22,3.17 -1.43,7.8 -0.98,2.1 -1.08,1.47 -4.44,2.57 -3.34,2.61 -0.85,0.41 -0.88,0.04 -2.77,-0.86 -3.21,-1.66 -1.83,0.47 -1.82,1.2 -1.15,0.32 -1.08,-0.16 -1.07,-0.43 -1.41,-1.12 0.73,-0.51 0.33,-0.58 -0.29,-0.59 -1.48,-0.85 -1.54,1.89 -4.49,4.4 -4.5,1.09 z m 78.68,-62.85 -2.32,0.17 -1.07,-0.46 -0.07,-0.68 0.93,-0.9 3.09,-1.46 1.82,-2.68 0.68,-0.33 2.38,-0.38 1.38,0.08 1.78,0.63 -4.28,3.31 -4.32,2.7 z m 31.6,4.34 0.1,1.71 -0.11,1.31 -0.32,0.92 -0.01,1.06 0.29,1.19 1.2,3 0.38,1.6 0.06,1.6 -0.06,1.09 -0.74,2.12 -0.33,2.73 -0.02,1.44 0.44,2.24 0.01,1.04 -0.83,1.77 -1.76,1.54 0.25,0.81 3.79,1.94 0.29,0.44 -0.02,4.34 0.66,4.73 -0.25,0.09 -0.91,-1.48 -1.69,-1.76 -2.02,3.27 0.23,5.52 1.33,2.44 0.4,1.39 -0.13,0.83 -1.12,0.37 -0.39,-0.18 -1.15,-1.1 -0.67,-1.66 -0.21,0.06 -0.21,0.8 0.13,0.81 0.78,1.48 0.33,1.76 -0.35,0.5 -1.16,0.45 -1.56,0.02 -2.45,0.79 -1.21,0.12 -1.18,-0.43 -1.57,-0.1 -1.31,0.19 -0.8,-0.35 -0.73,-0.82 -0.85,0.2 -1.85,2.08 -2.87,-0.66 -2.58,-0.17 -0.52,-0.69 -0.58,-1.35 -1.14,-4.25 0.21,-1.08 2.76,-0.58 0.06,-0.37 -1.96,-1.53 -2.25,-1.13 -1.04,-0.89 0.24,-1.7 -0.07,-0.43 3.88,-1.95 2.82,-3.85 1.75,-1.57 0.13,-0.76 1.48,-0.79 3.42,-0.48 0.13,-1.08 -6.46,0.62 -8.84,2.2 -2.73,1.08 -2.28,-0.63 -9.68,3.39 -0.41,0 -1.01,-1.07 -0.87,-2.02 0.62,-1.41 2.84,-2.68 1.42,-2.36 -0.17,-1.28 1.13,-2.28 1.81,-0.32 3.08,1.88 1.6,1.85 1.43,0.87 1.27,-0.17 1.31,-1.3 -0.33,-0.15 -2.23,0.69 -0.26,-0.2 -1.14,-2.08 -0.5,-1.32 -0.32,-1.33 -0.02,-0.94 0.69,-1.79 -2.56,-0.59 -0.96,-1.24 -0.44,-1.55 0.1,-0.68 0.81,-1.82 2.17,-2.52 -0.25,-0.7 -3.16,0.06 -0.7,-0.33 -1.35,-1.58 0.3,-1.75 1.26,-2.58 0.95,-1.53 0.64,-0.47 0.99,0.01 2.35,1 0.68,0.55 1.8,2.49 0.46,1.41 -0.06,1.36 0.34,1 1.4,1.45 6,7.44 1.12,1.75 0.77,0.77 1.39,0.57 0.81,-0.12 0.66,-0.52 0.11,-0.67 -2.59,-2.58 -0.65,-1.38 -0.55,-1.89 0.24,-0.61 0.75,-0.21 1.9,0.25 2.23,-0.51 -2.48,-0.8 -1.62,-1.06 -1.66,-0.05 -2.07,-1.7 0,-0.53 0.51,-0.55 2.82,-0.76 0.53,-0.33 0.05,-0.48 -0.93,-1.15 -0.83,-0.63 -4.27,-1.4 -1.52,-1.57 -0.48,-0.75 -0.15,-0.72 0.55,-1.86 2.29,-2.34 1.67,-1.12 2.86,-0.82 2.28,0.1 1.3,0.31 3.04,3.97 1.43,2.59 2.5,-0.46 -0.72,-2.73 -0.47,-3.01 0.74,-1.11 2.06,-1.97 1.64,1.03 2.14,2.66 0.47,0.9 2.41,1.63 1.43,0.54 0.74,0.87 0.26,1.17 z m -56.67,-4.48 0.44,0.21 1.37,-0.77 0.88,-0.14 0.98,1.45 0.26,0.95 3.54,2.36 1.24,1.06 0.16,0.7 -0.44,1.01 -1.04,1.31 -1,0.89 -1.44,0.7 -7.16,0.11 -0.78,-0.32 -0.45,-1.16 -0.88,-4.34 -0.63,-2.35 -0.24,-1.64 0.16,-0.92 0.76,-0.92 2.65,-1.39 1.17,0 0.73,0.35 0.3,0.71 -0.09,0.95 -0.49,1.19 z m 16.1,21.5 1.88,2.27 0.09,0.52 -0.35,0.43 -2.43,1.2 -0.94,0.96 -0.79,2.23 -0.61,1.03 -3.26,0.61 -3.33,-0.03 0.63,-2.15 1.82,-3.52 -1.43,-1.46 -5.09,2.44 -1.93,-1.5 1.65,-3.85 -1.65,-0.35 -2.31,-0.02 -1.47,-2.29 0.5,-2.76 3.04,-1.53 3.95,-1.33 4.24,-2.01 3.32,0.17 1.29,0.96 0.43,3.21 0.41,3.79 0.58,0.32 1.76,2.66 z m 207.65,3.29 0.1,2.16 -0.65,-0.1 -2.07,1.41 -1.69,0.2 -0.84,-0.63 -0.54,-1.48 1.32,-2.77 1.52,-1.94 1.82,-3.03 1.51,-2 0.75,0.42 0.72,1.06 -0.91,3.01 -0.99,1.49 -0.05,2.2 z m -138.62,6.46 -0.88,0.02 -1.14,-0.76 -0.32,-0.79 -0.25,-1.09 -0.17,-1.38 -0.24,-1.11 -0.3,-0.83 -0.06,-0.7 0.18,-0.56 0.37,-0.31 0.85,-0.1 1.85,-1.45 0.35,0.16 0.25,0.77 0.25,2.01 0.27,1.19 0.73,2.16 0.32,1.39 -0.07,0.43 -0.23,0.38 -1.76,0.57 z m -13.91,8.64 -0.7,1.18 -0.72,0.09 -0.97,-1.11 -1.05,0.42 -1.44,2.25 -0.51,1.32 -0.39,0.48 -1.2,0.41 -0.52,-0.37 -0.49,-1.17 -0.46,-1.97 0.34,-1.49 1.14,-1.01 2.99,-1.64 0.85,-0.82 0.09,-0.88 0.18,-0.58 0.26,-0.28 1.99,1.49 0.95,1 0.72,1.13 -0.08,0.45 -0.98,1.1 z m 22.73,16.99 0.58,2.63 0.11,1.06 0.03,2.23 -0.25,2.89 -0.17,0.53 -0.24,0.24 -0.11,0.74 0.01,1.24 -0.23,0.75 -0.48,0.27 -3.21,0.57 -1.98,-0.11 -2.95,0.36 -1.46,-0.18 -0.96,-0.61 -1.39,-1.35 -2.93,-3.21 -1.48,-0.11 -3.71,-1.13 -2.05,-3.51 -0.78,-0.63 -0.79,1.05 -0.22,-0.24 -0.22,-0.71 -0.22,-1.18 -0.39,-0.61 -1.56,0.31 -0.28,-0.4 -0.08,-1.04 0.02,-0.9 0.28,-1.42 1.64,-3.94 0.81,-0.28 1,-0.73 0.56,-2.14 -0.06,-2.03 1.53,-3.04 0.91,-0.9 1.63,-2.13 5.57,-3.35 1.54,-0.29 2.06,0.25 1.98,1.07 1.53,1.77 3.12,4.35 1.42,2.61 0.75,2.67 0.68,1.52 0.84,3.27 -0.31,1.27 -0.18,1.71 0.09,0.81 z m -94.82,-0.29 -1.69,0.19 -2.92,-1.05 -1.74,-2.03 -0.53,-0.98 0.05,-0.44 0.3,-0.44 0.42,-1.33 0.99,-3.86 0.37,-1.03 1.57,-2.25 1.15,-0.6 2.43,0.19 1.41,1.16 0.59,0.75 0.42,0.9 0.41,2 0.1,1.29 0.71,1.47 0.21,0.85 0.01,0.83 -0.2,0.83 -0.41,0.84 -0.93,1.23 -2.72,1.48 z m 79.01,18.11 -0.41,0.17 -0.8,-0.19 -3.01,-1.5 -0.51,-0.62 -0.15,-0.45 0.68,-0.55 0.26,-0.58 0.76,-0.71 1.35,0 1.41,1.73 0.67,1.55 0.04,0.68 -0.29,0.47 z m -18.37,-0.7 -2.69,2.03 -0.59,-0.79 -0.25,-0.72 2.09,-3.09 0.89,-0.81 0.88,0.96 0.24,0.73 -0.11,0.56 -0.46,1.13 z m 37.51,12.13 3.52,1.55 1.71,1.01 0.84,0.68 1.6,2.27 0.82,0.65 3.12,-1.31 2.19,-0.49 4.86,0.6 4.13,1.87 1.52,1.4 0.93,1.28 -0.24,1.41 -0.76,2.28 -0.89,2.16 -1.78,3.36 -1.52,1.67 -0.38,0.8 -0.24,1.11 -0.59,1.62 -1.63,3.49 -0.43,0.59 -2.29,1.52 0.79,0.68 0.36,0.6 -0.3,1.53 -1.45,3.68 -1.5,3.38 -1.05,2.01 -1.91,2.89 -1.05,0.82 -1.41,0.25 -8.5,-2.52 -2.13,0.04 -5.67,1.32 0.53,0.64 2.08,0.97 1.34,1.06 1.78,3.29 0.23,0.82 0.11,0.95 -0.07,1.86 -0.12,0.47 -2.83,4.98 -0.91,3.59 -0.58,2.95 -0.95,0.81 -3.17,-1.24 -1.02,0.04 -3.56,0.86 -1.66,-0.43 0.23,-4.45 -0.23,-4.84 -0.52,-4.66 -2.66,-8.4 -0.29,-1.5 -0.2,-1.62 -0.1,-1.74 0.01,-1.76 0.18,-3.57 0.02,-1.82 -0.13,-4.77 -0.36,-7.22 -0.03,-2.57 0.02,-1.03 0.11,-0.79 0.57,-1.04 1.09,-0.75 0.55,-0.11 3.5,2.22 1.61,0.74 1.07,-0.03 0.06,-0.25 -0.95,-0.47 -0.89,-0.96 -1.46,-2.85 -0.67,-2.45 -0.13,-0.81 -0.03,-0.85 0.07,-0.89 0.21,-0.8 0.73,-1.26 0.59,-0.57 2.19,-1.45 2.21,-0.89 4.88,-0.6 1.38,0.43 2.11,-1.6 1.25,-0.38 2.14,0.54 z m -45.71,9.52 -2.58,0.68 -1.19,-0.29 -0.63,0.89 -0.5,0.38 -1.41,0.16 -2.91,-1.61 -0.78,-0.56 -0.29,-0.52 0.12,-0.5 0.52,-0.48 2.23,-0.73 0.83,-0.54 0.34,-0.75 0.56,-0.61 0.77,-0.46 2.09,-0.44 4.7,-2.29 2.34,-0.33 0.92,0.19 0.28,0.61 0.07,0.61 -0.13,0.61 -0.73,1.55 -0.95,1.2 -2.56,2.58 -1.11,0.65 z m -15.52,-2.5 7.57,6.9 1.06,-0.57 2.29,-0.36 2.38,-1.01 3.29,-0.84 2.01,-1.53 0.86,-0.44 1.45,-0.27 0.79,0.01 2.28,0.83 0.92,0.58 0.49,0.61 0.53,1.11 0.9,2.69 0.13,1 -0.05,0.27 -0.83,1.65 -0.55,0.71 -1.15,0.68 -0.99,0.21 -0.85,1.19 -0.96,-0.32 -0.26,1.08 0.1,0.66 0.26,0.32 0.48,-0.08 0.55,-0.46 1.07,0.23 0.57,0.71 0.51,1.17 -0.38,1.08 -1.9,1.49 -2.8,1.68 -3.41,5.25 -1.79,2.19 -0.37,0.68 -0.18,0.68 0.05,1.29 0.08,0.52 0.49,0.21 1.67,-1.8 1.07,-0.84 1.09,-0.46 1.92,-0.03 0.79,0.28 1.44,1.08 1.32,1.66 0.3,0.6 -0.13,0.61 -0.55,0.61 -0.06,0.4 1.26,0.83 1.39,2.26 0.09,1.37 -0.61,1.35 -0.17,0.9 0.28,0.46 0.68,-0.28 1.64,-1.51 1.77,-0.79 0.71,0.09 0.45,0.35 0.47,2.07 0.39,2.32 0.05,1.94 -0.29,1.57 -0.42,1.22 -1.06,1.51 -0.96,0.57 -0.5,0.01 0.05,0.25 1.14,1.25 0.48,1 0.2,0.96 -0.07,0.93 -0.16,0.79 -1.33,2.91 0.07,0.41 0.37,0.19 0.83,1.67 0.1,3.86 -2.99,1.21 -0.7,0.89 -0.82,1.43 -0.95,1.06 -2.14,1.12 -1.08,0.13 -5.37,-0.93 -0.54,-0.54 -0.38,-0.97 -0.21,-1.4 -0.06,-1.11 0.1,-0.81 -0.03,-0.47 -0.15,-0.14 -0.6,0.81 -0.62,1.46 0.34,1.62 1.7,4.48 0.32,1.92 0.05,0.81 -0.08,0.61 -1.92,2.58 -1.11,0.87 -1.14,0.43 -1.08,-0.32 -1.03,-1.08 -0.78,-0.48 -1.62,0.07 -0.51,-0.56 -0.47,-1.04 -1.14,-3.75 -1.59,-2.68 -1.37,-3.02 -3.49,-4.43 -1.81,-2.67 -2.41,-4.32 -1.01,-0.98 -0.84,-0.4 -1.65,-0.31 -0.38,-0.54 -0.6,-1.48 -1.04,-1.12 -0.38,-0.14 -0.61,0.26 -1.61,1.03 -2.02,-1.09 -0.45,-0.77 -0.27,-1.3 -0.25,-0.72 -0.69,-0.64 -0.58,-1.64 -3.84,-3.24 -2.28,-3.75 -0.46,-1.36 -0.04,-0.56 0.23,-1.82 0.53,-2.07 0.69,-2.06 0.42,-0.85 1.5,-1.79 1.18,-0.41 1.65,0.23 0.87,0.4 0.78,1.2 0.33,1.38 0.39,0.93 1.23,1.01 0.67,0.81 0.98,1.88 0.75,2.26 0.69,0.74 1.66,0.25 1.72,-0.38 3.69,-1.42 0.15,-0.18 0.23,-0.85 0.42,-5.18 0.25,-0.02 1.25,2.41 0.35,0.26 0.54,-0.5 0.32,-1.17 -0.04,-0.56 -0.79,-2.83 -0.46,-1.23 -0.42,-0.77 -0.46,-0.25 -1,0.25 -0.76,-0.55 -0.17,-0.79 0.12,-1.06 0.42,-1.12 0.45,-0.64 0.88,-0.33 1.03,0.33 1.42,1.35 0.9,0.3 1.27,-0.39 -1.62,-0.8 -2.26,-3.14 -0.97,-0.59 -1.18,1.35 -0.8,0.51 -1.51,0.66 -1.2,0.1 -5.03,-4.87 -0.28,-0.47 -0.37,-1.28 0.04,-0.59 0.5,-0.91 1.25,-1.21 1.87,-0.76 1.25,-0.12 1.09,0.9 1.59,2.43 1.39,1.42 0.11,-0.51 -0.25,-1.39 -0.63,-2.08 -0.46,-0.57 -1.12,-0.62 -1.04,-1.43 -0.49,-1.06 -0.26,-1.14 -0.03,-1.22 0.2,-0.84 0.43,-0.45 3.87,-1.23 2.7,1.36 1.71,0.2 0.71,-1.67 -0.25,-0.33 -0.9,0.43 -1.02,-0.01 -0.64,-0.92 -0.02,-0.54 0.79,-1.29 1.3,-0.49 z m 120.23,87.54 0.36,0.61 2.05,-0.77 1.74,-0.89 2.71,-2.12 1.62,-0.74 4.92,0.01 0.84,0.4 -0.37,1.27 -0.21,0.36 0.16,0.55 0.53,0.74 1.06,0.83 0.42,-0.74 0.31,-1.78 0.73,-7.39 0.31,-2.25 0.15,-2.14 -0.02,-2.02 -0.35,-1.29 -1.26,-0.77 -1.72,0.13 -0.88,-0.2 -1.07,-0.4 -0.79,-0.63 -0.52,-0.85 -1.03,-2.56 -0.76,-1.43 -1.95,-2.6 -0.88,-0.87 0.44,-1.03 1.77,-1.19 1.07,-1.13 1.25,-3.31 0.75,-0.54 2.72,0.44 3.68,2.6 2.3,2.24 0.61,0.24 0.01,-0.41 -0.58,-1.05 -2.65,-2.78 -1.21,-2.03 -0.58,-1.45 0.28,-0.63 1.49,-0.65 0.19,-0.74 -2.03,-0.88 -1.03,0.02 -0.83,0.63 -0.89,0.04 -1.66,-1.14 -0.45,-0.67 -0.95,-1.98 -0.5,-1.73 -0.55,-1.08 -0.2,-0.86 -0.11,-2.68 0.05,-1.58 0.23,-1.35 0.4,-1.13 1.07,-2.09 0.6,-0.61 1.13,-0.28 2.44,1.04 6.57,3.74 -0.16,-1.2 -7.35,-5.07 -2.6,-1.31 -0.64,-1.85 3.91,-7.14 3.61,-1.69 1.79,-2.1 2.93,-0.09 2.75,1.33 0.05,-0.36 -1.24,-2.52 0.1,-0.63 1.56,-1.5 2.86,-1.77 3.5,-1.41 0.69,-0.74 0.9,-0.52 1.65,-0.45 4.09,-0.22 2.3,0.21 3.06,1.08 1.79,1.96 0.56,1.17 0.95,3.74 0.78,5.19 1.13,2.14 1.82,1.18 1.26,1.28 0.7,1.38 0.18,1.73 -0.33,2.08 0.25,2.12 0.82,2.17 0.63,1.22 1.38,1.4 0.02,0.74 -0.43,0.85 -0.91,1.16 -2.25,3.61 -2.9,3.94 -2.07,3.39 -0.1,1 4.3,-5.3 1.34,0.19 0.06,0.74 -0.88,2.59 -1.07,2.3 -1.07,1.47 0.2,0.55 2.04,2.57 -0.38,0.42 -0.99,-0.21 -0.4,0.23 -0.29,0.47 -0.18,0.7 -0.01,0.98 0.16,1.27 -0.02,0.94 -0.19,0.62 0.2,0.26 0.6,-0.11 0.5,-0.51 0.87,-1.7 2.86,-4.67 1.83,-1.76 0.59,-0.16 1.68,1.14 0.39,-0.06 -1.85,-3.63 -0.16,-0.92 0.38,-1.36 0.23,-0.47 1.03,-1.01 0.86,-0.54 0.48,0.22 0.76,1.86 0.35,1.29 0.63,0.52 1.4,-0.67 0.93,-1.58 1.16,1.04 1.74,2.47 -0.16,2.46 0,2.45 0.09,1.79 2.08,3.26 1.45,1.42 0.26,0.01 -0.03,-0.49 -0.3,-1.08 -0.79,-1.08 -0.71,-1.68 -0.64,-2.05 0.38,-4.82 1.08,-2.53 1.05,0.65 1.38,1.46 1.09,0.14 1.71,-0.15 3.5,2.95 1.88,0.06 -0.17,-1.2 -1.42,-0.58 -2.08,-1.63 -3.24,-1.95 -1.49,-2.23 -0.28,-1.05 0.04,-1.13 0.18,-1 0.33,-0.87 0.65,-0.86 3.13,-2.62 2.22,-1.12 1.67,-0.36 2.79,0.03 3.24,0.46 1.75,0.77 2.01,1.85 2.55,1.83 0.91,0.33 1.06,-0.04 1.21,-0.41 1.16,0.15 3.68,2.71 0.97,1.38 0.59,1.67 0.44,1.62 0.28,1.57 -0.11,1.27 -3.06,5.45 -1.33,0.92 -0.88,2.05 -1.31,3.86 -1.11,2.06 -0.1,0.4 0.23,0.1 0.67,-0.92 1.15,-2.66 0.84,-2.3 1.54,-1.91 2.52,-2.28 2.19,-1.09 1.87,0.1 1.57,0.33 1.28,0.56 0.76,0.46 0.24,0.38 0.51,1.71 -0.03,1.16 -0.32,1.3 -0.6,1.47 -2.74,1.62 -1.5,1.27 -0.93,0.47 -2.8,0.47 0.12,0.5 2.08,0.69 2.32,-0.23 -0.06,0.81 -1.09,2.16 -0.35,1.87 0.3,1.53 -0.06,1.24 -0.81,2.59 -0.93,2.33 0.35,0.35 2.13,-3.35 0.57,-3.69 0.86,-3.26 1,-1.8 0.75,-0.69 2.38,-0.28 1.32,-1.92 1.13,-0.61 0.47,-0.01 0.96,0.72 -0.06,0.76 -1.39,3.43 -2.95,5.51 1.2,-0.63 0.81,-1.31 1.09,-1.31 1.24,-1.94 0.82,1.76 1.26,1.31 0.75,2.98 1.21,1.43 0.73,1.11 -0.1,-1.87 -1.06,-3.78 0.29,-1.52 0.82,-0.76 2.55,-3.21 1.78,1.07 1.1,0.95 0.55,-0.25 1.39,0.13 2.22,0.52 2.16,0.89 2.1,1.27 1.62,1.48 1.14,1.7 0.69,1.17 0.24,0.65 0.38,1.68 -0.29,1.11 -1.59,2.56 -0.88,1.16 -0.88,0.52 -2.36,-0.51 -0.73,0.29 -0.77,0.8 -2.45,3.48 -1.36,1.5 -1.33,0.95 -0.31,0.5 2.87,-0.05 0.79,-1.03 0.66,-1.93 1.26,-2 2.39,-0.92 3.33,1.97 1.65,-0.08 1.26,-1.98 1.41,-1.35 0.56,-0.27 0.3,0.15 1.07,1.41 0.32,1.26 -0.02,2.86 -0.14,0.86 -0.96,2.15 -2.33,3.21 -1.52,1.2 -1.69,0.64 -1.84,1.08 -0.65,0.87 -0.64,1.23 -0.63,0.82 -0.81,0.68 1.06,1 0.4,-0.03 0.39,-0.6 1.06,-2.36 0.79,-1.03 0.45,-0.22 0.46,0.1 0.45,0.46 0.44,0.83 -0.03,2.01 -1.34,7.9 0.22,-0.02 0.83,-2.13 2.4,-8.26 0.59,-1.67 1.16,-1.69 2.6,-2.56 2.01,-1.35 2.26,-1.14 1.21,-0.42 1.38,0.29 0.9,1.33 1.21,0.24 1.48,-0.33 0.95,0.16 1.08,0.52 0.92,0.98 1.57,1.11 3.54,2.08 0.44,0.44 0.41,0.78 0.38,1.13 -0.05,1.12 -0.48,1.1 -0.59,0.67 -0.71,0.24 -0.73,0.6 -1.35,1.57 -0.44,0.26 -2.12,0.67 -1.97,0.33 -1.23,0.63 -2.36,1.69 -3.25,3.12 0.03,0.74 1.3,0.36 1.05,-0.47 1.45,-2.15 1.36,-0.83 2.12,-0.66 2.94,-0.58 1.26,0.09 0.23,0.12 0.16,0.51 0.1,0.9 -0.48,1.18 -0.56,0.56 -1.52,2.65 1,0.68 1.37,0.3 0.78,-0.71 0.71,-1.62 0.79,-0.9 0.88,-0.18 0.77,-0.42 0.67,-0.65 0.18,-0.43 -0.97,-0.85 -0.08,-0.52 0.4,-1.27 0.71,-1.41 0.74,-0.88 0.55,-0.07 1.83,0.94 1.25,1.64 3.16,4.89 0.41,0.94 1.1,3.59 0.21,1.59 -0.18,1.11 -0.26,0.67 -0.34,0.24 -0.69,0.01 -4.21,-1.46 -1.92,0.19 -0.84,0.41 -0.68,0.61 -0.53,0.77 -0.37,0.93 -0.74,0.52 -2.67,0.02 -1.5,0.52 -2.58,1.26 -0.92,0.69 -0.21,0.91 1.58,-0.16 2.6,-1.18 2.44,-0.33 4.08,2.6 1.34,0.4 0.75,-0.37 0.9,-0.12 3.26,0.17 1.11,0.32 1.65,0.99 2.53,2.15 0.49,0.63 0.28,0.66 0.08,0.69 -0.03,1.7 -0.25,0.58 -0.86,0.39 -3.63,-0.45 -1.11,-0.35 -1.36,0.45 -1.11,-0.16 -1.41,-0.68 -1.55,-1.21 -2.33,1.15 -1.87,-0.75 -1.91,0.66 -3.78,2.72 0.42,0.47 5.18,-2.33 1,0.14 1.64,0.85 2.59,1.67 0.72,0.68 0.01,2.62 -0.39,1.75 -0.79,1.97 -1.19,-0.26 -2.77,-1.22 -1.13,-0.17 -0.83,0.2 -1.11,0.78 -0.53,0.03 -4.42,-1.55 -0.99,-0.08 -0.12,0.16 0.21,0.31 4.01,2.4 2.96,0.26 1.86,0.42 1.1,0.73 0.52,0.54 0.04,1.6 0.99,1.6 0.89,0.65 0.57,0.03 0.98,-0.59 0.99,-0.09 0.8,0.41 1,0.88 1.21,0.25 1.06,0.54 0.82,0.11 2.3,-0.25 1,0.34 0.26,0.29 -0.43,0.51 -2.11,1.23 -0.32,1.17 1.19,1.51 0.62,1.16 -0.03,0.86 -0.63,1.96 -0.16,0.79 0.21,0.06 1.53,-1.58 0.24,0.2 0.16,2.19 0.2,-0.12 0.51,-1.81 -0.23,-2.42 0.9,-0.96 2.85,-0.73 -0.48,3.8 -0.08,1.97 -1.25,3.26 -1.04,1.05 0.03,0.22 0.74,0.41 0.46,0.05 0.44,-0.51 1.06,-2.51 2.15,-2.63 0.39,-0.06 -0.01,0.95 -0.28,1.76 0.99,0.83 0.95,-0.82 0.51,-0.71 1.19,0.1 0.54,0.34 0.16,0.78 -0.54,3.24 0.1,0.8 1.25,2.14 0.13,-0.13 -0.24,-1.03 -0.26,-2.56 0.24,-1.12 1.03,-1.43 2.12,-2.07 0.78,-0.41 0.49,0.28 0.78,1 -0.24,0.59 -0.84,0.62 -0.62,1.12 -0.41,1.62 0.45,0.86 1.71,0.08 1.72,-1.33 0.99,0.65 1.18,1.72 2.15,2.76 1.23,-0.75 1.52,2.09 -2.04,1.65 0.62,3.46 -2.65,-0.14 -1.49,0.27 -1,-0.31 -1.07,0.11 0.99,0.81 1.91,0.34 0.17,1.04 1.5,-0.03 1.13,-0.2 2.04,0.04 0.11,-1.2 1.32,-0.68 0.76,-0.75 0.63,0.45 1.84,0.51 2.47,2.35 -1.09,1.4 -0.3,1.32 -0.37,1.12 -0.21,1.01 -0.43,0.69 -3.54,3.93 0.59,0.04 1.5,-0.95 2.92,-1.41 1.63,-0.57 1.16,0.38 0.58,0.02 0.52,-0.51 0.96,0.58 2,0.53 2.3,-3.24 1.39,0.63 1.29,2 2.77,3.49 1.45,2.02 0.48,0.92 -0.07,0.9 -1.31,0.95 -0.67,0.19 -1.76,-1.8 -1.62,-0.91 -0.98,0.1 -0.98,0.69 0.3,0.39 3.91,2.76 0.68,2.03 0.05,0.89 -2.62,1.34 -0.84,0.08 -1.81,-0.64 -1.06,-1.2 -0.88,-0.43 -1.21,-0.14 -0.39,0.23 1.32,2.03 -0.13,0.61 -0.68,0.39 -0.34,0.98 2.61,1.75 1.96,1.78 0.29,0.71 -1.32,0.53 -0.95,0.12 -2,-0.26 -1.1,-0.37 -0.3,0.4 1.14,0.93 0.44,0.63 0.34,0.87 0.2,0.82 0.06,0.77 -0.93,0.63 -1.12,1.76 -0.44,1.82 -1.01,0.17 -0.41,-0.34 -1.36,0.55 -1.79,-0.76 -0.64,-0.83 -1.96,-3.44 -0.05,0.39 0.49,1.74 -0.1,1.03 -2.07,0.75 0.01,0.29 1.27,0.54 1.54,0.42 -0.24,1.59 0.01,6.74 -0.34,2.37 -0.75,2.07 -1.08,1.97 -1.17,-1.29 -0.47,-1.32 -0.39,-0.68 -0.56,-0.55 -0.72,-0.26 -0.76,-0.01 -0.81,1.19 -0.88,-1.02 -0.85,-1.24 0.32,-3.25 0.36,-1.64 -0.14,0.01 -0.49,0.77 -1.16,2.39 -0.76,2.9 -0.99,-1.12 -0.89,-1.39 -0.74,-1.4 -1.19,-1.62 -1.16,-1.91 -0.6,-2.25 -0.28,-0.47 -0.67,-1.89 -0.26,-0.54 -0.23,-0.18 -0.58,-1.18 0.21,-1.27 0.91,-1.5 0.83,-1.08 1.37,-1.07 1.6,-0.6 0.73,-1.38 0.89,-2.53 0.98,-1.77 1.06,-1 -0.53,-0.19 -1.35,0.86 -0.95,1.25 -1.13,2.07 -1.05,1.32 -2.7,1.53 -0.99,0.3 -1.15,0.16 -2.53,-0.21 -0.59,-0.51 0.3,-1.46 1.8,-2.62 -0.29,-0.18 -0.63,0.93 -0.87,0.64 -0.75,0.33 -1.11,-0.12 -1.3,-1.63 -0.62,-0.5 -1.27,-0.57 -0.52,-0.56 -2.11,-4.04 -0.42,-1.08 -0.25,-1.06 -0.68,-0.89 -1.11,-0.73 -0.25,0.12 0.4,0.91 0.01,0.78 -0.97,0.49 -1.01,-0.17 -1.05,-0.83 -0.09,1.11 1.13,1.97 0.02,2.48 -0.32,0.26 -0.77,0.14 -0.52,-0.31 -1.71,-1.85 -1.62,-1.29 -1.14,-0.72 -0.13,0.51 0.74,2.24 0.86,2.2 1.41,1.81 2.25,2.15 1.02,1.23 -0.8,1.74 -0.7,0.57 -0.43,0.18 -1.36,0 -2.49,-0.96 -1.17,-1.07 -1.69,-2.56 -2.8,-2.65 -0.61,0.01 -1.98,1.08 0.31,0.17 1.28,0.08 0.94,0.34 2.24,2.09 0.17,0.88 -0.56,0.98 0.03,1.23 0.63,1.48 0.64,0.95 1.32,0.67 0.66,0.09 0.25,0.43 -0.79,3.28 -0.07,0.89 0.23,0.37 0.28,0.03 1.69,-1.34 0.71,-0.33 0.61,-0.07 0.71,0.38 0.81,0.82 0.48,0.84 0.14,0.87 0.24,0.57 1.66,0.92 -0.15,0.43 -1.71,1.37 -0.09,0.21 0.34,0.1 1.08,0.82 1,1.28 0.61,1.52 0.12,0.74 -0.01,0.71 0.14,0.42 0.53,0.08 0.21,-0.27 0.24,0.05 0.27,0.37 0.28,1.16 0.6,3.38 0.32,0.95 0.18,0.03 0.09,-3.38 0.28,-0.56 1.06,0.6 1.55,1.32 1.09,1.17 0.13,0.55 -0.82,1.06 0.17,0.47 0.61,0.69 0.56,-0.26 0.4,-1.18 0.69,-1.17 0.82,-0.83 1.53,0.68 1.27,1.74 0.19,0.6 0.83,0.75 0.73,-0.42 1.41,1.99 -0.67,0.9 -1.47,1.3 -0.15,0.44 0.35,-0.1 2.79,0 0.75,0.52 0.18,1 -1.24,2.76 -1.14,-0.25 -1.5,-0.07 -0.77,0.15 0.12,0.36 2.08,1.27 0.59,1.04 0.8,1.06 0.39,0.88 -0.01,0.4 -0.33,0.6 0.16,0.2 1.43,0.39 0.88,-0.35 1.11,-0.13 0.98,0.1 0.08,0.38 -0.15,0.99 -1,0.92 0.27,0.21 1.18,-0.26 0.54,0.43 0.7,2.17 0.78,1.7 -0.64,0.39 -0.71,0.15 0.1,2.16 0.46,2.2 0,2.1 -0.15,1.87 -0.65,0.41 -0.7,-0.04 -0.28,-0.47 -1.71,-5.6 -0.42,-1.02 -0.51,-0.89 -1.81,-2.44 0.07,0.39 0.45,1.13 0.4,1.68 0.52,3.33 0.24,2.13 -0.11,0.81 -0.37,0.2 -0.1,0.39 0.18,0.57 1.38,2.16 0.67,1.3 0.47,1.35 0.44,0.91 0.41,0.47 -0.1,0.38 -0.61,0.3 -1.05,0.14 -0.49,-0.18 -1.88,-1.24 -0.27,0.39 1.04,4.53 -0.03,1.08 -0.52,0.38 -0.64,-0.45 -0.77,-1.28 -1.17,-1.43 -1.58,-1.58 -1.51,-1.24 -0.35,0.03 -0.23,0.37 -0.25,0.06 -0.27,-0.25 -0.5,-0.93 -0.53,-0.63 -2.2,-2.1 -0.23,-0.02 0.21,0.63 0.22,1.38 -0.25,0.3 -0.57,-0.11 -1.09,-0.6 -0.74,-1.38 -0.93,-2.41 -0.49,-0.91 -0.04,0.59 0.26,2.3 -0.05,0.77 -0.58,0.14 -0.23,-0.21 -0.23,-0.61 -0.22,-1.01 -0.52,-0.77 -0.82,-0.53 -0.46,-0.55 -0.23,-0.99 -0.16,-0.23 -1.45,0.23 -0.73,-0.71 -2.1,-2.81 -1.92,-3.07 -1.21,-1.63 -0.44,-0.39 0.64,1.99 0.71,2.93 0.18,1.33 -0.33,0.06 -0.71,-0.59 -3.64,-3.77 -2.24,-1.79 -1.25,-0.32 -2.03,-0.22 -0.47,0.98 1.09,2.18 1.06,1.64 1.04,1.1 1.62,2.13 1.49,2.74 0.6,0.84 2.03,1.16 1.06,0.31 1.09,0.09 0.1,0.41 -0.53,0.77 -0.12,0.48 2.41,1.21 0.91,0.67 0.88,1.11 0.5,0.28 2.09,2.79 0.52,0.44 1.86,0.9 0.62,0.58 1.02,1.79 0.64,0.91 0.91,2.15 0.68,0.95 1.67,1.08 0.71,0.31 0.32,0.41 -0.22,0.97 -0.2,0.41 -0.95,0.67 0.15,0.93 0.54,1.65 -0.02,1.02 -0.58,0.39 -1.19,0.47 -0.6,-0.04 -0.9,-0.39 -1.14,-0.66 -2.26,-1.66 -3.39,-1.15 -1.26,-0.62 -0.42,-0.56 -0.64,-0.33 -8.41,-1.61 -1.41,-0.39 -0.88,-0.49 -0.81,-0.73 -3.21,-1.66 -0.39,-0.36 -2.16,-2.87 -1.61,-3.37 -0.53,-0.45 -1.75,-0.45 -1.46,0.28 -0.98,0.37 -1.48,-0.12 -0.97,-0.55 -2.04,-1.52 -2.06,-0.81 -1.8,-1.33 -0.93,-0.47 0.09,-0.34 1.35,-2 -0.42,0.03 -2.34,1.52 -0.84,-0.47 -1.38,-1.19 -1.04,-1.21 -2.14,-3.34 -1.23,-1.22 0.17,-0.27 1.38,-0.11 1.1,0.1 0.74,-0.28 1.42,-1.37 0.61,-0.86 0.06,-0.51 -1.19,-0.13 -0.25,-0.25 -0.21,-0.56 -0.55,-0.72 -0.88,-0.88 -1.01,-0.38 -3.46,0.32 -0.6,-0.39 0.01,-0.59 0.67,-1.66 0.37,-0.67 0.12,-0.37 -0.13,-0.07 -0.47,0.04 -2,1.49 -0.43,-0.11 -0.79,-1.57 -0.48,-1.8 -0.35,-0.63 -0.46,-0.21 -1.65,-1.78 -2.34,-3.39 -0.86,-1.07 -0.96,-0.95 -0.69,-0.41 0.1,-0.5 1.48,-2.84 0.06,-0.46 -1.27,0.17 -1.92,-0.59 -0.91,0.71 -0.58,0.04 -0.67,-0.4 -0.38,0.15 -0.36,2.34 -0.27,0.58 -0.4,0.31 -0.35,-0.04 -0.3,-0.4 0.01,-0.54 -0.29,-2.87 -0.67,-0.42 -1.89,-0.11 -0.41,-0.23 -0.46,-0.53 -0.39,-0.99 -0.33,-1.45 -0.37,-0.79 -0.42,-0.14 -0.34,0.12 -0.26,0.38 -0.59,0.23 -0.92,0.09 -0.03,0.56 0.86,1.02 0.83,1.46 0.81,1.88 -0.49,1.26 -1.79,0.64 -1.55,0.19 -1.32,-0.26 -1.02,-0.44 -1.43,-1.05 -2.04,0.34 -0.46,2.75 -0.43,0.15 -1.94,-0.07 -0.77,0.24 -2.59,1.51 -0.79,0.21 -0.6,-0.18 -0.58,0.36 -0.87,0.86 -1.19,0.09 -1.5,-0.69 -1.27,-0.29 -1.05,0.1 -1.08,-0.4 -1.11,-0.91 -0.91,-0.41 -1.19,0.07 -0.28,-0.14 -1.74,-1.95 -0.54,-0.79 -1.16,-2.47 -0.21,-0.98 -0.03,-1.05 0.1,-0.78 0.4,-1.17 0.44,-2.77 0.36,-0.92 0.54,-0.84 1.06,-1.07 3.84,-1.89 0.78,-0.75 -0.03,-0.5 -0.88,-2.32 0.01,-0.59 0.29,-0.35 0.62,-1.36 0.28,-0.38 0.68,-0.21 1.41,0.69 1.21,0.28 1.61,0.09 2.67,0.95 3.72,1.81 2.14,1.25 1.62,1.84 1.15,1.8 0.16,0.91 -0.53,1.4 -0.27,0.41 0.02,0.48 0.3,0.54 0.93,0.79 0.22,-0.3 -0.07,-0.95 0.19,-0.8 0.46,-0.65 0.05,-0.84 -0.35,-1.04 -0.44,-0.89 -0.53,-0.75 -2.41,-2.6 -0.23,-0.87 0.81,-0.39 3.51,0.88 1.35,-0.2 0.51,-1.02 0.55,-0.7 0.59,-0.38 1.18,-0.16 1.65,0.48 0.81,0.07 0.72,-0.17 0.93,-0.56 1.38,-1.86 0.88,-0.42 1.33,-0.29 1,-0.04 1.82,0.75 1.12,-0.02 -0.09,-1.25 -0.74,-2.39 -0.92,-2.47 -0.72,-0.84 -1.86,-1.57 -2.18,-2.98 -1.12,-1.86 -0.29,-0.93 0.16,-0.62 0.37,-0.91 3.96,-3.34 3.13,-3.33 1.37,-1.71 0.66,-1.2 0.69,-0.87 0.71,-0.55 1.5,-0.66 0.43,-0.84 0.09,-1.44 0.25,-1.25 1.42,-3.37 1.09,-0.92 1.64,-0.63 1.08,-0.81 1.3,-2.79 -0.13,-0.7 -0.6,-0.53 -0.46,-0.8 -2,-7.41 -1.33,-3.62 -1.6,-3.17 -1.43,-3.88 -2.37,-3.85 -0.03,-1.02 0.42,-1.16 -0.2,-0.26 -2.45,1.7 -0.58,0.08 -0.94,-0.74 -0.64,-0.92 -0.53,-1.62 0.05,-0.85 0.35,-0.8 0.47,-1.98 0.02,-1.01 -0.16,-0.97 -0.21,-0.67 -0.26,-0.38 -0.75,-0.24 -1.24,-0.1 -0.4,0.35 1.36,3 -0.21,0.74 -1.73,0.32 -0.78,-0.14 -0.72,-0.36 -0.65,-0.59 -2.02,-3.14 -0.43,-1.19 0.14,-0.86 -0.17,-0.45 -0.41,0.29 -0.56,0.02 -0.76,-0.3 -0.16,-0.37 1.42,-1.71 0.08,-0.53 -0.65,-0.57 -0.98,-0.11 -0.26,-0.51 0.33,-0.54 1.33,-0.95 0.47,-0.62 -0.8,-0.47 -0.44,-0.04 -0.89,1.03 -1.34,2.1 -0.98,0.78 -1.34,-0.97 -0.85,-0.32 -0.59,0.21 -0.9,1.62 -1.96,1.18 -3.52,2.78 -1.51,0.88 -1.63,-0.16 -0.31,-0.56 0.03,-0.95 0.11,-0.78 0.2,-0.61 0.06,-0.75 -0.12,-3.18 0.27,-0.88 0.56,-0.52 1.02,-0.55 2.62,0.66 1.21,-0.12 0.85,-0.74 0.85,-1.07 0.85,-1.41 0.18,-1.35 -0.91,-2.2 -0.34,-0.48 -2.33,-1.72 -1.28,-0.63 -1.13,-0.27 -0.82,-0.5 -0.51,-0.72 -0.5,-1.21 -0.04,-0.82 0.08,-1.08 0.47,-0.75 2.08,-0.86 -0.03,-0.22 -1.7,-0.64 -0.8,0.07 -0.69,0.71 -0.86,1.67 -0.5,0.47 -1.55,-0.98 -0.93,-0.15 -0.63,-0.47 -0.35,-0.45 0.21,-0.46 0.77,-0.47 1.35,-1.45 0.09,-0.78 -0.93,-1.28 -0.48,-0.29 -1.94,-0.48 -2.35,0.48 -0.87,-0.24 -0.39,-1.43 -0.25,-1.7 -0.11,-1.99 -0.42,-3.4 -0.47,-1.79 -0.61,-0.23 -2.82,0.74 -0.67,0.01 -0.46,-0.27 -1.86,-2.29 -0.75,-0.82 -0.42,-0.19 -1.36,-2.45 -0.52,-0.48 -0.62,-1.22 -0.72,-1.96 -0.78,-0.6 -0.84,0.76 -0.84,1.09 -0.84,1.42 -0.45,1.2 -0.07,0.98 0.52,0.76 2.96,1.25 0.75,0.84 0.64,1.38 0.47,1.68 0.31,1.98 -0.03,1.47 -0.37,0.98 -0.63,0.86 -1.82,1.36 -1.89,0.8 -1.9,0.19 -0.9,-0.19 -4.9,-2.64 -0.88,-0.02 -1.13,-0.36 -2.54,-1.09 -1.39,-0.12 -2.44,-0.91 -4.13,-0.53 -0.83,0.44 1.1,1.22 0.96,0.61 0.83,0.01 1.19,1.09 1.55,2.16 0.89,1.29 0.73,1.53 0.02,0.53 -0.73,1.05 -5.76,-5.5 -3.52,1.93 -1.62,0.72 -1.39,0.11 -1.74,-0.75 -3.92,-2.67 -1.49,-0.93 -0.53,-0.14 -3.41,1.16 -2.94,0.05 -5.94,-1.11 -2.18,-0.75 -0.57,-0.78 -0.72,-0.39 -1.29,0 -3.4,-0.87 -3.12,1.96 -3.75,-1.8 -1.11,-1.06 -0.35,-0.73 -1.09,-3.06 -0.15,-1.64 0.31,-1.49 0.31,-1.02 0.31,-0.56 -2.04,1.71 -0.72,0.28 -0.94,0.07 -2.81,-0.63 -0.44,0.32 0.14,0.6 0.73,0.87 0.1,0.52 -1.57,0.41 -2.37,-0.42 -1.03,0.18 -0.47,0.24 -1.07,1.37 -0.44,0.31 -0.56,-0.14 -2.49,-3.1 -2.01,-1.97 -2.34,-0.76 -1.07,-0.63 -0.59,-0.76 -3.23,-6.4 -0.44,-1.39 -1.02,-5.08 -0.34,-1.09 -0.41,-0.72 0.81,-0.15 3.05,0.62 2.95,-0.03 1.6,0.41 1.86,1.27 2.42,0.91 1.74,0.19 2.78,-0.33 3.16,-0.85 0.37,-0.66 -2.05,-1.14 -1.83,-1.51 -1.68,-1.97 -1.01,-0.83 -1.69,-0.52 -4.74,-0.36 -4.39,-1.33 -3.03,-1.8 -2.47,-2 -1,-1.09 -0.36,-0.85 -0.38,-2.64 -0.41,-4.47 -0.39,-3.02 -0.38,-1.55 -0.05,-1.36 0.84,-2.91 2.4,-3.18 0.06,-0.5 -0.48,-0.15 -1.01,-0.81 -0.32,-1.19 -0.13,-1.89 -0.01,-1.61 0.11,-1.32 0.4,-1.66 1.03,-2.99 1.48,-3.65 1.6,-3.45 0.27,-1.14 0.14,-3.09 0.21,-2.26 0.22,-1.6 0.34,-1.2 0.99,-2.29 1.24,-2.18 1.94,-1.87 0.17,-0.69 0.03,-0.96 0.11,-0.72 0.2,-0.47 4.8,-6.06 2.18,-2.48 1.85,-1.58 2.22,-1.17 6.31,-2.39 3.25,-0.67 4.08,0.15 7.53,1.35 0.91,0.95 0.23,0.48 0.33,1.35 -0.25,0.86 -2.06,2.9 -2.59,2.4 -1.69,2.09 -2.86,4.67 -0.77,1.63 -3.54,9.25 -0.84,1.52 -0.49,1.21 -0.34,3.28 0.1,1.16 0.55,1.89 1.92,4.09 0.52,1.9 -0.01,1.74 -0.22,4.13 -0.03,2.08 0.09,1.99 0.4,2.83 0.71,3.67 1.63,3.68 2.56,3.7 1.91,2.44 1.88,1.79 2.23,2.64 0.5,1.27 -1.02,1.39 -2.4,2.14 -3.16,0.91 -1.69,0.87 -2.1,1.85 -2.63,1.47 -0.95,0.81 z m 63.22,-78.18 1.53,0.42 9.68,-0.78 2,0.58 6.1,3.52 1.57,1.17 0.78,1.55 0.7,2.43 0.32,0.53 2.21,1.44 0.91,1.74 0.32,0.9 0.46,2.05 1,1.16 1.14,0.66 0.37,0.6 -0.18,2.55 0.49,1.18 1.08,1.43 0.4,0.95 -0.84,1.16 -1.95,0.68 -5.5,-0.71 -7.37,-1.61 -4.29,0.46 -2.15,0.73 -5.2,2.61 -1.66,0.42 -1.63,0.05 -2.87,-2.13 -1.04,-1.13 -0.34,-0.88 -0.68,-2.58 -0.56,-3.11 -0.29,-2.56 -0.33,-1.96 -0.98,-0.65 -2.92,-0.78 -0.98,-1.08 -0.44,-0.9 -0.43,-1.46 0.01,-1.51 0.22,-1.34 0.19,-0.33 0.37,-0.03 -0.82,-1.63 -0.28,-1.8 -0.02,-2.51 0.11,-1.62 0.23,-0.71 0.54,-0.46 1.27,-0.31 1.87,0.06 2.62,1.87 2.07,0.18 3.19,1.49 z m -230.85,22.88 -0.45,0.15 -0.85,-0.7 -1.25,-1.57 -2.04,-3.2 -2.43,-3.18 -0.37,-1.92 -0.6,-1.43 -3.1,-3.42 -2.01,-1.39 -1.53,-0.7 -0.25,-0.96 1.06,-2.81 1.22,-2.25 0.73,-0.82 2.26,-0.73 7.62,-1.51 1.74,-0.04 1.82,0.73 2.51,3.1 1.04,0.35 0.62,0.7 0.55,1.15 0.29,1.17 0.02,2.38 -0.27,3.5 -0.35,1.34 -1.52,4.46 -1.59,2.44 -0.3,1.57 -0.65,1.24 -1.13,1.52 -0.79,0.83 z m -103.69,91.54 1.84,0 -0.39,-1.18 -1.14,-1.67 -1.14,-1.67 -1.14,-1.68 0.18,-2.96 4.12,0 4.73,0 4.73,0 4.73,0 4.73,0 4.73,0 4.73,0 4.89,0 0.03,2.34 0.03,2.04 1.01,-0.01 1.01,-0.01 1.35,-2.01 0,-2.34 2.8,0 2.8,0 2.8,0 2.8,0 2.8,0 2.8,0 2.8,0 2.8,0 0,-14.41 0,-14.8 0,-15.22 0,-15.66 0,-16.13 -0.01,-8.08 3.51,3.24 1.26,2.04 1,1.01 2.11,1.47 0.71,1.19 0.5,0.48 0.17,0.5 -0.15,0.52 -0.08,1.22 0.39,0.39 1.37,0.46 0.38,0.49 0.51,1.55 0.63,2.59 0.55,2.8 0.87,5.24 1.73,6.92 0.59,4.29 0.2,0.78 0.39,0.54 1.11,0.78 0.86,1.11 1.01,0.36 0.25,-0.1 0.25,-0.95 0.63,-1.51 3.05,-2.95 0.16,-0.46 -0.36,-0.68 -0.11,-0.46 0.04,-0.32 0.63,-0.25 -2.12,-3.78 -1.37,-3.61 -0.88,-4.5 -0.13,-1.32 -0.13,-2.82 -0.29,-0.75 -0.49,-0.68 -0.2,-0.88 0.08,-1.08 -0.1,-0.93 -0.56,-1.95 -2.16,-13.79 0.01,-1.36 0.3,-1.03 0.77,-0.59 1.24,-0.15 0.39,-0.32 -0.46,-0.5 -0.81,-1.5 -0.11,-0.69 0.54,-1.41 2.77,0.62 2.01,1.27 3.43,2.99 0.35,-0.16 0.38,-1.49 0.73,-0.96 1.1,0.31 3.1,2.16 3.59,3.84 2.41,1.88 1.69,2.54 1.15,2.39 0.72,1.84 0.03,0.72 -0.17,0.73 0.17,0.95 0.51,1.17 0.28,1.05 0.23,2.23 0.45,2.89 0.11,1.44 3.19,12.75 0.61,2.22 0.39,1.02 2.23,4.83 1.19,3.48 0.11,2.31 0.16,0.66 0.05,1.06 -0.06,1.46 -0.26,1.25 -0.47,1.04 -0.45,1.46 -0.68,3.21 -0.06,0.79 0.49,1.1 3.12,3.77 1.91,4.49 0.9,0.79 2.41,2.79 2.6,1.58 0.87,0.68 0.83,1 0.25,0.04 0.5,-0.19 0.14,-0.27 0.04,-0.4 -0.73,-2.1 -0.05,-0.83 0.35,-0.15 2.68,3.59 1.45,1.42 1.98,1.49 3.4,3.42 0.47,0.28 1.84,-0.31 0.5,0.21 0.32,0.34 0.13,0.46 0.08,2.01 0.5,0.99 2.9,-0.42 0.81,0.09 0.52,0.31 0.43,0.66 0.62,2.14 0.58,4.19 0.03,1.49 -0.26,2.5 -0.42,0.92 -0.55,0.29 -1.55,-0.28 -1.09,-0.79 -0.56,-1.01 -0.51,-2.19 -0.24,-0.42 -0.22,0.44 -0.51,2.01 -0.33,0.89 -0.4,0.59 -0.77,-0.15 -1.14,-0.88 -2.13,-2.24 -0.75,-0.55 -0.47,0.1 -1.02,0.76 -1.57,1.42 -0.65,1.04 0.27,0.67 0.18,0.83 0.09,1 -0.05,0.74 -0.2,0.47 -0.52,0.57 -1.1,0.1 -1.58,-0.43 -1.25,-0.77 -2.19,-2.05 -0.5,-0.29 -0.68,0.46 -0.27,0.6 0.42,0.85 1.11,1.1 1.36,1.82 0.36,0.36 0.35,-0.04 0.12,0.33 0.15,0.98 -0.07,1.68 -0.65,3.33 -0.07,0.79 0.27,-0.19 1.85,-3.27 0.96,-0.92 2.07,-1.45 0.89,-1.07 2.65,-0.29 0.95,0.58 0.61,1.01 0.02,0.46 -0.69,1.18 -0.13,0.59 -0.04,0.75 0.06,0.67 0.16,0.59 0.48,0.55 0.84,-0.24 0.24,0.14 0.45,0.58 0.3,0.89 0.01,1.24 -0.62,2.72 -1.11,0.89 -3.39,1.64 -1.16,0.84 -2.24,0.59 -0.87,0.79 -0.54,0.24 -2.4,-0.13 -2.74,0.5 -3.16,-0.98 -2.21,-0.44 -2.56,-1.56 -0.96,0.39 -1,1 -4.79,-1.2 -0.57,-0.87 0.19,-0.57 1.14,-1.86 0.07,-0.39 -0.05,-0.33 -2.18,-0.32 -2.43,-0.99 -2.44,-0.49 -1.82,0.14 -1.19,-0.36 -1.16,-0.82 -0.64,-0.75 -0.11,-0.68 -0.02,-0.74 0.1,-1.5 -0.15,-1.05 -0.53,-0.83 -1.07,-0.75 -1.07,0.09 -0.9,0.83 -0.86,1.52 -1.59,4.21 -0.8,0.72 -2.07,3.03 -0.78,0.74 -3.8,1.19 -4.5,0.49 -1.68,0.93 -1.59,1.74 -1.93,1.67 -4.72,2.05 -4.36,1.14 -4.56,0.5 -3.41,0.78 -0.98,-0.39 -1.53,0.14 -1.64,1.14 -1.86,0.22 -7.05,0.41 -3.24,0.76 -1.78,0.2 -1.39,-0.1 -0.97,-0.31 -0.93,-1.01 -0.96,-1.55 -1.94,-4.16 -0.56,-1.76 0.22,-3.02 -0.14,-1.76 -0.65,-3.81 -0.12,-0.33 -3.4,-1.42 -2.24,-0.45 -3.37,-0.09 -4.12,0.2 -4.12,-0.46 -2.17,-0.52 -2.16,-0.85 -3.69,-2.22 -0.21,-0.23 -0.29,-0.74 -0.36,-1.26 -0.92,-1.65 -1.25,-1.9 z m 179.95,-92.04 -1.45,0.3 -1.34,-2.15 -0.04,-2.01 0.09,-1.11 0.17,-0.98 0.49,-0.84 1.37,-0.98 0.62,0.72 0.23,0.87 0.21,0.34 0.88,0.75 0.43,0.86 -0.04,0.99 -0.29,1.51 -0.32,0.96 -0.35,0.43 -0.66,0.34 z m 18.02,297.59 -4.31,0.01 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 -4.03,0 0,-4.32 0,-4.35 0,-4.39 0,-4.42 0,-4.45 0,-4.49 0,-4.52 0,-4.56 0,-4.59 0,-4.63 0,-4.67 0,-4.71 0,-4.74 0,-4.78 0,-4.82 0,-4.87 0.17,-4.71 -0.11,-3.04 -3.91,-0.71 -3.91,-0.71 -3.91,-0.71 -3.91,-0.71 -3.91,-0.71 -3.91,-0.71 -3.91,-0.71 -3.91,-0.71 -3.91,-0.72 -3.91,-0.72 -3.91,-0.72 -3.91,-0.72 -3.91,-0.72 -3.91,-0.72 -3.91,-0.72 -3.91,-0.72 -2.17,-0.71 -2.7,-1.89 -2.58,-3.14 -2.58,-3.16 -2.58,-3.18 -2.58,-3.2 -4.11,-0.03 -4.11,-0.03 -4.11,-0.03 -4.11,-0.03 -2.29,-1.69 -2.29,-1.7 -2.29,-1.7 -2.29,-1.71 -2.29,-1.71 -2.29,-1.72 -2.29,-1.72 -2.29,-1.73 -2.29,-1.73 -2.29,-1.74 -2.29,-1.74 -2.29,-1.75 -2.29,-1.75 -2.29,-1.76 -2.29,-1.76 -2.29,-1.77 -2.29,-1.78 -2.29,-1.78 -2.29,-1.79 -2.29,-1.79 -2.29,-1.8 -2.29,-1.8 -2.29,-1.81 -2.29,-1.82 -2.29,-1.82 -2.29,-1.83 -2.29,-1.83 -2.29,-1.84 -2.29,-1.85 -2.29,-1.85 -2.29,-1.86 -2.29,-1.87 0,-4.94 0,-4.99 0,-5.03 0,-5.08 0,-5.13 0,-5.17 -0.02,-8.39 3.49,3.74 1.37,1.02 2.57,0.97 8.82,2.16 1.11,0.58 2.32,2.25 1.6,1.31 1.9,1.25 2.37,1.08 4.65,1.62 0.76,0.54 0.85,0.16 0.95,-0.22 4.27,0.92 1.12,-0.05 0.81,0.17 1,0.67 1.46,0.24 -0.05,-0.46 -1.67,-2.55 0.07,-0.4 0.69,-0.03 2.07,0.43 0.47,-0.73 0.69,0.02 1.57,0.35 1.69,0.79 1.81,1.22 2.21,1.04 3.35,2.57 1.85,2.13 1.75,2.64 0.96,1.83 0.17,1.02 0.37,0.51 0.56,-0.01 0.21,0.39 -0.51,2.25 -0.29,0.56 -0.38,0.4 -1.6,0.46 -4.4,-0.54 -0.78,1.81 -2.46,1.52 -0.44,0.66 -0.1,0.48 0.18,1.57 -0.31,0.48 -2.02,1.79 -0.07,0.5 1.31,0.73 1.39,1.25 1.09,0.3 1.38,-0.17 1.74,0.44 2.09,1.04 1.46,0.48 0.82,-0.09 1.12,0.19 1.42,0.47 1.89,0.16 4.19,-0.04 1.26,0.36 1.75,0.16 3.37,-0.05 0.61,-0.07 1.08,-0.82 0.7,-0.27 1.21,-0.01 3.5,-0.61 1.21,0.01 1.12,-0.46 1.43,-0.92 0.88,-0.17 0.33,0.58 0.6,0.25 0.87,-0.08 1.66,-0.98 3.88,-2.9 1.4,0 1.02,-0.91 0.25,-0.02 0.28,0.38 0.95,2.13 0.29,0.34 0.65,0.18 0.64,1.09 0.66,1.62 0.5,0.45 3.64,0.07 1.28,0.45 0.39,0.46 0.39,1.27 0.24,2.46 0.16,0.9 0.53,1.31 0.35,0.38 0.33,-0.36 0.9,-3.4 0.31,-0.55 0.6,0.19 0.18,0.17 0.91,2.52 1.3,1.87 3.21,3.42 0.52,1.25 0.19,0.92 -0.18,0.82 -0.55,0.73 -0.87,0.58 -1.19,0.44 -1.11,-0.16 -1.03,-0.76 -0.33,-0.04 0.37,0.67 2.13,2.79 0.54,1.11 0.5,0.74 0.46,0.36 0.43,0.6 0.39,0.84 1.77,2.21 0.5,1.05 2.01,3.27 0.96,1.28 0.74,0.74 0.29,0.07 -0.17,-0.59 -2.57,-4.35 -1.31,-2.75 -0.18,-0.66 -0.08,-1.01 -0.05,-3.37 0.19,-0.52 0.89,-0.44 1.14,1.53 0.43,0.21 0.29,-0.09 0.15,-0.4 0.65,0.37 1.16,1.13 0.39,0.02 -0.87,-2.16 -0.62,-1.06 -0.22,-0.74 0.58,-1.12 -0.32,-0.56 -1.47,-1.65 -0.76,-1.71 -0.69,-2.6 -0.06,-1.01 0.11,-1.07 -0.1,-0.87 -0.92,-1.77 -1,-1.23 -0.8,-1.43 -0.16,-0.76 0.12,-2.05 0.6,-0.9 1.15,-1.2 0.31,-1.24 -0.53,-1.28 -0.1,-0.58 0.33,0.11 2.26,-0.65 0.57,0.23 0.85,-0.28 1.14,-0.78 0.89,-0.35 1.18,0.05 0.64,-0.19 0.78,-0.35 0.4,-0.39 0.71,-1.49 0.38,-0.22 1.2,0.16 0.68,0.33 0.32,-0.12 -0.05,-2.12 0.23,-0.75 1.19,-1.55 1.25,-0.16 0.83,-0.42 0.95,-0.87 0.68,-0.78 0.68,-1.26 0.28,-1.61 -0.22,-0.46 -1.42,-0.62 -0.85,0.32 -1.88,1.15 -1.98,1.47 -0.76,1.36 -0.21,1.75 -0.37,0.77 -1.54,-0.73 -0.66,0.01 -0.83,0.3 -0.87,0.67 -0.92,1.03 -1.36,0.19 -1.8,-0.66 -1.08,-0.18 -1.1,1.1 0.06,0.81 0.51,1.19 -0.51,0.7 -2.63,0.26 -0.69,-0.15 -1.4,0.47 -0.55,-0.1 -0.4,-0.56 -2.86,-2.41 -0.28,-0.49 0.69,-1.97 2.65,-5.36 0.29,-0.32 4.9,-0.94 2.96,-0.98 5.43,-2.98 1.05,-0.25 3.49,-1.99 1.43,-0.51 1.33,0.34 1.95,1.03 1.01,0.91 0.71,1.13 0.59,1.58 0.74,3.46 0.25,2.93 0.46,1.08 1.64,2.03 0.84,0.78 0.52,0.25 0.45,-0.47 0.3,-0.08 0.21,0.18 0.22,1.27 0.29,0.13 0.98,-0.16 1.04,0.52 0.15,0.39 -0.22,1.57 0.3,0.66 1.27,1.4 1.22,0.53 1.41,0.24 2.62,-0.24 2.19,-0.67 1.64,-1.1 1.35,1.23 2.7,2.95 1.62,2.08 1.34,0.98 2.72,1.17 0.62,0.63 0.99,0.07 1.37,-0.49 1.56,0.19 1.75,0.87 1.2,0.37 4.11,-1.63 0.63,-0.08 1.53,-0.79 0.99,-0.24 1.16,0.02 0.86,-0.24 0.57,-0.5 2.18,0.02 3.94,0.56 2.7,0.73 1.6,0.92 1.31,0.51 1.03,0.11 1,-0.16 0.97,-0.44 1.03,-0.83 2.19,-0.43 0.36,-0.22 -0.04,-0.46 -0.45,-0.7 -1.24,-1.32 -0.87,-1.29 -0.17,-0.82 0.02,-1 0.27,-0.58 0.52,-0.15 0.82,0.62 1.12,1.39 3.16,5.2 0.76,0.73 0.42,0.66 2.9,1.88 1.37,0.33 1.62,-1.16 0.72,-0.72 0.35,-0.7 -0.02,-0.67 0.16,-0.98 -0.16,-0.61 -0.44,-0.79 -1.16,-1.1 -1.89,-1.42 -1.73,-0.42 -1.56,0.59 -1.77,1.21 -0.74,-0.48 -2.2,-3.39 -0.56,-1.27 0,-0.35 1.02,0.41 0.05,-0.41 -0.61,-1.64 -0.38,-0.55 -1.27,-2.6 -0.16,-0.79 0.79,-0.18 0.36,-0.31 0.48,0.03 2.24,1.57 1.15,-0.7 2.66,-1 -1.05,-1.51 -0.25,-1.49 0.12,-0.32 0.87,-0.22 1.69,1.24 0.82,0.17 0.6,-0.49 0.63,-0.03 0.67,0.43 0.63,0.64 1.16,1.82 0.58,1.1 0.65,1.65 0.21,0.23 3.13,0.12 1.77,-1.46 -0.04,0.5 -0.41,1.14 -2.2,4.37 0.03,0.54 1.16,-0.23 0.55,-0.35 0.34,-0.52 0.29,-1.22 0.2,-0.36 3.26,-2.06 0.94,-0.31 -0.59,2.21 -1.21,7.79 -0.25,2.7 -0.27,0.91 -1.28,2.95 0.02,1.03 1.4,2.46 0.25,0.67 0.14,2.01 0.25,0.4 1.16,0.02 1.2,-0.64 1.43,-0.42 0.22,0.42 -0.78,2.43 0.04,0.21 1.36,-0.62 0.62,-0.08 0.25,0.14 1.01,1.24 0.1,0.92 -0.02,1.37 -0.11,0.98 -0.34,0.54 -0.41,0.22 -0.51,0.16 -0.46,-0.07 -1.42,0.21 -0.83,-0.26 -0.83,-0.75 -0.59,-0.18 -0.68,0.58 -1.08,-0.1 -1.21,-1.66 -0.51,0.13 -0.16,0.26 0.02,0.36 0.54,1.07 4.25,5.65 0.65,1.16 0.14,1.66 0.09,-0.01 0.4,-1.66 -0.26,-0.81 -2.19,-3.28 -0.26,-1.2 0.08,-0.33 0.58,-0.34 3.11,0.82 1.21,-0.18 0.81,-0.58 0.41,-0.71 0.3,-3.95 0.56,-2.54 -0.33,-2.29 -0.84,-3.66 -0.66,-2.17 -1.53,-2.21 -0.15,-0.79 1.7,-6.75 0.31,-0.57 0.38,-0.25 1.34,-0.1 0.98,-0.57 1.53,0.79 0.84,0.21 1.05,-0.7 2.32,-2.87 0.91,-0.89 1.16,-1.69 1.4,-2.49 1.53,-1.81 2.47,-1.69 1.51,-1.37 0.31,-0.49 -1.41,-0.12 -0.34,-0.23 -0.29,-1.3 0.15,-2.42 -0.03,-1.35 -0.17,-1.22 -0.31,-1.09 -0.45,-0.96 -0.41,-0.58 -0.37,-0.19 -0.25,0.09 -0.14,0.37 -0.38,2.32 -0.48,1.7 -0.66,0.89 -1.36,0.6 -2.34,0.44 -0.97,-0.81 -0.12,-0.69 0.34,-2.69 0.78,-1.16 2.14,-2.29 1.37,-1.84 0.02,-0.32 -1.26,-0.01 -0.3,-0.38 -0.27,-2.27 0.07,-0.85 0.2,-0.97 0.88,-0.71 2.71,-0.88 2.11,-1.03 0.06,0.36 -1.69,3.1 -0.17,0.72 0.64,0.67 1.62,-1.79 1.05,-1.48 0.17,-0.5 -0.95,-0.18 -0.05,-0.61 0.18,-1.13 -0.09,-0.77 -1.05,-0.98 -1.3,0.54 -1.08,1.03 -0.9,0.28 -1.33,0.02 -0.96,-0.24 -0.6,-0.49 -0.73,-1.09 -0.85,-1.7 -1.08,-1.7 -0.38,-0.19 -0.33,0.19 -0.69,1.64 -0.3,0.2 -4.21,-2.3 -1.79,-1.3 -0.86,-0.98 -1.07,-0.58 -1.29,-0.18 -1.02,-0.46 -0.76,-0.74 -0.62,-1.06 -0.47,-1.38 -0.88,-1.75 -2,-3.5 -0.53,-2.25 -0.07,-0.87 0.13,-2.24 1.87,-3.82 0.35,-1.11 0.64,-0.81 0.93,-0.53 0.67,-0.16 1.52,0.49 -0.91,-1.19 -0.07,-0.64 0.91,-2.09 -0.18,-0.09 -2.51,1.61 -0.64,-0.11 -0.9,-0.98 -1.7,-3.53 -0.02,-2.21 0.54,-3.09 0.19,-1.86 -0.49,-1.58 0.18,-0.45 0.53,-0.45 0.22,-0.48 -0.23,-1.76 0.37,-0.94 1.2,-1.83 1.18,-1.61 0.7,-0.49 0.61,0.09 0.63,0.49 0.66,0.9 1.13,0.92 0.83,0.26 0.61,-0.5 1.05,-3.46 0.37,-0.89 -0.35,-0.39 -2.05,0.04 -0.89,-0.29 -0.51,-0.33 -0.38,-1.33 0.31,-0.71 1.99,-2.48 0.93,-2.61 2.78,-3.65 2.82,-1.72 1.36,-0.57 1.11,-0.11 0.48,0.23 0.59,1.83 0.11,1.93 1.53,2.4 1.23,0.18 0.76,-0.36 2.47,0.14 0.57,0.67 -0.04,0.75 -0.28,1.21 0.17,1.03 1.68,1.97 1.51,1.36 1.35,1.69 2.02,3.52 0.44,0.99 0.3,1.07 0.52,3.88 0.07,1.47 -0.19,4.22 -0.16,0.79 -0.53,0.95 0.18,0.38 1.59,1.09 1.27,2.16 0.67,0.69 1.6,1.16 0.29,0.44 0.36,0.72 0.91,3.08 1.48,2.76 0.11,0.59 -0.32,1.29 0.23,0.41 0.57,0.47 0.51,-0.25 0.45,-0.97 0.49,-0.28 0.53,0.41 0.41,0.72 0.55,1.76 0.81,1.45 -0.07,0.44 -0.4,0.36 -2.17,0.4 -1.22,-0.28 -1.13,-0.71 -0.79,-0.73 -0.73,-1.12 -0.27,0.12 -0.38,0.91 -0.82,1.33 -0.51,1.23 0.59,0.54 2.86,-0.04 0.62,0.34 0.73,0.86 -0.83,1.43 -1.93,2.4 -4.18,4.62 -1.23,1.18 0.3,0.34 0.46,0.09 1.43,-0.2 1.34,-0.62 1.63,0.27 0.73,0.5 -0.25,0.49 0.44,0.8 2.66,1.85 1.68,-0.37 1.72,-1.78 1.33,-0.89 1.63,0.12 0.46,0.2 -0.17,0.43 -1.21,1 -1.09,1.11 -0.12,0.31 1.36,-0.45 3.03,0.71 1.47,0.18 1.07,-0.18 1,0.28 0.94,0.74 0.31,0.47 -0.88,0.3 -0.83,0 -0.7,0.45 -0.58,0.9 -0.41,1.16 -0.25,1.43 -0.63,0.59 -1.01,-0.25 -0.4,-0.4 0.22,-0.56 -0.29,-0.08 -0.81,0.4 -0.63,0.01 -0.17,0.42 4.42,4.53 1.41,3.98 0.97,1.63 0.1,0.43 -0.63,1.1 -0.03,0.83 0.29,2.4 -0.13,1.91 -0.43,3.34 0.41,1.04 0.94,0.91 0.56,1.17 0.38,0.4 0.29,0.94 0.34,0.59 0.39,0.24 0.27,-0.31 0.16,-0.85 0.36,-0.8 1,-1.44 0.96,-2.26 0.16,-0.75 -0.15,-1.78 0.11,-0.77 0.91,-2.72 0.29,-1.89 0.28,-2.96 0.48,-2.07 1.03,-1.76 1.79,-3.58 0.65,-0.72 0.73,-0.35 1.27,0.08 0.92,1.16 1.25,2.13 1.58,1.93 2.89,2.61 0.83,0.98 1.63,2.57 0.69,2.53 0.47,3.56 0.41,2.13 0.34,0.72 0.16,1.07 -0.03,1.42 -0.13,1.11 -0.23,0.8 -0.35,0.45 -0.88,0.15 -1.08,-0.22 -0.31,-0.36 -0.57,-1.67 -0.23,-0.1 -1,1.23 -0.12,0.69 0.37,2.27 -0.05,4.25 0.1,0.92 1.06,4.38 1.78,3.31 4.46,6.33 0.25,0.71 0.47,2.56 0.23,0.53 0.29,0.32 0.35,0.1 0.48,-0.25 1.64,-1.94 1.43,-2.05 1,-1.07 0.56,-0.09 0.61,-0.38 0.65,-0.67 0.43,-0.73 0.22,-0.8 0.29,-3.13 0.25,-1.5 0.69,-2.06 0.25,-0.59 3.45,-5.26 0.29,-0.65 1.47,-6.16 0.52,-2.84 0.07,-1.72 -0.2,-1.54 0.1,-1.27 0.4,-1 0.42,-0.71 0.72,-0.72 0.4,-1.01 0.24,-0.1 0.59,-0.01 0.78,0.69 0.57,0.12 3.65,-0.79 0,-0.42 -2.14,-1.33 0.02,-0.67 0.19,-0.92 0.67,-1.03 0.83,-0.32 0.19,-0.66 0.02,-0.81 0.27,-1.33 -0.25,-0.47 -2,-1.84 -1.16,0.08 -0.29,-0.24 -1,-1.5 -0.37,-2.19 -0.04,-0.9 0.14,-1.45 0.13,-0.41 -0.06,-0.66 -0.25,-0.91 -0.02,-0.81 0.21,-0.71 -0.13,-0.84 -0.47,-0.98 -0.18,-0.84 0.49,-2.5 0.02,-0.77 -0.46,-1.07 -0.33,-0.42 0.25,-0.26 0.83,-0.11 0.99,0.35 1.15,0.8 1.41,0.01 1.67,-0.79 1.69,-0.38 2.92,0.16 0.69,0.23 2.91,2.33 2.26,1.18 1.02,-0.11 5.02,0.47 2.2,-0.24 1.14,0.1 2.19,1.27 -0.14,1.05 -0.95,1.76 -1.23,0.36 -1.09,0.61 1.01,0.92 2.98,1.23 0.7,1.97 0.21,0.9 -0.35,0.81 0.17,0.41 0.69,0 1.78,-0.69 1.97,0.46 2.87,1.51 0.31,0.32 0.5,1.18 -0.06,0.48 -2.53,2.93 -1.32,1.16 -1.73,1.19 -0.06,0.63 2.43,0.12 1.89,0.33 0.85,0.38 0.44,0.55 0.61,1.17 0.1,0.93 -0.06,1.25 -0.2,0.87 -2.2,2.49 -1.01,0.77 -1.72,0.92 -0.75,0.69 -0.82,-0.09 -0.89,-0.88 -0.93,-0.19 -1.68,0.7 -0.91,-0.02 -0.45,0.24 -0.04,0.54 0.79,1.56 0.46,0.61 0.18,0.46 -0.34,0.77 0.07,0.24 0.27,0.27 1.52,3.38 0.32,0.26 0.32,-0.13 0.66,-0.96 0.39,-0.39 0.19,0.05 -0.01,0.49 -0.7,2.93 -0.09,0.78 0.02,0.7 0.34,1.47 0.77,1.57 0.96,1.41 1.44,1.9 1.93,2.02 0.72,0.98 1.06,2.3 0.22,0.88 -0.28,2.4 -0.77,3.9 -0.5,2.21 -0.22,0.53 -1.46,1.56 -0.83,0.36 -1.36,-0.04 -0.46,0.3 -0.71,1.24 -0.97,2.17 -0.76,1.37 -0.56,0.58 -1.02,0.67 -1.6,1.99 -0.79,0.76 -2.76,0.83 -2.24,2.68 -0.89,0.88 -0.97,0.47 -1.05,0.05 -0.6,-0.43 -0.34,-1.63 -0.2,-0.54 -0.79,-1.12 -1.62,-3.26 -0.7,-1.12 -0.47,-0.25 -0.94,0.18 -0.48,-0.11 -1.04,-1.03 -0.38,-0.67 0.05,-0.26 0.79,-0.38 -0.34,-0.54 -1.4,-1.48 -0.58,-0.78 -0.07,-0.26 -1.38,-1 -1.37,-0.28 -1.74,1.67 -0.66,1.12 0.02,0.37 0.83,0.43 0.36,-0.21 0.71,-1.04 0.37,-0.32 1.07,0.16 0.89,0.71 0.32,0.62 0.12,0.42 2.43,3.29 0.86,0.66 0.36,0.78 0.27,1.3 0.52,1.44 1.17,2.37 1.24,2.92 0.25,1.15 -0.64,0.55 -0.32,0.04 -0.96,-0.43 -2.52,-1.35 -0.28,0.03 -0.67,0.71 -0.55,1.61 -0.17,0.15 -1.34,-0.63 -2.51,-1.42 -1.68,-1.2 -0.85,-0.99 -1.03,-1.58 -1.21,-2.18 -1.45,-0.7 -1.68,0.79 -2.43,0.28 -5.11,-0.25 -0.67,0.19 -0.26,0.27 0.43,1.2 -0.1,0.33 -0.34,0.22 -0.08,0.35 0.55,1.27 0.9,0.86 2.54,1.16 1.68,0.99 1.01,0.85 0.33,0.72 0.05,0.78 -0.48,1.56 -0.27,0.57 -5.91,7.7 -2.25,3.08 -1.15,1.89 -1.01,1.24 -0.88,0.61 -1.45,0.34 -2.02,0.08 -2.62,-0.29 -1.35,-0.98 -2.46,-2.62 -1.72,-1.54 -0.77,-0.52 -0.64,-1.46 -0.58,-0.28 -1.23,-0.25 -1.27,-0.78 -2.98,-2.66 -1.54,-1.06 -1.41,-0.59 -1.26,-0.11 -0.48,0.16 0.86,1.34 -0.38,0.08 -1.02,-0.31 -1.01,0 -1.79,-0.96 -1.77,0.13 -1.28,-0.19 -1.53,-0.54 -1.65,-0.26 -2.65,0.03 -0.95,0.11 -0.14,0.25 1.27,1.17 2.19,1.41 -0.29,-1.22 0.08,-0.31 0.73,-0.42 3.47,0.75 3.93,1.58 1,0.16 1.11,0.55 1.22,0.95 1.68,1.93 3.21,4.36 1.03,1.09 1.37,1.02 6.96,1.47 2.41,-0.01 4.82,0.42 2.54,0.76 0.72,0.57 0.22,1.91 -0.23,0.96 -1.38,2.9 -0.88,2.12 -5.42,8.89 -0.7,2.03 -0.3,1.21 -0.97,1.25 -2.45,1.93 -2.46,1.63 -1.48,0.35 -1.32,-0.39 -0.85,-0.47 -1.26,-1.62 -0.08,0.17 0.91,2.54 -0.21,0.26 -0.74,-0.32 -1.69,-1.14 -0.55,0.21 -0.32,0.31 -0.45,-0.01 -0.58,-0.32 -1.05,-0.95 -0.28,-0.46 -0.25,-1.41 -0.17,-0.25 -2.07,0.82 -0.34,0.27 0.85,0.56 0.29,0.4 0.83,2.08 0.04,0.45 -0.59,0.27 -1.97,-0.78 -0.24,0.07 0.97,2.06 0.37,0.98 0.04,0.51 -1.27,2.32 -0.81,0.96 -1.11,0.35 -0.69,-0.24 -0.78,-0.59 -0.56,0.08 -0.35,0.76 -0.64,0.54 -0.94,0.32 -1.2,-0.14 -1.46,-0.6 -3.86,-2.18 -1.22,-0.34 -2.25,-0.3 -0.27,-0.31 0.02,-0.29 0.31,-0.28 -0.08,-0.24 -0.48,-0.2 -0.5,0.19 -0.51,0.58 -0.9,0.17 -1.28,-0.24 -1.9,-0.85 -3.77,-2.2 -4.12,-1.86 -2.39,-2.42 0.89,2.18 -0.07,0.74 -0.46,0.65 -0.08,0.64 0.94,1.55 1.29,0.56 1.3,-0.06 0.04,-0.25 -0.54,-0.38 -0.48,-0.56 -0.23,-0.84 0.25,-0.15 1.15,0.44 0.76,0.51 5.71,2.85 1.7,0.53 1.28,0.55 0.35,0.33 -0.43,0.71 -2.29,1.76 -0.04,0.29 1.57,-0.16 1.91,-1.55 1.07,-0.72 1.03,-0.44 1.4,0.76 1.76,1.96 1.43,1.11 2.04,0.62 1.19,0.66 2,1.82 0.32,0.95 0.18,3.84 -0.07,0.92 -0.26,0.92 -0.45,0.9 -0.84,0.51 -1.22,0.11 -0.96,0.37 -2.1,2.02 -0.89,0.29 -3.77,-0.6 -1.48,-0.56 -0.68,0.04 -0.38,0.44 -0.39,0.2 -1.48,0.18 -0.24,0.36 0.09,0.56 0.29,0.75 0.36,0.43 0.56,0.55 0.84,0.36 1.73,0.4 0.18,1.02 -0.08,0.33 -0.57,0.68 -0.66,-0.07 -1.13,-0.8 -0.56,-0.03 -0.49,0.43 -0.68,0.14 -0.87,-0.15 -0.48,0.35 -0.1,0.85 -0.29,0.64 -1.01,1 -0.54,0.74 0.02,0.58 0.58,0.42 0.66,0.95 0.75,1.47 0.14,0.65 -0.46,-0.17 -0.62,-0.58 -0.78,-1 -1.17,-0.9 -2.59,-1.17 -0.46,0.04 0.23,0.3 1.72,1.23 0.66,0.79 0.08,0.57 -1.44,1.25 -0.04,0.42 0.38,0.37 0.1,0.31 -0.51,0.61 -0.84,0.51 -1.63,0.07 -0.15,0.29 0.62,0.63 0.21,0.39 -0.54,0.54 -0.35,0.08 -1.88,-0.25 0.49,1.34 0.29,0.47 0.58,0.66 1.04,0.61 0.02,0.24 -0.36,0.53 -0.61,0.64 -2.59,1.95 -1.82,2.27 -0.25,0.71 0.46,1.49 0,0.37 -0.48,0.67 -1.06,-0.18 -0.2,0.26 0.25,0.7 0.05,1.02 -0.16,1.34 -0.77,2.1 -1.39,2.85 -1.06,2.57 -0.74,2.31 -0.53,1.14 -0.99,0.08 -0.74,0.72 0.51,0.38 0.31,0.44 0.21,0.67 -0.21,2.09 -0.64,3.49 -0.24,1.9 z m -49.63,-227.79 -0.12,0.22 -1.94,-1 -0.74,-0.6 -0.24,-0.44 -0.17,-0.89 -0.1,-1.35 0.39,-0.65 0.87,0.05 0.93,0.52 1.41,1.48 -0.4,0.44 -0.02,0.97 0.16,0.91 -0.03,0.34 z m 120.08,10.17 1.02,0.21 0.96,-0.26 0.7,0.25 0.44,0.75 0.29,0.78 0.14,0.8 -0.38,0.57 -1.58,0.5 -1.08,-0.25 -1.16,-0.67 -0.54,0.3 -1.32,-0.49 -0.66,-0.67 -0.53,-0.95 0,-0.58 1.39,-0.66 0.55,-0.51 1.76,0.88 z m -94.36,12.25 0.28,0.31 0.52,-0.26 0.4,-0.84 0.24,-0.16 0.38,0.16 1.25,1.51 0.96,1.58 1.02,1.12 1.62,1 3.54,3.23 1.04,2.17 1.1,3.36 0.98,2.55 0.87,1.75 0.93,1.39 1.49,1.55 1.33,-1.13 0.57,-0.29 0.49,0.47 0.46,1.17 -0.25,0.52 -0.58,0.66 -0.95,0.77 -1.33,0.06 -0.64,0.23 -1.04,1.22 -0.83,1.46 -1.16,0.49 -2.18,2.44 -1.2,0.91 -1.77,0.24 -3.67,-1.9 -2.29,0.27 -1.87,-0.39 -2.09,-2.02 -1.62,-1.14 -3.13,-1.65 -0.21,-0.24 -0.14,-0.56 -0.06,-0.87 -0.14,-0.58 -0.22,-0.3 -0.49,0.03 -0.5,0.58 -0.97,0.5 -1.47,-0.11 -0.64,-0.35 -0.49,-0.54 -0.26,-0.64 -0.04,-0.73 -0.14,-0.56 -0.23,-0.4 -0.53,-0.01 -0.84,0.38 -0.33,0.47 0.18,0.56 -0.15,0.33 -1.46,0 -0.57,-0.33 -1.1,-1.03 -0.48,-1.04 -0.62,-1.86 0.06,-0.5 0.4,-1.14 0.52,-0.79 3.32,-0.47 1.55,-0.45 1.69,-1.3 1.97,-2.25 0.43,-0.67 0.05,-0.49 -0.15,-0.53 -0.62,-1.31 -0.21,-0.9 0.2,-0.42 0.79,-0.04 -0.42,-0.51 -0.35,-0.72 -0.12,-0.45 0.02,-0.72 0.63,-0.16 0.78,0.36 1.5,2.06 0.6,0.4 1.03,0.31 -1.09,-1.42 -1.13,-3 -0.14,-1.04 0.03,-0.58 0.3,-1.62 0.27,-0.66 0.34,-0.44 1.07,-0.94 1.72,-0.66 0.88,-0.09 0.89,0.53 0.78,1.01 1.73,1.65 0.26,0.67 -0.03,0.31 -0.67,0.45 -0.08,0.41 0.23,0.6 z m 161.44,-3.75 0.36,1.49 0.23,0.47 -0.34,0.7 -1.35,1.4 -2.95,0.57 -1.49,-0.66 0.68,2 0.15,0.84 -0.21,0.35 -0.62,-0.11 -1.03,-0.57 -0.59,-0.68 -0.15,-0.79 -0.22,-0.17 -0.28,0.44 -0.27,-0.1 -0.61,-1.18 -0.45,-0.44 -2.96,-0.7 -0.15,-0.32 0.16,-0.55 0.46,-0.78 0.66,-0.26 1.67,0.35 0.14,-0.2 0.11,-0.98 0.13,-0.39 1.16,0.1 0.73,-0.21 0.4,0.51 0.4,1.17 0.56,-0.21 0.82,0.17 0.91,-0.43 1.39,-1.04 1.08,-0.38 1.47,0.59 z m 12.56,1.89 0.46,1.29 0.08,0.67 -0.64,0.79 -2.4,1.45 -1.46,1.26 -0.74,0.28 -0.98,-0.28 -1.2,0.59 -0.47,-0.08 0.53,-1.03 1.89,-2.97 1.58,-0.3 0.52,-0.62 0.44,0.2 0.25,-0.52 0.04,-0.77 0.55,-0.59 0.5,0.01 1.05,0.62 z m 90.67,4.47 -0.23,0.16 -2.35,-1.17 -0.17,-0.93 1.15,-1.04 0.93,-0.56 0.72,-0.08 0.71,0.18 0.67,1.12 -0.81,1.02 -0.62,1.3 z m -247.41,-0.84 1.19,1.72 -0.01,0.83 -0.16,1.38 -0.34,1.05 -0.53,0.72 -0.74,0.36 -0.95,0 -0.41,-0.3 0.31,-1.07 0.23,-0.32 0.04,-0.94 -0.15,-1.57 -0.19,-0.97 -0.53,-0.55 -0.38,-0.02 -0.1,0.51 0.17,1.04 -0.12,1.35 -0.42,1.65 -0.32,0.78 -0.56,-0.39 -0.27,-0.63 0.07,-1.04 -0.15,-0.94 0.14,-1 0.38,-1.49 0.54,-1 0.7,-0.51 0.82,0.04 0.93,0.58 0.81,0.73 z m -50.72,4.52 -0.73,0.22 -0.13,-0.05 0.06,-0.69 -0.05,-0.35 -0.2,-0.25 0.64,-0.55 0.09,-0.43 -0.2,-0.33 -0.88,-0.63 -0.25,-0.57 0.05,-0.5 0.34,-0.43 0.61,0.07 1.31,0.84 0.6,1.16 0.27,0.86 -0.44,0.13 -0.34,0.35 -0.36,0.73 -0.39,0.42 z m 216.73,6.41 -1.13,0.29 -0.84,-0.15 -0.54,-0.59 -0.42,-0.8 -0.51,-2.03 0.19,-0.95 0.06,-1.7 0.1,-0.64 0.2,-0.32 1.18,-0.61 0.7,0.07 1.03,0.65 2.23,0.2 0.55,0.6 0.14,0.36 -0.01,0.45 -0.16,0.53 -1.1,1.54 -0.53,1.06 -0.38,1.27 -0.76,0.77 z m -118.37,-6.97 0.2,1.58 -0.81,2.13 -0.25,0.38 -0.31,0.14 -0.3,-0.26 -0.9,-1.67 -0.25,-1.05 0.33,-0.52 0.7,-0.66 0.49,-0.32 0.62,0.28 0.22,-0.46 0.26,0.43 z m 98.51,14.42 -0.62,0.17 -0.73,-0.47 -0.26,-0.81 -0.14,-0.82 0.13,-0.42 0.33,-0.4 0.44,-0.91 0.56,-1.42 0.88,-0.96 1.92,-0.89 0.27,-0.31 0.86,-2.51 0.29,-0.43 0.98,-0.26 0.11,-0.33 -0.35,-0.62 0,-0.64 0.35,-0.66 0.48,-0.49 1.24,-0.48 1.12,0.09 0.29,0.19 0.25,0.44 0.34,1.18 0.05,0.27 -0.52,1.05 -1.36,1.6 -0.84,1.34 -0.17,0.44 -0.08,0.56 -0.32,0.68 -0.98,1.64 -0.66,1.58 -0.66,0.87 -1.8,0.82 -1.4,0.91 z m -101.14,-9.4 -0.73,0.29 -0.46,-1.05 -0.37,-0.22 -0.17,-0.7 -0.77,-0.14 0.05,-1.1 0.21,-0.54 0.71,-0.43 0.57,0.16 0.54,1.1 0.26,0.87 0.23,1.11 -0.07,0.65 z m -85.18,5.21 -0.21,1.49 -1.11,-0.4 -0.49,-0.54 -0.42,-1.22 -0.05,-0.31 0.09,-0.47 0.45,-1.07 0.3,-0.39 0.72,0.45 0.34,0.63 0.27,0.99 0.11,0.84 z m -1.99,5.15 -0.28,0.78 -0.35,0.22 -0.7,0.92 -0.28,0.12 -0.41,-0.59 -0.34,-0.96 -0.15,-0.15 -0.22,0.04 -0.47,0.61 -0.21,-0.01 -0.17,-0.41 -0.08,-0.82 0.01,-1.23 0.22,-1.89 0.01,-0.69 -0.12,-0.53 0.1,-0.48 0.31,-0.43 0.41,-0.21 0.95,0.17 0.75,0.76 0.37,1 0.74,0.79 0.25,0.55 -0.34,2.44 z m -14.6,5.43 -0.37,0.03 -0.51,-0.44 -2.88,-1.5 -0.38,-0.45 0.34,-0.63 1.05,-0.81 0.71,-0.83 0.55,-1.27 1.66,0.66 0.62,0.6 0.24,0.52 0.1,0.72 -0.09,1.77 -0.56,0.38 -0.48,1.25 z m 241.72,5.8 -0.7,0.16 -1.01,-1.5 -2.13,-1.71 -0.81,-1.25 -0.03,-0.6 0.07,-0.95 0.23,-1.16 0.74,-1.27 0.79,-0.21 1.12,0.28 0.82,0.91 0.89,2.53 0.59,1.23 0.19,0.89 -0.29,0.42 0.03,0.41 0.13,0.25 -0.05,0.47 -0.24,0.68 -0.34,0.42 z m -265.88,-1.39 -0.5,0.09 -0.93,-0.39 -1.36,-0.87 -1.02,-0.92 -0.69,-0.97 -0.09,-0.67 0.51,-0.37 0.78,-0.19 1.85,0.13 0.88,0.37 1.16,1.42 0.25,0.8 0.04,0.52 -0.15,0.45 -0.73,0.6 z m 229.11,5.16 -0.73,0.27 -0.99,-1.28 -0.01,-0.71 0.19,-1.71 1.8,-0.43 0.75,1.04 0.36,1.02 -1.37,1.8 z m 29.65,-3.13 4.68,2.14 0.46,0.78 0.22,0.69 0.13,0.77 0.01,1.58 -0.09,0.63 -0.46,1.53 -0.03,0.48 0.37,5.08 -0.04,2.75 -0.33,2.29 -0.67,1.83 -1.01,1.37 -0.77,0.79 -3.41,1.93 -2.41,0.5 -2.54,0.09 -3.24,0.52 -1.48,-0.11 -0.77,-0.23 -0.54,-0.38 -0.64,-1.22 -0.73,-2.06 -0.6,-2.33 -0.72,-4.16 -0.01,-0.5 0.69,-3.41 0.92,-2.31 1.62,-3.44 1.83,-3.38 0.47,-0.56 0.83,-0.59 2.07,-0.96 1.72,0.24 0.76,-0.12 0.95,-0.45 1.04,-0.11 1.72,0.33 z m -97.89,14.04 -0.38,0.02 -0.61,-0.36 -1.39,-1.43 -0.28,-0.62 -0.14,-0.72 0,-0.83 0.12,-0.86 0.43,-1.72 -0.81,-1.37 -0.2,-0.78 0.09,-0.44 0.45,-1.06 0.12,-0.67 0.46,-0.94 1.18,-1.84 1.19,0.43 1.06,1.5 0.28,1.01 -0.08,1.08 0.09,1.56 0.27,2.04 0.07,1.47 -0.13,0.91 -0.45,1.71 -0.38,0.79 -0.5,0.74 -0.46,0.38 z m -203.74,-6.06 -0.34,0.08 -1.23,-1.42 0.26,-1.22 1.14,1.25 0.16,0.78 0.01,0.53 z m 320.04,4.93 -4.37,0.03 -2.38,-0.17 -0.96,-0.36 -0.83,-0.56 -0.94,-1.83 -0.6,-1.89 -0.03,-0.8 0.16,-0.73 0.22,-0.44 2.93,-0.63 2.4,0.79 2.07,0.92 2.66,0.16 0.81,0.35 0.31,0.26 0.21,0.47 0.3,2.18 0.03,1.16 -0.08,0.88 -1.91,0.21 z m -318.64,-4.73 1.01,0.25 0.75,-0.19 0.55,0.96 0.21,0.97 -0.07,0.33 -0.24,0.13 -1.58,-1.08 -0.59,-0.66 -0.2,-0.56 0.16,-0.15 z m 11.36,13.7 -0.45,1.95 -0.17,-0.18 -0.31,-0.93 -0.62,-0.45 -0.71,-1.03 0.01,-2.23 0.27,-1.02 -0.06,-1.42 0.7,-0.85 0.52,1.01 0.14,1.71 -0.13,0.84 0.52,0.87 0.24,0.22 0.13,0.7 -0.08,0.81 z m 405.35,8 -1.11,0.63 -0.59,-0.78 0.42,-0.22 0.61,-0.93 0.83,-0.82 0.35,-0.66 1.39,-0.3 0.47,0.04 0.18,0.23 -0.79,1.02 -1.76,1.79 z m -407.08,1.17 1.13,0.18 1.44,-0.03 -0.25,1.77 -0.55,1.13 -0.44,0.32 -0.19,-0.62 -0.85,-1.42 -0.29,-1.33 z m 223.83,16.32 0.89,0.27 0.68,-0.03 0.15,0.33 -0.71,1.09 -0.44,0.2 -0.79,-0.78 -0.59,-0.95 -0.17,-0.58 -0.05,-0.64 0.14,-0.11 0.89,1.2 z m -5.4,10.72 1.15,0.86 1.15,0.49 1.85,0.26 0.26,0.18 0,0.4 -0.27,0.63 -0.62,0.8 -0.44,0.02 -1.02,-0.56 -0.37,-0.29 -0.41,-0.64 -0.21,-0.06 -0.27,0.21 -0.07,0.28 0.12,0.35 -0.17,0.1 -1.24,-0.24 -0.19,-0.21 0.1,-0.69 0.86,-1.01 -0.76,-0.31 -0.24,-0.37 -1.12,0.63 -0.62,0.15 -0.98,-0.44 -0.1,-2.31 -0.12,-0.84 -0.45,-0.57 -0.27,-0.61 -0.43,-0.46 -0.89,-0.47 -0.72,-1.16 -0.15,-0.53 0.1,-0.4 0.44,-0.55 2.55,1.17 1.54,1.11 1.46,1.36 0.77,1 0.07,0.65 -0.19,0.65 -0.45,0.65 0.35,0.77 z m -8.5,4.82 -0.47,0.25 -0.5,-0.14 -0.42,-0.63 -0.35,-1.12 -0.56,-0.84 -1.26,-1.05 -0.22,-0.41 -0.36,-1.41 -0.07,-1.41 -0.27,-1.28 -0.01,-0.63 0.23,-0.95 1.06,-0.22 0.83,0.37 0.17,0.25 0.27,0.55 0.18,0.67 1,1.81 0.59,1.44 0.8,2.96 0,0.56 -0.21,0.59 -0.43,0.64 z m -2.2,6.76 0.31,0.26 0.38,-0.15 0.63,-1.06 1.42,-3.05 0.4,-0.29 0.6,0.05 2.1,1.96 0.77,1.09 0.42,1.52 0.44,0.59 1.66,0.78 1.59,0.26 2.08,0.79 0.75,0.59 1.66,2.88 0.19,0.18 1.89,1.17 2.89,2.61 0.73,0.39 2.82,0.86 1.01,0.64 0.98,0.97 1.08,1.77 1.27,2.77 1,4.41 0.08,0.87 -0.12,0.51 -0.36,0.55 -1.63,1.79 0.14,0.3 1.53,-0.11 3.41,-1.1 2.08,0.79 0.72,0.12 0.17,-0.04 0.75,-1.38 0.83,0.22 1.21,1.33 0.78,1.08 0.35,0.82 -0.09,0.46 -0.8,0.16 1.95,0.78 1.7,1.24 -0.37,0.81 -1.81,1.79 -1.86,1.56 -2.17,2.33 -0.54,0.36 -0.29,0.02 -1.2,-0.43 -1.72,-1.1 -5.3,-2.54 -1.64,-0.54 -2.08,-0.32 -0.3,-0.6 -0.5,-3.87 -0.94,-0.69 -3.21,-0.81 -0.93,-0.47 -0.04,-0.78 0.2,-1.34 -0.44,-0.66 -1.08,0.03 -1.06,0.28 -1.71,0.91 -0.8,0.84 -0.3,0.91 -0.19,1.95 -0.21,0.92 -0.6,1.2 -2.63,3.11 -1.07,0.93 -1.06,0.27 -0.42,0.3 -0.72,1.14 -1.06,2.79 -0.43,0.8 -0.7,0.81 -1.46,1.24 -1.49,0.99 -2.48,1.15 -1.38,0.39 -0.92,-0.38 -0.63,-2.62 -1.33,-7.76 -0.22,-0.53 -0.27,-0.33 -0.32,-0.13 -4.45,1 -2.46,-0.11 -2.43,1.75 -0.61,0.13 -1.23,-0.06 -0.89,-0.28 -0.23,-0.19 -0.15,-0.76 0.04,-0.8 0.31,-0.86 1.1,-2.34 0.89,-1.45 0.41,-0.45 4.16,-2.61 1.01,-0.86 0.51,-0.89 0,-0.91 -0.2,-1.17 -0.72,-2.86 -0.18,-2.62 0.01,-1.31 0.27,-2.02 1.04,-4.92 0.35,-2.41 0.66,-8.69 0.36,-2.51 0.52,-2.31 0.5,-1.39 1.32,-2.79 1.03,-1.12 1.29,-0.78 0.28,0.09 0.25,0.33 0.48,1.19 1.8,1.09 0.58,1.06 0.41,1.18 0.22,1.53 -0.22,0.66 -0.86,1 -0.15,0.42 0.02,0.34 1.65,1.57 1.22,3.82 z m 65.24,26.52 -0.65,0.94 -1.92,-0.33 -0.26,-0.29 -0.07,-0.34 0.31,-0.45 1.98,-0.43 0.84,-0.03 0.43,0.14 0.05,0.17 -0.71,0.62 z m 8.65,12.08 -0.95,0.2 -1.24,-0.45 -1.21,-0.87 -2.76,-2.78 2.07,-1.89 3.32,2.19 1,1.41 -0.23,2.19 z m -10.75,-1.53 0.76,0.86 0.79,-0.06 0.44,0.7 1.04,2.17 0.1,0.36 -0.05,0.7 -0.55,0.9 -0.57,0.47 -1.2,0.69 -1.35,0.3 -0.74,-0.49 -2.08,-2 -1.91,-2.35 -0.61,-1.32 0.26,-0.55 0.81,-0.38 1.63,-0.39 2.7,0.21 0.53,0.18 z m -36.97,10.25 0.36,0.55 0.11,0.83 -0.14,1.11 -0.23,1 -0.32,0.9 -0.79,1.52 -2.46,2.59 -0.92,1.41 -0.69,0.84 -4.01,3.72 -0.5,0.18 -0.52,-0.07 -1.1,-0.55 -1.12,-0.1 -2.89,1.49 -0.14,-0.25 -0.13,-1.61 -0.29,-0.89 -1.27,-1.91 -0.08,-0.45 0.02,-0.55 0.1,-0.43 1.44,-1.79 3.25,-6.57 0.78,-0.33 1.6,0.74 0.76,0.24 0.54,-0.04 2.32,-1.39 2.21,0.17 2.02,-0.81 0.95,-0.01 0.73,0.14 0.41,0.32 z m 104.56,7.93 -0.62,0.08 -1.21,-0.15 -1.3,-0.41 -0.71,-0.46 -0.64,-1 -0.12,-1.1 -1.21,-1.63 -1.35,-0.55 -0.75,-1.14 0.76,-0.08 1.09,0.25 1.61,0.49 1.44,0.65 2.08,1.43 0.68,1.33 0.68,0.97 0.2,0.74 -0.18,0.32 -0.45,0.26 z m -32.84,-1.35 -0.48,0.17 -1.79,-0.24 -2.21,-0.91 -1.14,-0.86 0.06,-0.26 0.5,-0.14 0.57,0.13 0.95,0.6 2.56,0.3 0.83,0.34 0.26,0.52 -0.11,0.35 z m 82.26,1.16 1.72,0.21 1.04,-0.07 0.45,0.31 0.42,0.94 -0.54,1.34 -0.61,0.51 -0.99,0.15 -1.61,-0.44 -0.57,-0.29 -0.5,-0.72 0.23,-0.52 0.8,-0.18 0.13,-0.21 -0.2,-0.4 0.01,-0.35 0.22,-0.28 z m -131.97,2.85 0.71,0.53 1.17,1.75 0.44,0.89 0.13,1.18 -0.31,1.58 -0.16,1.48 -0.43,1.11 -0.81,1.4 -0.71,1.63 -0.62,1.86 -0.51,1.23 -0.41,0.6 -0.44,0.31 -0.47,0.02 -0.72,-0.67 -0.97,-1.37 -0.79,-0.84 -1.01,-0.58 -0.54,-0.78 -0.1,-0.77 -0.03,-2.49 0.04,-1.24 0.13,-1.04 0.23,-0.83 0.5,-1.15 1.41,-2.5 0.85,-0.96 0.53,-0.22 1.39,0.18 0.56,-0.06 0.47,-0.29 0.47,0.04 z m 130.12,10.2 0.2,0.17 0.24,-0.2 0.18,0.17 0.12,0.54 0.21,0.37 0.52,0.48 0.18,0.35 -0.01,0.35 -0.44,0.53 -0.28,0.01 -2.13,-1.23 -0.58,-1.26 -0.04,-0.64 0.22,-0.58 0.33,-0.28 0.43,0.02 0.51,0.31 0.34,0.89 z m -251.13,0.66 -0.37,0.04 -0.82,-0.97 -0.18,-0.49 1.08,-0.31 0.74,0.86 -0.06,0.42 -0.39,0.45 z m 252.9,9 -0.22,0.22 -0.21,-0.05 -0.67,-1 -0.9,-0.4 -0.33,-0.39 -2.71,-2.06 -0.29,-0.91 -0.05,-0.73 0.9,-0.35 1.81,-0.33 1.57,0.01 1.48,0.43 0.3,0.46 0.78,0.84 -0.19,1.01 -0.05,1.27 -0.32,0.62 -0.5,0.47 -0.4,0.89 z m -122.8,11.79 -1.23,0.21 0,-0.26 0.51,-0.75 1.9,-0.66 1.42,-0.19 -0.33,0.64 -0.84,0.5 -1.43,0.51 z m 92.31,8.86 -0.81,0.14 -0.37,-0.38 -0.02,-1.1 0.27,-0.83 0.93,-1.72 0.83,-1.93 0.49,-0.47 0.98,0.32 0.57,0.56 0.6,0.93 0.26,0.71 -0.23,1.05 -0.7,0.94 -0.81,0.64 -1.99,1.14 z m 34.31,-2.28 -0.31,1.25 -1.04,-0.46 -1.61,-0.95 -0.64,-0.63 -0.22,-0.69 -0.02,-0.95 0.48,-0.16 1.22,-0.09 1.02,1.33 0.29,0.2 0.83,1.15 z m -140.36,10.69 -0.92,0.12 0.4,-1.06 0.35,-0.51 0.38,-0.33 0.76,-0.12 0.51,0.42 -0.46,0.77 -1.02,0.71 z m -1.98,2.61 -0.29,0.05 -0.07,-0.21 0.23,-0.73 0.38,-0.09 0.42,-0.81 0.38,0.28 -0.14,0.45 -0.52,0.68 -0.39,0.38 z m 99.73,10.24 -0.54,1.26 -0.72,-0.16 -0.27,0.27 -0.2,0.02 0.33,-1.19 0.04,-0.8 -0.17,-0.81 0.24,-0.41 0.97,-0.02 0.01,0.93 0.12,0.35 0.23,0.16 -0.04,0.4 z m -94.63,25.95 -0.14,0.13 -0.38,-0.12 -0.15,1.1 -0.15,0.1 -0.27,-0.67 0.2,-0.58 -0.03,-0.4 0.07,-0.29 0.39,-0.66 0.23,-0.15 0.14,0.06 0.12,0.83 -0.03,0.65 z m -1.35,12.22 -0.25,0.29 -0.44,-0.32 -0.02,-0.82 0.43,-0.63 0.34,0.03 0.3,0.33 -0.08,0.44 -0.28,0.68 z m 3.12,1.92 -0.32,0.21 -0.21,-0.02 0.24,-1.44 -0.28,-0.51 -0.02,-0.26 0.12,-0.24 0.16,-0.05 0.37,0.45 0.18,0.47 0.08,0.46 -0.02,0.45 -0.11,0.31 -0.19,0.17 z m 5.23,6.33 -0.74,1.63 -0.59,1.56 -0.82,2.92 -0.47,0.1 -0.41,-0.7 1.18,-3.42 0.05,-0.38 -0.05,-0.33 -0.36,-0.51 -0.36,0.58 -1.66,3.86 -0.43,0.62 -0.36,0.34 -0.28,0.06 -0.71,-0.08 -1.42,1.1 2.4,-4.58 0.02,-0.35 -0.45,-0.21 -0.18,0.12 -1.94,2.89 -1.11,1.11 -0.74,-0.34 -0.19,-0.3 0.07,-0.34 1.89,-2.91 1.74,-2.09 0.73,-1.32 0.29,-1.25 0.13,-0.91 -0.01,-1.01 0.09,-0.28 0.1,0.05 0.11,0.38 0.03,1.06 -0.4,2.18 -0.32,1.07 -0.38,0.88 0.16,0.19 0.7,-0.5 0.59,-1.05 0.48,-1.61 0.3,-1.4 0.29,-2.23 0.1,0.08 0.14,0.45 0.32,0.31 0.5,0.18 0.28,0.29 0.21,0.75 0.2,0.33 0.74,0.28 0.29,0.24 0.2,0.81 -0.02,0.43 0.1,0.27 0.22,0.12 -0.25,0.86 z m -9.35,0.95 -0.46,0.12 -0.54,-0.23 0.28,-1.18 0.47,-0.49 1.17,-0.49 0.2,-0.3 0.37,-0.15 0.55,0 0.61,-0.44 0.67,-0.89 0.23,-0.12 -0.47,1.29 -0.5,0.96 -2.58,1.92 z m 10.32,0.99 -0.46,0.22 -0.33,-0.02 0.06,-0.54 0.45,-1.06 0.25,-0.93 0.06,-0.8 0.2,-0.7 0.34,-0.6 0.33,-0.3 0.5,0.01 0.1,1.96 -0.14,0.92 -0.33,0.77 -0.46,0.62 -0.57,0.45 z m -9.96,44.03 -0.01,0.45 -0.58,-0.09 -0.32,-0.25 -0.26,-0.4 -0.05,-0.3 0.22,-0.3 0.67,0.18 0.33,0.71 z m -7.12,8.28 -0.63,0.2 -1.86,-0.39 -0.78,-0.28 -2.29,-1.07 -4.36,-1.57 -1.49,-0.78 -0.31,-0.59 0.79,-1.23 0.45,-0.5 0.49,-0.31 4.59,-0.57 1.79,0.28 2.11,2.51 1.21,1.69 0.49,1.36 0.01,0.65 -0.21,0.6 z m 12.08,11.64 -0.37,0.1 -0.85,-0.12 -0.68,-0.36 -0.42,-0.46 2.77,-1.28 0.57,0.17 0.01,0.23 -0.42,0.69 -0.11,0.46 -0.2,0.35 -0.3,0.22 z\"\n           title=\"Nunavut\"\n           id=\"CA-NU\" class=\"carona-normal\" (mouseover)=\"mapMouseOver('CA-NU')\" [matTooltip]=\"CANU\"/>\n        <path\n           d=\"m 551.41,911.26051 0,2.5 0,3.41 0,3.39 0,3.37 0,3.36 0,3.34 0,3.32 0,3.31 0,3.29 0,3.28 0,3.26 0,3.24 0,3.23 0,3.76 0,0.07 -0.41,0.9 0.11,1 0.61,1.17 0.33,1.2 0.06,1.23 0.63,1.47 1.79,2.55 1.35,2.88 1,1.56 1.09,1.21 2.87,1.12 6.97,1.55 2.78,1.58 0.01,0.01 0.71,1.11 0.09,0.19 0.14,0.42 0.3,0.33 1.19,0.91 0.63,0.32 0.49,0.12 0.32,-0.04 0.14,-0.24 0.11,-0.72 0.2,-0.19 0.17,0.04 0.43,0.1 0.63,1.05 0.78,1.99 1.02,1.28 1.25,0.58 1.29,0.16 1.32,-0.27 1.09,0.27 0.87,0.81 2.49,-0.39 4.11,-1.59 2.72,-0.85 1.32,-0.12 1.25,0.25 1.62,0.82 -0.17,0.75 -0.34,1.47 -0.22,0.96 0.58,0.62 0.65,0.69 -0.16,0.1 -3.14,2.56 -0.48,0.06 -0.84,-0.06 -1.25,0.43 -1.64,0.89 -1.99,1.6 -3.5,3.46 -0.05,0.08 -0.06,-0.05 -0.24,0.06 -0.99,0.99 -1.04,0.55 -2.54,0.9 -0.6,0.4 -0.74,0.23 -0.88,0.06 -0.89,0.25999 -0.89,0.45 -1.83,1.34 -0.45,0.04 -0.19,-0.25 0.06,-0.19 0.31,-0.33 1.12,-0.68 -0.15,-0.13 -0.34,0.14 -0.53,0.42 -0.21,-0.04 0.11,-0.5 -0.34,-0.1 -0.8,0.3 -0.5,0.07 -0.2,-0.17 -0.23,0 -0.26,0.17 -0.41,-0.03 -0.65,0.22 -1.34,0.46 -0.33,0.37 -0.01,0.12 1.25,-0.58 0.58,-0.19 0.43,-0.09 0.17,0.13 -0.16,0.29 0,0.18 0.32,0.08 0.19,-0.08 0.02,-0.08 -0.16,-0.08 0,-0.12 0.17,-0.15 1.4,-0.43 0.29,0.31 -0.3,0.85 0.13,0.41 0.56,-0.03 0.64,-0.22 0.71,-0.41 0.24,-0.01 -0.23,0.4 -0.37,0.37 -0.84,0.64 -0.18,0.44 0.01,0.11 0.26,-0.17 0.92,-0.1 0.36,0 -0.08,0.27 -0.49,0.16 -1.08,0.58 -0.87,0.21 -0.51,-0.12 -0.1,-0.29 0.31,-0.47 -0.04,-0.13 -0.69,0.32 -0.2,-0.01 -0.23,-0.29 0.04,-0.07 0.31,0.01 0.15,-0.15 -0.59,-0.09 -0.86,0.22 -0.74,-0.11 -0.46,-0.35 -0.12,-0.21 0.21,-0.08 -0.05,-0.13 -0.31,-0.17 -0.88,-0.08 -0.24,0.14 -0.16,0.3 -0.92,-0.02 -0.46,0.21 -1.07,0.19 -1.67,0.17 -1.33,0.26 -0.99,0.36 -0.73,0.13 -0.48,-0.09 -0.79,0.12 -1.11,0.32 -1.75,0.26 -0.65,0.25 -0.94,0.68 -1.23,1.11 -0.84,0.55 -0.45,-0.02 -0.31,0.14 -0.17,0.3 -0.63,0.42 -0.24,0.33 -0.12,0.47 -0.42,0.74 -1.06,1.64 0.01,0.23 0.41,0.59 0.8,0.22 0.99,0.31 1.13,0.01 0.57,0.13 0.41,-0.12 0.7,-0.43 1.36,-0.5 0.02,0.06 -0.06,2.11 -0.06,0.16 0.27,0.36 0.08,0.24 -0.05,0.28 0.26,0.38 0.57,0.48 0.22,0.34 -0.13,0.2 -1.08,0.55 -0.58,0.06 -0.48,-0.18 -0.79,-0.09 -1.09,0 -1.86,0.32 -0.61,0.04 -0.33,-0.13 -0.43,0.04 -1.58,0.44 -1.58,0.24 -1.08,0.34 -0.59,0.44 -0.36,0.38 -0.35,0.3 -0.28,0.09 -0.5,0.76 0.05,0.11 0.7,-0.04 0.56,0.22 1.79,0.22 0.38,0.21 -0.28,0.09 -2.71,-0.38 -0.68,0.04 -1.29,-0.27 -1.89,-0.57 -1.9,-0.23 -1.91,0.11 -1.36,0.29 -0.81,0.47 -2.11,1.75 -0.71,0.95 -0.29,0.88 -0.23,0.45 -0.18,0.02 0,-0.2 0.19,-0.42 -0.08,-0.08 -0.49,0.43 -0.08,0.13 -0.95,0.14 -1.04,0.42 -1.36,0.78 -0.9,0.66 -0.45,0.55 -0.25,0.64 -0.05,0.73 -0.14,0.14 -0.5,-0.81 -0.33,-0.3 -0.37,-0.14 -0.4,0.02 -1.29,0.47 -0.92,-0.11 -1.12,-0.53 -0.42,-0.25 -0.08,-0.59 0.11,-1.15 0.25,-0.73 -0.1,-0.05 0.13,-0.25 0.62,-0.38 1.22,-0.65 1.11,-1.31 0.89,-0.78 0.89,-0.81 0.51,-1.4 0.64,-3.39 0.94,-0.32 1.17,-0.51 0.83,-0.58 0.49,-0.65 0.53,-0.46 0.56,-0.27 0.57,-0.42 0.57,-0.57 0.4,-0.79 0.24,-1.02 0.07,-1.03 -0.1,-1.04 -0.02,-4.2 -0.12,-0.98 0.21,-0.87 0.55,-0.77 0.34,-0.74999 0.13,-0.73 0.27,-0.61 0.41,-0.49 0.4,-0.32 0.39,-0.15 0.26,-0.3 0.14,-0.46 0.31,-0.57 0.49,-0.68 0.18,-0.59 -0.03,-0.91 0.02,-0.93 -0.2,-0.53 -0.37,-0.48 -0.15,-0.52 0.03,-0.84 -0.2,-0.08 -0.34,-0.04 -0.32,-0.35 -0.43,-0.84 -0.38,-0.55 -0.32,-0.26 -0.12,-0.26 -0.35,-0.29 -0.49,-0.17 -0.21,-0.26 0.08,-0.35 0.91,-0.14 1.75,0.08 0.93,0.09 0.1,0.09 -0.28,0.67 0.03,0.41 0.28,0.41 0.16,0.54 0.04,0.67 0.47,0.25 0.13,0.08 0.12,0.36 0.38,0.08 0.12,0.2 -0.14,0.31 0.07,0.13 0.53,0.05 0.38,-0.54 0.18,-0.13 0.35,-0.03 0.06,0.14 -0.24,0.31 -0.12,0.35 0,0.39 -0.27,0.42 -0.82,0.76 -0.02,0.16 0.18,0.05 0.79,-0.46 0.52,-0.09 0.39,0.15 0.22,0.2 0.04,0.25 -0.09,0.62 -0.22,0.99 0.14,0.19 0.5,-0.61 0.58,-0.43 1.07,-0.34 0.19,0.07 0.51,1.04 1.19,0.76 2.1,0.86 1.27,0.25 0.43,-0.35 0.26,-0.68 0.09,-1.01 -0.21,-0.72 -0.52,-0.42 -0.26,-0.41 0,-0.39 0.39,-0.34 0.61,-0.28 0.6,-0.09 0.08,0.11 -0.13,0.39 0.09,0.13 0.3,0.04 0.13,0.14 0.44,0.38 0.98,0.09 0.35,-0.1 -0.27,-0.28 -0.04,-0.38 0.19,-0.47 -0.03,-0.21 -0.33,0.15 0,0.39 -0.15,0.21 -0.2,-0.05 -0.12,-0.44 -0.14,-0.39 -0.25,-0.65 -0.66,-0.25 -0.24,-0.23 -0.03,-0.34 -0.13,-0.2 -0.23,-0.06 -0.45,-0.63 -0.58,-0.47 0.02,-0.21 0.54,-0.12 0.14,-0.22 -0.08,-0.29 -0.3,-0.36 -0.23,-0.09 -0.15,0.18 -0.14,-0.05 -0.12,-0.28 0.09,-0.46 0.55,-0.53 0.08,-0.53 -0.14,-0.41 -0.31,-0.24 -0.48,-0.07 -0.28,0.03 -0.08,0.13 0.16,0.48 -0.09,0.06 -0.84,-0.21 -0.29,-0.29 -0.42,-0.21 -0.32,-0.75 -0.06,-0.54 0.03,-0.93 -0.23,-0.59 -0.14,-0.07 0.02,0.35 -0.15,0.17 -0.37,0.09 -0.23,-0.16 -0.08,-0.42 -0.23,-0.35 -0.42,-0.41 -0.32,-0.58 -0.11,-0.26 -0.02,-0.25 -0.12,-0.3 -0.36,-0.33 -0.15,-0.55 -0.16,-0.24 -0.49,-0.54 -0.17,-0.3 -0.11,-0.11 -0.65,0 -0.69,-0.01 -1.16,0.13 -0.57,-0.17 0.02,-0.47 -0.04,-0.26 -0.11,-0.05 -0.16,0.13 -0.05,0.2 -0.36,0.22 -0.6,0 -1.31,-0.26 -0.47,0.02 -0.85,0.34 -0.27,-0.15 0.29,-0.24 -0.02,-0.2 -0.24,-0.06 -0.05,-0.11 -0.1,-0.19 0.88,-0.45 -0.03,-0.2 -0.63,-0.38 -0.28,0.05 -0.14,0.29 -0.24,0.18 -0.34,0.07 -0.21,0.2 -0.13,0 0,-0.17 -0.03,-0.42 -0.42,-0.13 -1.75,-0.18 -0.93,-0.04 -0.72,-0.03 -1.09,-0.37 -0.29,-0.39 -2.22,0.21 -0.36,0.06 -0.23,-0.04 -0.5,-0.4 -1.58,0.24 -1.17,0.09 -3.89,-0.73 -1.01,-0.29 -0.19,-0.22 -0.61,-0.16 -1.63,-0.16 -0.18,-0.06 -0.17,-0.35 -0.47,-0.12 -0.89,-0.02 -0.52,-0.22 -0.15,-0.42 0.02,-0.48 0.2,-0.55 -0.03,-0.45 -0.28,-0.42 -0.42,-0.3 -0.63,0.08 -0.97,0.33 -0.79,0.12 -0.24,0.24 -0.15,0.19 -0.22,0.07 -0.61,-0.78 0,-0.43 0.19,-0.3 0.73,-0.96 0.25,-0.64 -0.23,-0.31 -0.22,0.04 -0.2,0.4 -0.16,0.2 -0.11,0 -0.19,-0.42 0.07,-0.99 0.23,-0.37 0.39,-0.18 0.69,0.05 0.23,-0.13 0.13,-0.35 -0.16,-0.34 -0.45,-0.33 -0.48,-0.17 -0.51,-0.02 -0.34,0.11 -0.16,0.25 -0.22,-0.05 -0.28,-0.35 -0.85,-0.42 -0.22,-0.3 0.03,-0.43 0.53,-1.09 -0.07,-0.29 0.28,-0.65 0.63,-1 0.21,-0.7 -0.2,-0.4 -0.22,-0.22 -0.24,-0.05 -0.22,-0.26 -0.2,-0.48 -0.5,-0.46 -0.8,-0.45 -0.68,-0.59 -0.55,-0.73 -0.15,-0.58 0.25,-0.44 0.1,-0.35 -0.06,-0.26 0.18,-0.38 0.35,-0.62 0.02,-0.47 0.04,-0.36 0.43,-0.55 0.18,-0.42 -0.07,-0.29 -0.98,-0.14 -1.88,0.02 -1.51,0.12 -1.14,0.22 -1.3,-0.09 -1.46,-0.39 -1.22,-0.79 -0.98,-1.2 -0.73,-1.23 -0.49,-1.26 -0.2,-1.09 -0.09,-0.27 -0.22,-0.23 -0.2,-0.64 -0.18,-1.05 -0.23,-0.67 -0.28,-0.29 -0.1,-0.24 -0.41,-0.69 -0.17,-0.36 -0.05,-0.23 -0.33,-0.36 -0.24,-0.09 -1.09,0.16 -0.36,-0.33 -0.19,-0.23 -0.45,-0.18 -0.53,0.1 -0.61,0.38 -0.61,0 -1.08,-0.22 -0.68,0.13 -1.25,0.04 -0.79,-0.32 -0.86,-0.48 -0.51,-0.1 -0.48,0.05 -0.31,-0.13 -0.14,-0.31 -0.21,-0.09 -0.84,-0.29 -0.68,-0.28 -1.84,-0.53 -0.51,-0.54 -0.42,-0.04 -0.52,0.04 -0.29,0.22 -0.36,0.06 -0.42,-0.11 -0.14,0.16 0.13,0.43 0.02,0.34 0.2,0.68 0.69,0.63 0.34,0.61 0,0.58 -0.26,0.68 -0.85,1.16 -0.13,0.01 -0.69,0.15 -0.39,0.3 -0.28,0.07 -0.17,-0.16 -0.23,0.12 -0.29,0.4 -0.12,0.33 0.04,0.25 -0.15,0.28 -0.34,0.32 -0.18,-0.05 -0.09,-0.37 -0.14,-0.25 0.16,-0.48 1.55,-1.73 0.54,-0.72 0.1,-0.4 -0.06,-0.5 -0.21,-0.61 -0.38,-0.33 -0.56,-0.04 -0.4,0.2 -0.29,0.64 -0.06,0.44 -0.09,0.94 0.02,0.35 -0.14,0.25 -0.33,0.13 -0.21,0.42 -0.09,0.71 -0.17,0.4 -0.26,0.09 -0.2,0.46 -0.15,0.83 -0.11,0.41 -0.43,0.21 -0.95,0.42 -0.4,0.03 0.15,-0.37 0.17,-0.21 0.18,-0.05 0.52,-1.68 0.49,-0.89 -0.1,-0.14 -2.8,1.15 -1.02,0.63 -0.22,0.45 -0.04,0.47 0.14,0.5 -0.07,0.46 -0.28,0.42 -0.4,1.01 -0.17,0.61 -0.27,0.51 -0.83,0.3 -0.1,0.09 -0.88,1.06 -0.27,0.15 -1.77,-0.18 -1.13,0.26 -0.83,-0.26 -0.42,-0.84 -0.46,-0.54 -2.05,0.25 -2.57,-0.18 -1.23,0.11 -0.47,-0.35 -0.39,-0.93 -0.68,-0.12 -1.14,0.21 -1.59,1.19 -1.49,0.62 -1.17,0 -1.16,-0.62 -1.89,-1.25 -1.32,-1.4 -1.49,-0.49 -1.14,0.13 -0.45,0.7 -0.59,0 -0.42,-1.2 -0.36,-0.93 -0.74,-0.4 -1.34,-0.9 -0.93,-0.49 -1.43,-0.59 -0.5,-0.11 -0.93,-0.07 -0.92,-0.05 -1.08,0.17 0.01,-0.01 -0.04,0.01 0.03,-0.01 -0.77,0.75 -0.9,0.33 -1.29,0.15 -0.86,-0.32 -0.43,-0.79 -1.83,-0.7 -3.22,-0.61 -1.85,-0.52 -0.49,-0.43 -0.27,-0.46 -0.07,-0.74 0,-0.01 -0.81,-1.9 -0.35,-1.58 -0.16,-1.91 0.05,-0.63 -0.18,-0.2 -0.58,-0.42 -1.94,-0.28 -0.05,-5.97 0.01,-6 0.01,-6.06 0.01,-6.11 0.01,-6.17 0.01,-6.23 0.01,-6.29 0.01,-6.35 3.44,-3.43 3.44,-3.45 3.44,-3.47 3.44,-3.49 2.29,-2.78 2.29,-2.79 2.29,-2.8 2.29,-2.81 2.74,-3.23 2.74,-3.24 2.74,-3.26 2.74,-3.28 3.13,-3.54 3.13,-3.56 3.13,-3.58 3.13,-3.61 2.32,-2.57 2.32,-2.58 2.32,-2.59 2.3,-2.55 1.09,0.61 1.31,1.46 2.09,1.89 1.58,1.19 1.76,1.11 1.77,2.03 2.84,4.59 0.7,0.56 1.75,0.75 3.29,0.96 4.86,2.25 2.14,0.88 1.38,0.35 1.38,0.62 1.38,0.88 1.05,0.96 0.72,1.04 0.64,0.68 1.12,0.75 0.58,0.54 0.05,0.81 -1.34,3.17 -0.03,0.25 1.36,-2.27 0.76,-0.66 0.61,-0.31 1.26,0.04 1.92,0.38 1.68,0 1.45,-0.37 1.23,-0.17 1.02,0.04 0.74,-0.11 0.46,-0.26 0.55,-0.01 2.18,0.79 0.88,0.04 3.18,0.74 2.04,-0.26 0.35,0.14 0.71,0.96 0.6,0.08 1.01,-0.15 0.99,0.26 1.65,1.27 0.76,1.09 0.73,2.21 0.06,0.66 -1.36,5.1 -0.43,1.96 -0.05,1.71 0.27,0.98 1.17,1.64 0.21,0.43 0.69,2.42 0.19,1.03 -0.08,1.18 -0.36,1.94 0.09,1.48 0.31,2.23 -0.12,1.5 -0.54,0.79 -0.36,0.77 -0.28,1.4 0,0.53 0.28,1.04 0.52,0.58 0.85,0.66 0.79,0.97 1.44,2.37 1.05,1.29 1.28,1.92 0.25,0.96 -0.36,0.63 -0.45,0.44 -1.03,0.59 -0.46,0.43 0.12,0.1 1.49,-0.32 0.88,0.03 0.75,0.47 0.61,0.91 1.01,0.77 1.42,0.64 1.42,1.06 2.36,2.52 0.43,0.58 0.63,1.31 0.83,2.05 0.43,1.33 0.04,0.63 -0.47,0.63 -1.59,1.14 -1.6,1.99 0.5,-0.1 1.06,-0.84 1.78,-1.66 0.99,-0.32 0.92,0.19 1.45,0.48 1.28,0.68 1.11,0.88 1.66,2.36 1.37,1.21 z m -0.01,-0.67 -1.04,-1.18 -0.7,-0.98 -0.15,-0.47 -0.05,-0.51 0.13,-0.93 0.31,-1.36 0.41,-0.96 0.51,-0.56 0.34,-0.59 0.17,-0.63 0.06,-0.1 0.01,4.57 0,3.7 z m -76.29,31.17 -0.23,0.01 -0.17,-0.32 -0.1,-0.91 0.27,-0.39 0.54,-0.28 0.73,-0.1 0.91,0.08 0.43,0.24 -0.05,0.41 -0.11,0.21 -0.27,0.14 -0.04,0.24 -0.38,0.13 -0.73,0.02 -0.51,0.18 -0.29,0.34 z m 3.67,-0.53 -0.62,0.09 -0.36,-0.06 -0.12,-0.13 0.12,-0.19 -0.01,-0.21 -0.19,-0.41 0.04,-0.14 0.15,-0.08 0.26,-0.01 0.31,0.27 0.37,0.56 0.05,0.31 z m 17.53,13.74 -1.73,0.19 -0.75,-0.19 -0.08,-0.18 0.18,-0.25 0.43,-0.33 0.5,-0.18 0.56,-0.03 1.11,0.33 0.4,0.33 -0.09,0.2 -0.53,0.11 z m 16.65,20.51 -0.18,0.24 -0.25,-0.13 -0.17,0.12 -0.1,0.37 -0.18,0.28 -0.21,0.07 -0.43,-0.23 -0.54,-0.87 -0.35,-0.77 -0.17,-0.66 0.32,-0.29 0.81,0.09 0.71,0.24 0.62,0.4 0.25,0.51 -0.13,0.63 z m 4.27,3.69 -0.49,0.15 -0.6,-0.2 -0.24,-0.29 0.12,-0.38 0.26,-0.35 0.4,-0.32 0.42,-0.06 0.44,0.21 0.23,0.2 0.02,0.19 -0.56,0.85 z m 4.58,-1.24 -0.1,0.52 0.08,0.34 0.26,0.16 0.17,0.22 0.08,0.29 0.25,0.07 0.41,-0.13 0.28,0.04 0.14,0.22 0.16,0.05 0.17,-0.11 0.22,0.13 0.26,0.38 0.21,0.02 0.15,-0.35 -0.05,-0.2 -0.36,-0.14 0.03,-0.13 -0.22,-0.33 0.11,-0.24 0.37,-0.31 0.26,-0.07 0.16,0.18 0.16,-0.05 0.17,-0.27 0.39,-0.21 0.62,-0.14 0.34,0.11 0.06,0.36 0.18,0.12 0.29,-0.13 0.28,0.28 0.26,0.68 0.29,0.02 0.32,-0.64 0.46,-0.46 0.6,-0.28 0.43,-0.03 0.26,0.22 0.12,0.3 -0.02,0.37 0.16,0.23 0.34,0.09 0.11,0.3 -0.12,0.51 0.03,0.44 0.31,0.58 0.07,0.04 0.29,-1.04 0.25,-0.54 0.33,-0.39 0.21,-0.04 0.09,0.32 -0.07,0.35 -0.23,0.38 0.12,0.17 0.75,0 0.08,0.12 -0.83,1.73 -0.62,0.84 -0.66,0.57 -0.48,0.14 -0.3,-0.28 -0.29,-0.11 -0.28,0.06 0,-0.11 0.49,-0.43 0.18,0.01 0.34,-0.1 0.94,-0.95 0,-0.16 -0.55,0.08 -1.86,1.61 -0.23,0.06 -0.19,-0.11 -0.14,-0.27 -1.05,-0.47 -0.43,-0.42 -0.6,-0.3 -0.77,-0.18 -0.9,-0.38 -1.04,-0.57 -0.98,-0.31 -1.8,-0.18 -0.23,-0.29 -1.77,-0.54 -0.55,-0.35 0.05,-0.39 0.14,-0.29 0.22,-0.18 0.23,0.07 0.24,0.33 0.24,0.04 0.25,-0.25 0.3,-0.04 0.36,0.18 0.27,-0.02 0.19,-0.22 0.36,-0.19 0.53,-0.16 0.25,0.15 z m 9.26,6.54 -0.24,0.03 -0.16,-0.12 -0.04,-0.15 0.08,-0.17 0.84,-0.42 0.2,0.05 -0.13,0.33 -0.55,0.45 z m 14.47,8.32 0.01,0.16 -0.38,-0.33 -0.15,-0.26 -0.03,-0.27 0.18,-0.09 0.4,0.09 0.12,0.21 -0.15,0.49 z m 34.15,8.16999 -0.52,0.43 -0.42,-0.04 -0.14,-0.04 0.09,-0.17 -0.02,-0.14 -0.14,-0.11 0.08,-0.21 0.29,-0.3 0.19,-0.3 0.91,-0.15999 0.44,-0.09 0.47,-0.09 -0.09,0.26999 -0.83,0.31 -0.21,0.4 -0.1,0.24 z m -2.89,0.23 -0.39,0.13 -0.5,-0.05 -0.2,-0.12 0.09,-0.19 0.35,-0.21 1.06,-0.34 0.03,0.22 -0.44,0.56 z m -53.35,29.18 -0.42,0.13 -0.01,-0.25 0.1,-0.59 0.18,-0.26 0.1,0.14 0.14,0.53 -0.09,0.3 z\"\n           title=\"Ontario\"\n           id=\"CA-ON\" class=\"carona-normal\" (mouseover)=\"mapMouseOver('CA-ON')\" [matTooltip]=\"CAON\"/>\n        <path\n           d=\"m 692.23,971.57051 0.24,0.18 0.42,-0.33 0.5,-1.06 1.32,0.28 0.7,0.48 0.39,-0.11 0.4,0.05 0.74,0.62 1.4,0.5 1.48,-0.08 2.26,-0.29 0.27,-0.12 2.32,-0.24 2.33,-0.12 0.8,0.28 0.3,0.26 0.15,0.31 -1.33,0.86 -1.32,1 -1.85,0.97 -0.23,0.48 0.11,0.88 -0.04,0.89 0.37,0.07 0.22,0.3 -0.48,0.29 -1.9,0.13 -0.55,-0.08 -0.66,-0.36 -0.22,-0.86 -0.82,0.13 -0.25,-0.11 1.15,-0.73 -0.53,-0.93 -0.55,0.07 -0.37,-0.44 0.03,-0.59 0.51,-0.29 0.15,-0.31 -0.7,0.27 -0.54,0.55 -0.7,0.21 -0.68,0.47 1.06,0.15 -0.54,0.37 -0.57,0.08 -2.62,-0.72 -0.65,-0.27 -0.81,-0.76 -0.62,-1.01 0.34,-0.04 0.11,-0.18 -0.07,-0.18 -0.91,-0.13 -1.43,0.04 -0.82,-0.27 0.04,-1.77 -0.26,-0.49 -0.9,-0.41 -1.36,-0.12 -0.14,-0.67 0.44,-1.01 0.67,-0.87 0.5,-0.85 0.6,-0.7 1.46,-1.4 -0.03,1.04 0.14,0.9 -0.95,1.8 1.66,1.78 0.21,0.39 0.14,0.48 -0.11,0.44 -0.27,0.38 0.65,0.2 z\"\n           title=\"Prince Edward Island\"\n           id=\"CA-PE\" class=\"carona-normal\" (mouseover)=\"mapMouseOver('CA-PE')\" [matTooltip]=\"CAPE\"/>\n        <path\n           d=\"m 685.03,761.69051 -1.81,0.7 -0.28,0.3 0,0.23 0.52,0.76 1.3,0.63 0.2,0.36 -0.25,0.56 -0.54,0.34 -0.64,0.49 -0.88,0.25 -0.06,0.26 0.17,0.48 0.31,0.41 1.36,0.77 0.16,0.18 0.03,0.2 -0.04,0.29 -0.86,0.74 -0.26,0.86 -0.24,4.88 0.38,0.92 0.55,0.39 2.42,-1.09 0.53,0.23 0.06,0.7 -0.42,0.33 -0.69,1.02 -0.14,0.75 -0.01,2.28 0.13,1.04 0.25,0.87 0.32,0.44 0.98,0.82 0.07,0.41 -0.3,0.31 -0.32,0.06 -3.38,-0.87 -0.28,0.15 -0.28,0.35 -0.16,0.63 0.02,0.6 0.36,0.34 1.71,0.31 2.9,0.79 0.52,1.39 0.39,0.29 0.33,-0.03 1.48,-0.7 2.36,-0.88 0.55,0.14 0.67,0.41 0.51,0.54 0.28,0.49 0.07,0.3 -0.08,0.17 -0.42,0.2 -3.65,0.82 -0.68,0.3 -0.35,0.42 -0.13,0.35 -0.01,0.37 0.21,0.76 0.21,0.17 1.4,-0.18 0.37,0.86 0.03,0.39 -0.1,0.39 -1.57,1.04 -0.67,0.68 -2.45,3.23 -0.21,0.42 -0.05,0.39 0.12,0.38 1.44,1.38 0.83,2.4 0.49,1.06 0.3,0.46 0.53,-0.3 0.22,0.02 0.36,0.31 0.44,0.88 0.27,0.3 0.43,0.12 0.7,0.17 0.88,-0.51 0.15,0.05 0.03,0.51 -0.15,0.39 -1.16,1.48 -0.13,0.47 -0.03,0.66 0.17,1.95 -0.52,1.28 0.06,0.66 0.3,0.63 0.02,0.22 -0.3,1.61 -0.39,0.77 -0.36,0.99 -0.24,2.19 -0.42,0.42 -0.48,0.7 -0.24,0.55 -0.63,0.8 -0.13,0.5 0.03,0.27 1.41,2.67 0.26,0.84 -0.26,0.59 -0.88,0.15 -0.75,0.57 0.16,0.97 -0.03,0.56 0.06,0.17 0.28,0.22 1.53,0.74 0.12,0.27 -0.83,1.09 -0.11,0.76 0.32,0.04 0.74,0.1 0.45,0.4 2.31,0.6 0.18,0.53 -0.25,0.26 -0.67,0.45 -0.33,0.39 -0.09,0.64 0.07,0.36 1.58,2.47 0.98,1.74 0.46,0.5 0.53,0.36 1.35,0.45 0.03,0.47 -0.08,0.69 0.07,0.57 0.35,1.02 -0.44,0.51 -2.4,1.53 -0.73,0.66 -0.21,0.43 -0.15,0.85 0.64,1.55 0.04,0.4 -0.14,0.69 -0.7,2.2 -0.79,2.04 -0.37,0.45 -0.47,0.05 -1.42,-0.34 -3.86,-1.43 -4.25,-0.12 -2.75,0.23 -4.97,-0.4 -0.59,-0.37 -0.5,-0.56 -0.64,-1.45 -0.14,-0.14 -1.79,-0.54 -0.66,-0.41 -0.75,-0.63 -3.39,-3.87 -1.04,-0.99 -0.36,-0.15 -0.23,0.27 0.02,0.27 0.65,1.27 0.05,0.32 -0.25,0.99 0.49,2.05 -0.16,0.78 0.48,1.58 0.05,0.75 -0.66,0.78 -1.28,-0.51 -2.69,-2.43 -1.21,-1.97 -0.33,-0.17 -0.62,0.04 -0.16,0.2 -0.1,0.35 0.19,0.82 0.39,1.04 0.74,1.42 0.77,1.96 0.05,0.27 0.47,0.45 -0.03,0.56 -0.77,0.48 -0.44,1.03 -0.26,0.02 -1.99,-0.85 -0.38,0.11 -0.21,0.2 -0.17,0.71 0.09,0.85 0.25,0.92 0.6,1.69 0.07,0.44 -0.03,0.25 -1.52,1.45 -0.45,0.63 -0.27,0.6 0.04,0.41 2.03,2.95 0.53,0.65 0.14,1 -0.19,1.44 0.03,0.33 0.15,0.18 2.62,0.88 0.33,0.61 0.47,1.28 0.45,0.37 0.41,0.14 0.32,0.43 0.06,0.39 -0.25,2.18 -0.05,1.64 -0.52,1.38 -0.23,0.9 -0.14,1.29 0.01,1.15 0.35,0.51 0.7,0.33 0.48,0.07 0.37,-0.07 0.37,0.18 1.13,-0.6 0.15,-0.32 0.36,-2.39 0.14,-0.32 0.84,-0.4 0.28,-0.69 0.2,-0.2 0.36,0.12 0.34,0.28 0.55,0.86 0.25,0.55 -0.09,0.53 -0.28,0.31 -0.14,0.5 -0.09,0.96 -0.45,0.78 -0.08,0.41 0.29,3.57 -0.07,0.29 -0.55,0.83 0.01,0.68 0.21,0.96 0.29,0.66 0.26,0.28 0.3,0.14 0.17,-0.49 0.28,-1.55 0.15,-0.09 1.17,1.04 0.46,0.3 0.55,1.46 0.51,0.41 0.86,0.39 0.5,0.03 0.19,-0.16 0.23,-0.59 0.81,0.15 0.53,0.3 0.38,0 0.34,-0.3 0.69,-1.49 0.2,-0.1 0.48,0 1.16,0.26 1.17,0.45 0.91,0.6 0.93,0.85 1.5,2.17 0.96,0.82 0.28,0.34 -0.11,0.5 -0.48,0.4 -0.09,0.25 0.04,0.36 0.89,1.73 0.82,-0.12 1.94,-1.73 0.01,-0.58 -0.33,-0.61 -0.08,-0.44 0.12,-1.27 0.45,-2.23 0.1,-0.24 0.9,-0.71 0.26,-0.56 0.25,-2.8 -0.72,-2.58 -0.03,-1.06 0.08,-2.8 0.35,-0.58 1.18,-0.36 0.31,-0.25 0.5,-2.53 0.11,-0.17 0.95,-0.41 0.69,-0.07 0.46,0.13 0.59,0.98 0.46,1.05 0.05,0.37 -0.16,1.69 0.03,0.43 0.12,0.34 1.26,1.26 -0.12,0.28 -0.89,0.31 -2.58,0.55 -0.79,0.32 -0.51,0.35 -0.56,0.59 -0.38,0.59 -0.06,0.28 0.04,0.12 0.99,0.42 0.08,0.16 0.07,0.54 0.46,0.53 1.06,0.69 0.73,2.33 0.14,0.64 0.03,0.5 -0.36,0.17 -0.73,-0.04 -0.06,0.1 0.08,0.34 0.24,0.14 1.35,0.14 3.64,0 3.65,0 3.64,0 3.65,0 3.64,0 3.65,0 3.64,0 3.64,0 3.65,0 3.64,0 3.64,0 3.65,0 3.65,0 3.64,0 3.64,0 3.65,0 0,4.2 0.01,3.85 -1.79,-0.5 -1.46,0.13 -2.76,0.62 -0.75,0.38 -1.51,1.11 -0.6,0.16 -1.62,0.23 -1.54,-0.15 -0.61,0.16 -0.74,0.54 -0.19,0.29 -0.21,0.93 -3.74,4.16 -0.99,1.4 -1.91,1.48 -2.1,2.58 -1.82,1.04 -0.64,1.43 -1.74,0.87 -3.21,0.22 -1.52,0.25 -1.78,-0.4 -1.34,0.62 -2.01,0.19 -0.98,-0.15 -3.9,1.37 -0.99,-1.3 -0.75,-0.5 -2.2,-0.08 -1.76,-0.54 -1.61,-0.1 -1.56,-0.24 -1.03,0 -1.07,0.14 -1.67,-0.03 -0.92,0.72 -3.12,-0.22 -1.32,-0.65 -1.08,-0.14 -1.45,0.14 -1.39,0.48 -3.03,-0.55 -3.22,0.47 -2.81,-0.31 -0.79,-0.31 -4.43,0.85 -1.73,-0.49 -1.53,1.3 -1.05,-0.27 -1.14,0.19 -0.38,-0.25 -0.76,0.17 -0.49,0.71 -0.64,0.08 -1.07,1.25 -1.79,1 -2.63,5.43 -0.25,2.07 -0.99,1.41 -0.87,0.19 -0.72,0.03 -4.54,1.03 -2.02,0.82 0.55,0.65 -0.66,0.48 -1.07,0.2 -1.16,0.59 -0.75,0.67 -0.37,0.92 -2.33,1.5 -2.71,3.46 -1.29,2.52 -1.57,1.82 -1.11,0.69 -0.79,0.11 -0.8,-0.22 -1.34,-0.85 -0.98,-0.09 -2.45,-1.19 -5.69,-1.2 0.86,0.45 0.75,0.74 1.5,0.19 1.53,-0.02 3.19,1.49 1.56,0.51 0.95,0.45 0.81,0.99 -0.58,1.95 -0.59,1.6 -0.8,1.23 -2.74,3.14 -1.33,1.05 -2.31,3.74 -2.39,1.75 -1.28,1.07 -1.36,1.69 -3.2,1.27 -1.19,0.32 -1.1,-0.17 -1.33,1.03 -1.58,0.63 -0.47,0.96 -3.8,2.56 -1.46,0.32 -1.24,0.68 -0.37,1.15 -1.11,0.7 -0.31,0.53 -0.93,1.61 -1.73,2.07 -2.11,0.35 -0.77,0.72 -0.89,1.16 -1.26,0.79 -2.49,-0.37 0.6,0.49 2.22,0.76 0.23,1.12 -1.11,0.27 -2.17,1.39 -0.65,-0.69 -0.58,-0.62 0.22,-0.96 0.34,-1.47 0.17,-0.75 -1.62,-0.82 -1.25,-0.25 -1.32,0.12 -2.72,0.85 -4.11,1.59 -2.49,0.39 -0.87,-0.81 -1.09,-0.27 -1.32,0.27 -1.29,-0.16 -1.25,-0.58 -1.02,-1.28 -0.78,-1.99 -0.63,-1.05 -0.43,-0.1 -0.17,-0.04 -0.2,0.19 -0.11,0.72 -0.14,0.24 -0.32,0.04 -0.49,-0.12 -0.63,-0.32 -1.19,-0.91 -0.3,-0.33 -0.14,-0.42 -0.09,-0.19 -0.71,-1.11 -0.01,-0.01 -2.78,-1.58 0,0 -0.02,-0.01 0.01,0.01 -6.97,-1.55 -2.87,-1.12 -1.09,-1.21 -1,-1.56 -1.35,-2.88 -1.79,-2.55 -0.63,-1.47 -0.06,-1.23 -0.33,-1.2 -0.61,-1.17 -0.11,-1 0.41,-0.9 0,-0.07 0,-3.76 0,-3.23 0,-3.24 0,-3.26 0,-3.28 0,-3.29 0,-3.31 0,-3.32 0,-3.34 0,-3.36 0,-3.37 0,-3.39 0,-3.41 0,-2.5 0.57,0.61 0.97,1.6 -0.29,-1.02 -0.64,-1.17 -0.61,-0.69 0,-3.7 -0.01,-4.57 0.21,-0.36 1.42,-0.84 0.37,0.08 0.29,1.02 0.34,0.21 0.66,0.16 0.55,0.35 0.45,0.54 0.32,0.55 0.19,0.56 0.42,1.82 0.3,0.84 0.05,-1.02 0.35,-1.61 0.27,-0.66 0.86,-0.97 -0.04,-0.42 -0.36,-0.56 -1.81,-2.42 -0.04,-0.59 0.48,-0.35 0.33,-0.67 0.18,-0.99 0.39,-0.72 1.13,-1.01 0.97,-1.56 0.5,-1.07 0.41,-0.57 0.39,-0.13 -0.58,-0.43 -0.12,-0.29 -0.03,-1.29 -0.25,-1.36 -0.39,-0.63 -1.1,-1.36 -0.18,-0.41 -0.19,-1.54 0.11,-0.77 0.29,-0.65 -0.16,-0.63 -1.02,-1.14 -0.4,-1 -0.44,-2.43 -0.4,-3.06 -0.46,-2.26 -0.51,-1.45 -0.12,-0.92 0.28,-0.38 0.37,-1.15 0.33,-0.28 0.51,0.08 0.01,-0.13 -0.79,-0.62 -0.39,-0.78 0.02,-0.29 0.69,-0.78 -0.12,-0.33 -0.51,-0.43 -1.57,-0.71 0.56,-0.28 0.36,-0.61 -0.07,-0.18 -0.62,-0.25 -0.71,-0.48 -0.54,-0.71 -0.67,-1.12 -0.41,-0.89 -0.4,-1.49 -0.69,-1.7 -0.3,-0.42 -0.35,-0.27 -0.39,-0.13 0.01,-0.26 0.42,-0.4 6.78,-2.86 0.56,-0.41 3.33,-1.61 1.54,-0.9 1.57,-1.29 2.13,-1.33 1.04,-0.86 0.66,-0.83 3.38,-3.33 1.43,-1.71 0.83,-1.47 1.21,-1.77 1.58,-2.06 1,-1.78 0.42,-1.48 0.52,-2.57 0.15,-2.28 0.09,-3.36 -0.05,-3.02 -0.42,-4.76 -0.26,-1.5 -0.48,-1.79 -1.17,-3.63 -0.21,-0.99 -0.73,-1.68 -2.38,-4.39 -2.98,-2.99 -0.57,-0.75 -1.18,-0.88 -1.79,-1.01 -1.16,-0.83 -3.03,-3.11 -1,-0.37 -0.38,-0.8 -0.08,-0.57 0.12,-1.5 0.18,-1.04 0.21,-0.76 0.25,-0.49 1.67,-2.31 0.93,-1.86 0.65,-1.02 0.72,-0.79 1.3,-1.04 0.74,-1.32 -0.17,-0.53 -0.58,-0.58 -0.13,-0.57 0.99,-1.45 0.14,-0.4 -0.13,-1.37 0.19,-0.31 1.22,-0.08 1.74,1.97 0.43,-0.17 -0.56,-0.54 -0.67,-1.33 0.1,-0.55 1.28,-1.44 0.04,-0.65 -0.37,-0.91 -0.04,-0.73 0.75,-1.73 -0.2,-0.36 -2.11,-0.34 -0.35,-0.48 0.12,-0.23 0.99,-0.58 0.08,-0.22 -1.75,-3.91 -0.29,-1.17 0.75,-1.45 0.85,-0.65 -0.11,-0.37 -1.11,-0.07 -0.68,-0.2 -0.68,-1.13 0.26,-0.72 0.24,-0.33 0.66,-1.69 0.64,-0.35 -0.12,-0.3 -2.41,0.72 -1.13,-0.59 -1.11,0.16 -0.53,-0.17 0.2,-0.61 2.02,-2.77 0.93,-1.5 0.58,-1.36 0.31,-0.91 0.03,-0.45 -0.2,-3.03 0.12,-0.83 0.78,-0.77 1.21,-1.46 -1.65,-1.32 -1.03,-1.29 -0.68,-0.64 -0.52,-0.63 -0.66,-1.33 -0.5,-1.73 -0.53,-3.51 -0.09,-1.94 0.12,-1.41 0.22,-0.69 0.36,-0.72 1.51,-1.37 2.65,-2.03 2.08,-0.8 1.5,0.44 2.92,0.48 2.36,1.16 7.17,2.89 1.27,1.28 -1.2,1.08 0.17,0.27 2.7,-2.05 0.71,-0.4 0.61,-0.1 2.04,0.8 0.82,0.12 1.03,0.66 2.46,2.19 0.18,-0.18 -0.69,-1.12 0.4,-0.53 1.94,-1.17 2.01,-0.96 1.42,-0.94 1.51,-1.24 1.02,-0.67 0.53,-0.08 0.67,0.37 1.81,1.65 1.16,0.84 0.93,0.88 1.31,1.56 0.51,0.34 0.99,1.05 1.32,-0.11 0.43,0.13 0.14,0.21 0.22,0.71 0.12,0.46 0.01,0.49 -0.3,1.37 -0.95,2.18 0.4,0.03 0.6,-0.47 0.78,-0.83 0.61,-0.29 1.3,0.66 1.21,1.07 0.43,0.56 0.47,0.92 0.4,0.47 0.37,0.91 -0.03,0.29 -0.35,0.44 -1.48,0.74 0.28,0.28 1.73,-0.46 0.53,-0.46 0.38,-0.77 0.5,-0.22 2.04,1.35 0.3,0.47 -0.13,0.37 -0.33,0.41 -0.89,0.45 -0.76,1.14 -0.12,0.49 0.54,0.35 1.33,0.15 -0.01,0.27 -0.77,0.5 -0.1,0.65 1.72,2.31 1.16,1.01 0.67,0.19 1.55,0.04 1.26,0.39 2.79,1.3 1.64,0.23 1.41,-0.4 0.94,-0.09 0.83,0.52 0.26,0.37 0.12,0.73 -0.02,1.09 0.45,0.76 0.92,0.44 0.75,-0.07 0.98,-0.86 0.82,-0.15 0.28,-0.64 0.24,-1.19 0.24,-0.65 0.6,-0.19 0.48,0.36 0.28,0.54 0.52,1.63 0.14,0.73 -0.06,0.66 -0.26,0.6 -0.51,0.64 -0.76,0.68 -0.59,0.97 -0.73,2.23 -0.27,1.46 -0.07,0.86 0.03,0.94 0.14,1.02 0.29,0.84 0.68,1.18 0.04,0.39 0.05,0.96 -0.06,0.42 -0.39,0.83 -1.09,0.83 -1.5,0.21 -4.9,0.05 -1.3,-0.2 0.31,0.75 1.37,0.24 1.25,-0.01 4.67,0.47 0.64,0.48 0.54,0.84 0.39,0.87 0.38,1.77 0.07,0.84 -0.21,0.93 -0.48,1.02 -0.33,1.35 -0.17,1.69 0.26,0.89 2.53,0.07 0.5,0.61 -0.06,0.45 -0.9,1.7 -0.08,0.48 0.41,1.14 -0.06,0.33 -0.25,0.33 -0.24,0.86 -0.23,1.38 -0.28,0.89 -0.69,0.69 -0.36,0.15 -0.26,-0.18 -0.68,-1.88 -0.28,-0.28 -0.26,0.18 -0.13,0.29 0,0.41 -0.12,0.42 -0.23,0.43 -1,0.69 -1.62,0.47 0.05,0.5 1.09,0.27 1.38,0.83 0.79,0.13 1.25,-0.67 2.41,-2.12 0.99,-0.58 0.88,-0.22 0.98,-0.03 1.09,0.16 2.18,-0.27 0.55,0.2 0.67,0.47 0.79,0.73 0.54,0.7 0.3,0.68 0.49,2.55 0.66,0.67 0.16,0.49 0.05,0.75 -0.04,1.46 -0.72,2.94 -0.38,1.08 -1,1.47 -1.15,0.67 -2.05,0.63 -1.07,0.52 -0.81,0.72 -0.05,0.4 2.33,-1.24 2.56,-0.6 0.73,-0.68 0.55,-0.66 0.56,-1.47 1.02,-3.83 0.58,-1.21 0.81,-0.21 0.36,0.41 0.84,2.25 0,0.57 -0.21,0.49 -1.37,2.18 0.49,-0.22 1.37,-2.05 0.29,-0.64 0.16,-0.94 0.44,-0.67 0.17,0.33 0.42,2.41 0.01,1.76 0.07,0.56 -0.15,1.66 0.17,0.3 0.41,-1.44 0.13,-1.09 0.19,-0.78 0.24,-0.46 1.68,-1.47 1.96,-1.2 1.29,-1.07 1.07,-0.51 1.6,-0.48 1.02,-0.99 0.45,-1.51 0.38,-1.04 0.31,-0.58 1.05,-1.04 0.57,-0.06 0.55,0.38 0.62,0.78 0.69,1.17 0.41,0.92 0.14,0.67 0.11,2.33 0.13,-0.01 0.64,-1.78 0.08,-0.63 -0.04,-0.67 -0.2,-0.67 -0.64,-1.46 -0.25,-0.92 0.06,-0.57 0.68,-0.32 1.01,-0.13 0.17,-0.24 -0.74,-0.61 -0.02,-0.33 0.71,-1.08 0.42,-0.06 0.82,0.17 -0.16,-0.56 0.01,-0.37 0.23,-0.14 1.36,0.35 0.16,-0.42 1.17,-0.04 0.11,-0.38 -1.01,-0.54 -0.99,-0.34 -0.3,-0.3 -0.23,-0.44 -0.31,-1.06 0.07,-0.28 0.28,0 0.48,0.29 0.26,-0.56 0.29,-1.31 0.29,-0.54 0.91,0.62 0.04,-0.27 -0.74,-2.07 0.13,-0.4 1.12,-0.15 0.68,0.26 1.79,1.52 0.32,-0.17 -0.27,-0.41 -0.92,-0.89 -0.83,-0.58 -0.74,-0.28 -0.55,-0.5 -0.61,-1.37 -0.1,-0.56 0.05,-0.74 0.42,-1.53 0.25,-0.33 0.43,-0.25 0.62,-0.16 0.69,0.15 1.41,1.01 0.24,-0.32 -0.76,-0.55 -0.41,-0.51 -0.2,-0.65 0.09,-0.74 0.6,-1.53 0.28,-1.23 1.27,-3.41 0.37,-0.62 0.4,-0.39 0.25,-0.41 1,-0.09 0.83,0.41 z m 25.22,174.96 -3.75,0.2 -2.99,-0.84 -2.21,-0.41 -2.17,-0.74 -4.7,-2.39 -0.54,-0.83 -0.45,-1.02 -0.9,-0.93 -0.97,-0.77 -4.98,-2.35 -0.41,-0.82 1.01,-0.54 1.16,-0.26 1.01,0.04 3.33,0.92 4.2,0.81 1.82,0.61 2.06,0.93 2.02,1.13 4.49,2.99 0.81,0.24 2.02,1.46 0.73,1.09 0.36,0.89 -0.44,0.45 -0.51,0.14 z m -43.96,14.47 -1.24,0.33 -0.74,0.46 -0.24,0.85 -0.95,-0.25 -1.16,0.33 -1.07,0.09 -0.52,0.43 -1.92,-1.13 -0.27,-0.39 -0.03,-0.4 -1.13,0 -1.56,0 -0.99,0 -0.81,0 0,0.92 -1.25,0 -1.12,0 0,1.21 0,0.97 0,0.97 0,1.37 -0.13,0.34 -0.32,0.46 -0.59,0.63 -1.19,0.79 -3.81,1.66 -0.1,-0.57 0.13,-1.17 -0.86,-0.24 -0.87,-0.24 -0.53,0.81 -0.51,0.68 -1.01,1.48 -1.42,2.07 -0.79,1.13 -1.38,1.99 -1.22,1.75 -0.27,1.79 -0.26,1.69 -1.01,1.29 -0.62,1.18 -0.27,1.3 -0.23,1.19 -0.02,1 0.17,0.52 -0.08,0.42 -0.33,0.49 -0.67,0.85 -0.12,0.82 -0.41,0.4 -1.16,0.8 -0.95,1.18 -0.05,0.67 0.14,0.55 0.02,0.34 -0.19,0.24 -0.38,-0.02 -0.41,0.08 -0.35,0.49 0.01,0.71 -0.25,0.51 -0.3,0.1 -0.25,-0.36 -0.3,-0.54 -0.36,-0.05 -0.54,0.36 -0.22,0.19 -0.45,0.4 -0.6,0.03 -1.13,-0.38 -0.82,1.14 -0.88,2.44 -3.73,0.01 -3.73,0.01 -3.73,0.01 -3.73,0.01 -1.53,0 -2.21,0 -3.73,0.01 -3.73,0.01 -2.09,0 -0.41,0 1.28,-0.48 2.66,-1.86 1.97,-0.67 2.56,-1.96 1.85,-0.38 0.35,-0.43 0.31,-1.63 0.17,-0.58 0.86,-1.61 1.04,-1.36 0.84,-1.88 1.52,-1.21 2.3,-1.01 2.13,-2.21 1.17,-0.67 1.13,-0.48 0.47,-0.9 0.7,-0.51 1.87,-1.05 2.06,-0.28 2.08,-0.87 1.6,-0.46 0.98,-0.82 1.42,-0.43 4.25,-2.36 1.18,-1.11 1.53,-2.27 1.33,-1.16 0.47,-1.24 1.93,-2.01 1.98,-2.66 0.99,-1.91 1.48,-1.07 2.86,-3.05 1.54,-1.22 0.62,-0.14 1.74,-1.09 1.08,-1.14 1.73,-1.15 3.13,-1.41 2.94,-1.7 3.97,-1.47 4.66,-2.21 3.76,-1.19 2.65,-0.17 3.22,-0.55 1.14,0.06 5.02,0.96 2.41,1.19 2.74,2.49 0.41,0.66 0.07,0.92 -1.45,-0.44 -1.28,-0.03 0.89,0.51 1.51,1.53 -0.07,1.9 -0.85,1.71 -2.55,0.84 -0.65,0.67 -0.53,1.11 -0.52,0.42 -1.24,0.49 -0.68,0.72 -2,1.14 -0.9,0.13 -1.04,-0.27 -2.5,-1.07 -1.54,-1.03 -0.77,0.57 -0.63,0.59 -1.48,-0.2 -0.68,0.26 -1.12,-0.29 -2.31,1.27 z m 42.94,9.79 0.32,0.25 0.57,-0.03 0.38,0.1 -0.55,0.49 -1.05,0.05 -0.51,-0.2 0.75,-2.52 0.87,-0.58 1.79,-1.65 0.72,-0.5 0.66,-0.2 0.7,0.12 -0.72,0.98 -0.96,0.05 -0.91,0.81 -0.6,0.9 -0.72,0.51 -0.5,0.63 -0.24,0.79 z m -81.68,5.4 -0.82,0.11 0.19,-0.45 1.11,-0.81 0.82,-0.45 0.48,0.01 -0.79,0.99 -0.99,0.6 z m -22.77,18.11 -0.69,0.25 -1.18,-0.24 -1.3,0.33 -0.36,0.01 0.96,-0.95 1.48,-0.58 1.48,-1.79 0.42,-0.05 -0.56,2.02 -0.11,0.72 -0.14,0.28 z m -1.16,-1.48 -1.08,0.26 -0.38,-0.11 1.19,-1.26 1.37,-0.29 -1.1,1.4 z\"\n           title=\"Quebec\"\n           id=\"CA-QC\" class=\"carona-high\" (mouseover)=\"mapMouseOver('CA-QC')\" [matTooltip]=\"CAQC\"/>\n        <path\n           d=\"m 355.56,938.02051 -3.83,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.83,0 -0.97,0 -2.85,0 -3.82,0 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -3.82,0 -3.83,0 -3.82,0 -3.82,0 -3.82,0 -3.82,0 -3.83,0 -3.82,0 -0.94,0 0,-4.71 0,-4.74 0,-4.77 0,-4.8 0,-4.84 0,-4.88 0,-4.91 0,-4.95 0,-4.98 0,-5.03 0,-5.06 0,-5.11 0,-5.14 0,-5.19 0,-5.23 0,-5.28 0,-5.32 0,-5.37 0,-5.41 0,-5.46 0,-5.51 0,-5.56 0,-5.61 0,-5.66 0,-5.71 0,-5.77 0,-5.83 0,-5.88 0,-5.94 0,-6.01 0,-6.06 0,-6.12 4.48,0 4.48,0 4.48,0 4.48,0 4.49,0 4.48,0 4.48,0 4.48,0 4.48,0 4.48,0 4.48,0 4.48,0 4.49,0 4.48,0 4.48,0 4.48,0 0,4.66 0,4.62 0,4.59 0,4.56 0,4.52 0,4.48 0,4.46 0,4.42 0,4.38 0,4.36 0,4.32 0,4.3 0,4.26 0,4.24 0,4.2 0.01,4.18 0.35,6.76 0.36,6.68 0.36,6.61 0.35,6.54 0.36,6.47 0.36,6.41 0.35,6.34 0.36,6.28 0.36,6.22 0.35,6.16 0.36,6.11 0.36,6.05 0.35,5.99 0.36,5.94 0.36,5.88 z\"\n           title=\"Saskatchewan\"\n           id=\"CA-SK\" class=\"carona-midium\" (mouseover)=\"mapMouseOver('CA-SK')\" [matTooltip]=\"CASK\"/>\n        <path\n           d=\"m 41.11,580.72051 -0.01,6.8 0,7.11 0,7.02 0,6.93 0.1,1.04 0.3,0.86 1.22,1.17 0.28,0.37 0.23,0.55 0.35,1.47 -0.08,1.5 0,0.64 0.17,0.67 0.16,0.43 0.11,0.49 0.21,1.16 -0.02,0.39 -0.38,1.42 -0.61,1.04 -0.02,0.42 -0.03,0.65 0.01,1.07 0.26,1.2 0.23,0.48 0.39,0.24 2.57,0 2.57,0 2.57,0 2.57,0 2.57,0 2.57,0 2.57,0 0.56,0 0.02,0.73 0.2,0.66 0.96,0.94 0.68,0.94 0.48,0.98 0.1,0.75 -0.13,0.75 -0.07,0.43 0.06,0.5 0.25,0.61 0.02,0.34 0.04,0.42 0.34,0.44 0.66,1.02 0.15,0.46 -0.13,0.66 -0.08,0.61 0.06,0.83 -0.02,0.44 -0.18,0.16 -0.28,0.03 -0.3,0.1 -0.18,0.53 -0.27,1.52 -0.09,0.5 0.09,0.47 0.27,0.02 0.97,0.07 0.35,0.11 0.26,0.23 0.11,0.81 0.04,0.9 -0.02,0.71 -0.22,0.59 -0.59,0.85 -0.16,0.35 0.01,0.48 0.27,0.54 0.19,0.86 0.02,0.79 0.29,0.26 0.8,0.16 0.79,-0.01 1.64,-1.1 1.68,-0.47 0.93,-0.02 0.18,0.25 0.01,0.35 -0.21,0.55 -0.25,0.94 0.18,0.37 0.41,0.07 0.73,-0.32 0.49,-0.95 0.47,-0.58 0.89,-0.69 0.33,0.12 0.84,0.77 1.01,-0.1 0.25,0.32 0.02,0.52 -1.78,1.52 -0.14,0.64 0.19,0.51 0.4,0.31 1,1.16 0.74,1.1 0.89,1.92 0.01,0.65 -0.65,1.28 -0.7,2.04 -1.76,2.21 -0.22,0.87 -0.27,0.43 -1.48,1.18 -0.1,0.46 0.05,0.4 0.15,0.25 0.39,0.13 0.88,-0.3 0.27,-0.07 0.35,0.31 0.02,1.3 0.2,0.32 1.21,0.41 0.26,0.38 -0.01,0.4 -0.24,0.36 -0.9,1.09 -0.14,0.27 0,0.95 -0.07,0.61 -0.71,0.88 -0.15,0.33 0.01,0.37 0.1,0.3 0.31,0.29 1.36,0.06 0.73,0.31 1.92,1.27 0.48,0.38 1.43,2.24 1.26,0.67 0.21,0.23 0.12,0.39 -0.13,0.54 -0.54,1.31 -0.11,0.4 0.05,0.39 0.3,0.15 1.59,0 0.66,-0.27 0.57,-0.47 0.45,-0.74 0.36,-0.15 0.84,0.24 1.42,0.96 0.76,1.58 -0.04,0.54 0.13,0.52 0.27,0.28 0.46,0.83 0.16,0.55 0,0.51 -0.25,0.56 0.1,0.31 0.52,0.92 0.23,0.65 0.49,0.37 0.31,0.77 0.87,0.87 1.32,0.62 1.34,1.42 0.73,0.56 1.28,0.3 0.19,0.29 -0.03,0.41 -0.22,0.23 -1.03,0.5 -0.35,0.33 -0.04,0.35 0.16,0.36 0.37,0.15 0.91,-0.39 0.28,0.05 0.12,0.32 0.14,0.58 0.17,0.29 0.78,0.4 0.27,0.59 0.52,0.63 0.29,0.67 0.09,0.72 -0.54,1.6 -0.39,0.6 -1.37,1.14 -0.34,0.51 0.06,0.34 0.66,0.3 0.73,0.9 0.65,0.56 0.32,0.61 0.38,1.29 0.83,0.43 0.94,0.04 0.16,0.19 -0.05,0.42 -0.86,2.1 0,0.7 -0.13,0.59 0.09,0.65 0.54,1.08 0.14,0.39 0.06,0.55 0.15,0.31 0.68,0.47 0.17,0.28 0.27,1.06 0.04,0.4 0.37,0.36 2.13,1.29 0.19,0.45 -0.09,0.39 -0.79,0.56 -0.08,0.31 0.02,0.27 0.4,0.44 0.09,0.3 -0.46,0.98 -0.02,0.54 0.44,1.11 0.1,0.32 -0.06,0.34 -0.2,0.35 -0.07,0.33 0.13,0.26 0.41,0.33 0.65,0.2 1.1,-0.12 0.95,0.24 0.25,0.15 0.35,0.73 0.24,0.17 0.34,-0.1 0.87,-0.83 0.56,-0.19 0.49,0.1 1.44,1.59 0.3,0.82 0.97,1.2 0.24,0.84 0.23,0.35 1.01,0.46 0.42,0.53 0.24,0.64 0.23,1.29 1.67,1.74 0.84,0.58 0.51,0.68 0.43,0.36 1.26,0.42 1.51,-0.03 0.63,0.33 0.56,0.56 0.45,1.13 0.39,0.64 0.46,2.48 0.06,0.72 -0.11,1.32 -0.5,0.61 -0.13,0.23 0.03,0.2 0.34,0.36 0.81,-0.23 0.18,0.2 0.32,1.89 -0.09,1.21 0.06,0.45 0.21,0.49 -0.01,0.69 0.27,0.48 0.24,0.1 0.58,-0.2 0.92,0.23 1.3,-0.7 1.52,0.36 0.48,-0.07 0.38,-0.17 0.18,-0.28 0,-0.64 0.11,-0.23 0.55,-0.18 0.42,0.05 0.14,0.63 0.31,0.24 0.55,0.13 0.41,-1.03 0.23,-0.32 0.29,-0.14 0.32,0 1.41,0.91 2.94,0.9 0.5,-0.01 0.83,-0.62 0.7,-0.33 2.43,-0.29 0.19,-1.17 0.2,-0.44 0.28,-0.24 1.71,0.01 0.3,0.14 0.68,2.4 0.01,0.62 -0.95,1.6 0,0.35 0.11,0.37 1.17,1.73 0.59,1.33 1.38,0.38 0.21,0.38 0.19,1.81 0.18,0.58 0.73,1.73 0.95,1.78 0.05,0.49 -0.19,0.7 0.02,0.25 0.15,0.1 1.02,0.01 0.34,0.35 0.21,0.34 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.53,0 -8.62,-0.01 -1.15,-1.47 0.43,-1.6 0.52,-1.92 0,-1.16 -1.39,0.07 -2.09,0.11 -1.87,0.1 -1.38,1.36 -1.28,1.26 -2,-0.98 -2.29,-1.12 -0.65,1.47 -2.13,-0.74 -2.17,-0.75 0,-5.3 0,-5.35 0,-5.4 0,-5.45 0,-5.5 0,-5.55 0,-5.61 0,-5.66 0,-5.72 0,-5.78 0,-5.84 0,-5.9 0,-5.96 0,-6.02 0,-6.08 0,-6.15 0,-6.22 0,-6.29 0,-6.36 0,-6.43 0,-6.51 0,-6.58 0,-6.66 0,-6.74 0,-6.83 0,-6.91 0,-7 0,-7.09 0,-7.18 0,-7.28 0,-7.38 0,-7.47 1.27,0.4 4.08,0.84 3.84,-0.5 7.13,2.72 4.41,5.06 3.58,2.47 1.46,1.69 2.32,1.49 5.46,3.22 1.7,0.33 3.17,1.54 1.96,-0.2 0.48,0.06 z m -23.3,-17.23 -0.74,0.96 -1.18,-1.01 -0.31,-0.5 1.36,-1.33 0.6,0.05 1.27,0.79 0.47,0.7 -1.47,0.34 z\"\n           title=\"Yukon\"\n           id=\"CA-YT\" class=\"carona-normal\" (mouseover)=\"mapMouseOver('CA-YT')\" [matTooltip]=\"CAYT\"/>\n      </svg>\n\n        <agm-map [latitude]=\"latitude\" [longitude]=\"longitude\" [zoom]=\"zoom\" #AgmMap [disableDefaultUI]=\"true\">\n\n            <ng-container *ngFor=\"let m of markers; let i = index\">\n                <!-- [label]=\"m.label\" (markerClick)=\"clickedMarker(m.label, i)\"  [isOpen]=\"true\"-->\n                <agm-marker [latitude]=\"m.lat\" [longitude]=\"m.lng\" [iconUrl]=\"m.icon\">\n\n                    <agm-info-window>\n                        <div>{{m.content}}</div>\n                    </agm-info-window>\n\n                </agm-marker>\n\n            </ng-container>\n\n        </agm-map>\n\n    </ion-grid>\n    <ion-grid *ngIf=\"folder==='canada'\">\n        <ion-title size=\"large\">Provinces/States And Territorial Cases :</ion-title>\n    </ion-grid>\n    <ion-grid *ngIf=\"folder==='global'\">\n        <ion-title size=\"large\">Country wise Cases :</ion-title>\n    </ion-grid>\n    <ion-grid style=\"margin: 15px;\">\n        <div class=\"table-responsive\">\n            <table class=\"table\">\n                <thead>\n                    <tr class=\"table-success\">\n                        <th *ngIf=\"folder==='canada'\">Provinces/State</th>\n                        <th *ngIf=\"folder==='global'\">Country</th>\n\n                        <th>Total Cases</th>\n                        <th>new Cases</th>\n                        <th>Total Deaths</th>\n                        <th>new Deaths</th>\n\n                        <th>Total Recovered</th>\n                        <th>new Recovered</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <ng-container *ngFor=\"let item of markers; let i = index\">\n                        <tr class=\"table-info\">\n                            <td *ngIf=\"folder==='canada'\">{{item.provinceOrState}}</td>\n                            <td *ngIf=\"folder==='global'\">{{item.countryOrRegion}}</td>\n\n                            <td>{{item.totalConfirmedCases}}</td>\n\n                            <td>{{item.newlyConfirmedCases}}</td>\n                            <td>{{item.totalDeaths}}</td>\n                            <td>{{item.newDeaths}}</td>\n                            <td>{{item.totalRecoveredCases}}</td>\n                            <td>{{item.newlyRecoveredCases}}</td>\n\n                        </tr>\n                    </ng-container>\n                </tbody>\n            </table>\n        </div>\n    </ion-grid>\n\n\n</ion-content>";
    /***/
  },

  /***/
  "./src/app/folder/components/home/home.component.scss":
  /*!************************************************************!*\
    !*** ./src/app/folder/components/home/home.component.scss ***!
    \************************************************************/

  /*! exports provided: default */

  /***/
  function srcAppFolderComponentsHomeHomeComponentScss(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony default export */


    __webpack_exports__["default"] = "ion-menu-button {\n  color: var(--ion-color-primary);\n}\n\nion-content ion-toolbar {\n  --background: transparent;\n}\n\nion-title {\n  color: #3E5002;\n}\n\nagm-map {\n  height: 80vh;\n}\n\n.carona-high {\n  fill: red;\n  cursor: pointer;\n}\n\n.carona-midium {\n  fill: orange;\n  cursor: pointer;\n}\n\n.carona-normal {\n  fill: lightsalmon;\n  cursor: pointer;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZm9sZGVyL2NvbXBvbmVudHMvaG9tZS9DOlxcVXNlcnNcXEFkbWluXFxEZXNrdG9wXFxEYXRhZ3JhenBcXENhcm9uYVxcY292aWQtMTlVSS9zcmNcXGFwcFxcZm9sZGVyXFxjb21wb25lbnRzXFxob21lXFxob21lLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9mb2xkZXIvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSwrQkFBQTtBQ0NKOztBREVBO0VBQ0kseUJBQUE7QUNDSjs7QURFQTtFQUNJLGNBQUE7QUNDSjs7QURFQTtFQUNJLFlBQUE7QUNDSjs7QURFQTtFQUNJLFNBQUE7RUFDQSxlQUFBO0FDQ0o7O0FERUE7RUFDSSxZQUFBO0VBQ0EsZUFBQTtBQ0NKOztBREVBO0VBQ0ksaUJBQUE7RUFDQSxlQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2FwcC9mb2xkZXIvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tbWVudS1idXR0b24ge1xyXG4gICAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1wcmltYXJ5KTtcclxufVxyXG5cclxuaW9uLWNvbnRlbnQgaW9uLXRvb2xiYXIge1xyXG4gICAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuaW9uLXRpdGxlIHtcclxuICAgIGNvbG9yOiAjM0U1MDAyO1xyXG59XHJcblxyXG5hZ20tbWFwIHtcclxuICAgIGhlaWdodDogODB2aDtcclxufVxyXG5cclxuLmNhcm9uYS1oaWdoIHtcclxuICAgIGZpbGw6IHJlZDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLmNhcm9uYS1taWRpdW0ge1xyXG4gICAgZmlsbDogb3JhbmdlO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4uY2Fyb25hLW5vcm1hbCB7XHJcbiAgICBmaWxsOiBsaWdodHNhbG1vbjtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLy8gI0NBLUFCOmhvdmVyIHtcclxuLy8gICAgIGN1cnNvcjogcG9pbnRlcjtcclxuLy8gICAgIGNvbG9yOiByZWQ7XHJcbi8vICAgICBiYWNrZ3JvdW5kOiByZWQ7XHJcbi8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbi8vIH0iLCJpb24tbWVudS1idXR0b24ge1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXByaW1hcnkpO1xufVxuXG5pb24tY29udGVudCBpb24tdG9vbGJhciB7XG4gIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5cbmlvbi10aXRsZSB7XG4gIGNvbG9yOiAjM0U1MDAyO1xufVxuXG5hZ20tbWFwIHtcbiAgaGVpZ2h0OiA4MHZoO1xufVxuXG4uY2Fyb25hLWhpZ2gge1xuICBmaWxsOiByZWQ7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmNhcm9uYS1taWRpdW0ge1xuICBmaWxsOiBvcmFuZ2U7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmNhcm9uYS1ub3JtYWwge1xuICBmaWxsOiBsaWdodHNhbG1vbjtcbiAgY3Vyc29yOiBwb2ludGVyO1xufSJdfQ== */";
    /***/
  },

  /***/
  "./src/app/folder/components/home/home.component.ts":
  /*!**********************************************************!*\
    !*** ./src/app/folder/components/home/home.component.ts ***!
    \**********************************************************/

  /*! exports provided: HomeComponent */

  /***/
  function srcAppFolderComponentsHomeHomeComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HomeComponent", function () {
      return HomeComponent;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/fesm2015/router.js");
    /* harmony import */


    var _services_api_services_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../../services/api-services.service */
    "./src/app/services/api-services.service.ts");
    /* harmony import */


    var _amcharts_amcharts4_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @amcharts/amcharts4/core */
    "./node_modules/@amcharts/amcharts4/core.js");
    /* harmony import */


    var _amcharts_amcharts4_themes_animated__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! @amcharts/amcharts4/themes/animated */
    "./node_modules/@amcharts/amcharts4/themes/animated.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/fesm2015/ionic-angular.js");

    _amcharts_amcharts4_core__WEBPACK_IMPORTED_MODULE_4__["useTheme"](_amcharts_amcharts4_themes_animated__WEBPACK_IMPORTED_MODULE_5__["default"]); // interface marker {
    //   lat: number;
    //   lng: number;
    //   label?: string;
    //   draggable: boolean;
    //   content?: string;
    //   isShown: boolean;
    //   icon: string;
    // }


    let HomeComponent = class HomeComponent {
      constructor(activatedRoute, apiService, popover) {
        this.activatedRoute = activatedRoute;
        this.apiService = apiService;
        this.popover = popover;
        this.covidDataByStates = [];
        this.markers = [];
      }

      ngOnInit() {
        this.folder = this.activatedRoute.snapshot.paramMap.get('id');

        if (this.folder === "canada") {
          this.defaultState = "CA";
          this.latitude = 56.130366;
          this.longitude = -106.346771;
          this.zoom = 4;
        } else {
          this.defaultState = "global";
          this.zoom = 3;
        }

        this.getCovidData();
      } // markers: marker[] = [
      //   {
      //     lat: 53.9333,
      //     lng: -116.5765,
      //     // label: '542',
      //     draggable: false,
      //     content: 'Alberta : Cases - 542',
      //     isShown: false,
      //     icon: './assets/icon/map.png'
      //   }
      // ]
      // private setCurrentLocation() {
      //   if ('geolocation' in navigator) {
      //     navigator.geolocation.getCurrentPosition((position) => {
      //       this.latitude = position.coords.latitude;
      //       this.longitude = position.coords.longitude;
      //       this.zoom = 15;
      //     });
      //   }
      // }


      mapMouseOver(state) {// console.log(state,this.CAAB)
        // this.CAAB=state;
        // this.popover.create({
        //   component: DataPopoverComponent,
        //   translucent: true
        // }).then((popoverElement)=>{
        //   popoverElement.present();
        // });
      }

      getCovidData() {
        this.apiService.getCovidData(this.defaultState).subscribe(data => {
          if (data.satus) {
            this.CovidData = data.result;
            this.latitude = this.CovidData.location.lat;
            this.longitude = this.CovidData.location.long; // console.log(this.CovidData)

            this.totalConfirmedCases = this.CovidData.stats.totalConfirmedCases;
            this.newlyConfirmedCases = this.CovidData.stats.newlyConfirmedCases;
            this.totalDeaths = this.CovidData.stats.totalDeaths;
            this.newDeaths = this.CovidData.stats.newDeaths;
            this.totalRecoveredCases = this.CovidData.stats.totalRecoveredCases;
            this.newlyRecoveredCases = this.CovidData.stats.newlyRecoveredCases;
            this.covidDataByStates = this.CovidData.stats.breakdowns; // console.log(this.covidDataByStates);

            this.covidDataByStates.forEach(stateData => {
              this.markers.push({
                countryOrRegion: stateData.location.countryOrRegion,
                provinceOrState: stateData.location.provinceOrState,
                totalConfirmedCases: stateData.totalConfirmedCases,
                newlyConfirmedCases: stateData.newlyConfirmedCases,
                isoCode: stateData.location.isoCode,
                totalDeaths: stateData.totalDeaths,
                newDeaths: stateData.newDeaths,
                totalRecoveredCases: stateData.totalRecoveredCases,
                newlyRecoveredCases: stateData.newlyRecoveredCases,
                lat: stateData.location.lat,
                lng: stateData.location.long,
                // label: '542',
                draggable: false,
                content: 'Cases - ' + stateData.totalConfirmedCases,
                isShown: false,
                icon: './assets/icon/map.png'
              });
            });
            console.log(this.markers);
            this.CAAB = this.markers.find(obj => obj.isoCode == "CA-AB").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-AB").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-AB").totalDeaths;
            this.CABC = this.markers.find(obj => obj.isoCode == "CA-BC").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-BC").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-BC").totalDeaths;
            console.log(this.markers.find(obj => obj.isoCode == "CA-AB"), this.markers.find(obj => obj.isoCode = "CA-BC"));
            this.CAYT = this.markers.find(obj => obj.provinceOrState == "Yukon").provinceOrState + ", " + this.markers.find(obj => obj.provinceOrState == "Yukon").content + ", Deaths " + this.markers.find(obj => obj.provinceOrState == "Yukon").totalDeaths;
            this.CASK = this.markers.find(obj => obj.isoCode == "CA-SK").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-SK").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-SK").totalDeaths;
            this.CAQC = this.markers.find(obj => obj.isoCode == "CA-QC").provinceOrState + ", " + this.markers.find(obj => obj.isoCode = "CA-QC").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-QC").totalDeaths;
            this.CAPE = this.markers.find(obj => obj.isoCode == "CA-PE").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-PE").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-PE").totalDeaths;
            this.CAON = this.markers.find(obj => obj.isoCode == "CA-ON").provinceOrState + ", " + this.markers.find(obj => obj.isoCode = "CA-ON").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-ON").totalDeaths; // this.CANU=this.markers.find(obj=>obj.isoCode=="CA-NU").provinceOrState+", "+this.markers.find(obj=>obj.isoCode=="CA-NU").content+", Deaths "+this.markers.find(obj=>obj.isoCode=="CA-NU").totalDeaths;

            this.CANT = this.markers.find(obj => obj.provinceOrState == "Northwest Territories").provinceOrState + ", " + this.markers.find(obj => obj.provinceOrState == "Northwest Territories").content + ", Deaths " + this.markers.find(obj => obj.provinceOrState == "Northwest Territories").totalDeaths;
            this.CANS = this.markers.find(obj => obj.isoCode == "CA-NS").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-NS").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-NS").totalDeaths;
            this.CANL = this.markers.find(obj => obj.isoCode == "CA-NL").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-NL").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-NL").totalDeaths;
            this.CANB = this.markers.find(obj => obj.isoCode == "CA-NB").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-NB").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-NB").totalDeaths;
            this.CAMB = this.markers.find(obj => obj.isoCode == "CA-MB").provinceOrState + ", " + this.markers.find(obj => obj.isoCode == "CA-MB").content + ", Deaths " + this.markers.find(obj => obj.isoCode == "CA-MB").totalDeaths;
          }
        });
      }

    };

    HomeComponent.ctorParameters = () => [{
      type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]
    }, {
      type: _services_api_services_service__WEBPACK_IMPORTED_MODULE_3__["ApiServicesService"]
    }, {
      type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["PopoverController"]
    }];

    HomeComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
      selector: 'app-folder',
      template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(
      /*! raw-loader!./home.component.html */
      "./node_modules/raw-loader/dist/cjs.js!./src/app/folder/components/home/home.component.html")).default,
      styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(
      /*! ./home.component.scss */
      "./src/app/folder/components/home/home.component.scss")).default]
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _services_api_services_service__WEBPACK_IMPORTED_MODULE_3__["ApiServicesService"], _ionic_angular__WEBPACK_IMPORTED_MODULE_6__["PopoverController"]])], HomeComponent);
    /***/
  },

  /***/
  "./src/app/folder/folder-routing.module.ts":
  /*!*************************************************!*\
    !*** ./src/app/folder/folder-routing.module.ts ***!
    \*************************************************/

  /*! exports provided: FolderPageRoutingModule */

  /***/
  function srcAppFolderFolderRoutingModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FolderPageRoutingModule", function () {
      return FolderPageRoutingModule;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/router */
    "./node_modules/@angular/router/fesm2015/router.js");
    /* harmony import */


    var _components_home_home_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./components/home/home.component */
    "./src/app/folder/components/home/home.component.ts");

    const routes = [{
      path: '',
      component: _components_home_home_component__WEBPACK_IMPORTED_MODULE_3__["HomeComponent"]
    }];
    let FolderPageRoutingModule = class FolderPageRoutingModule {};
    FolderPageRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
      imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
      exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
    })], FolderPageRoutingModule);
    /***/
  },

  /***/
  "./src/app/folder/folder.module.ts":
  /*!*****************************************!*\
    !*** ./src/app/folder/folder.module.ts ***!
    \*****************************************/

  /*! exports provided: FolderPageModule */

  /***/
  function srcAppFolderFolderModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FolderPageModule", function () {
      return FolderPageModule;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/fesm2015/common.js");
    /* harmony import */


    var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/forms */
    "./node_modules/@angular/forms/fesm2015/forms.js");
    /* harmony import */


    var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! @ionic/angular */
    "./node_modules/@ionic/angular/fesm2015/ionic-angular.js");
    /* harmony import */


    var _folder_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./folder-routing.module */
    "./src/app/folder/folder-routing.module.ts");
    /* harmony import */


    var _agm_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! @agm/core */
    "./node_modules/@agm/core/fesm2015/agm-core.js");
    /* harmony import */


    var _components_home_home_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./components/home/home.component */
    "./src/app/folder/components/home/home.component.ts");
    /* harmony import */


    var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! @angular/material/tooltip */
    "./node_modules/@angular/material/esm2015/tooltip.js");

    let FolderPageModule = class FolderPageModule {};
    FolderPageModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"], _ionic_angular__WEBPACK_IMPORTED_MODULE_4__["IonicModule"], _folder_routing_module__WEBPACK_IMPORTED_MODULE_5__["FolderPageRoutingModule"], _agm_core__WEBPACK_IMPORTED_MODULE_6__["AgmCoreModule"].forRoot({
        apiKey: 'AIzaSyA50lL8jt2R_R_8A-zamt9HNv6jZFwGj60',
        libraries: ['places']
      }), _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_8__["MatTooltipModule"]],
      entryComponents: [],
      declarations: [_components_home_home_component__WEBPACK_IMPORTED_MODULE_7__["HomeComponent"]]
    })], FolderPageModule);
    /***/
  },

  /***/
  "./src/app/services/api-services.service.ts":
  /*!**************************************************!*\
    !*** ./src/app/services/api-services.service.ts ***!
    \**************************************************/

  /*! exports provided: ApiServicesService */

  /***/
  function srcAppServicesApiServicesServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ApiServicesService", function () {
      return ApiServicesService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");
    /* harmony import */


    var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! @angular/common/http */
    "./node_modules/@angular/common/fesm2015/http.js");
    /* harmony import */


    var _config_api_config_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../../config/api-config.service */
    "./src/config/api-config.service.ts");

    let ApiServicesService = class ApiServicesService {
      constructor(http, config) {
        this.http = http;
        this.config = config;
        this.url = config.url;
      }

      getCovidData(state) {
        const httpOptions = {
          headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
            'Content-Type': 'application/json'
          })
        };
        return this.http.get(this.url + "/getCovidDataByState/".concat(state), httpOptions);
      }

    };

    ApiServicesService.ctorParameters = () => [{
      type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]
    }, {
      type: _config_api_config_service__WEBPACK_IMPORTED_MODULE_3__["ApiConfigService"]
    }];

    ApiServicesService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"], _config_api_config_service__WEBPACK_IMPORTED_MODULE_3__["ApiConfigService"]])], ApiServicesService);
    /***/
  },

  /***/
  "./src/config/api-config.service.ts":
  /*!******************************************!*\
    !*** ./src/config/api-config.service.ts ***!
    \******************************************/

  /*! exports provided: ApiConfigService */

  /***/
  function srcConfigApiConfigServiceTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ApiConfigService", function () {
      return ApiConfigService;
    });
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/fesm2015/core.js");

    let ApiConfigService = class ApiConfigService {
      constructor() {
        // url = 'http://localhost:9095/apis'
        this.url = '/apis';
      }

    };
    ApiConfigService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
      providedIn: 'root'
    }), tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])], ApiConfigService);
    /***/
  }
}]);
//# sourceMappingURL=folder-folder-module-es5.js.map